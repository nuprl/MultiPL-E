language: cpp
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n\
    \    long mid3 = mid * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n\
    \    long mid6 = mid * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n\
    \    long mid9 = mid * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n\
    \    long mid12 = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid\
    \ * 13;\n    long mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17\
    \ = mid * 16;\n    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long\
    \ mid20 = mid * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n\
    \    long mid23 = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid\
    \ * 24;\n    long mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28\
    \ = mid * 27;\n    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long\
    \ mid31 = mid * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n\
    \    long mid34 = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid\
    \ * 35;\n    long mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39\
    \ = mid * 38;\n    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long\
    \ mid42 = mid * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n\
    \    long mid45 = mid * 44;\n    long mid46 = mid * 45;\n    long mid47\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkkxl224h.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkkxl224h.cpp:74:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmpkkxl224h.cpp:74:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   74 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0bbr4zp6: /tmp/tmp0bbr4zp6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            lst2.push_back(min);\n        } else if (i\
    \ == max) {\n            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp_izas5no: /tmp/tmp_izas5no.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long minval = lst[0];\n    long maxval = lst[0];\n    for (long i : lst) {\n\
    \        if (i < minval) {\n            minval = i;\n        } else if (i > maxval)\
    \ {\n            maxval = i;\n        }\n    }\n    long midval = (minval + maxval)\
    \ / 2;\n    long midpos = 0;\n    for (long i : lst) {\n        if (i == midval)\
    \ {\n            midpos++;\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    lst2.insert(lst2.begin() + midpos, midval);\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpfq34pbi_: /tmp/tmpfq34pbi_.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    long min = lst[0];\n\
    \    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] < min)\
    \ {\n            min = lst[i];\n        }\n    }\n    long max = lst[0];\n   \
    \ for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = l\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4b75sta0.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4b75sta0.cpp:110:26: error: \u2018l\u2019 was not declared\
    \ in this scope\n  110 |     for (long i = 1, j = l\n      |                 \
    \         ^\n/tmp/tmp4b75sta0.cpp:110:27: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n  110 |     for (long i = 1, j = l\n      |           \
    \                ^\n      |                           ;\n  111 | }\n      | ~\
    \                          \n/tmp/tmp4b75sta0.cpp:111:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  111 | }\n      | ^\n/tmp/tmp4b75sta0.cpp:110:27:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  110 |     for (long\
    \ i = 1, j = l\n      |                           ^\n      |                 \
    \          ;\n  111 | }\n      | ~                          \n/tmp/tmp4b75sta0.cpp:111:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  111 | }\n \
    \     | ^\n/tmp/tmp4b75sta0.cpp:110:27: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  110 |     for (long i = 1, j = l\n      |         ~         \
    \        ^\n      |                           )\n  111 | }\n      | ~        \
    \                  \n/tmp/tmp4b75sta0.cpp:111:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  111 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code goes here\n   \
    \ std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            res.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            res.push_back(max);\n\
    \            max = i;\n        } else {\n            res.push_back(i);\n     \
    \   }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpg9ao_qsm: /tmp/tmpg9ao_qsm.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpm1dd3yvp: /tmp/tmpm1dd3yvp.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpdx46o0o2: /tmp/tmpdx46o0o2.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = 0;\n    long max = lst.size() - 1;\n    long mid = 0;\n\
    \    while (min <= max) {\n        mid = (min + max) / 2;\n        if (lst[mid]\
    \ > lst[max]) {\n            max = mid - 1;\n        } else if (lst[mid] < lst[min])\
    \ {\n            min = mid + 1;\n        } else {\n            result.push_back(lst[mid]);\n\
    \            min = mid + 1;\n            max = mid - 1;\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpleqebtgc: /tmp/tmpleqebtgc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> lst2(lst.size());\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        long j = i;\n        while (j > 0 &&\
    \ lst[j - 1] > lst[j]) {\n            lst2[i] = lst[j];\n            j--;\n  \
    \      }\n        lst2[i] = lst[j];\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0ga0l1xm: /tmp/tmp0ga0l1xm.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n  \
    \  res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n   \
    \         i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpylo8slnj: /tmp/tmpylo8slnj.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n  \
    \  res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n   \
    \         res.push_back(i);\n        }\n        if (i > max) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3aol6llb: /tmp/tmp3aol6llb.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    sorted_lst.push_back(lst[0]);\n    sorted_lst.push_back(lst[lst.size()-1]);\n\
    \    for(size_t i = 1; i < lst.size()-1; i++) {\n        if(lst[i] > lst[i-1])\
    \ {\n            sorted_lst.push_back(lst[i]);\n            sorted_lst.push_back(lst[i-1]);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmplazvpe0a: /tmp/tmplazvpe0a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpmi4vtknk: /tmp/tmpmi4vtknk.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here.\n \
    \   std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpexabybnl: /tmp/tmpexabybnl.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0bbr4zp6: /tmp/tmp0bbr4zp6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            result.push_back(min);\n            min = i;\n\
    \        } else if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        } else {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp037uwigd: /tmp/tmp037uwigd.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            res.push_back(min);\n        } else\
    \ if (i == max) {\n            res.push_back(max);\n        } else {\n       \
    \     res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpi4z5l2xs: /tmp/tmpi4z5l2xs.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpm1dd3yvp: /tmp/tmpm1dd3yvp.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i \n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqyj035d.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwqyj035d.cpp:136:16: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n  136 |     for (long i\n      |                ^\n   \
    \   |                ;\n  137 | }\n      | ~               \n/tmp/tmpwqyj035d.cpp:137:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  137 | }\n \
    \     | ^\n/tmp/tmpwqyj035d.cpp:136:16: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n  136 |     for (long i\n      |                ^\n      |    \
    \            ;\n  137 | }\n      | ~               \n/tmp/tmpwqyj035d.cpp:137:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  137 | }\n \
    \     | ^\n/tmp/tmpwqyj035d.cpp:136:16: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  136 |     for (long i\n      |         ~      ^\n      |    \
    \            )\n  137 | }\n      | ~               \n/tmp/tmpwqyj035d.cpp:137:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  137 | }\n \
    \     | ^\n/tmp/tmpwqyj035d.cpp:137:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = lst[0];\n    long max_val = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min_val) {\n            min_val = i;\n   \
    \     }\n        if (i > max_val) {\n            max_val = i;\n        }\n   \
    \ }\n    for (long i : lst) {\n        if (i == min_val) {\n            sorted_lst.push_back(i);\n\
    \        }\n        if (i == max_val) {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    for (long i : sorted_lst) {\n        sorted_lst.push_back(i);\n\
    \    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp8w9qp5f_: /tmp/tmp8w9qp5f_.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val\
    \ = *std::max_element(lst.begin(), lst.end());\n    long mid = min_val + max_val\
    \ / 2;\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n \
    \   sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(min_val);\n\
    \    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp58h907p0: /tmp/tmp58h907p0.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) min = i;\n   \
    \     if (i > max) max = i;\n    }\n    long mid = min + (max - min) / 2;\n  \
    \  for (long i : lst) {\n        if (i < mid) res.push_back(i);\n        else\
    \ if (i > mid) res.push_back(max - i);\n        else res.push_back(min);\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0i8y7v05: /tmp/tmp0i8y7v05.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code goes here\n   \
    \ std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpr7phi_zu: /tmp/tmpr7phi_zu.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = std::numeric_limits<long>::min();\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (auto val : lst) {\n        if (val < min_val) {\n            sorted_lst.push_back(min_val);\n\
    \            min_val = val;\n        } else if (val > max_val) {\n           \
    \ sorted_lst.push_back(max_val);\n            max_val = val;\n        } else {\n\
    \            sorted_lst.push_back(val);\n        }\n    }\n    return sorted_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp6cd0mgv0: /tmp/tmp6cd0mgv0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = *std::min_element(lst.begin(), lst.end());\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n\
    \    sorted_lst.push_back(min_val);\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpu19rj7pk: /tmp/tmpu19rj7pk.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119308
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpunc3ahhs.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpunc3ahhs.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmpunc3ahhs.cpp:142:16:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  142 |         if\
    \ (i >\n      |            ~   ^\n      |                )\n  143 | }\n      |\
    \ ~               \n/tmp/tmpunc3ahhs.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmpunc3ahhs.cpp:144:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  144 | int main() {\n      |            ^\n/tmp/tmpunc3ahhs.cpp:155:1: error:\
    \ expected \u2018}\u2019 at end of input\n  155 | }\n      | ^\n/tmp/tmpunc3ahhs.cpp:13:60:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpunc3ahhs.cpp:155:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  155 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    while (left < max) {\n        mid = (left + right)\
    \ / 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n\
    \            left = mid + 1;\n        }\n    }\n    long temp = left;\n    left\
    \ = min;\n    right = mid;\n    while (right < max) {\n        mid = (left + right)\
    \ / 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n\
    \            left = mid + 1;\n        }\n    }\n    long temp2 = right;\n    right\
    \ = max;\n    left = mid;\n    while (left < max) {\n        mid = (left + right)\
    \ / 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n\
    \            left = mid + 1;\n        }\n    }\n    long temp3 = left;\n    left\
    \ = min;\n    right = mid;\n    while (right < max) {\n        mid = (left + right)\
    \ / 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n\
    \            left = mid + 1;\n        }\n    }\n    result.push_back(temp);\n\
    \    result.push_back(temp2);\n    result.push_back(temp3);\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp05zcq3j4: /tmp/tmp05zcq3j4.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min;\n    long max;\n    long temp;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        min = lst[i];\n        max = lst[i];\n        for (long j =\
    \ i + 1; j < lst.size(); j++) {\n            if (lst[j] < min) {\n           \
    \     min = lst[j];\n            }\n            if (lst[j] > max) {\n        \
    \        max = lst[j];\n            }\n        }\n        temp = min;\n      \
    \  min = max;\n        max = temp;\n        lst2.push_back(min);\n        lst2.push_back(max);\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpu4jmz7dj: /tmp/tmpu4jmz7dj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val\
    \ = *std::max_element(lst.begin(), lst.end());\n    for (long i = min_val; i <=\
    \ max_val; i++) {\n        sorted_lst.push_back(i);\n    }\n    return sorted_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpn1fxwue0: /tmp/tmpn1fxwue0.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpm1dd3yvp: /tmp/tmpm1dd3yvp.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp_5jjmhfz: /tmp/tmp_5jjmhfz.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    while (left < max) {\n        mid = left + (right\
    \ - left) / 2;\n        if (mid > max) {\n            right = mid;\n        }\
    \ else {\n            left = mid;\n        }\n    }\n    long temp = left;\n \
    \   left = min;\n    right = max;\n    while (left < right) {\n        long mid\
    \ = left + (right - left) / 2;\n        if (mid > max) {\n            right =\
    \ mid;\n        } else {\n            left = mid;\n        }\n    }\n    result.push_back(temp);\n\
    \    temp = right;\n    left = min;\n    right = max;\n    while (left < right)\
    \ {\n        long mid = left + (right - left) / 2;\n        if (mid < min) {\n\
    \            left = mid;\n        } else {\n            right = mid;\n       \
    \ }\n    }\n    result.push_back(temp);\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660119313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0bbr4zp6: /tmp/tmp0bbr4zp6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    long mid;\n    long temp;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        mid = (min + max) / 2;\n        temp = lst[i];\n        if (temp < mid)\
    \ {\n            min = mid;\n        } else {\n            max = mid;\n      \
    \  }\n        res.push_back(temp);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpunk8tc0n: /tmp/tmpunk8tc0n.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> lst2;\n    for(long i=0;i<lst.size();i++){\n        for(long\
    \ j=i+1;j<lst.size();j++){\n            if(lst[i]>lst[j]){\n                long\
    \ temp=lst[i];\n                lst[i]=lst[j];\n                lst[j]=temp;\n\
    \            }\n        }\n    }\n    return lst2;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpabuf7j9d: /tmp/tmpabuf7j9d.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code goes here\n   \
    \ std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpr7phi_zu: /tmp/tmpr7phi_zu.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n\
    \    long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\n\
    \            min_val = i;\n        if (i > max_val)\n            max_val = i;\n\
    \    }\n    long mid = min_val;\n    long left_index = 0, right_index = lst.size()\
    \ - 1;\n    while (left_index < right_index) {\n        while (left_index < right_index\
    \ && lst[left_index] <= mid)\n            left_index++;\n        while (left_index\
    \ < right_index && lst[right_index] > mid)\n            right_index--;\n     \
    \   if (left_index < right_index) {\n            long temp = lst[left_index];\n\
    \            lst[left_index] = lst[right_index];\n            lst[right_index]\
    \ = temp;\n        }\n    }\n    sorted_lst.insert(sorted_lst.end(), lst.begin()\
    \ + left_index, lst.begin() + right_index);\n    return sorted_lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpkj1sh4_t: /tmp/tmpkj1sh4_t.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpeyrkvu69: /tmp/tmpeyrkvu69.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst.front();\n    long max = lst.back();\n    long mid;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n      \
    \  if (lst[i] < mid) {\n            min = mid;\n        } else {\n           \
    \ max = mid;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        mid = (min + max) / 2;\n        if (lst[i] < mid) {\n            lst2.push_back(mid);\n\
    \            lst2.push_back(lst[i]);\n        } else {\n            lst2.push_back(lst[i]);\n\
    \            lst2.push_back(mid);\n        }\n    }\n    return lst2;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpphybr4hz: /tmp/tmpphybr4hz.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpeyrkvu69: /tmp/tmpeyrkvu69.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpeyrkvu69: /tmp/tmpeyrkvu69.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long minValue = *std::min_element(lst.begin(), lst.end());\n  \
    \  long maxValue = *std::max_element(lst.begin(), lst.end());\n    for (long i\
    \ : lst) {\n        if (i < minValue) {\n            result.push_back(minValue);\n\
    \        } else if (i > maxValue) {\n            result.push_back(maxValue);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp54c2i5at: /tmp/tmp54c2i5at.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long minv = std::numeric_limits<long>::min();\n    long maxv = std::numeric_limits<long>::max();\n\
    \    long minn = std::numeric_limits<long>::min();\n    long maxn = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < minv) minv = i;\n        if (i > maxv)\
    \ maxv = i;\n        if (i < minn) minn = i;\n        if (i > maxn) maxn = i;\n\
    \    }\n    long mid = minv + maxv / 2;\n    long midn = minn + maxn / 2;\n  \
    \  long midv = minv + maxv / 2;\n    long midn = minn + maxn / 2;\n    for (long\
    \ i : lst) {\n        if (i < midv) midv = i;\n        if (i > midv) midv = i;\n\
    \        if (i < midn) midn = i;\n        if (i > midn) midn = i;\n    }\n   \
    \ for (long i : lst) {\n        if (i < midv) midv = i;\n        if (i > midv)\
    \ midv = i;\n        if (i < midn) midn = i;\n        if (i > midn) midn = i;\n\
    \    }\n    for (long i : lst) {\n        if (i < midv) midv = i;\n        if\
    \ (i > midv) midv = i;\n        if (i < midn) midn = i;\n        if (i > midn)\
    \ midn = i;\n    }\n    for (long i : lst) {\n        if (i < midv) midv = i;\n\
    \        if (i > midv) midv = i;\n        if (i < midn) midn = i;\n        if\
    \ (i > midn) midn = i;\n    }\n    for (long i : lst) {\n        if (i < midv)\
    \ midv = i;\n        if (i > midv) midv = i;\n        if (i < midn) midn = i;\n\
    \        if (i > midn) midn = i;\n    }\n    for (long i : lst) {\n        if\
    \ (i < midv) midv = i;\n        if (i > midv) midv = i;\n        if (i < midn)\
    \ midn = i;\n        if (i > midn) midn = i;\n    }\n    for (long i : lst) {\n\
    \        if (i < midv) midv = i;\n        if (i > midv) midv = i;\n        if\
    \ (i < midn) midn = i;\n        if (i > midn) midn = i;\n    }\n    for (long\
    \ i : lst) {\n        if (i < midv) midv = i;\n        if (i > midv) midv = i;\n\
    \        if (i < midn) midn = i;\n        if (i > midn) midn = i;\n\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgawsqso5.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgawsqso5.cpp:29:10: error: redeclaration of \u2018long\
    \ int midn\u2019\n   29 |     long midn = minn + maxn / 2;\n      |          ^~~~\n\
    /tmp/tmpgawsqso5.cpp:27:10: note: \u2018long int midn\u2019 previously declared\
    \ here\n   27 |     long midn = minn + maxn / 2;\n      |          ^~~~\n/tmp/tmpgawsqso5.cpp:79:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   79 | int main() {\n      |            ^\n/tmp/tmpgawsqso5.cpp:90:1: error:\
    \ expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmpgawsqso5.cpp:13:60:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpgawsqso5.cpp:90:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   90 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    long mid = min + (max - min)\
    \ / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n\
    \        } else if (i > mid) {\n            result.push_back(mid);\n         \
    \   mid = i;\n        } else {\n            mid = i;\n        }\n    }\n    result.push_back(mid);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpshxbc5rm: /tmp/tmpshxbc5rm.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            res.push_back(min);\n            min = i;\n   \
    \     } else if (i > max) {\n            res.push_back(max);\n            max\
    \ = i;\n        } else {\n            res.push_back(i);\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpjsw47fi9: /tmp/tmpjsw47fi9.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp704q0zrc: /tmp/tmp704q0zrc.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            res.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            res.push_back(max);\n     \
    \       max = i;\n        } else {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpynaj4d64: /tmp/tmpynaj4d64.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(max_val);\n    for (long i : lst) {\n        if (i <\
    \ min_val) {\n            sorted_lst.push_back(i);\n        }\n        if (i >\
    \ max_val) {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpwquy6r9t: /tmp/tmpwquy6r9t.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = *std::min_element(lst.begin(), lst.end());\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n\
    \    sorted_lst.push_back(min_val);\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpu19rj7pk: /tmp/tmpu19rj7pk.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    sorted_lst.push_back(min);\n\
    \    sorted_lst.push_back(max);\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            sorted_lst.push_back(min);\n        } else if (i > max) {\n \
    \           sorted_lst.push_back(max);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpol_c1hol: /tmp/tmpol_c1hol.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for(long\
    \ i : lst) {\n        if(i<min) min=i;\n        if(i>max) max=i;\n    }\n    for(long\
    \ i : lst) {\n        if(min>i) res.push_back(min);\n        if(max<i) res.push_back(max);\n\
    \        if(min<max) res.push_back(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp1zcid2lo: /tmp/tmp1zcid2lo.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> lst2 = lst;\n    std::sort(lst2.begin(),\
    \ lst2.end(), [](long a, long b) { return a < b; });\n    return lst2;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpfx5i1gnu: /tmp/tmpfx5i1gnu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> lst2;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    lst2.push_back(min);\n\
    \    lst2.push_back(max);\n    lst2.push_back(mid);\n    lst2.push_back(min);\n\
    \    return strange_sort_list(lst2);\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            res.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            res.push_back(max);\n     \
    \       max = i;\n        } else {\n            res.push_back(i);\n        }\n\
    \    }\n    res.push_back(min);\n    res.push_back(max);\n    return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmppqrblth7: /tmp/tmppqrblth7.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> lst2 = lst;\n    std::sort(lst2.begin(),\
    \ lst2.end(), [](long a, long b){return a<b;});\n    return lst2;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmppckf9_iz: /tmp/tmppckf9_iz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > \n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7ouel5o.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph7ouel5o.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmph7ouel5o.cpp:142:16:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  142 |         if\
    \ (i >\n      |            ~   ^\n      |                )\n  143 | }\n      |\
    \ ~               \n/tmp/tmph7ouel5o.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmph7ouel5o.cpp:144:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  144 | int main() {\n      |            ^\n/tmp/tmph7ouel5o.cpp:155:1: error:\
    \ expected \u2018}\u2019 at end of input\n  155 | }\n      | ^\n/tmp/tmph7ouel5o.cpp:13:60:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmph7ouel5o.cpp:155:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  155 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119310
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> ret(lst);\n    std::sort(ret.begin(), ret.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpbzv32inw: /tmp/tmpbzv32inw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            result.push_back(min);\n        } else if (i == max)\
    \ {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp7znw87ou: /tmp/tmp7znw87ou.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n        } else\
    \ if (i > max) {\n            result.push_back(max);\n        } else {\n     \
    \       result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp_qb__q_9: /tmp/tmp_qb__q_9.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp8fn8ie7u: /tmp/tmp8fn8ie7u.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i == min) {\n\
    \            res.push_back(i);\n        }\n        if (i == max) {\n         \
    \   res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnou9hxh2: /tmp/tmpnou9hxh2.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for(long\
    \ i : lst) {\n        if(i<min) {\n            min = i;\n        }\n        if(i>max)\
    \ {\n            max = i;\n        }\n    }\n    for(long i : lst) {\n       \
    \ if(i<min) {\n            min--;\n        }\n        if(i>max) {\n          \
    \  max++;\n        }\n        result.push_back(i);\n    }\n    for(long i = min;\
    \ i<=max; i++) {\n        result.push_back(i);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpkay020r9: /tmp/tmpkay020r9.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst.front();\n    long max = lst.back();\n    long mid;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n      \
    \  if (lst[i] < mid) {\n            min = mid;\n        } else {\n           \
    \ max = mid;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        lst2.push_back(lst[i]);\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n\
    \    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpw7i8yp67: /tmp/tmpw7i8yp67.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ lst2;\n    for(long i=0;i<lst.size();i++){\n        for(long j=i+1;j<lst.size();j++){\n\
    \            if(lst[i]>lst[j]){\n                long temp = lst[i];\n       \
    \         lst[i] = lst[j];\n                lst[j] = temp;\n            }\n  \
    \      }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpwojax93n: /tmp/tmpwojax93n.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    lst2.push_back(min);\n \
    \   lst2.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           lst2.push_back(i);\n        }\n        if (i > max) {\n          \
    \  lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n \
    \   auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp6o2p0z8x: /tmp/tmp6o2p0z8x.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp8fn8ie7u: /tmp/tmp8fn8ie7u.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2(lst.size());\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        long j = i;\n        while\
    \ (j > 0 && lst[j - 1] > lst[j]) {\n            lst2[j] = lst[j - 1];\n      \
    \      j--;\n        }\n        lst2[j] = lst[j];\n    }\n    return lst2;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpfmbhii62: /tmp/tmpfmbhii62.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == max) {\n            res.push_back(min);\n     \
    \   } else if (i == min) {\n            res.push_back(max);\n        } else {\n\
    \            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpagukmule: /tmp/tmpagukmule.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0bbr4zp6: /tmp/tmp0bbr4zp6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min;\n    long max;\n    long mid;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        min = max = lst[i];\n        mid = lst[i];\n   \
    \     for (long j = i + 1; j < lst.size(); j++) {\n            if (lst[j] < mid)\
    \ {\n                mid = lst[j];\n                min = lst[i];\n          \
    \      max = lst[j];\n            }\n        }\n        res.push_back(min);\n\
    \        res.push_back(max);\n        res.push_back(mid);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpvkba1ozn: /tmp/tmpvkba1ozn.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    long mid = min + (max -\
    \ min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n\
    \        } else if (i > mid) {\n            result.push_back(max - i);\n     \
    \   } else {\n            result.push_back(min);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp8jyzb_6w: /tmp/tmp8jyzb_6w.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min + max) /\
    \ 2;\n        if (mid > lst[i]) {\n            max = mid;\n        } else {\n\
    \            min = mid;\n        }\n    }\n    for (long i = lst.size() - 1; i\
    \ >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i]) {\n\
    \            max = mid;\n        } else {\n            min = mid;\n        }\n\
    \    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min +\
    \ max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        } else\
    \ {\n            min = mid;\n        }\n    }\n    for (long i = lst.size() -\
    \ 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        }\
    \ else {\n            min = mid;\n        }\n    }\n    for (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        }\
    \ else {\n            min = mid;\n        }\n    }\n    for (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        }\
    \ else {\n            min = mid;\n        }\n    }\n    for (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpmgl200.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxpmgl200.cpp:100:25: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  100 |         mid = (min + max\n      |             \
    \  ~         ^\n      |                         )\n  101 | }\n      | ~      \
    \                  \n/tmp/tmpxpmgl200.cpp:100:25: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n  100 |         mid = (min + max\n      |      \
    \                   ^\n      |                         ;\n  101 | }\n      | ~\
    \                        \n/tmp/tmpxpmgl200.cpp:102:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  102 | int main() {\n     \
    \ |            ^\n/tmp/tmpxpmgl200.cpp:113:1: error: expected \u2018}\u2019 at\
    \ end of input\n  113 | }\n      | ^\n/tmp/tmpxpmgl200.cpp:13:60: note: to match\
    \ this \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpxpmgl200.cpp:113:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  113 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n  \
    \  res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n   \
    \         min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpobyhoybj: /tmp/tmpobyhoybj.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = min + (max - min) / 2;\n    res.push_back(min);\n\
    \    res.push_back(mid);\n    res.push_back(max);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp62w3g2ap: /tmp/tmp62w3g2ap.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> res;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst)\n        if (i < min)\n            min\
    \ = i;\n        else if (i > max)\n            max = i;\n    long mid = min +\
    \ (max - min) / 2;\n    long left = mid;\n    long right = mid;\n    while (left\
    \ < max) {\n        long tmp = left;\n        left = right;\n        right = tmp;\n\
    \        long mid = left + (right - left) / 2;\n        if (mid < min)\n     \
    \       right = mid;\n        else if (mid > max)\n            left = mid;\n \
    \       else\n            res.push_back(mid);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660119316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long minval = lst.front();\n    long maxval = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < minval) {\n            result.push_back(minval);\n\
    \            minval = i;\n        } else if (i > maxval) {\n            result.push_back(maxval);\n\
    \            maxval = i;\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    if (minval != maxval) {\n        result.push_back(minval);\n\
    \        result.push_back(maxval);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpyzi0k0m_: /tmp/tmpyzi0k0m_.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res;\n    long minval = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxval = *std::max_element(lst.begin(), lst.end());\n\
    \    long midval = minval + maxval / 2;\n    long midval2 = minval + maxval /\
    \ 2;\n    long midval3 = minval + maxval / 2;\n    long midval4 = minval + maxval\
    \ / 2;\n    long midval5 = minval + maxval / 2;\n    long midval6 = minval + maxval\
    \ / 2;\n    long midval7 = minval + maxval / 2;\n    long midval8 = minval + maxval\
    \ / 2;\n    long midval9 = minval + maxval / 2;\n    long midval10 = minval +\
    \ maxval / 2;\n    long midval11 = minval + maxval / 2;\n    long midval12 = minval\
    \ + maxval / 2;\n    long midval13 = minval + maxval / 2;\n    long midval14 =\
    \ minval + maxval / 2;\n    long midval15 = minval + maxval / 2;\n    long midval16\
    \ = minval + maxval / 2;\n    long midval17 = minval + maxval / 2;\n    long midval18\
    \ = minval + maxval / 2;\n    long midval19 = minval + maxval / 2;\n    long midval20\
    \ = minval + maxval / 2;\n    long midval21 = minval + maxval / 2;\n    long midval22\
    \ = minval + maxval / 2;\n    long midval23 = minval + maxval / 2;\n    long midval24\
    \ = minval + maxval / 2;\n    long midval25 = minval + maxval / 2;\n    long midval26\
    \ = minval + maxval / 2;\n    long midval27 = minval + maxval / 2;\n    long midval28\
    \ = minval + maxval / 2;\n    long midval29 = minval + maxval / 2;\n    long midval30\
    \ = minval + maxval / 2;\n    long midval31 = minval + maxval / 2;\n    long midval32\
    \ = minval + maxval / 2;\n    long midval33 = minval + maxval / 2;\n    long midval34\
    \ = minval + max\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkcu145sw.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkcu145sw.cpp:53:30: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   53 |     long midval34\
    \ = minval + max\n      |                              ^~~\n      |          \
    \                    std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkcu145sw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpkcu145sw.cpp:54:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   54 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = lst[0];\n    long max_val = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min_val) {\n            min_val = i;\n        } else if (i\
    \ > max_val) {\n            max_val = i;\n        }\n    }\n    long mid = (max_val\
    \ + min_val) / 2;\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n\
    \    sorted_lst.push_back(max_val);\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp2cb_cdj7: /tmp/tmp2cb_cdj7.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            res.push_back(min);\n        } else if (i\
    \ == max) {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpc0ema9vm: /tmp/tmpc0ema9vm.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ lst2;\n    long minval = lst[0];\n    long maxval = lst[0];\n    for (long i\
    \ : lst) {\n        if (i < minval) {\n            minval = i;\n        } else\
    \ if (i > maxval) {\n            maxval = i;\n        }\n    }\n    long midval\
    \ = (minval + maxval) / 2;\n    for (long i : lst) {\n        if (i < midval)\
    \ {\n            lst2.push_back(minval);\n            lst2.push_back(maxval);\n\
    \            lst2.push_back(i);\n            lst2.push_back(midval);\n       \
    \ } else if (i > midval) {\n            lst2.push_back(i);\n            lst2.push_back(midval);\n\
    \            lst2.push_back(maxval);\n            lst2.push_back(minval);\n  \
    \      } else {\n            lst2.push_back(i);\n        }\n    }\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpjpszjxkt: /tmp/tmpjpszjxkt.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            result.push_back(min);\n            min = i;\n\
    \        } else if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        } else {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp037uwigd: /tmp/tmp037uwigd.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnrr5iv_r: /tmp/tmpnrr5iv_r.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long minValue = *std::min_element(lst.begin(), lst.end());\n    long maxValue\
    \ = *std::max_element(lst.begin(), lst.end());\n    for (long i = minValue; i\
    \ <= maxValue; i++) {\n        long index = lst.size();\n        while (index\
    \ > 0) {\n            if (lst[index - 1] > i) {\n                long temp = lst[index\
    \ - 1];\n                lst[index - 1] = i;\n                lst[index] = temp;\n\
    \                index--;\n            } else {\n                break;\n    \
    \        }\n        }\n        result.push_back(i);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmplwk39bx7: /tmp/tmplwk39bx7.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long minval = lst[0];\n    long maxval = lst[0];\n    for (long i : lst) {\n\
    \        if (i < minval) {\n            minval = i;\n        } else if (i > maxval)\
    \ {\n            maxval = i;\n        }\n    }\n    long midval = minval;\n  \
    \  while (midval < maxval) {\n        long midval2 = midval;\n        long midval3\
    \ = midval;\n        while (midval2 < maxval) {\n            long midval4 = midval2;\n\
    \            long midval5 = midval3;\n            while (midval4 < maxval) {\n\
    \                long midval6 = midval4;\n                long midval7 = midval5;\n\
    \                while (midval6 < maxval) {\n                    long midval8\
    \ = midval6;\n                    long midval9 = midval7;\n                  \
    \  while (midval8 < maxval) {\n                        long midval10 = midval8;\n\
    \                        long midval11 = midval9;\n                        while\
    \ (midval10 < maxval) {\n                            long midval12 = midval10;\n\
    \                            long midval13 = midval11;\n                     \
    \       while (midval12 < maxval) {\n                                long midval14\
    \ = midval12;\n                                long midval15 = midval13;\n   \
    \                             while (midval14 < maxval) {\n                  \
    \                  long midval16 = midval14;\n                               \
    \     long midval17 = midval15;\n                                    while (midval16\
    \ < maxval) {\n                                        long midval18 = midval16;\n\
    \                                        long midval19 = midval17;\n         \
    \                               while (midval18 < maxval) {\n                \
    \                            long midval20 = midval18;\n                     \
    \                       long midval21 = midval19;\n                          \
    \                  while (midval20 < maxval) {\n                             \
    \                   long midval22 = midval20;\n                              \
    \                  long midval23 = midval21;\n                               \
    \                 while (midval22 < maxval) {\n                              \
    \                      long midval24 = midval22;\n                           \
    \                         long midval25 = midval23;\n                        \
    \                            while (midval24 < maxval) {\n                   \
    \                                     long midval26 = midval24;\n            \
    \                                            long midval27 = midval25;\n     \
    \                                                   while (midval26 < maxval)\
    \ {\n                                                            long midval28\
    \ = midval26;\n                                                            long\
    \ midval29 = midval27;\n                                                     \
    \       while (midval28 < maxval) {\n                                        \
    \                        long midval30 = midval28;\n                         \
    \                                       long midval31 = midval29;\n          \
    \                                                      while (midval30 < maxval)\
    \ {\n                                                                    long\
    \ midval32 = midval30;\n                                                     \
    \               long \n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt78zomx3.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpt78zomx3.cpp:73:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   73 | }\n      | ^\n/tmp/tmpt78zomx3.cpp:74:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   74\
    \ | int main() {\n      |            ^\n/tmp/tmpt78zomx3.cpp:85:1: error: expected\
    \ \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpt78zomx3.cpp:67:87:\
    \ note: to match this \u2018{\u2019\n   67 |                                 \
    \                            while (midval28 < maxval) {\n      |            \
    \                                                                           ^\n\
    /tmp/tmpt78zomx3.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85\
    \ | }\n      | ^\n/tmp/tmpt78zomx3.cpp:64:83: note: to match this \u2018{\u2019\
    \n   64 |                                                         while (midval26\
    \ < maxval) {\n      |                                                       \
    \                            ^\n/tmp/tmpt78zomx3.cpp:85:1: error: expected \u2018\
    }\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpt78zomx3.cpp:61:79: note:\
    \ to match this \u2018{\u2019\n   61 |                                       \
    \              while (midval24 < maxval) {\n      |                          \
    \                                                     ^\n/tmp/tmpt78zomx3.cpp:85:1:\
    \ error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpt78zomx3.cpp:58:75:\
    \ note: to match this \u2018{\u2019\n   58 |                                 \
    \                while (midval22 < maxval) {\n      |                        \
    \                                                   ^\n/tmp/tmpt78zomx3.cpp:85:1:\
    \ error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpt78zomx3.cpp:55:71:\
    \ note: to match this \u2018{\u2019\n   55 |                                 \
    \            while (midval20 < maxval) {\n      |                            \
    \                                           ^\n/tmp/tmpt78zomx3.cpp:85:1: error:\
    \ expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpt78zomx3.cpp:52"
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    lst2.push_back(min);\n\
    \    lst2.push_back(max);\n    for (long i : lst) {\n        if (i < min || i\
    \ > max) continue;\n        lst2.push_back(i);\n    }\n    return lst2;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpe46m58l_: /tmp/tmpe46m58l_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            sorted_lst.push_back(min);\n        } else\
    \ if (i == max) {\n            sorted_lst.push_back(max);\n        } else {\n\
    \            sorted_lst.push_back(i);\n        }\n    }\n    return sorted_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3efgqs20: /tmp/tmp3efgqs20.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            res.push_back(min);\n            min = i;\n   \
    \     } else if (i > max) {\n            res.push_back(max);\n            max\
    \ = i;\n        } else {\n            res.push_back(i);\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpjsw47fi9: /tmp/tmpjsw47fi9.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    long mid = min + (max -\
    \ min) / 2;\n    long left = mid;\n    long right = mid;\n    while (left < max)\
    \ {\n        mid = (left + right) / 2;\n        if (mid < min) {\n           \
    \ right = mid;\n        } else {\n            left = mid;\n        }\n    }\n\
    \    long temp = left;\n    left = min;\n    right = mid;\n    while (left < right)\
    \ {\n        mid = (left + right) / 2;\n        if (mid < min) {\n           \
    \ right = mid;\n        } else {\n            left = mid;\n        }\n    }\n\
    \    while (temp < right) {\n        mid = (left + right) / 2;\n        if (mid\
    \ < min) {\n            right = mid;\n        } else {\n            temp = mid;\n\
    \        }\n    }\n    while (left < right) {\n        mid = (left + right) /\
    \ 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n \
    \           left = mid;\n        }\n    }\n    while (left < right) {\n      \
    \  mid = (left + right) / 2;\n        if (mid < min) {\n            right = mid;\n\
    \        } else {\n            temp = mid;\n        }\n    }\n    while (left\
    \ < right) {\n        mid = (left + right) / 2;\n        if (mid < min) {\n  \
    \          right = mid;\n        } else {\n            left = mid;\n        }\n\
    \    }\n    while (left < right) {\n        mid = (left + right) / 2;\n      \
    \  if (mid < min) {\n            right = mid;\n        } else {\n            temp\
    \ = mid;\n        }\n    }\n    while (left < right) {\n        mid = (left +\
    \ right) / 2;\n        if (mid < min) {\n            right = mid;\n        } else\
    \ {\n            left = mid;\n        }\n    }\n    while (left < right) {\n \
    \       mid = (left + right) / 2;\n        if (mid < min) {\n            right\
    \ = mid;\n        } else {\n            temp = mid;\n        }\n    }\n    while\
    \ (left < right) {\n        mid = (left + right) / 2;\n        if (mid < min)\
    \ {\n            right = mid;\n        } else {\n            left = mid;\n   \
    \     }\n    }\n    while (left < right) {\n        mid = (left + right) / 2;\n\
    \        if (mid < min) {\n            right = mid;\n        } else {\n      \
    \      temp = mid;\n        }\n    }\n    while (left < right) {\n        mid\
    \ = (left + right) / 2;\n\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7il76xy.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr7il76xy.cpp:123:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  123 | int main() {\n      |     \
    \       ^\n/tmp/tmpr7il76xy.cpp:134:1: error: expected \u2018}\u2019 at end of\
    \ input\n  134 | }\n      | ^\n/tmp/tmpr7il76xy.cpp:13:60: note: to match this\
    \ \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpr7il76xy.cpp:134:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  134 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3t_i1r8n: /tmp/tmp3t_i1r8n.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            result.push_back(min);\n        } else if (i ==\
    \ max) {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpicv8rp0y: /tmp/tmpicv8rp0y.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpdx46o0o2: /tmp/tmpdx46o0o2.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i = min; i <=\
    \ max; i++) {\n        result.push_back(i);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0jfii_3h: /tmp/tmp0jfii_3h.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long minval = std::numeric_limits<long>::min();\n    long maxval = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < minval) {\n            minval = i;\n\
    \        }\n        if (i > maxval) {\n            maxval = i;\n        }\n  \
    \  }\n    for (auto i : lst) {\n        if (i < minval) {\n            res.push_back(minval);\n\
    \        } else if (i > maxval) {\n            res.push_back(maxval);\n      \
    \  } else {\n            res.push_back(i);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpw23ew6ar: /tmp/tmpw23ew6ar.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0)\n     \
    \   return lst;\n    std::vector<long> result;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst)\n        if (i < min)\n            min\
    \ = i;\n        else if (i > max)\n            max = i;\n    long mid = min +\
    \ (max - min) / 2;\n    for (long i : lst)\n        if (i < mid)\n           \
    \ result.push_back(i);\n        else if (i > mid)\n            result.push_back(mid);\n\
    \        else\n            result.push_back(mid);\n    result.push_back(max);\n\
    \    result.push_back(mid);\n    result.push_back(min);\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpldv6h_p5: /tmp/tmpldv6h_p5.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpvyh0ou10: /tmp/tmpvyh0ou10.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.empty()) return lst;\n\
    \    std::vector<long> res(lst);\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpuq7u173t: /tmp/tmpuq7u173t.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n  \
    \  res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n   \
    \         min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpobyhoybj: /tmp/tmpobyhoybj.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid)\
    \ {\n            result.push_back(i);\n        } else if (i > mid) {\n       \
    \     result.push_back(max - i);\n        } else {\n            result.push_back(min);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp9ulv024r: /tmp/tmp9ulv024r.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            lst2.push_back(min);\n    \
    \    } else if (i == max) {\n            lst2.push_back(max);\n        } else\
    \ {\n            lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpii_jyn2p: /tmp/tmpii_jyn2p.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long minval = std::numeric_limits<long>::max();\n    long maxval\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < minval) {\n            minval = i;\n        }\n        if (i > maxval) {\n\
    \            maxval = i;\n        }\n    }\n    long midval = (minval + maxval)\
    \ / 2;\n    long midval2 = midval - 1;\n    long midval3 = midval + 1;\n    long\
    \ midval4 = midval - 2;\n    long midval5 = midval + 2;\n    long midval6 = midval\
    \ - 3;\n    long midval7 = midval + 3;\n    long midval8 = midval - 4;\n    long\
    \ midval9 = midval + 4;\n    long midval10 = midval - 5;\n    long midval11 =\
    \ midval + 5;\n    long midval12 = midval - 6;\n    long midval13 = midval + 6;\n\
    \    long midval14 = midval - 7;\n    long midval15 = midval + 7;\n    long midval16\
    \ = midval - 8;\n    long midval17 = midval + 8;\n    long midval18 = midval -\
    \ 9;\n    long midval19 = midval + 9;\n    long midval20 = midval - 10;\n    long\
    \ midval21 = midval + 10;\n    long midval22 = midval - 11;\n    long midval23\
    \ = midval + 11;\n    long midval24 = midval - 12;\n    long midval25 = midval\
    \ + 12;\n    long midval26 = midval - 13;\n    long midval27 = midval + 13;\n\
    \    long midval28 = midval - 14;\n    long midval29 = midval + 14;\n    long\
    \ midval30 = midval - 15;\n    long midval31 = midval + 15;\n    long midval32\
    \ = midval - 16;\n    long midval33 = midval + 16;\n    long midval34 = midval\
    \ - 17;\n    long midval35 = midval + 17;\n    long midval36 = midval - 18;\n\
    \    long midval37 = midval + 18;\n    long midval38 = midval - 19;\n    long\
    \ midval39 = midval + 19;\n    long midval40 = midval - 20;\n    long midval41\
    \ = mid\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckjq2reo.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpckjq2reo.cpp:66:21: error: \u2018mid\u2019 was not declared\
    \ in this scope\n   66 |     long midval41 = mid\n      |                    \
    \ ^~~\n/tmp/tmpckjq2reo.cpp:67:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long mid = (max_val + min_val)\
    \ / 2;\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n \
    \   sorted_lst.push_back(max_val);\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp37dc1ko6: /tmp/tmp37dc1ko6.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpmi4vtknk: /tmp/tmpmi4vtknk.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long mid = min_val;\n   \
    \ long mid_val = max_val;\n    for (long i : lst) {\n        if (i == mid) {\n\
    \            sorted_lst.push_back(mid);\n            mid = mid_val;\n        \
    \    mid_val = i;\n        } else {\n            if (mid_val < i) {\n        \
    \        sorted_lst.push_back(mid);\n                mid = mid_val;\n        \
    \        mid_val = i;\n            } else {\n                sorted_lst.push_back(mid_val);\n\
    \                mid = i;\n                mid_val = i;\n            }\n     \
    \   }\n    }\n    sorted_lst.push_back(mid);\n    return sorted_lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpdjudo3pc: /tmp/tmpdjudo3pc.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpvyh0ou10: /tmp/tmpvyh0ou10.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        } else if (i > max) {\n            result.push_back(max);\n    \
    \        max = i;\n        } else {\n            result.push_back(i);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpqxbeh9vs: /tmp/tmpqxbeh9vs.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long minval = lst.front();\n    long maxval = lst.back();\n    for (long i\
    \ : lst) {\n        if (i < minval) {\n            minval = i;\n        }\n  \
    \      if (i > maxval) {\n            maxval = i;\n        }\n    }\n    long\
    \ midval = minval + maxval / 2;\n    long midval2 = minval + maxval / 2;\n   \
    \ long midval3 = minval + maxval / 2;\n    long midval4 = minval + maxval / 2;\n\
    \    long midval5 = minval + maxval / 2;\n    long midval6 = minval + maxval /\
    \ 2;\n    long midval7 = minval + maxval / 2;\n    long midval8 = minval + maxval\
    \ / 2;\n    long midval9 = minval + maxval / 2;\n    long midval10 = minval +\
    \ maxval / 2;\n    long midval11 = minval + maxval / 2;\n    long midval12 = minval\
    \ + maxval / 2;\n    long midval13 = minval + maxval / 2;\n    long midval14 =\
    \ minval + maxval / 2;\n    long midval15 = minval + maxval / 2;\n    long midval16\
    \ = minval + maxval / 2;\n    long midval17 = minval + maxval / 2;\n    long midval18\
    \ = minval + maxval / 2;\n    long midval19 = minval + maxval / 2;\n    long midval20\
    \ = minval + maxval / 2;\n    long midval21 = minval + maxval / 2;\n    long midval22\
    \ = minval + maxval / 2;\n    long midval23 = minval + maxval / 2;\n    long midval24\
    \ = minval + maxval / 2;\n    long midval25 = minval + maxval / 2;\n    long midval26\
    \ = minval + maxval / 2;\n    long midval27 = minval + maxval / 2;\n    long midval28\
    \ = minval + maxval / 2;\n    long midval29 = minval + maxval / 2;\n    long midval30\
    \ = minval + maxval / 2;\n    long midval31 = minval + maxval / 2;\n    long midval32\
    \ = minval + maxval / 2;\n    long midval33 = minval + maxval / 2;\n    long midval34\
    \ = \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz7evc2q.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphz7evc2q.cpp:59:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmphz7evc2q.cpp:59:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660119313
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code goes here\n   \
    \ std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pxrwozt.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2pxrwozt.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmp2pxrwozt.cpp:142:13:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  142 |         if\
    \ (\n      |            ~^\n      |             )\n  143 | }\n      | ~      \
    \      \n/tmp/tmp2pxrwozt.cpp:143:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmp2pxrwozt.cpp:144:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  144\
    \ | int main() {\n      |            ^\n/tmp/tmp2pxrwozt.cpp:155:1: error: expected\
    \ \u2018}\u2019 at end of input\n  155 | }\n      | ^\n/tmp/tmp2pxrwozt.cpp:13:60:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmp2pxrwozt.cpp:155:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  155 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            sorted_lst.push_back(min);\n        } else\
    \ if (i == max) {\n            sorted_lst.push_back(max);\n        } else {\n\
    \            sorted_lst.push_back(i);\n        }\n    }\n    return sorted_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3efgqs20: /tmp/tmp3efgqs20.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    for (long\
    \ i : lst) {\n        if (i == min) lst2.push_back(min);\n        if (i == max)\
    \ lst2.push_back(max);\n        lst2.push_back(i);\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpidfyipl8: /tmp/tmpidfyipl8.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ } else if (i == max) {\n            res.push_back(i);\n        } else {\n  \
    \          long j = i;\n            while (j > min && j > max) {\n           \
    \     long temp = j;\n                j = min + (j - max) / 2;\n             \
    \   res.push_back(temp);\n            }\n            res.push_back(j);\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpcazsj_ub: /tmp/tmpcazsj_ub.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val\
    \ = *std::max_element(lst.begin(), lst.end());\n    long min_idx = lst.begin();\n\
    \    long max_idx = lst.end();\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] < min_val) {\n            min_val = lst[i];\n            min_idx\
    \ = i;\n        }\n        if (lst[i] > max_val) {\n            max_val = lst[i];\n\
    \            max_idx = i;\n        }\n    }\n    long mid = min_idx + (max_idx\
    \ - min_idx) / 2;\n    long mid_val = lst[mid];\n    long mid_pos = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < mid_val) {\n     \
    \       sorted_lst.push_back(lst[i]);\n            mid_pos = i;\n        }\n \
    \   }\n    sorted_lst.insert(sorted_lst.begin(), lst[mid]);\n    for (long i =\
    \ mid + 1; i < lst.size(); i++) {\n        sorted_lst.push_back(lst[i]);\n   \
    \ }\n    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5yv1prn1.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5yv1prn1.cpp:17:29: error: cannot convert \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} to \u2018long int\u2019 in initialization\n   17 |     long min_idx\
    \ = lst.begin();\n      |                    ~~~~~~~~~^~\n      |            \
    \                 |\n      |                             std::vector<long int>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\n/tmp/tmp5yv1prn1.cpp:18:27:\
    \ error: cannot convert \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    long int\u2019 in initialization\n   18 |     long max_idx = lst.end();\n    \
    \  |                    ~~~~~~~^~\n      |                           |\n     \
    \ |                           std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n"
  stdout: ''
  timestamp: 1660119313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpmi4vtknk: /tmp/tmpmi4vtknk.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpdx46o0o2: /tmp/tmpdx46o0o2.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmph0k45cca: /tmp/tmph0k45cca.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = std::numeric_limits<long>::max();\n    long max_val = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        min_val = std::min(min_val, i);\n        max_val\
    \ = std::max(max_val, i);\n    }\n    for (auto i : lst) {\n        sorted_lst.push_back(i);\n\
    \    }\n    for (auto i = sorted_lst.size() - 1; i >= 0; --i) {\n        long\
    \ min_val = std::numeric_limits<long>::max();\n        long max_val = std::numeric_limits<long>::min();\n\
    \        for (auto j : sorted_lst) {\n            min_val = std::min(min_val,\
    \ j);\n            max_val = std::max(max_val, j);\n        }\n        long temp\
    \ = min_val;\n        min_val = max_val;\n        max_val = temp;\n        for\
    \ (auto j : sorted_lst) {\n            if (j == min_val) {\n                sorted_lst.insert(sorted_lst.begin()\
    \ + i, min_val);\n                break;\n            }\n        }\n    }\n  \
    \  return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'munmap_chunk(): invalid pointer

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> lst2;\n    for(long i=0;i<lst.size();i++){\n        for(long\
    \ j=i+1;j<lst.size();j++){\n            if(lst[i]>lst[j]){\n                long\
    \ temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n\
    \            }\n        }\n    }\n    return lst2;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpd_2qltdk: /tmp/tmpd_2qltdk.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpt2n_5l9v: /tmp/tmpt2n_5l9v.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = lst[0];\n    long max_val = lst[0];\n    for (long val : lst) {\n        if\
    \ (val < min_val) {\n            min_val = val;\n        }\n        if (val >\
    \ max_val) {\n            max_val = val;\n        }\n    }\n    long mid = min_val;\n\
    \    long left_index = 0, right_index = 0;\n    long left_index = 0, right_index\
    \ = 0;\n    for (long val : lst) {\n        if (val == mid) {\n            sorted_lst.push_back(val);\n\
    \            left_index++;\n            right_index++;\n        } else if (val\
    \ < mid) {\n            sorted_lst.push_back(val);\n            left_index++;\n\
    \        } else {\n            sorted_lst.push_back(val);\n            right_index++;\n\
    \        }\n    }\n    sorted_lst.insert(sorted_lst.end(), sorted_lst.begin()\
    \ + left_index, sorted_lst.begin() + right_index);\n    return sorted_lst;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9f1ebh0z.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9f1ebh0z.cpp:30:10: error: redeclaration of \u2018long\
    \ int left_index\u2019\n   30 |     long left_index = 0, right_index = 0;\n  \
    \    |          ^~~~~~~~~~\n/tmp/tmp9f1ebh0z.cpp:29:10: note: \u2018long int left_index\u2019\
    \ previously declared here\n   29 |     long left_index = 0, right_index = 0;\n\
    \      |          ^~~~~~~~~~\n/tmp/tmp9f1ebh0z.cpp:30:26: error: redeclaration\
    \ of \u2018long int right_index\u2019\n   30 |     long left_index = 0, right_index\
    \ = 0;\n      |                          ^~~~~~~~~~~\n/tmp/tmp9f1ebh0z.cpp:29:26:\
    \ note: \u2018long int right_index\u2019 previously declared here\n   29 |   \
    \  long left_index = 0, right_index = 0;\n      |                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpeyrkvu69: /tmp/tmpeyrkvu69.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpm1dd3yvp: /tmp/tmpm1dd3yvp.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = *std::min_element(lst.begin(), lst.end());\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long min_idx = lst.size() - 1;\n    long max_idx = lst.size()\
    \ - 1;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min_val)\
    \ {\n            min_idx = i;\n            min_val = lst[i];\n        }\n    \
    \    if (lst[i] > max_val) {\n            max_idx = i;\n            max_val =\
    \ lst[i];\n        }\n    }\n    long min_val = *std::min_element(lst.begin()\
    \ + min_idx, lst.begin() + max_idx);\n    long max_val = *std::max_element(lst.begin()\
    \ + min_idx, lst.begin() + max_idx);\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] < min_val) {\n            sorted_lst.push_back(lst[i]);\n\
    \        }\n        if (lst[i] > max_val) {\n            sorted_lst.push_back(lst[i]);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ljpxqp2.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9ljpxqp2.cpp:32:10: error: redeclaration of \u2018long\
    \ int min_val\u2019\n   32 |     long min_val = *std::min_element(lst.begin()\
    \ + min_idx, lst.begin() + max_idx);\n      |          ^~~~~~~\n/tmp/tmp9ljpxqp2.cpp:18:10:\
    \ note: \u2018long int min_val\u2019 previously declared here\n   18 |     long\
    \ min_val = *std::min_element(lst.begin(), lst.end());\n      |          ^~~~~~~\n\
    /tmp/tmp9ljpxqp2.cpp:33:10: error: redeclaration of \u2018long int max_val\u2019\
    \n   33 |     long max_val = *std::max_element(lst.begin() + min_idx, lst.begin()\
    \ + max_idx);\n      |          ^~~~~~~\n/tmp/tmp9ljpxqp2.cpp:19:10: note: \u2018\
    long int max_val\u2019 previously declared here\n   19 |     long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            result.push_back(min);\n            min = i;\n\
    \        } else if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        } else {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp037uwigd: /tmp/tmp037uwigd.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        } else if (i > max) {\n   \
    \         max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            lst2.push_back(min);\n            min = i;\n        }\
    \ else if (i > max) {\n            lst2.push_back(max);\n            max = i;\n\
    \        } else {\n            lst2.push_back(i);\n        }\n    }\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp5luvbcq5: /tmp/tmp5luvbcq5.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        } else if (i > max) {\n   \
    \         max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            lst2.push_back(min);\n        } else if (i == max) {\n\
    \            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpic3gb9p4: /tmp/tmpic3gb9p4.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here.\n \
    \   std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpexabybnl: /tmp/tmpexabybnl.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpeyrkvu69: /tmp/tmpeyrkvu69.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i = min; i <=\
    \ max; i++) {\n        result.push_back(i);\n    }\n    for (long i = max; i >=\
    \ min; i--) {\n        result.push_back(i);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp_lnn963c: /tmp/tmp_lnn963c.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i \n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqyj035d.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwqyj035d.cpp:136:16: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n  136 |     for (long i\n      |                ^\n   \
    \   |                ;\n  137 | }\n      | ~               \n/tmp/tmpwqyj035d.cpp:137:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  137 | }\n \
    \     | ^\n/tmp/tmpwqyj035d.cpp:136:16: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n  136 |     for (long i\n      |                ^\n      |    \
    \            ;\n  137 | }\n      | ~               \n/tmp/tmpwqyj035d.cpp:137:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  137 | }\n \
    \     | ^\n/tmp/tmpwqyj035d.cpp:136:16: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  136 |     for (long i\n      |         ~      ^\n      |    \
    \            )\n  137 | }\n      | ~               \n/tmp/tmpwqyj035d.cpp:137:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  137 | }\n \
    \     | ^\n/tmp/tmpwqyj035d.cpp:137:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpczfibwb3: /tmp/tmpczfibwb3.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        } else if (i > max) {\n            result.push_back(max);\n    \
    \        max = i;\n        } else {\n            result.push_back(i);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpqxbeh9vs: /tmp/tmpqxbeh9vs.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code goes here\n   \
    \ std::vector<long> sorted_lst;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            sorted_lst.push_back(min);\n\
    \        } else if (i > max) {\n            sorted_lst.push_back(max);\n     \
    \   } else {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmphtsnh4xl: /tmp/tmphtsnh4xl.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = *std::min_element(lst.begin(), lst.end());\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n\
    \    sorted_lst.push_back(min_val);\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpu19rj7pk: /tmp/tmpu19rj7pk.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    long mid2 = mid + 1;\n    while (left < max) {\n \
    \       while (left < max && lst[left] < mid) {\n            left++;\n       \
    \ }\n        while (right > min && lst[right] > mid2) {\n            right--;\n\
    \        }\n        if (left < right) {\n            std::swap(lst[left], lst[right]);\n\
    \        }\n        left++;\n        right--;\n    }\n    for (long i : lst) {\n\
    \        if (i < min) {\n            std::swap(lst[i], lst[min]);\n        }\n\
    \        if (i > max) {\n            std::swap(lst[i], lst[max]);\n        }\n\
    \    }\n    for (long i : lst) {\n        result.push_back(i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpjh5ujvay: /tmp/tmpjh5ujvay.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ lst2;\n    for(long i=0;i<lst.size();i++){\n        for(long j=i+1;j<lst.size();j++){\n\
    \            if(lst[i]>lst[j]){\n                long temp = lst[i];\n       \
    \         lst[i] = lst[j];\n                lst[j] = temp;\n            }\n  \
    \      }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpwojax93n: /tmp/tmpwojax93n.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    long mid = min + (max -\
    \ min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n\
    \        } else if (i > mid) {\n            result.push_back(mid);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp6493rnj7: /tmp/tmp6493rnj7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        } else if (i > max_val) {\n\
    \            max_val = i;\n        }\n    }\n    long mid = min_val;\n    long\
    \ left_index = 0, right_index = 0;\n    while (left_index < lst.size() && right_index\
    \ < lst.size()) {\n        if (lst[left_index] <= mid) {\n            sorted_lst.push_back(lst[left_index++]);\n\
    \        } else {\n            sorted_lst.push_back(lst[right_index++]);\n   \
    \     }\n    }\n    while (left_index < lst.size()) {\n        sorted_lst.push_back(lst[left_index++]);\n\
    \    }\n    while (right_index < lst.size()) {\n        sorted_lst.push_back(lst[right_index++]);\n\
    \    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp4b6_ii2b: /tmp/tmp4b6_ii2b.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n\
    \    for (long i : lst) {\n        if (i < mid) {\n            lst2.push_back(i);\n\
    \        }\n        if (i > mid) {\n            lst2.push_back(i);\n        }\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp_7z2emz7: /tmp/tmp_7z2emz7.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = lst[0];\n    long max_val = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min_val) {\n            min_val = i;\n        } else if (i\
    \ > max_val) {\n            max_val = i;\n        }\n    }\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(max_val);\n    for (long i : lst) {\n        if (i <\
    \ min_val) {\n            sorted_lst.push_back(i);\n        } else if (i > max_val)\
    \ {\n            sorted_lst.push_back(max_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpgoy9_wvr: /tmp/tmpgoy9_wvr.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst[0];\n    long max = lst[0];\n    for (auto i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (auto i : lst) {\n        if (i < min) {\n            i = min;\n    \
    \    }\n        if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp1gjfaz8i: /tmp/tmp1gjfaz8i.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            lst2.push_back(min);\n        } else if (i ==\
    \ max) {\n            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmprbmgci1x: /tmp/tmprbmgci1x.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> temp;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            temp.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            temp.push_back(max);\n\
    \            max = i;\n        }\n    }\n    temp.push_back(min);\n    temp.push_back(max);\n\
    \    return temp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmppb2jmz5f: /tmp/tmppb2jmz5f.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i = min; i <=\
    \ max; i++) {\n        result.push_back(i);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0jfii_3h: /tmp/tmp0jfii_3h.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code goes here\n   \
    \ std::vector<long> res;\n    res.reserve(lst.size());\n    for(long i=0;i<lst.size();i++){\n\
    \        long min=i;\n        long max=i;\n        for(long j=i+1;j<lst.size();j++){\n\
    \            if(lst[i]<lst[j]){\n                min=j;\n            }\n     \
    \       if(lst[i]>lst[j]){\n                max=j;\n            }\n        }\n\
    \        if(min!=i){\n            std::swap(res[min],res[i]);\n        }\n   \
    \     if(max!=i){\n            std::swap(res[max],res[i]);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmppfo9_9t3: /tmp/tmppfo9_9t3.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n   \
    \ res.push_back(min);\n    res.push_back(max);\n    for (long i : lst) {\n   \
    \     if (i < min) res.push_back(i);\n        if (i > max) res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp69__772_: /tmp/tmp69__772_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n \
    \   }\n    res.push_back(min);\n    res.push_back(max);\n    for (long i : lst)\
    \ {\n        if (i < min) res.push_back(i);\n        if (i > max) res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3j0pm9tt: /tmp/tmp3j0pm9tt.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3t_i1r8n: /tmp/tmp3t_i1r8n.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        min = std::min(min, i);\n        max = std::max(max,\
    \ i);\n    }\n    for (auto i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \        } else if (i > max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpu1oo_89_: /tmp/tmpu1oo_89_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long min;\n    long max;\n    for (auto i : lst) {\n        if (i == min) {\n\
    \            min = i;\n        } else if (i == max) {\n            max = i;\n\
    \        } else {\n            res.push_back(min);\n            res.push_back(max);\n\
    \            min = i;\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp_28mhon3: /tmp/tmp_28mhon3.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            res.push_back(min);\n        } else\
    \ if (i == max) {\n            res.push_back(max);\n        } else {\n       \
    \     res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpi4z5l2xs: /tmp/tmpi4z5l2xs.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            lst2.push_back(min);\n            min = i;\n\
    \        } else if (i > max) {\n            lst2.push_back(max);\n           \
    \ max = i;\n        } else {\n            lst2.push_back(i);\n        }\n    }\n\
    \    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp23gu5rpo: /tmp/tmp23gu5rpo.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp8fn8ie7u: /tmp/tmp8fn8ie7u.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    sorted_lst.push_back(lst[0]);\n    sorted_lst.push_back(lst[lst.size()-1]);\n\
    \    for (long i = 2; i < lst.size(); i++) {\n        if (lst[i] < sorted_lst[0])\
    \ {\n            sorted_lst.push_back(lst[i]);\n            sorted_lst.push_back(sorted_lst[0]);\n\
    \            sorted_lst.push_back(sorted_lst[lst.size()-1]);\n        }\n    }\n\
    \    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpkif4emto: /tmp/tmpkif4emto.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > \n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7ouel5o.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph7ouel5o.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmph7ouel5o.cpp:142:16:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  142 |         if\
    \ (i >\n      |            ~   ^\n      |                )\n  143 | }\n      |\
    \ ~               \n/tmp/tmph7ouel5o.cpp:143:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  143 | }\n      | ^\n/tmp/tmph7ouel5o.cpp:144:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  144 | int main() {\n      |            ^\n/tmp/tmph7ouel5o.cpp:155:1: error:\
    \ expected \u2018}\u2019 at end of input\n  155 | }\n      | ^\n/tmp/tmph7ouel5o.cpp:13:60:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmph7ouel5o.cpp:155:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  155 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119310
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpxihbg6q_: /tmp/tmpxihbg6q_.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpghbf24rj: /tmp/tmpghbf24rj.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val\
    \ = lst[0];\n    long max_val = lst[0];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min_val) {\n            min_val = lst[i];\n   \
    \     }\n        if (lst[i] > max_val) {\n            max_val = lst[i];\n    \
    \    }\n    }\n    long mid = (min_val + max_val) / 2;\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    return\
    \ sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp9ou6m9t5: /tmp/tmp9ou6m9t5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpnd4pq_33: /tmp/tmpnd4pq_33.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n\
    \        if (lst[i] < mid) {\n            min = mid;\n        } else {\n     \
    \       max = mid;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        mid = (min + max) / 2;\n        if (lst[i] < mid) {\n           \
    \ result.push_back(mid);\n            min = mid;\n        } else {\n         \
    \   result.push_back(mid);\n            max = mid;\n        }\n    }\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n      \
    \  if (lst[i] < mid) {\n            result.push_back(mid);\n            min =\
    \ mid;\n        } else {\n            result.push_back(mid);\n            max\
    \ = mid;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpmwv98laq: /tmp/tmpmwv98laq.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0bbr4zp6: /tmp/tmp0bbr4zp6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long minValue = *std::min_element(lst.begin(), lst.end());\n  \
    \  long maxValue = *std::max_element(lst.begin(), lst.end());\n    long minIndex\
    \ = std::distance(std::begin(lst), std::find(std::begin(lst), std::end(lst), minValue));\n\
    \    long maxIndex = std::distance(std::begin(lst), std::find(std::begin(lst),\
    \ std::end(lst), maxValue));\n    long temp;\n    for (long i = minIndex; i <=\
    \ maxIndex; i++) {\n        temp = lst[i];\n        std::iter_swap(std::begin(lst),\
    \ std::begin(lst) + i);\n        result.push_back(temp);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpp56p66zu: /tmp/tmpp56p66zu.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119314
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long minValue = *std::min_element(lst.begin(), lst.end());\n    long maxValue\
    \ = *std::max_element(lst.begin(), lst.end());\n    long midValue = minValue +\
    \ (maxValue - minValue) / 2;\n    long midValue2 = midValue + 1;\n    long midValue3\
    \ = midValue + 2;\n    long midValue4 = midValue + 3;\n    long midValue5 = midValue\
    \ + 4;\n    long midValue6 = midValue + 5;\n    long midValue7 = midValue + 6;\n\
    \    long midValue8 = midValue + 7;\n    long midValue9 = midValue + 8;\n    long\
    \ midValue10 = midValue + 9;\n    long midValue11 = midValue + 10;\n    long midValue12\
    \ = midValue + 11;\n    long midValue13 = midValue + 12;\n    long midValue14\
    \ = midValue + 13;\n    long midValue15 = midValue + 14;\n    long midValue16\
    \ = midValue + 15;\n    long midValue17 = midValue + 16;\n    long midValue18\
    \ = midValue + 17;\n    long midValue19 = midValue + 18;\n    long midValue20\
    \ = midValue + 19;\n    long midValue21 = midValue + 20;\n    long midValue22\
    \ = midValue + 21;\n    long midValue23 = midValue + 22;\n    long midValue24\
    \ = midValue + 23;\n    long midValue25 = midValue + 24;\n    long midValue26\
    \ = midValue + 25;\n    long midValue27 = midValue + 26;\n    long midValue28\
    \ = midValue + 27;\n    long midValue29 = midValue + 28;\n    long midValue30\
    \ = midValue + 29;\n    long midValue31 = midValue + 30;\n    long midValue32\
    \ = midValue + 31;\n    long midValue33 = midValue + 32;\n    long midValue34\
    \ = midValue + 33;\n    long midValue35 = midValue + 34;\n    long midValue36\
    \ = midValue + 35;\n    long midValue37 = midValue + 36;\n    long midValue38\
    \ = midValue + 37;\n    long midValue39 = midValue + 38;\n    long midValue40\
    \ = midValue + 39;\n    long midValue41 = midValue + 40;\n    long midValue42\
    \ = mid\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujw4abdn.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpujw4abdn.cpp:58:23: error: \u2018mid\u2019 was not declared\
    \ in this scope\n   58 |     long midValue42 = mid\n      |                  \
    \     ^~~\n/tmp/tmpujw4abdn.cpp:59:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   59 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpxihbg6q_: /tmp/tmpxihbg6q_.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            res.push_back(min);\n\
    \        } else if (i == max) {\n            res.push_back(max);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpujzjwpqt: /tmp/tmpujzjwpqt.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for(long\
    \ i : lst) {\n        if(i<min) {\n            min = i;\n        }\n        if(i>max)\
    \ {\n            max = i;\n        }\n    }\n    for(long i : lst) {\n       \
    \ if(i<min) {\n            min++;\n        }\n        if(i>max) {\n          \
    \  max--;\n        }\n        res.push_back(i);\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpvyde6avc: /tmp/tmpvyde6avc.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp3t_i1r8n: /tmp/tmp3t_i1r8n.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119312
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ long minval = *std::min_element(lst.begin(), lst.end());\n    long maxval =\
    \ *std::max_element(lst.begin(), lst.end());\n    long midval = minval + maxval\
    \ / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval + maxval\
    \ / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval + maxval\
    \ / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval + maxval\
    \ / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval + maxval\
    \ / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 = minval +\
    \ maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13 = minval\
    \ + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15 =\
    \ minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval + \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcwjqrbu9.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcwjqrbu9.cpp:52:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmpcwjqrbu9.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660119314
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> lst2(lst.size());\n    long minval\
    \ = lst[0];\n    long maxval = lst[0];\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] < minval) {\n            minval = lst[i];\n        }\n\
    \        if (lst[i] > maxval) {\n            maxval = lst[i];\n        }\n   \
    \ }\n    long midval = minval;\n    long midval2 = maxval;\n    long midval3 =\
    \ minval;\n    long midval4 = maxval;\n    long midval5 = minval;\n    long midval6\
    \ = maxval;\n    long midval7 = minval;\n    long midval8 = maxval;\n    long\
    \ midval9 = minval;\n    long midval10 = maxval;\n    long midval11 = minval;\n\
    \    long midval12 = maxval;\n    long midval13 = minval;\n    long midval14 =\
    \ maxval;\n    long midval15 = minval;\n    long midval16 = maxval;\n    long\
    \ midval17 = minval;\n    long midval18 = maxval;\n    long midval19 = minval;\n\
    \    long midval20 = maxval;\n    long midval21 = minval;\n    long midval22 =\
    \ maxval;\n    long midval23 = minval;\n    long midval24 = maxval;\n    long\
    \ midval25 = minval;\n    long midval26 = maxval;\n    long midval27 = minval;\n\
    \    long midval28 = maxval;\n    long midval29 = minval;\n    long midval30 =\
    \ maxval;\n    long midval31 = minval;\n    long midval32 = maxval;\n    long\
    \ midval33 = minval;\n    long midval34 = maxval;\n    long midval35 = minval;\n\
    \    long midval36 = maxval;\n    long midval37 = minval;\n    long midval38 =\
    \ maxval;\n    long midval39 = minval;\n    long midval40 = maxval;\n    long\
    \ midval41 = minval;\n    long midval42 = maxval;\n    long midval43 = minval;\n\
    \    long midval44 = maxval;\n    long midval45 = minval;\n    long midval46 =\
    \ maxval;\n    long midval47 = minval;\n    long midval48 = maxval;\n    long\
    \ midval49 = minval;\n    long midval50 = max\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkgpr_vx2.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkgpr_vx2.cpp:77:21: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   77 |     long midval50\
    \ = max\n      |                     ^~~\n      |                     std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpkgpr_vx2.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n/tmp/tmpkgpr_vx2.cpp:78:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   78 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660119314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res(lst);\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp9hbfwumn: /tmp/tmp9hbfwumn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmp0bbr4zp6: /tmp/tmp0bbr4zp6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    // Write your code here\n  \
    \  std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpvd6eame6: /tmp/tmpvd6eame6.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> lst2;\n  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            lst2.push_back(min);\n        } else if (i == max)\
    \ {\n            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpp_m_wdx6: /tmp/tmpp_m_wdx6.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_lst;\n\
    \    long min_val = lst[0];\n    long max_val = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min_val) {\n            min_val = i;\n        }\n       \
    \ if (i > max_val) {\n            max_val = i;\n        }\n    }\n    for (long\
    \ i = min_val; i <= max_val; i++) {\n        sorted_lst.push_back(i);\n    }\n\
    \    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpkdo__yhr: /tmp/tmpkdo__yhr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660119315
