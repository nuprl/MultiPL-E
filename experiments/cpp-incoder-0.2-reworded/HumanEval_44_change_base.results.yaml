language: cpp
name: HumanEval_44_change_base
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpimxhgt64: /tmp/tmpimxhgt64.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpsbrsftz6: /tmp/tmpsbrsftz6.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpimxhgt64: /tmp/tmpimxhgt64.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.push_back((x % base) + '0');\n        x /= base;\n\
    \    }\n    res.push_back('0');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpypu66wje: /tmp/tmpypu66wje.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x % base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpow8ypqaz: /tmp/tmpow8ypqaz.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        ans = std::to_string(n%base)\
    \ + ans;\n        n = n/base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ while (base < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp\
    \ % base) + ans;\n        base++;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpprhzz8lu: /tmp/tmpprhzz8lu.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        long r = n % base;\n\
    \        ans += char(r + '0');\n        n /= base;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmprem0pd5k: /tmp/tmprem0pd5k.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        int digit = n % base;\n\
    \        ans = std::to_string(digit) + ans;\n        n = n / base;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans += digit;\n        temp /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpuvlyx1nr: /tmp/tmpuvlyx1nr.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    long temp = x;\n    while (temp > 0) {\n        temp = temp / base;\n   \
    \     result += std::to_string(temp % base);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpzo8bbx_q: /tmp/tmpzo8bbx_q.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    long rem = x;\n    while (x > 0) {\n      \
    \  rem = rem % base;\n        ans = std::to_string(rem) + ans;\n        temp =\
    \ temp * base + rem;\n        x = x / base;\n    }\n    while (temp > 0) {\n \
    \       ans = std::to_string(temp) + ans;\n        temp = temp / base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpjxg_f97v: /tmp/tmpjxg_f97v.cpp:30: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpsbrsftz6: /tmp/tmpsbrsftz6.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x % base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpow8ypqaz: /tmp/tmpow8ypqaz.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        int digit = n % base;\n\
    \        ans += (char)(digit + '0');\n        n /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp5pkdwb_2: /tmp/tmp5pkdwb_2.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x % base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpimxhgt64: /tmp/tmpimxhgt64.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        int digit = x % base;\n        ans =\
    \ std::to_string(digit) + ans;\n        x = x / base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7k02r8ug: /tmp/tmp7k02r8ug.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7k02r8ug: /tmp/tmp7k02r8ug.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x % base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x != 0) {\n        temp = x % base;\n\
    \        ans += std::to_string(temp);\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpf24iz9mo: /tmp/tmpf24iz9mo.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(base) + std::to_string(rem) + ans;\n \
    \       temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp8xq6zf42: /tmp/tmp8xq6zf42.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans += std::to_string(rem);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp9fuy40rx: /tmp/tmp9fuy40rx.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x != 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    long temp = x;\n    while (temp != 0) {\n        res += (temp % base);\n\
    \        temp /= base;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpz4e4h9r7: /tmp/tmpz4e4h9r7.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    long temp = x;\n    while (temp > 0) {\n        int digit = temp % base;\n\
    \        temp = temp / base;\n        if (digit > 9) {\n            digit = digit\
    \ - 10;\n        }\n        result += digit;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp_ur5onzl: /tmp/tmp_ur5onzl.cpp:27: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        int digit = n % base;\n\
    \        ans += digit;\n        n /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpfuzegnjy: /tmp/tmpfuzegnjy.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    while (x > 0) {\n        long r = x % base;\n        x /= base;\n       \
    \ result += to_string(r);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp305va4ul.cpp: In function \u2018std::string change_base(long int,\
    \ long int)\u2019:\n/tmp/tmp305va4ul.cpp:17:19: error: \u2018to_string\u2019 was\
    \ not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   17 |         result += to_string(r);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp305va4ul.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7k02r8ug: /tmp/tmp7k02r8ug.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpimxhgt64: /tmp/tmpimxhgt64.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x != 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans += digit;\n        temp /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpuvlyx1nr: /tmp/tmpuvlyx1nr.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x % base) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (x % base);\n        x /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpght8tl_w: /tmp/tmpght8tl_w.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpgqvtboju: /tmp/tmpgqvtboju.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x%base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ while (base < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp\
    \ % base) + ans;\n        base++;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpprhzz8lu: /tmp/tmpprhzz8lu.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    long temp;\n    while (x != 0) {\n        temp = x % base;\n        res.push_back(temp\
    \ + '0');\n        x /= base;\n    }\n    res.push_back('0');\n    return res;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp8vnfwtpv: /tmp/tmp8vnfwtpv.cpp:25: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpow8ypqaz: /tmp/tmpow8ypqaz.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp /= base;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x / base) + ans;\n\
    \        x %= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660120544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpow8ypqaz: /tmp/tmpow8ypqaz.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ while (base < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp\
    \ % base) + ans;\n        base++;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpprhzz8lu: /tmp/tmpprhzz8lu.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans += std::to_string(rem);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp9fuy40rx: /tmp/tmp9fuy40rx.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    while (x > 0) {\n        long rem = x % base;\n        x /= base;\n     \
    \   result += to_string(rem);\n    }\n    while (x != 0) {\n        long rem =\
    \ x % base;\n        x /= base;\n        result += to_string(rem) + \"+\";\n \
    \   }\n    if (base == 10) {\n        result += \"0\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0usrfpre.cpp: In function \u2018std::string change_base(long int,\
    \ long int)\u2019:\n/tmp/tmp0usrfpre.cpp:17:19: error: \u2018to_string\u2019 was\
    \ not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   17 |         result += to_string(rem);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0usrfpre.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp0usrfpre.cpp:22:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |         result += to_string(rem) + \"+\";\n      |                \
    \   ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0usrfpre.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.push_back((x % base) + '0');\n        x /= base;\n\
    \    }\n    res.push_back('0');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpypu66wje: /tmp/tmpypu66wje.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpsbrsftz6: /tmp/tmpsbrsftz6.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        ans = std::to_string(n%base)\
    \ + ans;\n        n = n/base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    long tmp = x;\n    while (base > 0) {\n        if (tmp % base == 0) {\n \
    \           res += std::to_string(tmp / base);\n            tmp %= base;\n   \
    \     }\n        base /= 10;\n    }\n    res += std::to_string(tmp);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp947rtp9l: /tmp/tmp947rtp9l.cpp:27: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    temp = x;\n    while (temp != 0) {\n        temp\
    \ = temp / base;\n        ans = std::to_string(temp) + ans;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpj7itqyq3: /tmp/tmpj7itqyq3.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpsbrsftz6: /tmp/tmpsbrsftz6.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x != 0) {\n        res.push_back((x % base) + '0');\n        x /=\
    \ base;\n    }\n    res.push_back('0');\n    return res;\n}\nint main() {\n  \
    \  auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpt0i0gv0e: /tmp/tmpt0i0gv0e.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x % base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    long temp = x;\n    while (temp > 0) {\n  \
    \      temp = temp / base;\n        ans = std::to_string(temp) + ans;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpardqswls.cpp: In function \u2018std::string change_base(long int,\
    \ long int)\u2019:\n/tmp/tmpardqswls.cpp:15:10: error: redeclaration of \u2018\
    long int temp\u2019\n   15 |     long temp = x;\n      |          ^~~~\n/tmp/tmpardqswls.cpp:14:10:\
    \ note: \u2018long int temp\u2019 previously declared here\n   14 |     long temp\
    \ = 0;\n      |          ^~~~\n"
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x%base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7k02r8ug: /tmp/tmp7k02r8ug.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp) + ans;\n        base--;\n    }\n    while (base\
    \ < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpg9m8cy_4: /tmp/tmpg9m8cy_4.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.insert(res.begin(), x % base);\n        x /=\
    \ base;\n    }\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpnqut442s: /tmp/tmpnqut442s.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n   \
    \ assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    while (x != 0) {\n        temp = x % base;\n  \
    \      ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpgqvtboju: /tmp/tmpgqvtboju.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    while (x != 0) {\n        int digit = x % base;\n        x /= base;\n   \
    \     result += std::to_string(digit);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp905enl77: /tmp/tmp905enl77.cpp:24: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        long r = n % base;\n\
    \        ans = std::to_string(r) + ans;\n        n = n / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    temp = x;\n    while (temp != 0) {\n        temp\
    \ = temp / base;\n        ans = std::to_string(temp) + ans;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpj7itqyq3: /tmp/tmpj7itqyq3.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans += std::to_string(rem);\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp__yjq91e: /tmp/tmp__yjq91e.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        long rem = x % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        x = x / base;\n    }\n    while (ans.size() > 0 && ans[ans.size()\
    \ - 1] == '0') {\n        ans.erase(ans.size() - 1);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmptexpvltb: /tmp/tmptexpvltb.cpp:27: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    while (x > 0) {\n        temp = x % base;\n   \
    \     ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ while (base < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp\
    \ % base) + ans;\n        base++;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpprhzz8lu: /tmp/tmpprhzz8lu.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.push_back((x % base) + '0');\n        x /= base;\n\
    \    }\n    res.push_back('0');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpypu66wje: /tmp/tmpypu66wje.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        int rem = x % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7k02r8ug: /tmp/tmp7k02r8ug.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        int r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    long limit = pow(base, x);\n    while (temp\
    \ < limit) {\n        temp = temp + base;\n    }\n    while (temp > 0) {\n   \
    \     ans = ans + std::to_string(temp % base);\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp14z9vuoe: /tmp/tmp14z9vuoe.cpp:27: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    while (x != 0) {\n        temp = x % base;\n  \
    \      ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp) + ans;\n        base--;\n    }\n    while (base\
    \ < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpg9m8cy_4: /tmp/tmpg9m8cy_4.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.insert(res.begin(), x % base);\n        x /=\
    \ base;\n    }\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpnqut442s: /tmp/tmpnqut442s.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    temp = x;\n    while (temp != 0) {\n        ans\
    \ = std::to_string(temp % base) + ans;\n        temp = temp / base;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        int rem = x % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpimxhgt64: /tmp/tmpimxhgt64.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (temp %\
    \ base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpsbrsftz6: /tmp/tmpsbrsftz6.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string result;\n\
    \    while (x > 0) {\n        int rem = x % base;\n        x /= base;\n      \
    \  result.append(1, rem + '0');\n    }\n    while (x != 0) {\n        int rem\
    \ = x % base;\n        x /= base;\n        result.append(1, rem + 'a' - 10);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpodwl7z43: /tmp/tmpodwl7z43.cpp:29: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (x % base);\n        x /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpght8tl_w: /tmp/tmpght8tl_w.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.insert(res.begin(), x % base);\n        x /=\
    \ base;\n    }\n    return res;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpnqut442s: /tmp/tmpnqut442s.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long rem = x % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        temp = temp /\
    \ base;\n        ans = std::to_string(temp) + ans;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpwewe6aq0: /tmp/tmpwewe6aq0.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.push_back((x % base) + '0');\n        x /= base;\n\
    \    }\n    res.push_back('0');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpypu66wje: /tmp/tmpypu66wje.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ while (base < 0) {\n        tmp = tmp * base;\n        ans = std::to_string(tmp\
    \ % base) + ans;\n        base++;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpprhzz8lu: /tmp/tmpprhzz8lu.cpp:29: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int rem = temp\
    \ % base;\n        ans += std::to_string(rem);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpkyxwi6d8: /tmp/tmpkyxwi6d8.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans = std::to_string(digit) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans += digit;\n        temp /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpuvlyx1nr: /tmp/tmpuvlyx1nr.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.push_back((x % base) + '0');\n        x /= base;\n\
    \    }\n    res.push_back('0');\n    res.push_back('\\0');\n    return res;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpwsz6bvwx: /tmp/tmpwsz6bvwx.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        int digit = n % base;\n\
    \        ans = std::to_string(digit) + ans;\n        n = n / base;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    long rem = x;\n    while (x != 0) {\n     \
    \   temp = x % base;\n        ans = std::to_string(temp) + ans;\n        x = x\
    \ / base;\n    }\n    ans = std::to_string(rem) + ans;\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpa8wiers9: /tmp/tmpa8wiers9.cpp:26: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        ans += std::to_string(digit);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmptv5kvbp6: /tmp/tmptv5kvbp6.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x%base) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp;\n    while (x != 0) {\n        temp = x % base;\n  \
    \      ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int rem = temp\
    \ % base;\n        ans = std::to_string(rem) + ans;\n        temp = temp / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    temp = x;\n    while (temp != 0) {\n      \
    \  temp = temp / base;\n        ans = std::to_string(temp) + ans;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpd9n6dmr0: /tmp/tmpd9n6dmr0.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120542
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        long r = n % base;\n\
    \        ans = std::to_string(r) + ans;\n        n = n / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120541
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string res;\n\
    \    while (x > 0) {\n        res.push_back((x % base) + '0');\n        x /= base;\n\
    \    }\n    res.push_back('0');\n    return res;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpypu66wje: /tmp/tmpypu66wje.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        int digit = x % base;\n        ans =\
    \ std::to_string(digit) + ans;\n        x = x / base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans = std::to_string(temp\
    \ % base) + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        long r = n % base;\n\
    \        ans += char(r + '0');\n        n /= base;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmprem0pd5k: /tmp/tmprem0pd5k.cpp:25: int main(): Assertion `candidate((9),
    (3)) == ("100")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = 0;\n    while (x > 0) {\n        temp = x % base;\n\
    \        ans = std::to_string(temp) + ans;\n        x = x / base;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        int digit = temp\
    \ % base;\n        ans += digit;\n        temp /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpuvlyx1nr: /tmp/tmpuvlyx1nr.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpyu3krp9t: /tmp/tmpyu3krp9t.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (char)(x % base);\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpiw_06br5: /tmp/tmpiw_06br5.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long temp = x;\n    while (temp != 0) {\n        ans += (char)(temp\
    \ % base);\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmp7k02r8ug: /tmp/tmp7k02r8ug.cpp:23: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        ans += (x % base);\n        x /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpght8tl_w: /tmp/tmpght8tl_w.cpp:22: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120540
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x > 0) {\n        ans = std::to_string(x / base) + ans;\n\
    \        x %= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660120544
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    while (x != 0) {\n        long r = x % base;\n        ans = std::to_string(r)\
    \ + ans;\n        x = x / base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660120539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n\
    // >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n//\
    \ (\"111\")\nstd::string change_base(long x, long base) {\n    std::string ans\
    \ = \"\";\n    long tmp = x;\n    while (base > 0) {\n        tmp = tmp / base;\n\
    \        ans = std::to_string(tmp % base) + ans;\n        base--;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  status: Exception
  stderr: 'tmpow8ypqaz: /tmp/tmpow8ypqaz.cpp:24: int main(): Assertion `candidate((8),
    (3)) == ("22")'' failed.

    '
  stdout: ''
  timestamp: 1660120539
