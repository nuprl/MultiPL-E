language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for (long long i : x) {\n        ans += i;\n    }\n    long long\
    \ ans2 = 0;\n    for (long long i : x) {\n        ans2 += i;\n    }\n    long\
    \ long ans3 = 0;\n    for (long long i : x) {\n        ans3 += i;\n    }\n   \
    \ long long ans4 = 0;\n    for (long long i : x) {\n        ans4 += i;\n    }\n\
    \    long long ans5 = 0;\n    for (long long i : x) {\n        ans5 += i;\n  \
    \  }\n    long long ans6 = 0;\n    for (long long i : x) {\n        ans6 += i;\n\
    \    }\n    long long ans7 = 0;\n    for (long long i : x) {\n        ans7 +=\
    \ i;\n    }\n    long long ans8 = 0;\n    for (long long i : x) {\n        ans8\
    \ += i;\n    }\n    long long ans9 = 0;\n    for (long long i : x) {\n       \
    \ ans9 += i;\n    }\n    long long ans10 = 0;\n    for (long long i : x) {\n \
    \       ans10 += i;\n    }\n    long long ans11 = 0;\n    for (long long i : x)\
    \ {\n        ans11 += i;\n    }\n    long long ans12 = 0;\n    for (long long\
    \ i : x) {\n        ans12 += i;\n    }\n    long long ans13 = 0;\n    for (long\
    \ long i : x) {\n        ans13 += i;\n    }\n    long long ans14 = 0;\n    for\
    \ (long long i : x) {\n        ans14 += i;\n    }\n    long long ans15 = 0;\n\
    \    for (long long i : x) {\n        ans15 += i;\n    }\n    long long ans16\
    \ = 0;\n    for (long long i : x) {\n        ans16 += i;\n    }\n    long long\
    \ ans17 = 0;\n    for (long long i : x) {\n        ans17 += i;\n    }\n    long\
    \ long ans18 = 0;\n    for (long long i : x) {\n        ans18 += i;\n    }\n \
    \   long long ans19 = 0;\n    for (long long i : x) {\n        ans19 += i;\n \
    \   }\n    long long ans20 = 0;\n    for (long long i : x) {\n        ans20 +=\
    \ i;\n    }\n    long long ans21 = 0;\n    for (long long i : x) {\n        ans21\
    \ += i;\n    }\n    long long ans22 = 0;\n    for (long long i : x) {\n      \
    \  ans22 += i;\n    }\n    long long ans23 = 0;\n    for (long long i : x) {\n\
    \        ans23 += i;\n    }\n\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtqg1y6u.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpxtqg1y6u.cpp:13:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmpxtqg1y6u.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmpxtqg1y6u.cpp:14:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : x) {\n                        ^\n/tmp/tmpxtqg1y6u.cpp:15:13: error:\
    \ no match for 'operator+=' (operand types are 'std::vector<long int>' and 'long\
    \ long int')\n         ans += i;\n             ^\n/tmp/tmpxtqg1y6u.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : x) {\n                        ^\n/tmp/tmpxtqg1y6u.cpp:22:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (long long i\
    \ : x) {\n                        ^\n/tmp/tmpxtqg1y6u.cpp:26:24: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (long long i : x) {\n  \
    \                      ^\n/tmp/tmpxtqg1y6u.cpp:30:24: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n     for (long long i : x) {\n        \
    \                ^\n/tmp/tmpxtqg1y6u.cpp:34:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : x) {\n              \
    \          ^\n/tmp/tmpxtqg1y6u.cpp:38:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpxtqg1y6u.cpp:42:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpxtqg1y6u.cpp:46:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : x) {\n                        ^\n/tmp/tmpxtqg1y6u.cpp:50:24: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (long long i\
    \ : x) {\n                        ^\n/tmp/tmpxtqg1y6u.cpp:54:24: error: range-based\
    \ 'for' loops are not allowed in C++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n     \
    \   }\n    }\n    for(long long i : x){\n        if(sum % i == 0){\n         \
    \   ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp09km0_e.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpp09km0_e.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x){\n                       ^\n\
    /tmp/tmpp09km0_e.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x){\n                       ^\n/tmp/tmpp09km0_e.cpp:22:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : x){\n                       ^\n/tmp/tmpp09km0_e.cpp: In function 'int\
    \ main()':\n/tmp/tmpp09km0_e.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp09km0_e.cpp:2:\n/tmp/tmpp09km0_e.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpp09km0_e.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpp09km0_e.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpp09km0_e.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpp09km0_e.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcou6cgk.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpjcou6cgk.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpjcou6cgk.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpjcou6cgk.cpp:\
    \ In function 'int main()':\n/tmp/tmpjcou6cgk.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcou6cgk.cpp:2:\n/tmp/tmpjcou6cgk.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjcou6cgk.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjcou6cgk.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjcou6cgk.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjcou6cgk.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjcou6cgk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcou6cgk.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpjcou6cgk.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpjcou6cgk.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpjcou6cgk.cpp:\
    \ In function 'int main()':\n/tmp/tmpjcou6cgk.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcou6cgk.cpp:2:\n/tmp/tmpjcou6cgk.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjcou6cgk.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjcou6cgk.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjcou6cgk.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjcou6cgk.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjcou6cgk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    long long\
    \ sum = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        sum += x[i];\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 == 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    for(long long i = 0; i < x.size(); i++) {\n        long long d = x[i]\
    \ % 10;\n        if(d % 2 != 0) {\n            y.push_back(x[i]);\n        }\n\
    \    }\n    \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3oqf1li4.cpp: In function 'int main()':\n/tmp/tmp3oqf1li4.cpp:104:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3oqf1li4.cpp:2:\n/tmp/tmp3oqf1li4.cpp:105:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3oqf1li4.cpp:105:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3oqf1li4.cpp:105:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3oqf1li4.cpp:105:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3oqf1li4.cpp:105:82: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3oqf1li4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n   \
    \         ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n\
    \        sum += i;\n    }\n    for(long long i : ans) {\n        long long d =\
    \ i % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n        if(d % 2 == 0) {\n      \
    \      ans.push_back(i);\n        }\n    }\n    for(long long i : ans) {\n   \
    \     sum += i;\n    }\n    for(long long i : ans) {\n        long long d = i\
    \ % 10;\n        if(d % 2 == 0) {\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long i : ans) {\n        sum += i;\n    }\n    for(long long\
    \ i : ans) {\n        long long d = i % 10;\n\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jdcl_dj.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3jdcl_dj.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x) {\n                       ^\n\
    /tmp/tmp3jdcl_dj.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x) {\n                       ^\n/tmp/tmp3jdcl_dj.cpp:23:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : ans) {\n                       ^\n/tmp/tmp3jdcl_dj.cpp:26:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for(long long i\
    \ : ans) {\n                       ^\n/tmp/tmp3jdcl_dj.cpp:32:23: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(long long i : ans) {\n \
    \                      ^\n/tmp/tmp3jdcl_dj.cpp:35:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n     for(long long i : ans) {\n       \
    \                ^\n/tmp/tmp3jdcl_dj.cpp:41:23: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for(long long i : ans) {\n             \
    \          ^\n/tmp/tmp3jdcl_dj.cpp:44:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : ans) {\n                     \
    \  ^\n/tmp/tmp3jdcl_dj.cpp:50:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for(long long i : ans) {\n                       ^\n/tmp/tmp3jdcl_dj.cpp:53:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : ans) {\n                       ^\n/tmp/tmp3jdcl_dj.cpp:59:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for(long long i\
    \ : ans) {\n                       ^\n/tmp/tmp3jdcl_dj.cpp:62:23: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(long long i : ans) {\n \
    \                      ^\n/tmp/tmp3jdcl_dj.cpp:68:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n     for(long long i : ans) {\n       \
    \                ^\n/tmp/tmp3jdcl_dj.cpp:71:23: error: range-based 'for' loops\
    \ are not allowed in C++98 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            long long tmp = (sum -\
    \ i) / 2;\n            if (tmp % 2 == 0) {\n                ans.push_back(tmp);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pohba9j.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp2pohba9j.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmp2pohba9j.cpp:17:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmp2pohba9j.cpp:\
    \ In function 'int main()':\n/tmp/tmp2pohba9j.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2pohba9j.cpp:2:\n/tmp/tmp2pohba9j.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp2pohba9j.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp2pohba9j.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2pohba9j.cpp:29:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp2pohba9j.cpp:29:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2pohba9j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++)\
    \ {\n        sum += x[i];\n        if(sum % 2 == 0) {\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr79y_eg5.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpr79y_eg5.cpp:13:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmpr79y_eg5.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmpr79y_eg5.cpp: In\
    \ function 'int main()':\n/tmp/tmpr79y_eg5.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr79y_eg5.cpp:2:\n/tmp/tmpr79y_eg5.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpr79y_eg5.cpp:25:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpr79y_eg5.cpp:25:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr79y_eg5.cpp:25:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpr79y_eg5.cpp:25:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpr79y_eg5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vect"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    long long remainder = sum / 10;\n    for (long long i :\
    \ x) {\n        if (i % 10 == mod) {\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kgulpty.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3kgulpty.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmp3kgulpty.cpp:19:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmp3kgulpty.cpp:\
    \ In function 'int main()':\n/tmp/tmp3kgulpty.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kgulpty.cpp:2:\n/tmp/tmp3kgulpty.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3kgulpty.cpp:28:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3kgulpty.cpp:28:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kgulpty.cpp:28:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3kgulpty.cpp:28:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3kgulpty.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (auto i : x) {\n        sum += i;\n\
    \        count += 1;\n    }\n    long long mod = sum % 10;\n    long long remain\
    \ = sum / 10;\n    long long temp;\n    for (auto i : x) {\n        temp = i;\n\
    \        while (temp > 0) {\n            temp = temp % 10;\n            if (temp\
    \ % 2 == 0 && temp != mod) {\n                ans.push_back(i);\n            \
    \    break;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9kjrht0d.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp9kjrht0d.cpp:15:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp9kjrht0d.cpp:19:5: error: expected\
    \ ';' before 'long'\n     long long mod = sum % 10;\n     ^\n/tmp/tmp9kjrht0d.cpp:20:5:\
    \ error: expected primary-expression before 'long'\n     long long remain = sum\
    \ / 10;\n     ^\n/tmp/tmp9kjrht0d.cpp:20:5: error: expected ')' before 'long'\n\
    /tmp/tmp9kjrht0d.cpp:22:15: error: 'i' does not name a type\n     for (auto i\
    \ : x) {\n               ^\n/tmp/tmp9kjrht0d.cpp:32:5: error: expected ';' before\
    \ 'return'\n     return ans;\n     ^\n/tmp/tmp9kjrht0d.cpp:32:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp9kjrht0d.cpp:32:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp9kjrht0d.cpp:32:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp9kjrht0d.cpp:32:5: error: expected ')' before 'return'\n\
    /tmp/tmp9kjrht0d.cpp: In function 'int main()':\n/tmp/tmp9kjrht0d.cpp:35:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = unique_digits;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9kjrht0d.cpp:2:\n/tmp/tmp9kjrht0d.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp9kjrht0d.cpp:36:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp9kjrht0d.cpp:36:82: warning: extended initializer lists only availabl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    long long\
    \ temp;\n    long long sum = 0;\n    for(long long i = 0; i < x.size(); i++) {\n\
    \        temp = x[i];\n        while(temp > 0) {\n            sum += temp % 10;\n\
    \            temp /= 10;\n        }\n        if(sum % 2 != 0) {\n            y.push_back(x[i]);\n\
    \        }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9iqfupbt.cpp: In function 'int main()':\n/tmp/tmp9iqfupbt.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9iqfupbt.cpp:2:\n/tmp/tmp9iqfupbt.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp9iqfupbt.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp9iqfupbt.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9iqfupbt.cpp:29:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp9iqfupbt.cpp:29:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp9iqfupbt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ ans = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        ans = ans *\
    \ 10 + x[i];\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 != 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 != 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 != 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 == 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 != 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 == 0) {\n            ans = ans * 10 + x[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            ans\
    \ = ans * 10 + x[i];\n        }\n    }\n    for(long long i = 0; i < x.size();\
    \ i++) {\n        if(x[i] % 2 == 0) {\n            ans = ans * 10 + x[i];\n  \
    \      }\n    }\n    for(long long i = 0; i < x.size(); i++) {\n        if(x[i]\
    \ % 2 != 0) {\n            ans = an\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszo3p5_f.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpszo3p5_f.cpp:13:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmpszo3p5_f.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmpszo3p5_f.cpp:15:19:\
    \ error: no match for 'operator*' (operand types are 'std::vector<long int>' and\
    \ 'int')\n         ans = ans * 10 + x[i];\n                   ^\n/tmp/tmpszo3p5_f.cpp:15:19:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpszo3p5_f.cpp:2:\n/usr/include/c++/4.8.2/valarray:1169:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__multiplies, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__multiplies, _Tp>::result_type>\
    \ std::operator*(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(*,\
    \ __multiplies)\n ^\n/usr/include/c++/4.8.2/valarray:1169:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpszo3p5_f.cpp:15:21: note: \
    \  mismatched types 'const std::valarray<_Tp>' and 'int'\n         ans = ans *\
    \ 10 + x[i];\n                     ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpszo3p5_f.cpp:2:\n/usr/include/c++/4.8.2/valarray:1169:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__multiplies, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__multiplies, _Tp>::result_type>\
    \ std::operator*(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(*,\
    \ __multiplies)\n ^\n/usr/include/c++/4.8.2/valarray:1169:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpszo3p5_f.cpp:15:21: note: \
    \  'std::vector<long int>' is not derived from 'const std::valarray<_Tp>'\n  \
    \       ans = ans * 10 + x[i];\n                     ^\nIn file included from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:9"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(i % 2 == 0){\n            continue;\n        }\n  \
    \      long long d = sum % 10;\n        if(d != 0){\n            ans.push_back(i);\n\
    \        }\n        sum -= i;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jpxxqnr.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp_jpxxqnr.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x){\n                       ^\n\
    /tmp/tmp_jpxxqnr.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x){\n                       ^\n/tmp/tmp_jpxxqnr.cpp:\
    \ In function 'int main()':\n/tmp/tmp_jpxxqnr.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_jpxxqnr.cpp:2:\n/tmp/tmp_jpxxqnr.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp_jpxxqnr.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp_jpxxqnr.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_jpxxqnr.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp_jpxxqnr.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_jpxxqnr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x) {\n        sum += i;\n    }\n    for(long\
    \ long i : x) {\n        if(i % 2 == 0) {\n            continue;\n        }\n\
    \        long long temp = sum % 10;\n        sum += temp;\n        if(sum > 9)\
    \ {\n            sum -= 10;\n        }\n        ans.push_back(temp);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gnuhrq4.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp9gnuhrq4.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x) {\n                       ^\n\
    /tmp/tmp9gnuhrq4.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x) {\n                       ^\n/tmp/tmp9gnuhrq4.cpp:\
    \ In function 'int main()':\n/tmp/tmp9gnuhrq4.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9gnuhrq4.cpp:2:\n/tmp/tmp9gnuhrq4.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp9gnuhrq4.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp9gnuhrq4.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9gnuhrq4.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp9gnuhrq4.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp9gnuhrq4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (auto i : x) {\n        sum += i;\n    }\n    long long mod\
    \ = sum % 10;\n    for (auto i : x) {\n        if (i % 10 != mod) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbeomcweh.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpbeomcweh.cpp:14:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpbeomcweh.cpp:17:5: error: expected\
    \ ';' before 'long'\n     long long mod = sum % 10;\n     ^\n/tmp/tmpbeomcweh.cpp:18:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : x) {\n \
    \    ^\n/tmp/tmpbeomcweh.cpp:18:5: error: expected ')' before 'for'\n/tmp/tmpbeomcweh.cpp:18:15:\
    \ error: 'i' does not name a type\n     for (auto i : x) {\n               ^\n\
    /tmp/tmpbeomcweh.cpp:23:5: error: expected ';' before 'return'\n     return ans;\n\
    \     ^\n/tmp/tmpbeomcweh.cpp:23:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmpbeomcweh.cpp:23:5: error: expected ';' before 'return'\n/tmp/tmpbeomcweh.cpp:23:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpbeomcweh.cpp:23:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpbeomcweh.cpp: In function 'int\
    \ main()':\n/tmp/tmpbeomcweh.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbeomcweh.cpp:2:\n/tmp/tmpbeomcweh.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbeomcweh.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbeomcweh.cpp:27:82: warning: extended initializer lists only available\
    \ with -std="
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    for (long\
    \ long i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        long long remain = sum % 10;\n        if (remain == i) {\n          \
    \  ans.push_back(i);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1zxlqbr.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpa1zxlqbr.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpa1zxlqbr.cpp:17:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpa1zxlqbr.cpp:\
    \ In function 'int main()':\n/tmp/tmpa1zxlqbr.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa1zxlqbr.cpp:2:\n/tmp/tmpa1zxlqbr.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpa1zxlqbr.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpa1zxlqbr.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpa1zxlqbr.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpa1zxlqbr.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpa1zxlqbr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for(long long i : x){\n        sum += i;\n    }\n    for(long\
    \ long i : x){\n        if(i % 2 == 0){\n            ans.push_back(i);\n     \
    \   }\n    }\n    for(long long i : ans){\n        if(sum % i == 0){\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj615qr_d.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpj615qr_d.cpp:14:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : x){\n                       ^\n\
    /tmp/tmpj615qr_d.cpp:17:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(long long i : x){\n                       ^\n/tmp/tmpj615qr_d.cpp:22:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : ans){\n                       ^\n/tmp/tmpj615qr_d.cpp: In function\
    \ 'int main()':\n/tmp/tmpj615qr_d.cpp:30:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = unique_digits;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj615qr_d.cpp:2:\n/tmp/tmpj615qr_d.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpj615qr_d.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpj615qr_d.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj615qr_d.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj615qr_d.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> y;\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : x) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long mod = sum % 10;\n    if (mod\
    \ == 0) {\n        y.push_back(0);\n    } else {\n        y.push_back(mod);\n\
    \    }\n    for (long long i : x) {\n        long long temp = (sum - i) % 10;\n\
    \        if (temp == 0) {\n            y.push_back(0);\n        } else {\n   \
    \         y.push_back(temp);\n        }\n    }\n    std::sort(y.begin(), y.end());\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplmgjxwrm.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmplmgjxwrm.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmplmgjxwrm.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmplmgjxwrm.cpp:\
    \ In function 'int main()':\n/tmp/tmplmgjxwrm.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplmgjxwrm.cpp:2:\n/tmp/tmplmgjxwrm.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmplmgjxwrm.cpp:38:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmplmgjxwrm.cpp:38:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplmgjxwrm.cpp:38:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplmgjxwrm.cpp:38:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplmgjxwrm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    for (long long i : x) {\n        if (i % 10 != mod) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcou6cgk.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpjcou6cgk.cpp:14:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : x) {\n                      \
    \  ^\n/tmp/tmpjcou6cgk.cpp:18:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : x) {\n                        ^\n/tmp/tmpjcou6cgk.cpp:\
    \ In function 'int main()':\n/tmp/tmpjcou6cgk.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = unique_digits;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcou6cgk.cpp:2:\n/tmp/tmpjcou6cgk.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjcou6cgk.cpp:27:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjcou6cgk.cpp:27:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjcou6cgk.cpp:27:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjcou6cgk.cpp:27:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjcou6cgk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    long long ans = 0;\n    long long digit = 0;\n    long long count\
    \ = 0;\n    long long i = 0;\n    long long j = 0;\n    long long k = 0;\n   \
    \ long long l = x.size();\n    long long m = 1;\n    long long n = 1;\n    long\
    \ long p = 0;\n    long long q = 0;\n    long long r = 0;\n    long long s = 0;\n\
    \    long long t = 0;\n    long long u = 0;\n    long long v = 0;\n    long long\
    \ w = 0;\n    long long x = 0;\n    long long y = 0;\n    long long z = 0;\n \
    \   long long aa = 0;\n    long long bb = 0;\n    long long cc = 0;\n    long\
    \ long dd = 0;\n    long long ee = 0;\n    long long ff = 0;\n    long long gg\
    \ = 0;\n    long long hh = 0;\n    long long ii = 0;\n    long long jj = 0;\n\
    \    long long kk = 0;\n    long long ll = 0;\n    long long mm = 0;\n    long\
    \ long nn = 0;\n    long long oo = 0;\n    long long pp = 0;\n    long long qq\
    \ = 0;\n    long long rr = 0;\n    long long ss = 0;\n    long long tt = 0;\n\
    \    long long uu = 0;\n    long long vv = 0;\n    long long ww = 0;\n    long\
    \ long xx = 0;\n    long long yy = 0;\n    long long zz = 0;\n    long long aaa\
    \ = 0;\n    long long bbb = 0;\n    long long ccc = 0;\n    long long ddd = 0;\n\
    \    long long eee = 0;\n    long long fff = 0;\n    long long ggg = 0;\n    long\
    \ long hhh = 0;\n    long long iii = 0;\n    long long jjj = 0;\n    long long\
    \ kkk = 0;\n    long long lll = 0;\n    long long mmm = 0;\n    long long nnn\
    \ = 0;\n    long long oooo = 0;\n    long long ppp = 0;\n    long long qqq = 0;\n\
    \    long long rrr = 0;\n    long long sss = 0;\n    long long ttt = 0;\n    long\
    \ long uuu = 0;\n    long long vvv = 0;\n    long long www = 0;\n    long long\
    \ xxx = 0;\n    long long yyy = 0;\n    long long zzz = 0;\n    long long aaaa\
    \ = 0;\n    long long bbbb = 0;\n    long long cccc = 0;\n    long long dddd =\
    \ 0;\n    long long eeee = 0;\n    long long ffff = 0;\n    long long gggg = 0;\n\
    \    long long hhhh = 0;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0sqgm0lx.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp0sqgm0lx.cpp:14:15: error: conflicting declaration 'long long\
    \ int ans'\n     long long ans = 0;\n               ^\n/tmp/tmp0sqgm0lx.cpp:12:23:\
    \ error: 'ans' has a previous declaration as 'std::vector<long int> ans'\n   \
    \  std::vector<long> ans;\n                       ^\n/tmp/tmp0sqgm0lx.cpp:31:15:\
    \ error: declaration of 'long long int x' shadows a parameter\n     long long\
    \ x = 0;\n               ^\n/tmp/tmp0sqgm0lx.cpp: In function 'int main()':\n\
    /tmp/tmp0sqgm0lx.cpp:96:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0sqgm0lx.cpp:2:\n/tmp/tmp0sqgm0lx.cpp:97:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp0sqgm0lx.cpp:97:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp0sqgm0lx.cpp:97:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0sqgm0lx.cpp:97:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp0sqgm0lx.cpp:97:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \             "
  stdout: ''
