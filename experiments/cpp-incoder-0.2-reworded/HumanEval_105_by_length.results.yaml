language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // Find the minimum value\
    \ in the vector\n  long max = *std::max_element(arr.begin(), arr.end()); // Find\
    \ the maximum value in the vector\n  std::vector<long> reversed; // Create a vector\
    \ to hold the reversed values\n  for (long i = min; i <= max; i++) {\n    reversed.push_back(i);\n\
    \  }\n  std::reverse(reversed.begin(), reversed.end()); // Reverse the vector\n\
    \  std::string names[9] = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"};\n  std::vector<std::string> result;\n\
    \  for (long i : reversed) {\n    result.push_back(names[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzcmtykep.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpzcmtykep.cpp:26:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : reversed) {\n  \
    \               ^\n/tmp/tmpzcmtykep.cpp: In function 'int main()':\n/tmp/tmpzcmtykep.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzcmtykep.cpp:2:\n/tmp/tmpzcmtykep.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpzcmtykep.cpp:33:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpzcmtykep.cpp:33:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzcmtykep.cpp:33:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzcmtykep.cpp:33:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 fro"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long max_len = 0, min_len = 0, max_val = 0,\
    \ min_val = 0, cur_val = 0, cur_len = 0;\n  for (long i : arr) {\n    if (cur_len\
    \ == max_len) {\n      res.push_back(std::to_string(min_val));\n      min_len++;\n\
    \      min_val = 0;\n      max_len++;\n    } else if (cur_len == min_len) {\n\
    \      res.push_back(std::to_string(max_val));\n      max_len++;\n      max_val\
    \ = 0;\n      min_len++;\n      min_val = 0;\n    } else if (cur_len > max_len)\
    \ {\n      res.push_back(std::to_string(min_val));\n      min_len++;\n      min_val\
    \ = 0;\n    } else if (cur_len < min_len) {\n      res.push_back(std::to_string(max_val));\n\
    \      max_len++;\n      max_val = 0;\n    }\n    cur_len++;\n    cur_val = i;\n\
    \    if (cur_val > max_val) max_val = cur_val;\n    if (cur_val < min_val) min_val\
    \ = cur_val;\n  }\n  res.push_back(std::to_string(min_val));\n  res.push_back(std::to_string(max_val));\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jizgi6v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2jizgi6v.cpp:19:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmp2jizgi6v.cpp:21:21: error: 'to_string' is not a member of\
    \ 'std'\n       res.push_back(std::to_string(min_val));\n                    \
    \ ^\n/tmp/tmp2jizgi6v.cpp:26:21: error: 'to_string' is not a member of 'std'\n\
    \       res.push_back(std::to_string(max_val));\n                     ^\n/tmp/tmp2jizgi6v.cpp:32:21:\
    \ error: 'to_string' is not a member of 'std'\n       res.push_back(std::to_string(min_val));\n\
    \                     ^\n/tmp/tmp2jizgi6v.cpp:36:21: error: 'to_string' is not\
    \ a member of 'std'\n       res.push_back(std::to_string(max_val));\n        \
    \             ^\n/tmp/tmp2jizgi6v.cpp:45:17: error: 'to_string' is not a member\
    \ of 'std'\n   res.push_back(std::to_string(min_val));\n                 ^\n/tmp/tmp2jizgi6v.cpp:46:17:\
    \ error: 'to_string' is not a member of 'std'\n   res.push_back(std::to_string(max_val));\n\
    \                 ^\n/tmp/tmp2jizgi6v.cpp: In function 'int main()':\n/tmp/tmp2jizgi6v.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2jizgi6v.cpp:2:\n/tmp/tmp2jizgi6v.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2jizgi6v.cpp:51:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = std::numeric_limits<long>::min();\n  long max_val = std::numeric_limits<long>::max();\n\
    \  long min_len = std::numeric_limits<long>::digits;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiw2_ailx.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpiw2_ailx.cpp:21:8: error: redeclaration\
    \ of 'long int min_len'\n   long min_len = std::numeric_limits<long>::digits -\
    \ 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:19:8: error: 'long int min_len' previously\
    \ declared here\n   long min_len = std::numeric_limits<long>::digits;\n      \
    \  ^\n/tmp/tmpiw2_ailx.cpp:22:8: error: redeclaration of 'long int max_len'\n\
    \   long max_len = std::numeric_limits<long>::digits - 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:20:8:\
    \ error: 'long int max_len' previously declared here\n   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:23:8: error: redeclaration of 'long int\
    \ min_len'\n   long min_len = std::numeric_limits<long>::digits - 1;\n       \
    \ ^\n/tmp/tmpiw2_ailx.cpp:19:8: error: 'long int min_len' previously declared\
    \ here\n   long min_len = std::numeric_limits<long>::digits;\n        ^\n/tmp/tmpiw2_ailx.cpp:24:8:\
    \ error: redeclaration of 'long int max_len'\n   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:20:8: error: 'long int max_len' previously\
    \ declared here\n   long max_len = std::numeric_limits<long>::digits - 1;\n  \
    \      ^\n/tmp/tmpiw2_ailx.cpp:25:8: error: redeclaration of 'long int min_len'\n\
    \   long min_len = std::numeric_limits<long>::digits - 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:19:8:\
    \ error: 'long int min_len' previously declared here\n   long min_len = std::numeric_limits<long>::digits;\n\
    \        ^\n/tmp/tmpiw2_ailx.cpp:26:8: error: redeclaration of 'long int max_len'\n\
    \   long max_len = std::numeric_limits<long>::digits - 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:20:8:\
    \ error: 'long int max_len' previously declared here\n   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n        ^\n/tmp/tmpiw2_ailx.cpp:27:8: error: redeclaration of 'long int\
    \ min_len'\n   long min_len = std::numeric_limits<long>::digits - 1;\n       \
    \ ^\n/tmp/tmpiw2_ailx.cpp:19:8: error: 'long int min_len' previously declared\
    \ here\n   long min_len = std::numeric_limits<long>::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string digits = \"One\";\n  for (long i : arr) {\n    digits += \" \"\
    ;\n    digits += std::to_string(i);\n  }\n  return std::vector<std::string>(digits);\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgh1h9f45.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgh1h9f45.cpp:20:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpgh1h9f45.cpp:22:15: error: 'to_string' is not a member of\
    \ 'std'\n     digits += std::to_string(i);\n               ^\n/tmp/tmpgh1h9f45.cpp:24:41:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(std::string&)'\n   return std::vector<std::string>(digits);\n    \
    \                                     ^\n/tmp/tmpgh1h9f45.cpp:24:41: note: candidates\
    \ are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n          \
    \       from /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgh1h9f45.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgh1h9f45.cpp:24:41:\
    \ note:   candidate expects 3 arguments, 1 provided\n   return std::vector<std::string>(digits);\n\
    \                                         ^\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgh1h9f45.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:310:7:\
    \ note: std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with\
    \ _Tp = std::basic_string<char>; _Alloc = std::allocator<std::basic_string<char>\
    \ >]\n       vector(const vector& __x)\n       ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:310:7:\
    \ note:   no known conversion for argument 1 from 'std::string {aka std::basic_string<char>}'\
    \ to 'const std::vector<std::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_len = 0, min_len = std::numeric_limits<long>::max();\n  for (auto\
    \ i : arr) max_len = std::max(max_len, i);\n  for (auto i : arr) min_len = std::min(min_len,\
    \ i);\n  std::vector<std::string> res;\n  for (long i = min_len; i <= max_len;\
    \ ++i) {\n    std::string name;\n    if (i < 10) {\n      name = \"One\";\n  \
    \  } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n   \
    \   name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n    }\
    \ else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n     \
    \ name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    } else\
    \ if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n      name\
    \ = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprukuhb4z.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmprukuhb4z.cpp:18:13: error: 'i'\
    \ does not name a type\n   for (auto i : arr) max_len = std::max(max_len, i);\n\
    \             ^\n/tmp/tmprukuhb4z.cpp:19:3: error: expected ';' before 'for'\n\
    \   for (auto i : arr) min_len = std::min(min_len, i);\n   ^\n/tmp/tmprukuhb4z.cpp:19:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmprukuhb4z.cpp:19:3:\
    \ error: expected ';' before 'for'\n/tmp/tmprukuhb4z.cpp:19:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmprukuhb4z.cpp:19:3: error: expected\
    \ ')' before 'for'\n/tmp/tmprukuhb4z.cpp:19:13: error: 'i' does not name a type\n\
    \   for (auto i : arr) min_len = std::min(min_len, i);\n             ^\n/tmp/tmprukuhb4z.cpp:20:3:\
    \ error: expected ';' before 'std'\n   std::vector<std::string> res;\n   ^\n/tmp/tmprukuhb4z.cpp:20:28:\
    \ error: expected primary-expression before 'res'\n   std::vector<std::string>\
    \ res;\n                            ^\n/tmp/tmprukuhb4z.cpp:20:28: error: expected\
    \ ';' before 'res'\n/tmp/tmprukuhb4z.cpp:20:28: error: 'res' was not declared\
    \ in this scope\n/tmp/tmprukuhb4z.cpp:20:31: error: expected ')' before ';' token\n\
    \   std::vector<std::string> res;\n                               ^\n/tmp/tmprukuhb4z.cpp:44:5:\
    \ error: 'res' was not declared in this scope\n     res.push_back(name);\n   \
    \  ^\n/tmp/tmprukuhb4z.cpp:46:10: error: 'res' was not declared in this scope\n\
    \   return res;\n          ^\n/tmp/tmprukuhb4z.cpp: In function 'int main()':\n\
    /tmp/tmprukuhb4z.cpp:49:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprukuhb4z.cpp:2:\n/tmp/tmprukuhb4z.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto i : arr) if (i\
    \ < min_val) min_val = i;\n  for (auto i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    std::string name;\n    switch (i) {\n      case 1:\n        name = \"\
    One\";\n        break;\n      case 2:\n        name = \"Two\";\n        break;\n\
    \      case 3:\n        name = \"Three\";\n        break;\n      case 4:\n   \
    \     name = \"Four\";\n        break;\n      case 5:\n        name = \"Five\"\
    ;\n        break;\n      case 6:\n        name = \"Six\";\n        break;\n  \
    \    case 7:\n        name = \"Seven\";\n        break;\n      case 8:\n     \
    \   name = \"Eight\";\n        break;\n      case 9:\n        name = \"Nine\"\
    ;\n        break;\n      default:\n        continue;\n    }\n    res.push_back(name);\n\
    \  }\n  std::reverse(std::begin(res), std::end(res));\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb086m7hi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpb086m7hi.cpp:19:13: error: 'i'\
    \ does not name a type\n   for (auto i : arr) if (i < min_val) min_val = i;\n\
    \             ^\n/tmp/tmpb086m7hi.cpp:20:3: error: expected ';' before 'for'\n\
    \   for (auto i : arr) if (i > max_val) max_val = i;\n   ^\n/tmp/tmpb086m7hi.cpp:20:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpb086m7hi.cpp:20:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpb086m7hi.cpp:20:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpb086m7hi.cpp:20:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpb086m7hi.cpp:20:13: error: 'i' does not name a type\n\
    \   for (auto i : arr) if (i > max_val) max_val = i;\n             ^\n/tmp/tmpb086m7hi.cpp:21:3:\
    \ error: expected ';' before 'std'\n   std::vector<std::string> res;\n   ^\n/tmp/tmpb086m7hi.cpp:21:28:\
    \ error: expected primary-expression before 'res'\n   std::vector<std::string>\
    \ res;\n                            ^\n/tmp/tmpb086m7hi.cpp:21:28: error: expected\
    \ ';' before 'res'\n/tmp/tmpb086m7hi.cpp:21:28: error: 'res' was not declared\
    \ in this scope\n/tmp/tmpb086m7hi.cpp:21:31: error: expected ')' before ';' token\n\
    \   std::vector<std::string> res;\n                               ^\n/tmp/tmpb086m7hi.cpp:55:5:\
    \ error: 'res' was not declared in this scope\n     res.push_back(name);\n   \
    \  ^\n/tmp/tmpb086m7hi.cpp:57:16: error: 'begin' is not a member of 'std'\n  \
    \ std::reverse(std::begin(res), std::end(res));\n                ^\n/tmp/tmpb086m7hi.cpp:57:27:\
    \ error: 'res' was not declared in this scope\n   std::reverse(std::begin(res),\
    \ std::end(res));\n                           ^\n/tmp/tmpb086m7hi.cpp:57:33: error:\
    \ 'end' is not a member of 'std'\n   std::reverse(std::begin(res), std::end(res));\n\
    \                                 ^\n/tmp/tmpb086m7hi.cpp: In function 'int main()':\n\
    /tmp/tmpb086m7hi.cpp:61:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) if (i\
    \ < min_val) min_val = i;\n  for (long i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\";\n\
    \    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n \
    \     name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n  \
    \  } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n  \
    \    name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    }\
    \ else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n    \
    \  name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpezr2f3z0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpezr2f3z0.cpp:19:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) if (i < min_val)\
    \ min_val = i;\n                 ^\n/tmp/tmpezr2f3z0.cpp:20:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) if (i > max_val)\
    \ max_val = i;\n                 ^\n/tmp/tmpezr2f3z0.cpp: In function 'int main()':\n\
    /tmp/tmpezr2f3z0.cpp:50:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpezr2f3z0.cpp:2:\n/tmp/tmpezr2f3z0.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpezr2f3z0.cpp:51:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpezr2f3z0.cpp:51:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpezr2f3z0.cpp:51:113: error: no matching function\
    \ for call to 'std::vector<"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_val = *std::max_element(arr.begin(), arr.end());\n  std::vector<long>\
    \ reversed;\n  for (long i : arr) {\n    if (i <= max_val) reversed.push_back(i);\n\
    \  }\n  reversed.push_back(max_val);\n  reversed.insert(reversed.begin(), max_val\
    \ + 1);\n  reversed.insert(reversed.end(), arr.begin(), arr.end());\n  std::vector<std::string>\
    \ result;\n  for (long i : reversed) {\n    std::string name;\n    if (i <= 9)\
    \ name = \"One\";\n    else if (i <= 99) name = \"Two\";\n    else if (i <= 999)\
    \ name = \"Three\";\n    else if (i <= 9999) name = \"Four\";\n    else if (i\
    \ <= 99999) name = \"Five\";\n    else if (i <= 999999) name = \"Six\";\n    else\
    \ if (i <= 9999999) name = \"Seven\";\n    else if (i <= 999999999) name = \"\
    Eight\";\n    else if (i <= 99999999) name = \"Nine\";\n    else name = \"?\"\
    ;\n    result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1admfkw2.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp1admfkw2.cpp:19:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmp1admfkw2.cpp:26:17: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n   for (long i : reversed) {\n                 ^\n/tmp/tmp1admfkw2.cpp:\
    \ In function 'int main()':\n/tmp/tmp1admfkw2.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1admfkw2.cpp:2:\n/tmp/tmp1admfkw2.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp1admfkw2.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp1admfkw2.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1admfkw2.cpp:44:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long mid = (min + max) / 2;\n  std::vector<std::string> result;\n\
    \  while (min <= max) {\n    long mid = (min + max) / 2;\n    if (arr[mid] ==\
    \ mid) result.push_back(names[mid]);\n    else if (arr[mid] < mid) min = mid +\
    \ 1;\n    else max = mid - 1;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjtu93xa.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpnjtu93xa.cpp:23:43: error: 'names'\
    \ was not declared in this scope\n     if (arr[mid] == mid) result.push_back(names[mid]);\n\
    \                                           ^\n/tmp/tmpnjtu93xa.cpp: In function\
    \ 'int main()':\n/tmp/tmpnjtu93xa.cpp:30:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnjtu93xa.cpp:2:\n/tmp/tmpnjtu93xa.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpnjtu93xa.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpnjtu93xa.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnjtu93xa.cpp:31:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpnjtu93xa.cpp:31:113: note: candidates are:\nIn file included from /usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = std::to_string(i).substr(0, 1);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnh2n0fuk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpnh2n0fuk.cpp:18:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpnh2n0fuk.cpp:20:34: error: 'to_string' is not a member of\
    \ 'std'\n       res.push_back((std::string)std::to_string(i));\n             \
    \                     ^\n/tmp/tmpnh2n0fuk.cpp:23:16: error: 'begin' is not a member\
    \ of 'std'\n   std::reverse(std::begin(res), std::end(res));\n               \
    \ ^\n/tmp/tmpnh2n0fuk.cpp:23:33: error: 'end' is not a member of 'std'\n   std::reverse(std::begin(res),\
    \ std::end(res));\n                                 ^\n/tmp/tmpnh2n0fuk.cpp:24:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : res) {\n              ^\n/tmp/tmpnh2n0fuk.cpp:24:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : res) {\n      \
    \            ^\n/tmp/tmpnh2n0fuk.cpp:25:9: error: 'to_string' is not a member\
    \ of 'std'\n     i = std::to_string(i).substr(0, 1);\n         ^\n/tmp/tmpnh2n0fuk.cpp:\
    \ In function 'int main()':\n/tmp/tmpnh2n0fuk.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnh2n0fuk.cpp:2:\n/tmp/tmpnh2n0fuk.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpnh2n0fuk.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by d"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long length = arr.size();\n  long\
    \ max_value = 9 * length;\n  long min_value = 1;\n  long mid = max_value / 2;\n\
    \  while (min_value <= max_value) {\n    long mid = max_value / 2;\n    long mid2\
    \ = mid + 1;\n    if (arr[mid] >= min_value && arr[mid2] <= max_value) {\n   \
    \   result.push_back(to_string(arr[mid]));\n      result.push_back(to_string(arr[mid2]));\n\
    \      min_value = mid + 1;\n      mid = mid2;\n    } else {\n      mid = mid2;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5hp2bgc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpw5hp2bgc.cpp:28:42: error: 'to_string'\
    \ was not declared in this scope\n       result.push_back(to_string(arr[mid]));\n\
    \                                          ^\n/tmp/tmpw5hp2bgc.cpp: In function\
    \ 'int main()':\n/tmp/tmpw5hp2bgc.cpp:39:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5hp2bgc.cpp:2:\n/tmp/tmpw5hp2bgc.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpw5hp2bgc.cpp:40:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpw5hp2bgc.cpp:40:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5hp2bgc.cpp:40:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5hp2bgc.cpp:40:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long temp;\n  for (auto it = arr.begin();\
    \ it != arr.end(); ++it) {\n    temp = *it;\n    if (temp > 9) {\n      res.push_back((std::string)temp);\n\
    \    } else {\n      res.push_back((std::string)by_length(std::vector<long>({temp\
    \ - 1, temp + 1})));\n    }\n  }\n  std::reverse(arr.begin(), arr.end());\n  for\
    \ (auto it = arr.begin(); it != arr.end(); ++it) {\n    temp = *it;\n    if (temp\
    \ > 9) {\n      res.push_back((std::string)temp);\n    } else {\n      res.push_back((std::string)by_length(std::vector<long>({temp\
    \ - 1, temp + 1})));\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1nyhnpqz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp1nyhnpqz.cpp:21:13: error: 'it'\
    \ does not name a type\n   for (auto it = arr.begin(); it != arr.end(); ++it)\
    \ {\n             ^\n/tmp/tmp1nyhnpqz.cpp:21:31: error: expected ';' before 'it'\n\
    \   for (auto it = arr.begin(); it != arr.end(); ++it) {\n                   \
    \            ^\n/tmp/tmp1nyhnpqz.cpp:21:31: error: 'it' was not declared in this\
    \ scope\n/tmp/tmp1nyhnpqz.cpp:24:34: error: invalid conversion from 'long int'\
    \ to 'const char*' [-fpermissive]\n       res.push_back((std::string)temp);\n\
    \                                  ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp1nyhnpqz.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmp1nyhnpqz.cpp:26:61: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \       res.push_back((std::string)by_length(std::vector<long>({temp - 1, temp\
    \ + 1})));\n                                                             ^\n/tmp/tmp1nyhnpqz.cpp:26:82:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n       res.push_back((std::string)by_length(std::vector<long>({temp\
    \ - 1, temp + 1})));\n                                                       \
    \                           ^\n/tmp/tmp1nyhnpqz.cpp:26:82: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1nyhnpqz.cpp:26:83: error: no matching function for call to 'std::basic_string<char>::basic_string(std::vector<"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max = *std::max_element(arr.begin(), arr.end());\n  std::vector<std::string>\
    \ res;\n  for (long i = 1; i <= max; i++) {\n    long index = i;\n    while (index\
    \ > 0) {\n      index *= 10;\n      res.push_back(to_string(index));\n    }\n\
    \  }\n  std::reverse(arr.begin(), arr.end());\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    arr[i] = arr[i] - 1;\n  }\n  for (long i = 0; i < arr.size(); i++)\
    \ {\n    arr[i] = to_string(arr[i]);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0sw90ex.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmph0sw90ex.cpp:23:36: error: 'to_string'\
    \ was not declared in this scope\n       res.push_back(to_string(index));\n  \
    \                                  ^\n/tmp/tmph0sw90ex.cpp:31:30: error: 'to_string'\
    \ was not declared in this scope\n     arr[i] = to_string(arr[i]);\n         \
    \                     ^\n/tmp/tmph0sw90ex.cpp: In function 'int main()':\n/tmp/tmph0sw90ex.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0sw90ex.cpp:2:\n/tmp/tmph0sw90ex.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmph0sw90ex.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmph0sw90ex.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph0sw90ex.cpp:37:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<br"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n  long min = *std::min_element(arr.begin(), arr.end()) + 1;\n\
    \  for (long i = min; i <= max; i++) {\n    std::string name;\n    switch (i)\
    \ {\n      case 1:\n        name = \"One\";\n        break;\n      case 2:\n \
    \       name = \"Two\";\n        break;\n      case 3:\n        name = \"Three\"\
    ;\n        break;\n      case 4:\n        name = \"Four\";\n        break;\n \
    \     case 5:\n        name = \"Five\";\n        break;\n      case 6:\n     \
    \   name = \"Six\";\n        break;\n      case 7:\n        name = \"Seven\";\n\
    \        break;\n      case 8:\n        name = \"Eight\";\n        break;\n  \
    \    case 9:\n        name = \"Nine\";\n        break;\n      default:\n     \
    \   continue;\n    }\n    res.push_back(name);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03pdo2am.cpp: In function 'int main()':\n/tmp/tmp03pdo2am.cpp:58:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp03pdo2am.cpp:2:\n/tmp/tmp03pdo2am.cpp:59:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp03pdo2am.cpp:59:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp03pdo2am.cpp:59:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp03pdo2am.cpp:59:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp03pdo2am.cpp:59:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp03pdo2am.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long curr = arr[0];\n  long prev = arr[0];\n\
    \  for (long i : arr) {\n    if (i > curr) {\n      res.push_back(to_string(prev));\n\
    \      curr = i;\n      prev = i;\n    } else if (i == curr) {\n      prev = i;\n\
    \    }\n  }\n  res.push_back(to_string(prev));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2rg8udq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpm2rg8udq.cpp:20:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpm2rg8udq.cpp:22:35: error: 'to_string' was not declared\
    \ in this scope\n       res.push_back(to_string(prev));\n                    \
    \               ^\n/tmp/tmpm2rg8udq.cpp:29:31: error: 'to_string' was not declared\
    \ in this scope\n   res.push_back(to_string(prev));\n                        \
    \       ^\n/tmp/tmpm2rg8udq.cpp: In function 'int main()':\n/tmp/tmpm2rg8udq.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm2rg8udq.cpp:2:\n/tmp/tmpm2rg8udq.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpm2rg8udq.cpp:34:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpm2rg8udq.cpp:34:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    result.push_back(name);\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwb2q9va7.cpp: In function 'int main()':\n/tmp/tmpwb2q9va7.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwb2q9va7.cpp:2:\n/tmp/tmpwb2q9va7.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpwb2q9va7.cpp:50:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpwb2q9va7.cpp:50:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwb2q9va7.cpp:50:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwb2q9va7.cpp:50:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwb2q9va7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    if (min > 9) {\n        min = 9; // ignore the strange numbers\n\
    \    }\n    if (max < 9) {\n        max = 9;\n    }\n    long mid = (min + max)\
    \ / 2;\n    std::vector<std::string> temp;\n    for (long i = min; i <= max; i++)\
    \ {\n        temp.push_back(std::to_string(i));\n    }\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (long i = min; i <= max; i++) {\n        std::string name\
    \ = \"\";\n        if (i < 10) {\n            name = \"One\";\n        } else\
    \ if (i < 20) {\n            name = \"Two\";\n        } else if (i < 30) {\n \
    \           name = \"Three\";\n        } else if (i < 40) {\n            name\
    \ = \"Four\";\n        } else if (i < 50) {\n            name = \"Five\";\n  \
    \      } else if (i < 60) {\n            name = \"Six\";\n        } else if (i\
    \ < 70) {\n            name = \"Seven\";\n        } else if (i < 80) {\n     \
    \       name = \"Eight\";\n        } else if (i < 90) {\n            name = \"\
    Nine\";\n        }\n        std::string temp = name;\n        temp += temp;\n\
    \        temp.erase(temp.begin() + temp.size() - 1);\n        res.push_back(temp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rj0af3d.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp1rj0af3d.cpp:22:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (long i : arr) {\n     \
    \              ^\n/tmp/tmp1rj0af3d.cpp:38:24: error: 'to_string' is not a member\
    \ of 'std'\n         temp.push_back(std::to_string(i));\n                    \
    \    ^\n/tmp/tmp1rj0af3d.cpp: In function 'int main()':\n/tmp/tmp1rj0af3d.cpp:70:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1rj0af3d.cpp:2:\n/tmp/tmp1rj0af3d.cpp:71:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp1rj0af3d.cpp:71:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp1rj0af3d.cpp:71:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1rj0af3d.cpp:71:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initiali"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = std::to_string(i + 1);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8v5cpbl.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj8v5cpbl.cpp:18:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpj8v5cpbl.cpp:20:24: error: 'to_string' is not a member of\
    \ 'std'\n       result.push_back(std::to_string(i));\n                       \
    \ ^\n/tmp/tmpj8v5cpbl.cpp:24:14: error: ISO C++ forbids declaration of 'i' with\
    \ no type [-fpermissive]\n   for (auto &i : result) {\n              ^\n/tmp/tmpj8v5cpbl.cpp:24:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n   for (auto &i\
    \ : result) {\n                  ^\n/tmp/tmpj8v5cpbl.cpp:25:9: error: 'to_string'\
    \ is not a member of 'std'\n     i = std::to_string(i + 1);\n         ^\n/tmp/tmpj8v5cpbl.cpp:\
    \ In function 'int main()':\n/tmp/tmpj8v5cpbl.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj8v5cpbl.cpp:2:\n/tmp/tmpj8v5cpbl.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj8v5cpbl.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = lookup(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpie7kulv3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpie7kulv3.cpp:21:51: error: 'to_string'\
    \ was not declared in this scope\n     result.push_back(to_string(static_cast<int>(i)));\n\
    \                                                   ^\n/tmp/tmpie7kulv3.cpp:24:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : result) {\n              ^\n/tmp/tmpie7kulv3.cpp:24:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : result) {\n   \
    \               ^\n/tmp/tmpie7kulv3.cpp:25:17: error: 'lookup' was not declared\
    \ in this scope\n     i = lookup(i);\n                 ^\n/tmp/tmpie7kulv3.cpp:\
    \ In function 'int main()':\n/tmp/tmpie7kulv3.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpie7kulv3.cpp:2:\n/tmp/tmpie7kulv3.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpie7kulv3.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \      "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long long max = 0;\n  for (long long\
    \ i : arr) {\n    if (i > max) {\n      max = i;\n    }\n  }\n  for (long long\
    \ i : arr) {\n    if (i <= max) {\n      res.push_back(to_string(i - max));\n\
    \    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n  for (auto &i :\
    \ res) {\n    i = to_string(std::count(res.begin(), res.end(), i) - 1);\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5dr0cn0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpg5dr0cn0.cpp:21:22: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long long i : arr) {\n  \
    \                    ^\n/tmp/tmpg5dr0cn0.cpp:26:22: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n   for (long long i : arr) {\n              \
    \        ^\n/tmp/tmpg5dr0cn0.cpp:28:38: error: 'to_string' was not declared in\
    \ this scope\n       res.push_back(to_string(i - max));\n                    \
    \                  ^\n/tmp/tmpg5dr0cn0.cpp:31:16: error: 'begin' is not a member\
    \ of 'std'\n   std::reverse(std::begin(res), std::end(res));\n               \
    \ ^\n/tmp/tmpg5dr0cn0.cpp:31:33: error: 'end' is not a member of 'std'\n   std::reverse(std::begin(res),\
    \ std::end(res));\n                                 ^\n/tmp/tmpg5dr0cn0.cpp:32:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : res) {\n              ^\n/tmp/tmpg5dr0cn0.cpp:32:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : res) {\n      \
    \            ^\n/tmp/tmpg5dr0cn0.cpp:33:60: error: 'to_string' was not declared\
    \ in this scope\n     i = to_string(std::count(res.begin(), res.end(), i) - 1);\n\
    \                                                            ^\n/tmp/tmpg5dr0cn0.cpp:\
    \ In function 'int main()':\n/tmp/tmpg5dr0cn0.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg5dr0cn0.cpp:2:\n/tmp/tmpg5dr0cn0.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", ("
  stdout: ''
