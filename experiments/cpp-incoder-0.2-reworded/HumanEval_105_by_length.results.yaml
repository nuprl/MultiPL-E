language: cpp
name: HumanEval_105_by_length
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // Find the minimum value\
    \ in the vector\n  long max = *std::max_element(arr.begin(), arr.end()); // Find\
    \ the maximum value in the vector\n  std::vector<long> reversed; // Create a vector\
    \ to hold the reversed values\n  for (long i = min; i <= max; i++) {\n    reversed.push_back(i);\n\
    \  }\n  std::reverse(reversed.begin(), reversed.end()); // Reverse the vector\n\
    \  std::string names[9] = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"};\n  std::vector<std::string> result;\n\
    \  for (long i : reversed) {\n    result.push_back(names[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpwancq13o: /tmp/tmpwancq13o.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long max_len = 0, min_len = 0, max_val = 0,\
    \ min_val = 0, cur_val = 0, cur_len = 0;\n  for (long i : arr) {\n    if (cur_len\
    \ == max_len) {\n      res.push_back(std::to_string(min_val));\n      min_len++;\n\
    \      min_val = 0;\n      max_len++;\n    } else if (cur_len == min_len) {\n\
    \      res.push_back(std::to_string(max_val));\n      max_len++;\n      max_val\
    \ = 0;\n      min_len++;\n      min_val = 0;\n    } else if (cur_len > max_len)\
    \ {\n      res.push_back(std::to_string(min_val));\n      min_len++;\n      min_val\
    \ = 0;\n    } else if (cur_len < min_len) {\n      res.push_back(std::to_string(max_val));\n\
    \      max_len++;\n      max_val = 0;\n    }\n    cur_len++;\n    cur_val = i;\n\
    \    if (cur_val > max_val) max_val = cur_val;\n    if (cur_val < min_val) min_val\
    \ = cur_val;\n  }\n  res.push_back(std::to_string(min_val));\n  res.push_back(std::to_string(max_val));\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp87yy8t9g: /tmp/tmp87yy8t9g.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = std::numeric_limits<long>::min();\n  long max_val = std::numeric_limits<long>::max();\n\
    \  long min_len = std::numeric_limits<long>::digits;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long max_len = std::numeric_limits<long>::digits - 1;\n  long min_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n  long min_len = std::numeric_limits<long>::digits - 1;\n  long max_len\
    \ = std::numeric_limits<long>::digits - 1;\n  long min_\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwag8vdgm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwag8vdgm.cpp:21:8: error:\
    \ redeclaration of \u2018long int min_len\u2019\n   21 |   long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:19:8: note: \u2018long int\
    \ min_len\u2019 previously declared here\n   19 |   long min_len = std::numeric_limits<long>::digits;\n\
    \      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:22:8: error: redeclaration of \u2018\
    long int max_len\u2019\n   22 |   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:20:8: note: \u2018long int\
    \ max_len\u2019 previously declared here\n   20 |   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:23:8: error: redeclaration\
    \ of \u2018long int min_len\u2019\n   23 |   long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:19:8: note: \u2018long int\
    \ min_len\u2019 previously declared here\n   19 |   long min_len = std::numeric_limits<long>::digits;\n\
    \      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:24:8: error: redeclaration of \u2018\
    long int max_len\u2019\n   24 |   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:20:8: note: \u2018long int\
    \ max_len\u2019 previously declared here\n   20 |   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:25:8: error: redeclaration\
    \ of \u2018long int min_len\u2019\n   25 |   long min_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:19:8: note: \u2018long int\
    \ min_len\u2019 previously declared here\n   19 |   long min_len = std::numeric_limits<long>::digits;\n\
    \      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:26:8: error: redeclaration of \u2018\
    long int max_len\u2019\n   26 |   long max_len = std::numeric_limits<long>::digits\
    \ - 1;\n      |        ^~~~~~~\n/tmp/tmpwag8vdgm.cpp:20:8: note: \u2018long int\
    \ max_len\u2019 previously declared here\n   20 |   long max_len = std::numeric_limits<long>::"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string digits = \"One\";\n  for (long i : arr) {\n    digits += \" \"\
    ;\n    digits += std::to_string(i);\n  }\n  return std::vector<std::string>(digits);\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto2ljk53.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpto2ljk53.cpp:24:41: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::vector(std::string&)\u2019\n   24 |   return std::vector<std::string>(digits);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpto2ljk53.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpto2ljk53.cpp:24:41: note:   candidate expects 3 arguments,\
    \ 1 provided\n   24 |   return std::vector<std::string>(digits);\n      |    \
    \                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpto2ljk53.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |    "
  stdout: ''
  timestamp: 1660135822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_len = 0, min_len = std::numeric_limits<long>::max();\n  for (auto\
    \ i : arr) max_len = std::max(max_len, i);\n  for (auto i : arr) min_len = std::min(min_len,\
    \ i);\n  std::vector<std::string> res;\n  for (long i = min_len; i <= max_len;\
    \ ++i) {\n    std::string name;\n    if (i < 10) {\n      name = \"One\";\n  \
    \  } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n   \
    \   name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n    }\
    \ else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n     \
    \ name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    } else\
    \ if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n      name\
    \ = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp49kcw71l: /tmp/tmp49kcw71l.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto i : arr) if (i\
    \ < min_val) min_val = i;\n  for (auto i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    std::string name;\n    switch (i) {\n      case 1:\n        name = \"\
    One\";\n        break;\n      case 2:\n        name = \"Two\";\n        break;\n\
    \      case 3:\n        name = \"Three\";\n        break;\n      case 4:\n   \
    \     name = \"Four\";\n        break;\n      case 5:\n        name = \"Five\"\
    ;\n        break;\n      case 6:\n        name = \"Six\";\n        break;\n  \
    \    case 7:\n        name = \"Seven\";\n        break;\n      case 8:\n     \
    \   name = \"Eight\";\n        break;\n      case 9:\n        name = \"Nine\"\
    ;\n        break;\n      default:\n        continue;\n    }\n    res.push_back(name);\n\
    \  }\n  std::reverse(std::begin(res), std::end(res));\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpv2ah0_0d: /tmp/tmpv2ah0_0d.cpp:62: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) if (i\
    \ < min_val) min_val = i;\n  for (long i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\";\n\
    \    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n \
    \     name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n  \
    \  } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n  \
    \    name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    }\
    \ else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n    \
    \  name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpve9f6h1w: /tmp/tmpve9f6h1w.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_val = *std::max_element(arr.begin(), arr.end());\n  std::vector<long>\
    \ reversed;\n  for (long i : arr) {\n    if (i <= max_val) reversed.push_back(i);\n\
    \  }\n  reversed.push_back(max_val);\n  reversed.insert(reversed.begin(), max_val\
    \ + 1);\n  reversed.insert(reversed.end(), arr.begin(), arr.end());\n  std::vector<std::string>\
    \ result;\n  for (long i : reversed) {\n    std::string name;\n    if (i <= 9)\
    \ name = \"One\";\n    else if (i <= 99) name = \"Two\";\n    else if (i <= 999)\
    \ name = \"Three\";\n    else if (i <= 9999) name = \"Four\";\n    else if (i\
    \ <= 99999) name = \"Five\";\n    else if (i <= 999999) name = \"Six\";\n    else\
    \ if (i <= 9999999) name = \"Seven\";\n    else if (i <= 999999999) name = \"\
    Eight\";\n    else if (i <= 99999999) name = \"Nine\";\n    else name = \"?\"\
    ;\n    result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp6kzvafea: /tmp/tmp6kzvafea.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long mid = (min + max) / 2;\n  std::vector<std::string> result;\n\
    \  while (min <= max) {\n    long mid = (min + max) / 2;\n    if (arr[mid] ==\
    \ mid) result.push_back(names[mid]);\n    else if (arr[mid] < mid) min = mid +\
    \ 1;\n    else max = mid - 1;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt4xh7ska.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpt4xh7ska.cpp:23:43: error:\
    \ \u2018names\u2019 was not declared in this scope\n   23 |     if (arr[mid] ==\
    \ mid) result.push_back(names[mid]);\n      |                                \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = std::to_string(i).substr(0, 1);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dyf2q51.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8dyf2q51.cpp:25:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8dyf2q51.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long length = arr.size();\n  long\
    \ max_value = 9 * length;\n  long min_value = 1;\n  long mid = max_value / 2;\n\
    \  while (min_value <= max_value) {\n    long mid = max_value / 2;\n    long mid2\
    \ = mid + 1;\n    if (arr[mid] >= min_value && arr[mid2] <= max_value) {\n   \
    \   result.push_back(to_string(arr[mid]));\n      result.push_back(to_string(arr[mid2]));\n\
    \      min_value = mid + 1;\n      mid = mid2;\n    } else {\n      mid = mid2;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8s7o23m0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8s7o23m0.cpp:28:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |       result.push_back(to_string(arr[mid]));\n      |             \
    \           ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8s7o23m0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long temp;\n  for (auto it = arr.begin();\
    \ it != arr.end(); ++it) {\n    temp = *it;\n    if (temp > 9) {\n      res.push_back((std::string)temp);\n\
    \    } else {\n      res.push_back((std::string)by_length(std::vector<long>({temp\
    \ - 1, temp + 1})));\n    }\n  }\n  std::reverse(arr.begin(), arr.end());\n  for\
    \ (auto it = arr.begin(); it != arr.end(); ++it) {\n    temp = *it;\n    if (temp\
    \ > 9) {\n      res.push_back((std::string)temp);\n    } else {\n      res.push_back((std::string)by_length(std::vector<long>({temp\
    \ - 1, temp + 1})));\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv38d1m6p.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpv38d1m6p.cpp:24:34: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(long\
    \ int&)\u2019\n   24 |       res.push_back((std::string)temp);\n      |      \
    \                            ^~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv38d1m6p.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpv38d1m6p.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/include/c++/9/bits/basic_string.h:121:8:\
    \   required by substitution of \u2018template<class _CharT, class _Traits, class"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max = *std::max_element(arr.begin(), arr.end());\n  std::vector<std::string>\
    \ res;\n  for (long i = 1; i <= max; i++) {\n    long index = i;\n    while (index\
    \ > 0) {\n      index *= 10;\n      res.push_back(to_string(index));\n    }\n\
    \  }\n  std::reverse(arr.begin(), arr.end());\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    arr[i] = arr[i] - 1;\n  }\n  for (long i = 0; i < arr.size(); i++)\
    \ {\n    arr[i] = to_string(arr[i]);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8uxopbs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpa8uxopbs.cpp:23:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |       res.push_back(to_string(index));\n      |                   \
    \  ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpa8uxopbs.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpa8uxopbs.cpp:31:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |     arr[i] = to_string(arr[i]);\n      |              ^~~~~~~~~\n \
    \     |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpa8uxopbs.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n  long min = *std::min_element(arr.begin(), arr.end()) + 1;\n\
    \  for (long i = min; i <= max; i++) {\n    std::string name;\n    switch (i)\
    \ {\n      case 1:\n        name = \"One\";\n        break;\n      case 2:\n \
    \       name = \"Two\";\n        break;\n      case 3:\n        name = \"Three\"\
    ;\n        break;\n      case 4:\n        name = \"Four\";\n        break;\n \
    \     case 5:\n        name = \"Five\";\n        break;\n      case 6:\n     \
    \   name = \"Six\";\n        break;\n      case 7:\n        name = \"Seven\";\n\
    \        break;\n      case 8:\n        name = \"Eight\";\n        break;\n  \
    \    case 9:\n        name = \"Nine\";\n        break;\n      default:\n     \
    \   continue;\n    }\n    res.push_back(name);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp1najt1m1: /tmp/tmp1najt1m1.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long curr = arr[0];\n  long prev = arr[0];\n\
    \  for (long i : arr) {\n    if (i > curr) {\n      res.push_back(to_string(prev));\n\
    \      curr = i;\n      prev = i;\n    } else if (i == curr) {\n      prev = i;\n\
    \    }\n  }\n  res.push_back(to_string(prev));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1425wx2r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp1425wx2r.cpp:22:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       res.push_back(to_string(prev));\n      |                    \
    \ ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1425wx2r.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp1425wx2r.cpp:29:17: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |   res.push_back(to_string(prev));\n      |                 ^~~~~~~~~\n\
    \      |                 std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1425wx2r.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double "
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    result.push_back(name);\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpmlpgx0o9: /tmp/tmpmlpgx0o9.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    if (min > 9) {\n        min = 9; // ignore the strange numbers\n\
    \    }\n    if (max < 9) {\n        max = 9;\n    }\n    long mid = (min + max)\
    \ / 2;\n    std::vector<std::string> temp;\n    for (long i = min; i <= max; i++)\
    \ {\n        temp.push_back(std::to_string(i));\n    }\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (long i = min; i <= max; i++) {\n        std::string name\
    \ = \"\";\n        if (i < 10) {\n            name = \"One\";\n        } else\
    \ if (i < 20) {\n            name = \"Two\";\n        } else if (i < 30) {\n \
    \           name = \"Three\";\n        } else if (i < 40) {\n            name\
    \ = \"Four\";\n        } else if (i < 50) {\n            name = \"Five\";\n  \
    \      } else if (i < 60) {\n            name = \"Six\";\n        } else if (i\
    \ < 70) {\n            name = \"Seven\";\n        } else if (i < 80) {\n     \
    \       name = \"Eight\";\n        } else if (i < 90) {\n            name = \"\
    Nine\";\n        }\n        std::string temp = name;\n        temp += temp;\n\
    \        temp.erase(temp.begin() + temp.size() - 1);\n        res.push_back(temp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpeb2uds5d: /tmp/tmpeb2uds5d.cpp:71: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = std::to_string(i + 1);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnr_r7jdi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnr_r7jdi.cpp:25:26: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   25 |     i = std::to_string(i + 1);\n      |      \
    \                  ~ ^ ~\n      |                        |   |\n      |      \
    \                  |   int\n      |                        std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnr_r7jdi.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnr_r7jdi.cpp:25:28:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   25 |     i = std::to_string(i + 1);\n      |       \
    \                     ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnr_r7jdi.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterator>::difference_type\
    \ __n,\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = lookup(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpahkqoiom.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpahkqoiom.cpp:21:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     result.push_back(to_string(static_cast<int>(i)));\n      |    \
    \                  ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpahkqoiom.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpahkqoiom.cpp:25:9: error: \u2018\
    lookup\u2019 was not declared in this scope\n   25 |     i = lookup(i);\n    \
    \  |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long long max = 0;\n  for (long long\
    \ i : arr) {\n    if (i > max) {\n      max = i;\n    }\n  }\n  for (long long\
    \ i : arr) {\n    if (i <= max) {\n      res.push_back(to_string(i - max));\n\
    \    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n  for (auto &i :\
    \ res) {\n    i = to_string(std::count(res.begin(), res.end(), i) - 1);\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmymb01zi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpmymb01zi.cpp:28:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |       res.push_back(to_string(i - max));\n      |                 \
    \    ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmymb01zi.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpmymb01zi.cpp:33:9: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   33 |     i = to_string(std::count(res.begin(), res.end(), i) - 1);\n   \
    \   |         ^~~~~~~~~\n      |         std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmymb01zi.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_strin"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  std::vector<std::string> res;\n  for (long\
    \ i : arr) {\n    if (i <= mid) {\n      res.push_back(std::to_string(static_cast<int>(i)));\n\
    \    } else {\n      res.push_back(std::to_string(static_cast<int>(i - 10)));\n\
    \    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n  std::transform(std::begin(res),\
    \ std::end(res), std::begin(res), [](std::string &s) { return std::string(s, \"\
    One\", \"Nine\"); });\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphfdo8uh7.cpp: In lambda function:\n/tmp/tmphfdo8uh7.cpp:29:123:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(std::string&,\
    \ const char [4], const char [5])\u2019\n   29 |   std::transform(std::begin(res),\
    \ std::end(res), std::begin(res), [](std::string &s) { return std::string(s, \"\
    One\", \"Nine\"); });\n      |                                               \
    \                                                                            ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphfdo8uh7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2: note:\
    \ candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphfdo8uh7.cpp:29:123:\
    \ note:   candidate expects 2 arguments, 3 provided\n   29 |   std::transform(std::begin(res),\
    \ std::end(res), std::begin(res), [](std::string &s) { return std::string(s, \"\
    One\", \"Nine\"); });\n      |                                               \
    \                                                                            ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istre"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> reversed;\n  for (long i = min; i <= max; i++)\
    \ {\n    reversed.push_back(i);\n  }\n  std::reverse(reversed.begin(), reversed.end());\n\
    \  std::vector<std::string> names;\n  for (long i : reversed) {\n    std::string\
    \ name;\n    if (i <= 9) {\n      name = \"One\";\n    } else if (i <= 99) {\n\
    \      name = \"Two\";\n    } else if (i <= 999) {\n      name = \"Three\";\n\
    \    } else if (i <= 9999) {\n      name = \"Four\";\n    } else if (i <= 99999)\
    \ {\n      name = \"Five\";\n    } else if (i <= 999999) {\n      name = \"Six\"\
    ;\n    } else if (i <= 9999999) {\n      name = \"Seven\";\n    } else if (i <=\
    \ 999999999) {\n      name = \"Eight\";\n    } else if (i <= 99999999) {\n   \
    \   name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    names.push_back(name);\n\
    \  }\n  return names;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp5yowvvqd: /tmp/tmp5yowvvqd.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long max = std::accumulate(arr.begin(),\
    \ arr.end(), 0);\n  for (long i = 0; i < max; i++) {\n    if (arr[i] < 10) {\n\
    \      res.push_back(std::to_string(arr[i]));\n    } else {\n      res.push_back(by_length(std::vector<long>(arr.begin()\
    \ + i, arr.begin() + i + 1)));\n    }\n  }\n  return res;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzg9otgap.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzg9otgap.cpp:25:87: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   25 |\
    \       res.push_back(by_length(std::vector<long>(arr.begin() + i, arr.begin()\
    \ + i + 1)));\n      |                                                       \
    \                                ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzg9otgap.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vect"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n  long min_val = *std::min_element(arr.begin(), arr.end());\n \
    \ for (long val : arr) {\n    if (val < 1 || val > 9) continue;\n    long diff\
    \ = val - min_val;\n    long rev_diff = max_val - val;\n    long rev_rev_diff\
    \ = max_val - rev_diff;\n    long rev_rev_rev_diff = max_val - rev_rev_diff;\n\
    \    long rev_rev_rev_rev_diff = max_val - rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_diff = max_val\
    \ - rev_rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_rev_diff = max_val\
    \ - rev_rev_rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_rev_rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_rev_rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff;\n    long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff;\n    long\
    \ rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff = max_val - rev_rev_rev_rev_re\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzcc9gju6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzcc9gju6.cpp:34:79: error:\
    \ \u2018rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\u2019 was not declared\
    \ in this scope; did you mean \u2018rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\u2019\
    ?\n   34 |     long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff =\
    \ max_val - rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff;\n      |   \
    \                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \          rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\n/tmp/tmpzcc9gju6.cpp:35:10:\
    \ error: redeclaration of \u2018long int rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\u2019\
    \n   35 |     long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff =\
    \ max_val - rev_rev_rev_rev_re\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzcc9gju6.cpp:34:10: note: \u2018long int rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\u2019\
    \ previously declared here\n   34 |     long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff;\n      | \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzcc9gju6.cpp:35:79:\
    \ error: \u2018rev_rev_rev_rev_re\u2019 was not declared in this scope; did you\
    \ mean \u2018rev_rev_rev_rev_diff\u2019?\n   35 |     long rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_diff\
    \ = max_val - rev_rev_rev_rev_re\n      |                                    \
    \                                           ^~~~~~~~~~~~~~~~~~\n      |      \
    \                                                                         rev_rev_rev_rev_diff\n\
    /tmp/tmpzcc9gju6.cpp:37:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   37 | int main() {\n      |            ^\n/tmp/tmpzcc9gju6.cpp:44:1:\
    \ error: expected \u2018}\u2019 at end of inp"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  long mid2 = mid + 1;\n  long mid3 = mid2\
    \ + 1;\n  long mid4 = mid3 + 1;\n  long mid5 = mid4 + 1;\n  long mid6 = mid5 +\
    \ 1;\n  long mid7 = mid6 + 1;\n  long mid8 = mid7 + 1;\n  long mid9 = mid8 + 1;\n\
    \  long mid10 = mid9 + 1;\n  long mid11 = mid10 + 1;\n  long mid12 = mid11 + 1;\n\
    \  long mid13 = mid12 + 1;\n  long mid14 = mid13 + 1;\n  long mid15 = mid14 +\
    \ 1;\n  long mid16 = mid15 + 1;\n  long mid17 = mid16 + 1;\n  long mid18 = mid17\
    \ + 1;\n  long mid19 = mid18 + 1;\n  long mid20 = mid19 + 1;\n  long mid21 = mid20\
    \ + 1;\n  long mid22 = mid21 + 1;\n  long mid23 = mid22 + 1;\n  long mid24 = mid23\
    \ + 1;\n  long mid25 = mid24 + 1;\n  long mid26 = mid25 + 1;\n  long mid27 = mid26\
    \ + 1;\n  long mid28 = mid27 + 1;\n  long mid29 = mid28 + 1;\n  long mid30 = mid29\
    \ + 1;\n  long mid31 = mid30 + 1;\n  long mid32 = mid31 + 1;\n  long mid33 = mid32\
    \ + 1;\n  long mid34 = mid33 + 1;\n  long mid35 = mid34 + 1;\n  long mid36 = mid35\
    \ + 1;\n  long mid37 = mid36 + 1;\n  long mid38 = mid37 + 1;\n  long mid39 = mid38\
    \ + 1;\n  long mid40 = mid39 + 1;\n  long mid41 = mid40 + 1;\n  long mid42 = mid41\
    \ + 1;\n  long mid43 = mid42 + 1;\n  long mid44 = mid43 + 1;\n  long mid45 = mid44\
    \ + 1;\n  long mid46 = mid45 + 1;\n  long mid47 = mid46 + 1;\n  long mid48 = mid47\
    \ + 1;\n  long mid49 = mid48 + 1;\n  long mid50 = mid49 + 1;\n  long mid51 = mid50\
    \ + 1;\n  long mid52 = mid51 + 1;\n  long mid53 = mid52 + 1;\n  long mid54 = mid53\
    \ + 1;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpnwr0u_2j: /tmp/tmpnwr0u_2j.cpp:76: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  std::string one = \"One\";\n  std::string\
    \ two = \"Two\";\n  std::string three = \"Three\";\n  std::string four = \"Four\"\
    ;\n  std::string five = \"Five\";\n  std::string six = \"Six\";\n  std::string\
    \ seven = \"Seven\";\n  std::string eight = \"Eight\";\n  std::string nine = \"\
    Nine\";\n  std::string ten = \"Ten\";\n  std::string eleven = \"Eleven\";\n  std::string\
    \ twelve = \"Twelve\";\n  std::string thirteen = \"Thirteen\";\n  std::string\
    \ fourteen = \"Fourteen\";\n  std::string fifteen = \"Fifteen\";\n  std::string\
    \ sixteen = \"Sixteen\";\n  std::string seventeen = \"Seventeen\";\n  std::string\
    \ eighteen = \"Eighteen\";\n  std::string nineteen = \"Nineteen\";\n  std::string\
    \ twenty = \"Twenty\";\n  std::string twenty_one = \"Twenty-One\";\n  std::string\
    \ twenty_two = \"Twenty-Two\";\n  std::string twenty_three = \"Twenty-Three\"\
    ;\n  std::string twenty_four = \"Twenty-Four\";\n  std::string twenty_five = \"\
    Twenty-Five\";\n  std::string twenty_six = \"Twenty-Six\";\n  std::string twenty_seven\
    \ = \"Twenty-Seven\";\n  std::string twenty_eight = \"Twenty-Eight\";\n  std::string\
    \ twenty_nine = \"Twenty-Nine\";\n  std::string thirty = \"Thirty\";\n  std::string\
    \ thirty_one = \"Thirty-One\";\n  std::string thirty_two = \"Thirty-Two\";\n \
    \ std::string thirty_three = \"Thirty-Three\";\n  std::string thirty_four = \"\
    Thirty-Four\";\n  std::string thirty_five = \"Thirty-Five\";\n  std::string thirty_six\
    \ = \"Thirty-Six\";\n  std::string thirty_seven = \"Thirty-Seven\";\n  std::string\
    \ thirty_eight = \"Thirty-Eight\";\n  std::string thirty_nine = \"Thirty-Nine\"\
    ;\n  std::string forty = \"Forty\";\n  std::string forty_one = \"Forty-One\";\n\
    \  std::string forty_two = \"Forty-Two\";\n  std::string forty_three = \"Forty-Three\"\
    ;\n  std::string forty_four = \"Forty-Four\";\n  std::string forty_five = \"\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvq76wa5n.cpp:62:28: warning: missing terminating \" character\n\
    \   62 |   std::string forty_five = \"\n      |                            ^\n\
    /tmp/tmpvq76wa5n.cpp:62:28: error: missing terminating \" character\n/tmp/tmpvq76wa5n.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvq76wa5n.cpp:63:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvq76wa5n.cpp:63:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    /tmp/tmpvq76wa5n.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long long num = arr[0];\n  for (long long\
    \ i = 1; i < arr.size(); i++) {\n    if (arr[i] < num) break;\n    num = arr[i];\n\
    \  }\n  long long mod = num % 10;\n  res.push_back(to_string(num / 10));\n  if\
    \ (mod != 0) res.push_back(to_string(mod));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdugqvfvk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpdugqvfvk.cpp:24:17: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |   res.push_back(to_string(num / 10));\n      |                 ^~~~~~~~~\n\
    \      |                 std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdugqvfvk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long max_len = 0, min_len = 0, max_val\
    \ = 0, min_val = 0, max_digit = 0, min_digit = 0;\n  for (long val : arr) {\n\
    \    if (val > max_val) {\n      max_val = val;\n    }\n    if (val < min_val)\
    \ {\n      min_val = val;\n    }\n    if (val > max_digit) {\n      max_digit\
    \ = val;\n    }\n    if (val < min_digit) {\n      min_digit = val;\n    }\n \
    \ }\n  long diff = max_digit - min_digit;\n  if (diff > 0) {\n    result.push_back(to_string(min_digit\
    \ + 1));\n  }\n  if (diff < 0) {\n    result.push_back(to_string(min_digit - 1));\n\
    \  }\n  long diff = max_val - min_val;\n  if (diff > 0) {\n    result.push_back(to_string(min_val\
    \ + 1));\n  }\n  if (diff < 0) {\n    result.push_back(to_string(min_val - 1));\n\
    \  }\n  long diff = max_len - min_len;\n  if (diff > 0) {\n    result.push_back(to_string(min_len\
    \ + 1));\n  }\n  if (diff < 0) {\n    result.push_back(to_string(min_len - 1));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvaepxgu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgvaepxgu.cpp:37:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   37 |     result.push_back(to_string(min_digit + 1));\n      |          \
    \            ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgvaepxgu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpgvaepxgu.cpp:40:22: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   40 |     result.push_back(to_string(min_digit - 1));\n      |          \
    \            ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgvaepxgu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared h"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >=\
    \ 1 && i <= 9) {\n      result.push_back(std::to_string(i));\n    } else {\n \
    \     continue;\n    }\n  }\n  std::reverse(result.begin(), result.end());\n \
    \ for (auto &i : result) {\n    i = std::to_string(i);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplqfdcbxc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmplqfdcbxc.cpp:29:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   29 |     i = std::to_string(i);\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmplqfdcbxc.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/usr/include/c++"
  stdout: ''
  timestamp: 1660135822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string digits = \"One\";\n  for (int i = 0; i < arr.size(); ++i) {\n \
    \   digits = digits[arr[i] - 1] + digits;\n  }\n  std::vector<std::string> res;\n\
    \  res.push_back(digits);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp9ubm6jy1: /tmp/tmp9ubm6jy1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &i : res) {\n    i = std::to_string(i).substr(0,\
    \ 1);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshyx2jzh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpshyx2jzh.cpp:25:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpshyx2jzh.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<long> sorted_arr(arr.begin(), arr.end());\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    std::vector<long> reversed_arr(sorted_arr.rbegin(),\
    \ sorted_arr.rend());\n    std::vector<std::string> result;\n    for (long i :\
    \ reversed_arr) {\n        std::string name;\n        if (i >= 1 && i <= 9) {\n\
    \            name = std::to_string(i - 1);\n        } else if (i == 0) {\n   \
    \         name = std::string(\"Zero\");\n        } else {\n            name =\
    \ \"Unknown\";\n        }\n        result.push_back(name);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpt51kksm9: /tmp/tmpt51kksm9.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // Find the minimum value\
    \ in the array\n  long max = *std::max_element(arr.begin(), arr.end()); // Find\
    \ the maximum value in the array\n  long mid = (min + max) / 2;\n  std::vector<std::string>\
    \ result;\n  while (min < max) {\n    long mid = (min + max) / 2;\n    if (mid\
    \ < 9) {\n      result.push_back(to_string(mid));\n      min = mid + 1;\n    }\
    \ else {\n      max = mid;\n    }\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  for (auto &s : result) {\n    std::string name = to_string(s);\n    std::string\
    \ replace = \"One\";\n    if (name == \"One\") replace = \"Two\";\n    if (name\
    \ == \"Two\") replace = \"Three\";\n    if (name == \"Three\") replace = \"Four\"\
    ;\n    if (name == \"Four\") replace = \"Five\";\n    if (name == \"Five\") replace\
    \ = \"Six\";\n    if (name == \"Six\") replace = \"Seven\";\n    if (name == \"\
    Seven\") replace = \"Eight\";\n    if (name == \"Eight\") replace = \"Nine\";\n\
    \    if (name == \"Nine\") replace = \"Zero\";\n    s = replace;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hhjjf4x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2hhjjf4x.cpp:24:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       result.push_back(to_string(mid));\n      |                  \
    \      ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2hhjjf4x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2hhjjf4x.cpp:32:35: error: no matching\
    \ function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   32 |     std::string name = to_string(s);\n      |                      \
    \             ^\nIn file included from /usr/include/c++/9/string:55,\n       \
    \          from /usr/include/c++/9/bits/locale_classes.h:40,\n               \
    \  from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2hhjjf4x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/u"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(to_string(static_cast<int>(i)));\n    } else {\n\
    \      res.push_back(\"?\");\n    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n\
    \  for (std::string &s : res) {\n    std::replace(s.begin(), s.end(), '?', \"\
    One\");\n    std::replace(s.begin(), s.end(), '?', \"Two\");\n    std::replace(s.begin(),\
    \ s.end(), '?', \"Three\");\n    std::replace(s.begin(), s.end(), '?', \"Four\"\
    );\n    std::replace(s.begin(), s.end(), '?', \"Five\");\n    std::replace(s.begin(),\
    \ s.end(), '?', \"Six\");\n    std::replace(s.begin(), s.end(), '?', \"Seven\"\
    );\n    std::replace(s.begin(), s.end(), '?', \"Eight\");\n    std::replace(s.begin(),\
    \ s.end(), '?', \"Nine\");\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoazrvne3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpoazrvne3.cpp:20:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       res.push_back(to_string(static_cast<int>(i)));\n      |     \
    \                ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpoazrvne3.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpoazrvne3.cpp:27:48: error: no matching\
    \ function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char, const char [4])\u2019\n  \
    \ 27 |     std::replace(s.begin(), s.end(), '?', \"One\");\n      |          \
    \                                      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoazrvne3.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpoazrvne3.cpp:27:48:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long cur = arr[0];\n  for (long i : arr) {\n\
    \    if (i > cur + 9) {\n      res.push_back(to_string(cur));\n      cur = i;\n\
    \    } else {\n      res.push_back(to_string(cur));\n      res.push_back(to_string(i\
    \ - 9));\n      cur = i;\n    }\n  }\n  res.push_back(to_string(cur));\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1zoolyf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpb1zoolyf.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(cur));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb1zoolyf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpb1zoolyf.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(cur));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb1zoolyf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(lo"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    result.push_back(to_name(i));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa76kl3dd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpa76kl3dd.cpp:21:22: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     result.push_back(to_name(i));\n      |                      ^~~~~~~\n\
    \      |                      tzname\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long cur = arr[0];\n  for (long i : arr) {\n\
    \    if (i <= 9) {\n      res.push_back(to_string(cur));\n      cur = i;\n   \
    \ } else {\n      res.push_back(to_string(cur));\n      res.push_back(to_string(i\
    \ - 10));\n      cur = i;\n    }\n  }\n  res.push_back(to_string(cur));\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaphi_n3l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpaphi_n3l.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(cur));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaphi_n3l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpaphi_n3l.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(cur));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaphi_n3l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(lo"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  std::string digits = \"OneTwoThreeFourFiveSixSevenEightNine\"\
    ;\n  for (long i : arr) {\n    if (i >= 1 && i <= 9) {\n      result.push_back(digits[i\
    \ - 1]);\n    } else {\n      result.push_back(\"\");\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fbj85tz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7fbj85tz.cpp:21:37: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   21 |       result.push_back(digits[i - 1]);\n      |                    \
    \                 ^\nIn file included from /usr/include/c++/9/vector:67,\n   \
    \              from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp7fbj85tz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name;\n    if (i < 10) {\n      name = \"One\";\n  \
    \  } else if (i < 100) {\n      name = \"Two\";\n    } else if (i < 1000) {\n\
    \      name = \"Three\";\n    } else if (i < 10000) {\n      name = \"Four\";\n\
    \    } else if (i < 100000) {\n      name = \"Five\";\n    } else if (i < 1000000)\
    \ {\n      name = \"Six\";\n    } else if (i < 10000000) {\n      name = \"Seven\"\
    ;\n    } else if (i < 100000000) {\n      name = \"Eight\";\n    } else if (i\
    \ < 1000000000) {\n      name = \"Nine\";\n    } else {\n      name = \"Ten\"\
    ;\n    }\n    res.push_back(name);\n  }\n  std::reverse(arr.begin(), arr.end());\n\
    \  for (auto i : arr) {\n    std::string name;\n    if (i < 10) {\n      name\
    \ = \"One\";\n    } else if (i < 100) {\n      name = \"Two\";\n    } else if\
    \ (i < 1000) {\n      name = \"Three\";\n    } else if (i < 10000) {\n      name\
    \ = \"Four\";\n    } else if (i < 100000) {\n      name = \"Five\";\n    } else\
    \ if (i < 1000000) {\n      name = \"Six\";\n    } else if (i < 10000000) {\n\
    \      name = \"Seven\";\n    } else if (i < 100000000) {\n      name = \"Eight\"\
    ;\n    } else if (i < 1000000000) {\n      name = \"Nine\";\n    } else {\n  \
    \    name = \"Ten\";\n    }\n    res.push_back(name);\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpnn9if80w: /tmp/tmpnn9if80w.cpp:75: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> names;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 100) {\n      name = \"Two\";\n    } else if (i < 1000)\
    \ {\n      name = \"Three\";\n    } else if (i < 10000) {\n      name = \"Four\"\
    ;\n    } else if (i < 100000) {\n      name = \"Five\";\n    } else if (i < 1000000)\
    \ {\n      name = \"Six\";\n    } else if (i < 10000000) {\n      name = \"Seven\"\
    ;\n    } else if (i < 100000000) {\n      name = \"Eight\";\n    } else if (i\
    \ < 1000000000) {\n      name = \"Nine\";\n    } else {\n      name = \"Ten\"\
    ;\n    }\n    names.push_back(name);\n  }\n  std::reverse(names.begin(), names.end());\n\
    \  std::transform(names.begin(), names.end(), names.begin(), [](std::string name)\
    \ {\n    return name.substr(0, 1);\n  });\n  return names;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpu6sqok8o: /tmp/tmpu6sqok8o.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >=\
    \ 1 && i <= 9) {\n      result.push_back(to_string(i - 1));\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyh76ctod.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpyh76ctod.cpp:22:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       result.push_back(to_string(i - 1));\n      |                \
    \        ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyh76ctod.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpyh76ctod.cpp:27:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   27 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpyh76ctod.cpp:27:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long max = 0;\n  for (long i : arr) {\n\
    \    if (i > max) {\n      max = i;\n    }\n  }\n  for (long i : arr) {\n    if\
    \ (i <= max) {\n      res.push_back(to_string(static_cast<int>(i)));\n    }\n\
    \  }\n  std::reverse(std::begin(res), std::end(res));\n  for (int i = 0; i < res.size();\
    \ i++) {\n    res[i] = \"One\";\n    if (i + 1 < res.size()) {\n      res[i +\
    \ 1] = \"Two\";\n      if (i + 2 < res.size()) {\n        res[i + 2] = \"Three\"\
    ;\n        if (i + 3 < res.size()) {\n          res[i + 3] = \"Four\";\n     \
    \     if (i + 4 < res.size()) {\n            res[i + 4] = \"Five\";\n        \
    \    if (i + 5 < res.size()) {\n              res[i + 5] = \"Six\";\n        \
    \      if (i + 6 < res.size()) {\n                res[i + 6] = \"Seven\";\n  \
    \              if (i + 7 < res.size()) {\n                  res[i + 7] = \"Eight\"\
    ;\n                  if (i + 8 < res.size()) {\n                    res[i + 8]\
    \ = \"Nine\";\n                  }\n                }\n              }\n     \
    \       }\n          }\n        }\n      }\n    }\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqmlxag4j.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqmlxag4j.cpp:28:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |       res.push_back(to_string(static_cast<int>(i)));\n      |     \
    \                ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqmlxag4j.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (auto it : arr) {\n        if (it > curr) res.push_back(std::to_string(last));\n\
    \        last = it;\n        curr = it;\n    }\n    res.push_back(std::to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp0qhyyqty: /tmp/tmp0qhyyqty.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135824
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long long num = arr[0];\n  long long\
    \ digit = num;\n  std::string digitStr;\n  while (num > 0) {\n    digitStr +=\
    \ to_string(digit);\n    num /= 10;\n    digit++;\n  }\n  result.push_back(digitStr);\n\
    \  for (long long i = arr.size() - 1; i >= 0; i--) {\n    long long num = arr[i];\n\
    \    long long digit = num;\n    std::string digitStr;\n    while (num > 0) {\n\
    \      digitStr += to_string(digit);\n      num /= 10;\n      digit++;\n    }\n\
    \    result.push_back(digitStr);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbm32okn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzbm32okn.cpp:24:17: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |     digitStr += to_string(digit);\n      |                 ^~~~~~~~~\n\
    \      |                 std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzbm32okn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpzbm32okn.cpp:34:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   34 |       digitStr += to_string(digit);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzbm32okn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // Find the minimum value\
    \ in the vector\n  long max = *std::max_element(arr.begin(), arr.end()); // Find\
    \ the maximum value in the vector\n  std::vector<long> reversed_arr;\n  for (long\
    \ i = min; i <= max; i++) {\n    reversed_arr.push_back(i);\n  }\n  std::reverse(reversed_arr.begin(),\
    \ reversed_arr.end()); // Reverse the vector\n  std::string str = \"\";\n  for\
    \ (long i : reversed_arr) {\n    str += \"One\";\n    if (i < 10) str += \"0\"\
    ;\n  }\n  return std::vector<std::string>(str.begin(), str.end()); // Return the\
    \ vector\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpu9ovemc2.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmpu9ovemc2.cpp:29:57:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back(std::to_string(i - 1));\n    } else {\n  \
    \    result.push_back(\"\");\n    }\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  for (auto &i : result) {\n    i = std::to_string(i);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_90uuy7a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp_90uuy7a.cpp:27:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   27 |     i = std::to_string(i);\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_90uuy7a.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/usr/include/c++"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string temp;\n  for (int i = 0; i < arr.size(); ++i) {\n    temp += to_string(arr[i]);\n\
    \  }\n  std::string result = temp;\n  std::transform(temp.begin(), temp.end(),\
    \ temp.begin(), ::toupper);\n  std::vector<std::string> result;\n  for (int i\
    \ = 0; i < 9; ++i) {\n    result.push_back(lookup[temp[i] - '0']);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe13000g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpxe13000g.cpp:21:13: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     temp += to_string(arr[i]);\n      |             ^~~~~~~~~\n   \
    \   |             std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxe13000g.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpxe13000g.cpp:25:28: error: conflicting\
    \ declaration \u2018std::vector<std::__cxx11::basic_string<char> > result\u2019\
    \n   25 |   std::vector<std::string> result;\n      |                        \
    \    ^~~~~~\n/tmp/tmpxe13000g.cpp:23:15: note: previous declaration as \u2018\
    std::string result\u2019\n   23 |   std::string result = temp;\n      |      \
    \         ^~~~~~\n/tmp/tmpxe13000g.cpp:27:22: error: \u2018lookup\u2019 was not\
    \ declared in this scope\n   27 |     result.push_back(lookup[temp[i] - '0']);\n\
    \      |                      ^~~~~~\n/tmp/tmpxe13000g.cpp:29:10: error: could\
    \ not convert \u2018result\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n   29 |   return\
    \ result;\n      |          ^~~~~~\n      |          |\n      |          std::string\
    \ {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name;\n    if (i < 10) {\n      name = \"One\";\n  \
    \  } else if (i < 100) {\n      name = \"Two\";\n    } else if (i < 1000) {\n\
    \      name = \"Three\";\n    } else if (i < 10000) {\n      name = \"Four\";\n\
    \    } else if (i < 100000) {\n      name = \"Five\";\n    } else if (i < 1000000)\
    \ {\n      name = \"Six\";\n    } else if (i < 10000000) {\n      name = \"Seven\"\
    ;\n    } else if (i < 100000000) {\n      name = \"Eight\";\n    } else {\n  \
    \    name = \"Nine\";\n    }\n    res.push_back(name);\n  }\n  std::reverse(arr.begin(),\
    \ arr.end());\n  for (auto &i : arr) {\n    i = i - min;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpf175rc28: /tmp/tmpf175rc28.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string result = \"One\";\n  for (long i : arr) {\n    result += \" \"\
    \ + std::to_string(i);\n  }\n  return std::vector<std::string>(result.begin(),\
    \ result.end());\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpozcplzq8.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmpozcplzq8.cpp:23:63:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = std::to_string(i).substr(0, 1);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dyf2q51.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8dyf2q51.cpp:25:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8dyf2q51.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> names;\n  for (long i : arr) {\n    if (i >=\
    \ 1 && i <= 9) {\n      names.push_back(to_string(static_cast<int>(i)));\n   \
    \ }\n  }\n  std::reverse(names.begin(), names.end());\n  for (auto &name : names)\
    \ {\n    std::string new_name = \"\";\n    for (char &c : name) {\n      if (c\
    \ == '0') {\n        new_name += \"One\";\n      } else if (c == '1') {\n    \
    \    new_name += \"Two\";\n      } else if (c == '2') {\n        new_name += \"\
    Three\";\n      } else if (c == '3') {\n        new_name += \"Four\";\n      }\
    \ else if (c == '4') {\n        new_name += \"Five\";\n      } else if (c == '5')\
    \ {\n        new_name += \"Six\";\n      } else if (c == '6') {\n        new_name\
    \ += \"Seven\";\n      } else if (c == '7') {\n        new_name += \"Eight\";\n\
    \      } else if (c == '8') {\n        new_name += \"Nine\";\n      } else if\
    \ (c == '9') {\n        new_name += \"Ten\";\n      } else {\n        new_name\
    \ += c;\n      }\n    }\n    name = new_name;\n  }\n  return names;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcodqtgh1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcodqtgh1.cpp:22:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       names.push_back(to_string(static_cast<int>(i)));\n      |   \
    \                    ^~~~~~~~~\n      |                       std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpcodqtgh1.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (auto i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(to_string(static_cast<int>(i)));\n    } else {\n\
    \      res.push_back(\"One\");\n    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n\
    \  for (auto i : res) {\n    std::string temp = i;\n    std::replace(temp.begin(),\
    \ temp.end(), '0', 'One');\n    std::replace(temp.begin(), temp.end(), '1', 'Two');\n\
    \    std::replace(temp.begin(), temp.end(), '2', 'Three');\n    std::replace(temp.begin(),\
    \ temp.end(), '3', 'Four');\n    std::replace(temp.begin(), temp.end(), '4', 'Five');\n\
    \    std::replace(temp.begin(), temp.end(), '5', 'Six');\n    std::replace(temp.begin(),\
    \ temp.end(), '6', 'Seven');\n    std::replace(temp.begin(), temp.end(), '7',\
    \ 'Eight');\n    std::replace(temp.begin(), temp.end(), '8', 'Nine');\n    std::replace(temp.begin(),\
    \ temp.end(), '9', 'Ten');\n    i = temp;\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk5jy5jc.cpp:28:49: warning: multi-character character constant\
    \ [-Wmultichar]\n   28 |     std::replace(temp.begin(), temp.end(), '0', 'One');\n\
    \      |                                                 ^~~~~\n/tmp/tmpwk5jy5jc.cpp:29:49:\
    \ warning: multi-character character constant [-Wmultichar]\n   29 |     std::replace(temp.begin(),\
    \ temp.end(), '1', 'Two');\n      |                                          \
    \       ^~~~~\n/tmp/tmpwk5jy5jc.cpp:30:49: warning: character constant too long\
    \ for its type\n   30 |     std::replace(temp.begin(), temp.end(), '2', 'Three');\n\
    \      |                                                 ^~~~~~~\n/tmp/tmpwk5jy5jc.cpp:31:49:\
    \ warning: multi-character character constant [-Wmultichar]\n   31 |     std::replace(temp.begin(),\
    \ temp.end(), '3', 'Four');\n      |                                         \
    \        ^~~~~~\n/tmp/tmpwk5jy5jc.cpp:32:49: warning: multi-character character\
    \ constant [-Wmultichar]\n   32 |     std::replace(temp.begin(), temp.end(), '4',\
    \ 'Five');\n      |                                                 ^~~~~~\n/tmp/tmpwk5jy5jc.cpp:33:49:\
    \ warning: multi-character character constant [-Wmultichar]\n   33 |     std::replace(temp.begin(),\
    \ temp.end(), '5', 'Six');\n      |                                          \
    \       ^~~~~\n/tmp/tmpwk5jy5jc.cpp:34:49: warning: character constant too long\
    \ for its type\n   34 |     std::replace(temp.begin(), temp.end(), '6', 'Seven');\n\
    \      |                                                 ^~~~~~~\n/tmp/tmpwk5jy5jc.cpp:35:49:\
    \ warning: character constant too long for its type\n   35 |     std::replace(temp.begin(),\
    \ temp.end(), '7', 'Eight');\n      |                                        \
    \         ^~~~~~~\n/tmp/tmpwk5jy5jc.cpp:36:49: warning: multi-character character\
    \ constant [-Wmultichar]\n   36 |     std::replace(temp.begin(), temp.end(), '8',\
    \ 'Nine');\n      |                                                 ^~~~~~\n/tmp/tmpwk5jy5jc.cpp:37:49:\
    \ warning: multi-character character constant [-Wmultichar]\n   37 |     std::replace(temp.begin(),\
    \ temp.end(), '9', 'Ten"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long max_val = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n  for (long val : arr) {\n    if (val < 1 || val > max_val)\
    \ continue;\n    result.push_back(std::to_string(val));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &s : result) {\n    std::string name = names[s];\n\
    \    if (name == \"One\") name = \"One\";\n    if (name == \"Two\") name = \"\
    Two\";\n    if (name == \"Three\") name = \"Three\";\n    if (name == \"Four\"\
    ) name = \"Four\";\n    if (name == \"Five\") name = \"Five\";\n    if (name ==\
    \ \"Six\") name = \"Six\";\n    if (name == \"Seven\") name = \"Seven\";\n   \
    \ if (name == \"Eight\") name = \"Eight\";\n    if (name == \"Nine\") name = \"\
    Nine\";\n    s = name;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwb54ynz3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwb54ynz3.cpp:25:24: error:\
    \ \u2018names\u2019 was not declared in this scope; did you mean \u2018name\u2019\
    ?\n   25 |     std::string name = names[s];\n      |                        ^~~~~\n\
    \      |                        name\n"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long min_val = arr[0];\n  long max_val = arr[0];\n\
    \  for (long val : arr) {\n    min_val = std::min(min_val, val);\n    max_val\
    \ = std::max(max_val, val);\n  }\n  long diff = max_val - min_val;\n  for (long\
    \ val = min_val; val <= max_val; val += diff) {\n    std::string name = \"\";\n\
    \    switch (val) {\n      case 1:\n        name = \"One\";\n        break;\n\
    \      case 2:\n        name = \"Two\";\n        break;\n      case 3:\n     \
    \   name = \"Three\";\n        break;\n      case 4:\n        name = \"Four\"\
    ;\n        break;\n      case 5:\n        name = \"Five\";\n        break;\n \
    \     case 6:\n        name = \"Six\";\n        break;\n      case 7:\n      \
    \  name = \"Seven\";\n        break;\n      case 8:\n        name = \"Eight\"\
    ;\n        break;\n      case 9:\n        name = \"Nine\";\n        break;\n \
    \     default:\n        break;\n    }\n    res.push_back(name);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpzplekzc6: /tmp/tmpzplekzc6.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> names;\n  for (long i = min; i <= max;\
    \ i++) {\n    names.push_back(to_name(i));\n  }\n  std::reverse(names.begin(),\
    \ names.end());\n  for (long i = min; i <= max; i++) {\n    long index = names.size()\
    \ - i - 1;\n    long digit = arr[index];\n    arr[index] = names[digit];\n  }\n\
    \  return names;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6n_nacbx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6n_nacbx.cpp:21:21: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     names.push_back(to_name(i));\n      |                     ^~~~~~~\n\
    \      |                     tzname\n/tmp/tmp6n_nacbx.cpp:27:29: error: cannot\
    \ convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} in assignment\n   27 |     arr[index] = names[digit];\n\
    \      |                             ^\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  long mid_index = 0;\n  std::vector<long>\
    \ sorted_arr;\n  for (long i : arr) {\n    if (i <= mid) {\n      sorted_arr.push_back(i);\n\
    \      mid_index++;\n    } else if (i > mid) {\n      sorted_arr.push_back(mid);\n\
    \      mid_index--;\n    }\n  }\n  sorted_arr.resize(mid_index);\n  for (long\
    \ i : sorted_arr) {\n    std::string name = \"\";\n    switch (i) {\n      case\
    \ 1:\n        name = \"One\";\n        break;\n      case 2:\n        name = \"\
    Two\";\n        break;\n      case 3:\n        name = \"Three\";\n        break;\n\
    \      case 4:\n        name = \"Four\";\n        break;\n      case 5:\n    \
    \    name = \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n\
    \        break;\n      case 7:\n        name = \"Seven\";\n        break;\n  \
    \    case 8:\n        name = \"Eight\";\n        break;\n      case 9:\n     \
    \   name = \"Nine\";\n        break;\n      default:\n        break;\n    }\n\
    \    sorted_arr[mid_index] = name;\n  }\n  std::vector<std::string> result;\n\
    \  for (int i = 0; i < sorted_arr.size(); i++) {\n    result.push_back(sorted_arr[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5s19dyf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpz5s19dyf.cpp:65:29: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} in assignment\n   65 |     sorted_arr[mid_index]\
    \ = name;\n      |                             ^~~~\n      |                 \
    \            |\n      |                             std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpz5s19dyf.cpp:69:35: error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   69 |     result.push_back(sorted_arr[i]);\n      |                      \
    \             ^\nIn file included from /usr/include/c++/9/vector:67,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpz5s19dyf.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _A"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> result;\n  for (long val = min_val; val <= max_val;\
    \ val++) {\n    result.push_back(to_string(val));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (long val : arr) {\n    long index = val - min_val;\n\
    \    result.at(index) = to_string(val);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5btdhrc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpx5btdhrc.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpx5btdhrc.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpx5btdhrc.cpp:30:24: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     result.at(index) = to_string(val);\n      |                   \
    \     ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpx5btdhrc.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   t"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long min = *std::min_element(arr.begin(), arr.end());\n  long\
    \ length = max - min + 1;\n  long cur = min;\n  while (cur < max) {\n    result.push_back(to_string(cur));\n\
    \    cur += 10;\n  }\n  for (long i = length; i > 0; i /= 10) {\n    result.push_back(to_string(i\
    \ / 10));\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6q19k0o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpx6q19k0o.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(cur));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpx6q19k0o.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpx6q19k0o.cpp:29:22: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     result.push_back(to_string(i / 10));\n      |                 \
    \     ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpx6q19k0o.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_value = std::numeric_limits<long>::min();\n  long max_value = std::numeric_limits<long>::max();\n\
    \  long min_length = std::numeric_limits<long>::digits;\n  long max_length = std::numeric_limits<long>::digits\
    \ + 1;\n  long min_value = std::numeric_limits<long>::min();\n  long max_value\
    \ = std::numeric_limits<long>::max();\n  long min_length = std::numeric_limits<long>::digits;\n\
    \  long max_length = std::numeric_limits<long>::digits + 1;\n  long min_value\
    \ = std::numeric_limits<long>::min();\n  long max_value = std::numeric_limits<long>::max();\n\
    \  long min_length = std::numeric_limits<long>::digits;\n  long max_length = std::numeric_limits<long>::digits\
    \ + 1;\n  long min_value = std::numeric_limits<long>::min();\n  long max_value\
    \ = std::numeric_limits<long>::max();\n  long min_length = std::numeric_limits<long>::digits;\n\
    \  long max_length = std::numeric_limits<long>::digits + 1;\n  long min_value\
    \ = std::numeric_limits<long>::min();\n  long max_value = std::numeric_limits<long>::max();\n\
    \  long min_length = std::numeric_limits<long>::digits;\n  long max_length = std::numeric_limits<long>::digits\
    \ + 1;\n  long min_value = std::numeric_limits<long>::min();\n  long max_value\
    \ = std::numeric_limits<long>::max();\n  long min_length = std::numeric_limits<long>::digits;\n\
    \  long max_length = std::numeric_limits<long>::digits + 1;\n  long min_value\
    \ = std::numeric_limits<long>::min();\n  long max_value = std::numeric_limits<long>::max();\n\
    \  long min_length = std::numeric_limits<long>::digits;\n  long max_length = std::numeric_limits<long>::digits\
    \ + 1;\n  long min_value = std::numeric_limits<long>::min();\n  long max_value\
    \ = std::numeric_limits<long>::max();\n  long min_length = std::numeric_limits<long>::digits;\n\
    \  long max_length = std::numeric_limits<long>::digits + 1;\n  long min_value\
    \ = std::numeric_limits<long>::min();\n  long max_value = std::numeric_limits<long>::max();\n\
    \  long min_length = std::numeric_limits<long>::digits;\n  long max_length = std::numeric_limits<long>::digits\
    \ + 1;\n  long min_value = std::numeric_limits<long>::min();\n  long max_value\
    \ = std::numeric_limits<long>::max();\n  \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpthvm6xk1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpthvm6xk1.cpp:21:8: error:\
    \ redeclaration of \u2018long int min_value\u2019\n   21 |   long min_value =\
    \ std::numeric_limits<long>::min();\n      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:17:8:\
    \ note: \u2018long int min_value\u2019 previously declared here\n   17 |   long\
    \ min_value = std::numeric_limits<long>::min();\n      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:22:8:\
    \ error: redeclaration of \u2018long int max_value\u2019\n   22 |   long max_value\
    \ = std::numeric_limits<long>::max();\n      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:18:8:\
    \ note: \u2018long int max_value\u2019 previously declared here\n   18 |   long\
    \ max_value = std::numeric_limits<long>::max();\n      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:23:8:\
    \ error: redeclaration of \u2018long int min_length\u2019\n   23 |   long min_length\
    \ = std::numeric_limits<long>::digits;\n      |        ^~~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:19:8:\
    \ note: \u2018long int min_length\u2019 previously declared here\n   19 |   long\
    \ min_length = std::numeric_limits<long>::digits;\n      |        ^~~~~~~~~~\n\
    /tmp/tmpthvm6xk1.cpp:24:8: error: redeclaration of \u2018long int max_length\u2019\
    \n   24 |   long max_length = std::numeric_limits<long>::digits + 1;\n      |\
    \        ^~~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:20:8: note: \u2018long int max_length\u2019\
    \ previously declared here\n   20 |   long max_length = std::numeric_limits<long>::digits\
    \ + 1;\n      |        ^~~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:25:8: error: redeclaration\
    \ of \u2018long int min_value\u2019\n   25 |   long min_value = std::numeric_limits<long>::min();\n\
    \      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:17:8: note: \u2018long int min_value\u2019\
    \ previously declared here\n   17 |   long min_value = std::numeric_limits<long>::min();\n\
    \      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:26:8: error: redeclaration of\
    \ \u2018long int max_value\u2019\n   26 |   long max_value = std::numeric_limits<long>::max();\n\
    \      |        ^~~~~~~~~\n/tmp/tmpthvm6xk1.cpp:18:8: note: \u2018long int max_value\u2019\
    \ previously declared here\n   "
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 100) {\n      name = \"Two\";\n    } else if (i < 1000)\
    \ {\n      name = \"Three\";\n    } else if (i < 10000) {\n      name = \"Four\"\
    ;\n    } else if (i < 100000) {\n      name = \"Five\";\n    } else if (i < 1000000)\
    \ {\n      name = \"Six\";\n    } else if (i < 10000000) {\n      name = \"Seven\"\
    ;\n    } else if (i < 100000000) {\n      name = \"Eight\";\n    } else if (i\
    \ < 1000000000) {\n      name = \"Nine\";\n    }\n    result.push_back(name);\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp894t5mzz: /tmp/tmp894t5mzz.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    res.push_back(to_name(i));\n  }\n  std::reverse(arr.begin(), arr.end());\n\
    \  for (long i : arr) {\n    res.push_back(to_name(i));\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w6d6tzf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8w6d6tzf.cpp:21:19: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     res.push_back(to_name(i));\n      |                   ^~~~~~~\n\
    \      |                   tzname\n/tmp/tmp8w6d6tzf.cpp:25:19: error: \u2018to_name\u2019\
    \ was not declared in this scope; did you mean \u2018tzname\u2019?\n   25 |  \
    \   res.push_back(to_name(i));\n      |                   ^~~~~~~\n      |   \
    \                tzname\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long min_value = std::numeric_limits<long>::min();\n  long max_value =\
    \ std::numeric_limits<long>::max();\n  std::vector<std::string> result;\n  for\
    \ (long num : arr) {\n    if (num < min_value) {\n      continue;\n    }\n   \
    \ if (num > max_value) {\n      continue;\n    }\n    long digit = num % 10;\n\
    \    std::string name = to_string(digit);\n    result.push_back(name);\n  }\n\
    \  std::reverse(result.begin(), result.end());\n  for (auto &name : result) {\n\
    \    std::string digit = to_string(name);\n    std::string reversed_name = to_string(std::reverse(name));\n\
    \    if (digit == reversed_name) {\n      continue;\n    }\n    result.push_back(digit);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxxtcjxf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwxxtcjxf.cpp:30:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     std::string name = to_string(digit);\n      |                 \
    \       ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwxxtcjxf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpwxxtcjxf.cpp:35:39: error: no matching\
    \ function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   35 |     std::string digit = to_string(name);\n      |                  \
    \                     ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwxxtcjxf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> result;\n  for (long val = min_val; val <= max_val;\
    \ val++) {\n    result.push_back(to_string(val));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (long val : arr) {\n    long index = std::abs(val - min_val);\n\
    \    result.at(index) = to_string(val);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdr035rna.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpdr035rna.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdr035rna.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpdr035rna.cpp:30:24: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     result.at(index) = to_string(val);\n      |                   \
    \     ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdr035rna.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   t"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0)\n    return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr)\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  std::vector<std::string> result;\n  while (min_val != max_val) {\n    result.push_back(to_string(min_val));\n\
    \    min_val -= 10;\n  }\n  for (long val : arr)\n    result.push_back(to_string(val));\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpro8og92f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpro8og92f.cpp:22:33: error:\
    \ \u2018val\u2019 was not declared in this scope\n   22 |     max_val = std::max(max_val,\
    \ val);\n      |                                 ^~~\n/tmp/tmpro8og92f.cpp:25:22:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   25 |     result.push_back(to_string(min_val));\n\
    \      |                      ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpro8og92f.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpro8og92f.cpp:29:22: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/st"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ std::vector<std::string>();\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reversed_arr(sorted_arr.begin(), sorted_arr.end());\n    std::reverse(reversed_arr.begin(),\
    \ reversed_arr.end());\n    std::vector<std::string> names;\n    for (long i :\
    \ reversed_arr) {\n        std::string name;\n        if (i <= 9) {\n        \
    \    name = std::to_string(static_cast<int>(i));\n        } else {\n         \
    \   name = \"Nine\";\n        }\n        names.push_back(name);\n    }\n    return\
    \ names;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpshysr510: /tmp/tmpshysr510.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> result;\n  for (long i = min; i <= max; i++)\
    \ {\n    result.push_back(std::to_string(i));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = std::to_string(i);\n   \
    \ std::string name = \"\";\n    if (i < \"One\") {\n      name = \"One\";\n  \
    \  } else if (i < \"Two\") {\n      name = \"Two\";\n    } else if (i < \"Three\"\
    ) {\n      name = \"Three\";\n    } else if (i < \"Four\") {\n      name = \"\
    Four\";\n    } else if (i < \"Five\") {\n      name = \"Five\";\n    } else if\
    \ (i < \"Six\") {\n      name = \"Six\";\n    } else if (i < \"Seven\") {\n  \
    \    name = \"Seven\";\n    } else if (i < \"Eight\") {\n      name = \"Eight\"\
    ;\n    } else if (i < \"Nine\") {\n      name = \"Nine\";\n    } else {\n    \
    \  name = \"Zero\";\n    }\n    i = name;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cc9e1dv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7cc9e1dv.cpp:21:39: error:\
    \ no matching function for call to \u2018std::vector<long int>::push_back(std::string)\u2019\
    \n   21 |     result.push_back(std::to_string(i));\n      |                  \
    \                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7cc9e1dv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp7cc9e1dv.cpp:25:23: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} t"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back((std::string)std::to_string(i));\n    } else\
    \ {\n      result.push_back((std::string)\"Nine\");\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = std::to_string(i).substr(0,\
    \ 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95u_ucpa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp95u_ucpa.cpp:27:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   27 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp95u_ucpa.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<long> sorted_arr(arr.begin(), arr.end());\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    std::vector<std::string> result;\n    for (long i :\
    \ sorted_arr) {\n        if (i >= 1 && i <= 9) {\n            result.push_back(to_string(static_cast<int>(i)));\n\
    \        } else {\n            result.push_back(to_string(static_cast<int>(i)));\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1pmkfyq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpx1pmkfyq.cpp:22:30: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |             result.push_back(to_string(static_cast<int>(i)));\n   \
    \   |                              ^~~~~~~~~\n      |                        \
    \      std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx1pmkfyq.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpx1pmkfyq.cpp:24:30: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |             result.push_back(to_string(static_cast<int>(i)));\n   \
    \   |                              ^~~~~~~~~\n      |                        \
    \      std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx1pmkfyq.cpp:2:\n/usr/include/c++/9/bits/basic_str"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto it : arr) {\n\
    \    min_val = std::min(min_val, it);\n    max_val = std::max(max_val, it);\n\
    \  }\n  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val;\
    \ ++i) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpts49krd2: /tmp/tmpts49krd2.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> result;\n  for (long val = min_val; val <= max_val;\
    \ val++) {\n    result.push_back(to_string(val));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (long val : arr) {\n    result.push_back(to_string(val));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygpvoart.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpygpvoart.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpygpvoart.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpygpvoart.cpp:29:22: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpygpvoart.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_str"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push_back(to_string(arr[i]));\n\
    \    } else {\n      result.push_back(\"\");\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (int i = 0; i < result.size(); i++) {\n    result[i] =\
    \ result[i][0] == '0' ? \"One\" : result[i];\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbf_iy01d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbf_iy01d.cpp:20:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       result.push_back(to_string(arr[i]));\n      |               \
    \         ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpbf_iy01d.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long n = arr[0];\n  for (long i : arr) {\n\
    \    if (i >= 1 && i <= 9) {\n      res.push_back(std::to_string(i));\n    }\n\
    \  }\n  std::reverse(res.begin(), res.end());\n  for (int i = 0; i < res.size();\
    \ i++) {\n    std::string s = res[i];\n    std::string t = std::to_string(n);\n\
    \    if (t == \"0\") t = \"One\";\n    else if (t == \"1\") t = \"Two\";\n   \
    \ else if (t == \"2\") t = \"Three\";\n    else if (t == \"3\") t = \"Four\";\n\
    \    else if (t == \"4\") t = \"Five\";\n    else if (t == \"5\") t = \"Six\"\
    ;\n    else if (t == \"6\") t = \"Seven\";\n    else if (t == \"7\") t = \"Eight\"\
    ;\n    else if (t == \"8\") t = \"Nine\";\n    else if (t == \"9\") t = \"Nine\"\
    ;\n    res[i] = t;\n    n--;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmprx3k_7tv: /tmp/tmprx3k_7tv.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max = *std::max_element(arr.begin(), arr.end());\n  long min = *std::min_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name;\n    if (i <= 9) {\n      name = to_string(static_cast<int>(i));\n\
    \    } else if (i <= 99) {\n      name = to_string(static_cast<int>(i) / 10);\n\
    \    } else {\n      name = to_string(static_cast<int>(i) / 100);\n    }\n   \
    \ result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt6cufle.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpmt6cufle.cpp:23:14: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |       name = to_string(static_cast<int>(i));\n      |             \
    \ ^~~~~~~~~\n      |              std::__cxx11::to_string\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmt6cufle.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpmt6cufle.cpp:25:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |       name = to_string(static_cast<int>(i) / 10);\n      |        \
    \      ^~~~~~~~~\n      |              std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmt6cufle.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ doub"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<long> sorted_arr(arr.begin(), arr.end());\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    std::vector<long> reversed_arr(sorted_arr.begin(), sorted_arr.end());\n\
    \    std::reverse(reversed_arr.begin(), reversed_arr.end());\n    std::vector<std::string>\
    \ result;\n    for (long i : reversed_arr) {\n        std::string name = \"\"\
    ;\n        if (i <= 9) {\n            name = std::to_string(static_cast<int>(i));\n\
    \        } else {\n            name = \"Nine\";\n        }\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpqa2pdc14: /tmp/tmpqa2pdc14.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = std::numeric_limits<long>::min();\n  long max_val = std::numeric_limits<long>::max();\n\
    \  long min_len = std::numeric_limits<long>::digits;\n  long max_len = std::numeric_limits<long>::digits\
    \ * 2;\n  long min_len = std::numeric_limits<long>::digits * 3;\n  long max_len\
    \ = std::numeric_limits<long>::digits * 4;\n  long min_len = std::numeric_limits<long>::digits\
    \ * 5;\n  long max_len = std::numeric_limits<long>::digits * 6;\n  long min_len\
    \ = std::numeric_limits<long>::digits * 7;\n  long max_len = std::numeric_limits<long>::digits\
    \ * 8;\n  long min_len = std::numeric_limits<long>::digits * 9;\n  long max_len\
    \ = std::numeric_limits<long>::digits * 10;\n  long min_len = std::numeric_limits<long>::digits\
    \ * 11;\n  long max_len = std::numeric_limits<long>::digits * 12;\n  long min_len\
    \ = std::numeric_limits<long>::digits * 13;\n  long max_len = std::numeric_limits<long>::digits\
    \ * 14;\n  long min_len = std::numeric_limits<long>::digits * 15;\n  long max_len\
    \ = std::numeric_limits<long>::digits * 16;\n  long min_len = std::numeric_limits<long>::digits\
    \ * 17;\n  long max_len = std::numeric_limits<long>::digits * 18;\n  long min_len\
    \ = std::numeric_limits<long>::digits * 19;\n  long max_len = std::numeric_limits<long>::digits\
    \ * 20;\n  long min_len = std::numeric_limits<long>::digits * 21;\n  long max_len\
    \ = std::numeric_limits<long>::digits * 22;\n  long min_len = std::numeric_limits<long>::digits\
    \ * 23;\n  long max_len = std::numeric_limits<long>::digits * 24;\n  long min_len\
    \ = std::numeric_limits<long>::digits * 25;\n  long max_len = std::numeric_limits<long>::digits\
    \ * 26;\n  long min_len = std::numeric_limits<long>::digits * 27;\n  long max_len\
    \ = std::numeric_limits<long>::digits * 28;\n  long min_len = std::numeric_limits<long>::digits\
    \ * 29;\n  long max_len = std::numeric_limits<long>::digits * 30;\n  long min_len\
    \ = std::numeric_limits<long>::digits * 31;\n  long max_len = std::numeric_limits<long>::digits\
    \ * 32;\n  long min_len = std::numeric_limits<long>::digits * 33;\n  long \n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0ysd6xi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpa0ysd6xi.cpp:21:8: error:\
    \ redeclaration of \u2018long int min_len\u2019\n   21 |   long min_len = std::numeric_limits<long>::digits\
    \ * 3;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:19:8: note: \u2018long int\
    \ min_len\u2019 previously declared here\n   19 |   long min_len = std::numeric_limits<long>::digits;\n\
    \      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:22:8: error: redeclaration of \u2018\
    long int max_len\u2019\n   22 |   long max_len = std::numeric_limits<long>::digits\
    \ * 4;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:20:8: note: \u2018long int\
    \ max_len\u2019 previously declared here\n   20 |   long max_len = std::numeric_limits<long>::digits\
    \ * 2;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:23:8: error: redeclaration\
    \ of \u2018long int min_len\u2019\n   23 |   long min_len = std::numeric_limits<long>::digits\
    \ * 5;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:19:8: note: \u2018long int\
    \ min_len\u2019 previously declared here\n   19 |   long min_len = std::numeric_limits<long>::digits;\n\
    \      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:24:8: error: redeclaration of \u2018\
    long int max_len\u2019\n   24 |   long max_len = std::numeric_limits<long>::digits\
    \ * 6;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:20:8: note: \u2018long int\
    \ max_len\u2019 previously declared here\n   20 |   long max_len = std::numeric_limits<long>::digits\
    \ * 2;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:25:8: error: redeclaration\
    \ of \u2018long int min_len\u2019\n   25 |   long min_len = std::numeric_limits<long>::digits\
    \ * 7;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:19:8: note: \u2018long int\
    \ min_len\u2019 previously declared here\n   19 |   long min_len = std::numeric_limits<long>::digits;\n\
    \      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:26:8: error: redeclaration of \u2018\
    long int max_len\u2019\n   26 |   long max_len = std::numeric_limits<long>::digits\
    \ * 8;\n      |        ^~~~~~~\n/tmp/tmpa0ysd6xi.cpp:20:8: note: \u2018long int\
    \ max_len\u2019 previously declared here\n   20 |   long max_len = std::numeric_limits<long>::"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long min = std::numeric_limits<long>::min();\n\
    \  long max = std::numeric_limits<long>::max();\n  for (long i : arr) {\n    if\
    \ (i >= min && i <= max) {\n      result.push_back(std::to_string(i));\n    }\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  for (int i = 0; i < result.size();\
    \ i++) {\n    result[i] = \"One\";\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp22zmym2b: /tmp/tmp22zmym2b.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = lookup(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbsuhuiam.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbsuhuiam.cpp:25:9: error:\
    \ \u2018lookup\u2019 was not declared in this scope\n   25 |     i = lookup(i);\n\
    \      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = arr[0];\n  long max = arr[0];\n  for (auto it : arr) min = std::min(min,\
    \ it);\n  for (auto it : arr) max = std::max(max, it);\n  std::vector<std::string>\
    \ result;\n  for (long i = min; i <= max; i++) {\n    std::string name = \"\"\
    ;\n    if (i < 10) {\n      name = \"One\";\n    } else if (i < 100) {\n     \
    \ name = \"Two\";\n    } else if (i < 1000) {\n      name = \"Three\";\n    }\
    \ else if (i < 10000) {\n      name = \"Four\";\n    } else if (i < 100000) {\n\
    \      name = \"Five\";\n    } else if (i < 1000000) {\n      name = \"Six\";\n\
    \    } else if (i < 10000000) {\n      name = \"Seven\";\n    } else if (i < 100000000)\
    \ {\n      name = \"Eight\";\n    } else if (i < 1000000000) {\n      name = \"\
    Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpk_ugqx2_: /tmp/tmpk_ugqx2_.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  arr.resize(arr.size() / 10);\n  std::reverse(arr.begin(),\
    \ arr.end());\n  std::string str = \"\";\n  for (long i : arr) {\n    str += \"\
    One\";\n    if (i < 10) str += \"0\";\n  }\n  return std::vector<std::string>(str.begin(),\
    \ str.end());\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpmm5dv6jr.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmpmm5dv6jr.cpp:25:57:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> result;\n  for (long i = min_val; i <= max_val;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgakccjxr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgakccjxr.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(static_cast<int>(i)));\n      |    \
    \                  ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgakccjxr.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpgakccjxr.cpp:29:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   29 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpgakccjxr.cpp:29:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/i"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long cur = arr[0];\n  res.push_back((std::string)to_string(cur));\n\
    \  for (long i : arr) {\n    if (i >= 1 && i <= 9) {\n      long next = cur *\
    \ 10 + i;\n      res.push_back((std::string)to_string(next));\n      cur = next;\n\
    \    } else {\n      res.push_back((std::string)to_string(cur));\n      cur =\
    \ i;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptyart9vg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmptyart9vg.cpp:19:30: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |   res.push_back((std::string)to_string(cur));\n      |            \
    \                  ^~~~~~~~~\n      |                              std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptyart9vg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long range = max - min + 1;\n  long digit = range % 10;\n  long\
    \ remainder = range / 10;\n  long index = min - 1;\n  std::vector<std::string>\
    \ result;\n  while (index >= 0) {\n    result.push_back(to_string(index));\n \
    \   index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= remainder;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(index));\n\
    \    index -= digit;\n  }\n  while (index >= 0) {\n    result.push_back(to_string(\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgutzobcu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgutzobcu.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(index));\n      |                  \
    \    ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgutzobcu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpgutzobcu.cpp:29:22: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     result.push_back(to_string(index));\n      |                  \
    \    ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgutzobcu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to"
  stdout: ''
  timestamp: 1660135826
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string s = to_string(i);\n    result.push_back(s);\n  }\n \
    \ std::reverse(result.begin(), result.end());\n  for (auto& s : result) {\n  \
    \  std::string t = to_string(arr.find(s));\n    s.replace(s.length(), 1, t);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeg6d66dy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpeg6d66dy.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     std::string s = to_string(i);\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpeg6d66dy.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpeg6d66dy.cpp:26:35: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   26\
    \ |     std::string t = to_string(arr.find(s));\n      |                     \
    \              ^~~~\n/tmp/tmpeg6d66dy.cpp:26:21: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     std::string t = to_string(arr.find(s));\n      |              \
    \       ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86"
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) return res;\n    long min = *std::min_element(arr.begin(), arr.end());\n\
    \    long max = *std::max_element(arr.begin(), arr.end());\n    long diff = max\
    \ - min + 1;\n    long digits = diff / 10;\n    long remainder = diff % 10;\n\
    \    long curr = min;\n    while (curr < max) {\n        long val = arr[curr];\n\
    \        std::string name;\n        if (val < 10) {\n            name = to_string(val);\n\
    \        } else if (val < 100) {\n            name = to_string(val / 10) + to_string(val\
    \ % 10);\n        } else if (val < 1000) {\n            name = to_string(val /\
    \ 100) + to_string(val % 100) + to_string(val % 10);\n        } else if (val <\
    \ 10000) {\n            name = to_string(val / 1000) + to_string(val % 1000) +\
    \ to_string(val % 100) + to_string(val % 10);\n        } else if (val < 100000)\
    \ {\n            name = to_string(val / 10000) + to_string(val % 10000) + to_string(val\
    \ % 1000) + to_string(val % 100) + to_string(val % 10);\n        } else if (val\
    \ < 1000000) {\n            name = to_string(val / 100000) + to_string(val % 100000)\
    \ + to_string(val % 10000) + to_string(val % 1000) + to_string(val % 100) + to_string(val\
    \ % 10);\n        } else if (val < 10000000) {\n            name = to_string(val\
    \ / 1000000) + to_string(val % 1000000) + to_string(val % 100000) + to_string(val\
    \ % 10000) + to_string(val % 1000) + to_string(val % 100) + to_string(val % 10);\n\
    \        } else if (val < 100000000) {\n            name = to_string(val / 10000000)\
    \ + to_string(val % 10000000) + to_string(val % 1000000) + to_string(val % 100000)\
    \ + to_string(val % 10000) + to_string(val % 1000) + to_string(val % 100) + to_string(val\
    \ % 10);\n        } else if (val < 1000000000) {\n            name = to_string(val\
    \ / 100000000) + to_string(val % 100000000) + to_string(val % 10000000) + to_string(val\
    \ % 1000000) + to_string(val % 100000) + to_string(val % 10000) + to_string(val\
    \ % 1000) + to_string(val % 100) + to_string(val % 10);\n        } else {\n  \
    \          name = to_string(val / 1000000000) + to_string(val % 1000000000) +\
    \ to_string(val % 100000000) + to_string(val % 10000000) + to_string(val % 1000000)\
    \ + to_string(val % 100000) + to_string(val % 10000) + to_string(val % 1000) +\
    \ to_string(val % 100) + to_string(val % 10);\n        }\n        res.push_back(name);\n\
    \        curr += digits;\n    }\n    if (remainder > 0) {\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphw5u7sv4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphw5u7sv4.cpp:28:20: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |             name = to_string(val);\n      |                    ^~~~~~~~~\n\
    \      |                    std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphw5u7sv4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmphw5u7sv4.cpp:30:20: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |             name = to_string(val / 10) + to_string(val % 10);\n   \
    \   |                    ^~~~~~~~~\n      |                    std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphw5u7sv4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 66"
  stdout: ''
  timestamp: 1660135826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long range = max - min + 1;\n  long digit = range / 10;\n  long\
    \ rest = range % 10;\n  long pos = 0;\n  std::vector<std::string> result;\n  while\
    \ (pos < arr.size()) {\n    if (arr[pos] >= min && arr[pos] <= max) {\n      std::string\
    \ name = \"\";\n      for (int i = digit; i >= 0; i--) {\n        name += (rest\
    \ % 10 == 0) ? \"One\" : \"Two\";\n        rest /= 10;\n      }\n      result.push_back(name);\n\
    \    }\n    pos++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpjy6_ych1: /tmp/tmpjy6_ych1.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> sorted_arr;\n  for (long i = min; i <= max;\
    \ i++) {\n    sorted_arr.push_back(i);\n  }\n  std::reverse(sorted_arr.begin(),\
    \ sorted_arr.end());\n  std::vector<std::string> result;\n  for (long i : sorted_arr)\
    \ {\n    std::string name = \"\";\n    switch (i) {\n      case 1:\n        name\
    \ = \"One\";\n        break;\n      case 2:\n        name = \"Two\";\n       \
    \ break;\n      case 3:\n        name = \"Three\";\n        break;\n      case\
    \ 4:\n        name = \"Four\";\n        break;\n      case 5:\n        name =\
    \ \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n        break;\n\
    \      case 7:\n        name = \"Seven\";\n        break;\n      case 8:\n   \
    \     name = \"Eight\";\n        break;\n      case 9:\n        name = \"Nine\"\
    ;\n        break;\n      default:\n        break;\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp0wwmtkl7: /tmp/tmp0wwmtkl7.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    switch (i) {\n      case 1:\n    \
    \    name = \"One\";\n        break;\n      case 2:\n        name = \"Two\";\n\
    \        break;\n      case 3:\n        name = \"Three\";\n        break;\n  \
    \    case 4:\n        name = \"Four\";\n        break;\n      case 5:\n      \
    \  name = \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n\
    \        break;\n      case 7:\n        name = \"Seven\";\n        break;\n  \
    \    case 8:\n        name = \"Eight\";\n        break;\n      case 9:\n     \
    \   name = \"Nine\";\n        break;\n      default:\n        break;\n    }\n\
    \    result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpq2ugg01g: /tmp/tmpq2ugg01g.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> temp;\n  for (long i = min; i <= max; i++)\
    \ {\n    temp.push_back(i);\n  }\n  std::reverse(temp.begin(), temp.end());\n\
    \  std::vector<std::string> res;\n  for (long i : temp) {\n    std::string name\
    \ = \"\";\n    switch (i) {\n      case 1:\n        name = \"One\";\n        break;\n\
    \      case 2:\n        name = \"Two\";\n        break;\n      case 3:\n     \
    \   name = \"Three\";\n        break;\n      case 4:\n        name = \"Four\"\
    ;\n        break;\n      case 5:\n        name = \"Five\";\n        break;\n \
    \     case 6:\n        name = \"Six\";\n        break;\n      case 7:\n      \
    \  name = \"Seven\";\n        break;\n      case 8:\n        name = \"Eight\"\
    ;\n        break;\n      case 9:\n        name = \"Nine\";\n        break;\n \
    \     default:\n        break;\n    }\n    res.push_back(name);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpdza5kejc: /tmp/tmpdza5kejc.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto it : arr) {\n\
    \    min_val = std::min(min_val, it);\n    max_val = std::max(max_val, it);\n\
    \  }\n  std::vector<std::string> result;\n  for (long i = min_val; i <= max_val;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto it : result) {\n    std::string name = get_name(i);\n\
    \    if (name.empty()) continue;\n    it = replace_all(it, \"0\", name);\n   \
    \ it = replace_all(it, \"1\", name);\n    it = replace_all(it, \"2\", name);\n\
    \    it = replace_all(it, \"3\", name);\n    it = replace_all(it, \"4\", name);\n\
    \    it = replace_all(it, \"5\", name);\n    it = replace_all(it, \"6\", name);\n\
    \    it = replace_all(it, \"7\", name);\n    it = replace_all(it, \"8\", name);\n\
    \    it = replace_all(it, \"9\", name);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3pt47074.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3pt47074.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(static_cast<int>(i)));\n      |    \
    \                  ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3pt47074.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp3pt47074.cpp:29:33: error: \u2018\
    i\u2019 was not declared in this scope; did you mean \u2018it\u2019?\n   29 |\
    \     std::string name = get_name(i);\n      |                               \
    \  ^\n      |                                 it\n/tmp/tmp3pt47074.cpp:29:24:\
    \ error: \u2018get_name\u2019 was not declared in this scope\n   29 |     std::string\
    \ name = get_name(i);\n      |                        ^~~~~~~~\n/tmp/tmp3pt47074.cpp:31:10:\
    \ error: \u2018replace_all\u2019 was not declared in this scope\n   31 |     it\
    \ = replace_all(it, \"0\", name);\n      |          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back(to_string(static_cast<int>(i)));\n    } else\
    \ {\n      result.push_back(\"\");\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdrp7tl_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpkdrp7tl_.cpp:20:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       result.push_back(to_string(static_cast<int>(i)));\n      |  \
    \                      ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkdrp7tl_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpkdrp7tl_.cpp:27:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   27 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpkdrp7tl_.cpp:27:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from "
  stdout: ''
  timestamp: 1660135827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::to_string(static_cast<int>(i)));\n    } else\
    \ {\n      res.push_back((std::to_string(static_cast<int>(i)));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = std::to_string(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgsndi829.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgsndi829.cpp:20:58: error:\
    \ expected \u2018)\u2019 before \u2018;\u2019 token\n   20 |       res.push_back((std::to_string(static_cast<int>(i)));\n\
    \      |                    ~                                     ^\n      | \
    \                                                         )\n/tmp/tmpgsndi829.cpp:22:58:\
    \ error: expected \u2018)\u2019 before \u2018;\u2019 token\n   22 |       res.push_back((std::to_string(static_cast<int>(i)));\n\
    \      |                    ~                                     ^\n      | \
    \                                                         )\n/tmp/tmpgsndi829.cpp:27:25:\
    \ error: no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   27 |     i = std::to_string(i);\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgsndi829.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for "
  stdout: ''
  timestamp: 1660135827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      names.push_back(\"One\");\n    } else if (i >= 10 && i <= 19)\
    \ {\n      names.push_back(\"Two\");\n    } else if (i >= 20 && i <= 29) {\n \
    \     names.push_back(\"Three\");\n    } else if (i >= 30 && i <= 39) {\n    \
    \  names.push_back(\"Four\");\n    } else if (i >= 40 && i <= 49) {\n      names.push_back(\"\
    Five\");\n    } else if (i >= 50 && i <= 59) {\n      names.push_back(\"Six\"\
    );\n    } else if (i >= 60 && i <= 69) {\n      names.push_back(\"Seven\");\n\
    \    } else if (i >= 70 && i <= 89) {\n      names.push_back(\"Eight\");\n   \
    \ } else if (i >= 90 && i <= 99) {\n      names.push_back(\"Nine\");\n    } else\
    \ {\n      names.push_back(\"?\");\n    }\n  }\n  std::reverse(names.begin(),\
    \ names.end());\n  return names;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpsp_qcvpx: /tmp/tmpsp_qcvpx.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  std::string name;\n  for (long i : arr)\
    \ {\n    if (i <= 9) {\n      name = to_string(static_cast<int>(i));\n    } else\
    \ {\n      name = \"Nine\";\n    }\n    names.push_back(name);\n  }\n  std::reverse(names.begin(),\
    \ names.end());\n  return names;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphybev36g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphybev36g.cpp:21:14: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       name = to_string(static_cast<int>(i));\n      |             \
    \ ^~~~~~~~~\n      |              std::__cxx11::to_string\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphybev36g.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto i : arr) {\n\
    \    min_val = std::min(min_val, i);\n    max_val = std::max(max_val, i);\n  }\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    res.push_back((std::to_string(i)).substr(0, 1));\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto i : arr) {\n    res.erase(std::remove(std::begin(res),\
    \ std::end(res), i), std::end(res));\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpj85rwelh.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Value = const long int]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:875:13:   required from \u2018_ForwardIterator\
    \ std::__remove_if(_ForwardIterator, _ForwardIterator, _Predicate) [with _ForwardIterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const long int>]\u2019\n\
    /usr/include/c++/9/bits/stl_algo.h:912:30:   required from \u2018_FIter std::remove(_FIter,\
    \ _FIter, const _Tp&) [with _FIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Tp = long int]\u2019\n/tmp/tmpj85rwelh.cpp:29:60:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018const long int\u2019)\n  241 |  { return *__it == _M_value; }\n  \
    \    |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpj85rwelh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterat"
  stdout: ''
  timestamp: 1660135828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long cur = arr[0];\n  for (long i : arr) {\n\
    \    if (i > cur + 1) {\n      res.push_back((cur + 1 < 10) ? \"One\" : \"Two\"\
    );\n      cur = i;\n    } else if (i > cur + 2) {\n      res.push_back((cur +\
    \ 2 < 10) ? \"Two\" : \"Three\");\n      cur = i;\n    } else if (i > cur + 3)\
    \ {\n      res.push_back((cur + 3 < 10) ? \"Three\" : \"Four\");\n      cur =\
    \ i;\n    } else if (i > cur + 4) {\n      res.push_back((cur + 4 < 10) ? \"Four\"\
    \ : \"Five\");\n      cur = i;\n    } else if (i > cur + 5) {\n      res.push_back((cur\
    \ + 5 < 10) ? \"Five\" : \"Six\");\n      cur = i;\n    } else if (i > cur + 6)\
    \ {\n      res.push_back((cur + 6 < 10) ? \"Six\" : \"Seven\");\n      cur = i;\n\
    \    } else if (i > cur + 7) {\n      res.push_back((cur + 7 < 10) ? \"Seven\"\
    \ : \"Eight\");\n      cur = i;\n    } else if (i > cur + 8) {\n      res.push_back((cur\
    \ + 8 < 10) ? \"Eight\" : \"Nine\");\n      cur = i;\n    } else {\n      res.push_back((cur\
    \ + 9 < 10) ? \"Nine\" : \"One\");\n      cur = i;\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpbhfh81ip: /tmp/tmpbhfh81ip.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long mid = (min + max) / 2;\n  std::vector<long> result;\n  while\
    \ (min <= max) {\n    result.push_back(mid);\n    mid = (min + max) / 2;\n   \
    \ if (mid < 1) min = mid + 10;\n    if (mid > 9) max = mid - 10;\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (long i : arr) {\n    long index = i - 1;\n    result.at(index)\
    \ = std::to_string(result.at(index));\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgetmw2av.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgetmw2av.cpp:30:38: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} in assignment\n   30 |     result.at(index) = std::to_string(result.at(index));\n\
    \      |                        ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |    \
    \                                  |\n      |                                \
    \      std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpgetmw2av.cpp:32:10:\
    \ error: could not convert \u2018result\u2019 from \u2018vector<long int>\u2019\
    \ to \u2018vector<std::__cxx11::basic_string<char>>\u2019\n   32 |   return result;\n\
    \      |          ^~~~~~\n      |          |\n      |          vector<long int>\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_val = *std::max_element(arr.begin(), arr.end());\n  long min_val =\
    \ *std::min_element(arr.begin(), arr.end());\n  std::vector<std::string> names;\n\
    \  for (long i = min_val; i <= max_val; i++) {\n    std::string name = \"\";\n\
    \    if (i < 10) {\n      name = \"One\";\n    } else if (i < 20) {\n      name\
    \ = \"Two\";\n    } else if (i < 30) {\n      name = \"Three\";\n    } else if\
    \ (i < 40) {\n      name = \"Four\";\n    } else if (i < 50) {\n      name = \"\
    Five\";\n    } else if (i < 60) {\n      name = \"Six\";\n    } else if (i < 70)\
    \ {\n      name = \"Seven\";\n    } else if (i < 80) {\n      name = \"Eight\"\
    ;\n    } else if (i < 90) {\n      name = \"Nine\";\n    } else {\n      name\
    \ = \"Ten\";\n    }\n    names.push_back(name);\n  }\n  std::reverse(names.begin(),\
    \ names.end());\n  return names;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpf3ly9tv5: /tmp/tmpf3ly9tv5.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135829
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long min_val = std::numeric_limits<long>::min();\n\
    \  long max_val = std::numeric_limits<long>::max();\n  for (long val : arr) {\n\
    \    if (val < min_val) {\n      min_val = val;\n    }\n    if (val > max_val)\
    \ {\n      max_val = val;\n    }\n  }\n  for (long val = min_val; val <= max_val;\
    \ val++) {\n    std::string name = \"\";\n    switch (val) {\n      case 1:\n\
    \        name = \"One\";\n        break;\n      case 2:\n        name = \"Two\"\
    ;\n        break;\n      case 3:\n        name = \"Three\";\n        break;\n\
    \      case 4:\n        name = \"Four\";\n        break;\n      case 5:\n    \
    \    name = \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n\
    \        break;\n      case 7:\n        name = \"Seven\";\n        break;\n  \
    \    case 8:\n        name = \"Eight\";\n        break;\n      case 9:\n     \
    \   name = \"Nine\";\n        break;\n      default:\n        break;\n    }\n\
    \    result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long max_val = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n  for (long val : arr) {\n    if (val < 1 || val > max_val)\
    \ {\n      continue;\n    }\n    result.push_back(std::to_string(val));\n  }\n\
    \  std::reverse(result.begin(), result.end());\n  for (std::string &s : result)\
    \ {\n    s = \"One\";\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp_aup_jh8: /tmp/tmp_aup_jh8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(to_string(static_cast<int>(i)));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = lookup(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsn6d6zz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwsn6d6zz.cpp:20:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       res.push_back(to_string(static_cast<int>(i)));\n      |     \
    \                ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwsn6d6zz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpwsn6d6zz.cpp:25:9: error: \u2018\
    lookup\u2019 was not declared in this scope\n   25 |     i = lookup(i);\n    \
    \  |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long curr = arr[0];\n  for (long i = 1;\
    \ i < arr.size(); i++) {\n    if (arr[i] < curr) {\n      result.push_back(to_string(curr));\n\
    \      curr = arr[i];\n    } else {\n      result.push_back(to_string(arr[i]));\n\
    \    }\n  }\n  result.push_back(to_string(curr));\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tw5wcud.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5tw5wcud.cpp:21:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       result.push_back(to_string(curr));\n      |                 \
    \       ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5tw5wcud.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp5tw5wcud.cpp:24:24: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       result.push_back(to_string(arr[i]));\n      |               \
    \         ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5tw5wcud.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n"
  stdout: ''
  timestamp: 1660135828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    for (auto i : arr) {\n        if (i >=\
    \ 1 && i <= 9) {\n            std::string s = std::to_string(i);\n           \
    \ std::reverse(s.begin(), s.end());\n            std::string t = s;\n        \
    \    std::replace(t.begin(), t.end(), '0', 'One');\n            std::replace(t.begin(),\
    \ t.end(), '1', 'Two');\n            std::replace(t.begin(), t.end(), '2', 'Three');\n\
    \            std::replace(t.begin(), t.end(), '3', 'Four');\n            std::replace(t.begin(),\
    \ t.end(), '4', 'Five');\n            std::replace(t.begin(), t.end(), '5', 'Six');\n\
    \            std::replace(t.begin(), t.end(), '6', 'Seven');\n            std::replace(t.begin(),\
    \ t.end(), '7', 'Eight');\n            std::replace(t.begin(), t.end(), '8', 'Nine');\n\
    \            res.push_back(std::move(t));\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpofohiz2e.cpp:23:51: warning: multi-character character constant\
    \ [-Wmultichar]\n   23 |             std::replace(t.begin(), t.end(), '0', 'One');\n\
    \      |                                                   ^~~~~\n/tmp/tmpofohiz2e.cpp:24:51:\
    \ warning: multi-character character constant [-Wmultichar]\n   24 |         \
    \    std::replace(t.begin(), t.end(), '1', 'Two');\n      |                  \
    \                                 ^~~~~\n/tmp/tmpofohiz2e.cpp:25:51: warning:\
    \ character constant too long for its type\n   25 |             std::replace(t.begin(),\
    \ t.end(), '2', 'Three');\n      |                                           \
    \        ^~~~~~~\n/tmp/tmpofohiz2e.cpp:26:51: warning: multi-character character\
    \ constant [-Wmultichar]\n   26 |             std::replace(t.begin(), t.end(),\
    \ '3', 'Four');\n      |                                                   ^~~~~~\n\
    /tmp/tmpofohiz2e.cpp:27:51: warning: multi-character character constant [-Wmultichar]\n\
    \   27 |             std::replace(t.begin(), t.end(), '4', 'Five');\n      | \
    \                                                  ^~~~~~\n/tmp/tmpofohiz2e.cpp:28:51:\
    \ warning: multi-character character constant [-Wmultichar]\n   28 |         \
    \    std::replace(t.begin(), t.end(), '5', 'Six');\n      |                  \
    \                                 ^~~~~\n/tmp/tmpofohiz2e.cpp:29:51: warning:\
    \ character constant too long for its type\n   29 |             std::replace(t.begin(),\
    \ t.end(), '6', 'Seven');\n      |                                           \
    \        ^~~~~~~\n/tmp/tmpofohiz2e.cpp:30:51: warning: character constant too\
    \ long for its type\n   30 |             std::replace(t.begin(), t.end(), '7',\
    \ 'Eight');\n      |                                                   ^~~~~~~\n\
    /tmp/tmpofohiz2e.cpp:31:51: warning: multi-character character constant [-Wmultichar]\n\
    \   31 |             std::replace(t.begin(), t.end(), '8', 'Nine');\n      | \
    \                                                  ^~~~~~\n/tmp/tmpofohiz2e.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long"
  stdout: ''
  timestamp: 1660135829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long min = *std::min_element(arr.begin(), arr.end());\n  for\
    \ (long i = min; i <= max; i++) {\n    std::string name = \"\";\n    switch (i)\
    \ {\n      case 1:\n        name = \"One\";\n        break;\n      case 2:\n \
    \       name = \"Two\";\n        break;\n      case 3:\n        name = \"Three\"\
    ;\n        break;\n      case 4:\n        name = \"Four\";\n        break;\n \
    \     case 5:\n        name = \"Five\";\n        break;\n      case 6:\n     \
    \   name = \"Six\";\n        break;\n      case 7:\n        name = \"Seven\";\n\
    \        break;\n      case 8:\n        name = \"Eight\";\n        break;\n  \
    \    case 9:\n        name = \"Nine\";\n        break;\n      default:\n     \
    \   continue;\n    }\n    result.push_back(name);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp9zk3nqdy: /tmp/tmp9zk3nqdy.cpp:61: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(to_string(static_cast<int>(i)));\n    } else {\n\
    \      res.push_back(\"\");\n    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n\
    \  for (int i = 0; i < res.size(); i++) {\n    res[i] = res[i].substr(0, 1) +\
    \ res[i].substr(1, res[i].size() - 1);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3s3ut_z5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3s3ut_z5.cpp:20:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       res.push_back(to_string(static_cast<int>(i)));\n      |     \
    \                ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3s3ut_z5.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<long> sorted_arr(arr.begin(), arr.end());\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    std::vector<long> reversed_arr(sorted_arr.rbegin(),\
    \ sorted_arr.rend());\n    std::vector<std::string> result;\n    for (long i :\
    \ reversed_arr) {\n        std::string name = \"\";\n        if (i >= 1 && i <=\
    \ 9) {\n            name = \"One\";\n        } else if (i >= 10 && i <= 99) {\n\
    \            name = \"Two\";\n        } else if (i >= 100 && i <= 999) {\n   \
    \         name = \"Three\";\n        } else if (i >= 1000 && i <= 9999) {\n  \
    \          name = \"Four\";\n        } else if (i >= 10000 && i <= 99999) {\n\
    \            name = \"Five\";\n        } else if (i >= 100000 && i <= 999999)\
    \ {\n            name = \"Six\";\n        } else if (i >= 1000000 && i <= 9999999)\
    \ {\n            name = \"Seven\";\n        } else if (i >= 10000000 && i <= 99999999)\
    \ {\n            name = \"Eight\";\n        } else if (i >= 10000000 && i <= 99999999)\
    \ {\n            name = \"Nine\";\n        }\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp5bzo2yl0: /tmp/tmp5bzo2yl0.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n  long min_val = *std::min_element(arr.begin(), arr.end());\n \
    \ long max_len = max_val - min_val + 1;\n  for (long i = 0; i < max_len; ++i)\
    \ {\n    long val = min_val + i;\n    if (val < 10) {\n      result.push_back(to_string(val));\n\
    \    } else {\n      result.push_back(to_string(val - 10));\n      result.push_back(to_string(val\
    \ % 10));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4xgczjc1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp4xgczjc1.cpp:26:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |       result.push_back(to_string(val));\n      |                  \
    \      ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4xgczjc1.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp4xgczjc1.cpp:28:24: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |       result.push_back(to_string(val - 10));\n      |             \
    \           ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4xgczjc1.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >=\
    \ 1 && i <= 9) {\n      result.push_back(to_string(static_cast<int>(i)));\n  \
    \  }\n  }\n  std::reverse(result.begin(), result.end());\n  for (auto &i : result)\
    \ {\n    i = to_string(static_cast<int>(i));\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2j1_vbi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpz2j1_vbi.cpp:22:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       result.push_back(to_string(static_cast<int>(i)));\n      |  \
    \                      ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpz2j1_vbi.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpz2j1_vbi.cpp:27:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   27 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpz2j1_vbi.cpp:27:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from "
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (std::string &s : res)\
    \ {\n    std::string &t = s;\n    t = std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqdm8t7q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpuqdm8t7q.cpp:26:1890: error:\
    \ expected primary-expression before \u2018(\u2019 token\n   26 |     t = std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), "
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1\
    \ && i <= 9) {\n      res.push_back(to_string(static_cast<int>(i)));\n    }\n\
    \  }\n  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n\
    \    i = to_string(static_cast<int>(i));\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hbbrozm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp4hbbrozm.cpp:22:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       res.push_back(to_string(static_cast<int>(i)));\n      |     \
    \                ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4hbbrozm.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp4hbbrozm.cpp:27:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   27 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmp4hbbrozm.cpp:27:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/incl"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long max_len = 0, min_len = 0, max_val\
    \ = 0, min_val = 0, max_val = 0, min_val = 0;\n  for (long i : arr) {\n    if\
    \ (max_len < i) {\n      max_len = i;\n    }\n    if (min_len > i) {\n      min_len\
    \ = i;\n    }\n    if (max_val < i) {\n      max_val = i;\n    }\n    if (min_val\
    \ > i) {\n      min_val = i;\n    }\n  }\n  long diff = max_len - min_len;\n \
    \ if (diff > 0) {\n    res.push_back((std::string)(\"One\"));\n    long val =\
    \ max_val;\n    while (val < min_val) {\n      res.push_back((std::string)(\"\
    One\"));\n      val++;\n    }\n    while (val > 0) {\n      res.push_back((std::string)(\"\
    One\"));\n      val--;\n    }\n  }\n  if (diff < 0) {\n    res.push_back((std::string)(\"\
    One\"));\n    long val = min_val;\n    while (val > max_val) {\n      res.push_back((std::string)(\"\
    One\"));\n      val--;\n    }\n    while (val < 0) {\n      res.push_back((std::string)(\"\
    One\"));\n      val++;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyspqf5ox.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpyspqf5ox.cpp:20:60: error:\
    \ redeclaration of \u2018long int max_val\u2019\n   20 |   long max_len = 0, min_len\
    \ = 0, max_val = 0, min_val = 0, max_val = 0, min_val = 0;\n      |          \
    \                                                  ^~~~~~~\n/tmp/tmpyspqf5ox.cpp:20:34:\
    \ note: \u2018long int max_val\u2019 previously declared here\n   20 |   long\
    \ max_len = 0, min_len = 0, max_val = 0, min_val = 0, max_val = 0, min_val = 0;\n\
    \      |                                  ^~~~~~~\n/tmp/tmpyspqf5ox.cpp:20:73:\
    \ error: redeclaration of \u2018long int min_val\u2019\n   20 |   long max_len\
    \ = 0, min_len = 0, max_val = 0, min_val = 0, max_val = 0, min_val = 0;\n    \
    \  |                                                                         ^~~~~~~\n\
    /tmp/tmpyspqf5ox.cpp:20:47: note: \u2018long int min_val\u2019 previously declared\
    \ here\n   20 |   long max_len = 0, min_len = 0, max_val = 0, min_val = 0, max_val\
    \ = 0, min_val = 0;\n      |                                               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      names.push_back(to_string(static_cast<int>(i)));\n    }\n \
    \ }\n  std::reverse(names.begin(), names.end());\n  for (auto &name : names) {\n\
    \    std::string &s = name;\n    std::string &t = to_string(static_cast<int>(s));\n\
    \    s.replace(s.length(), t.length(), t);\n  }\n  return names;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpigqfe9v0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpigqfe9v0.cpp:20:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       names.push_back(to_string(static_cast<int>(i)));\n      |   \
    \                    ^~~~~~~~~\n      |                       std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpigqfe9v0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpigqfe9v0.cpp:26:50: error: invalid\
    \ static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018int\u2019\n   26 |     std::string &t = to_string(static_cast<int>(s));\n\
    \      |                                                  ^\n/tmp/tmpigqfe9v0.cpp:26:22:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   26 |     std::string &t = to_string(static_cast<int>(s));\n\
    \      |                      ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/c"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 100) {\n      name = \"Two\";\n    } else if (i < 1000)\
    \ {\n      name = \"Three\";\n    } else if (i < 10000) {\n      name = \"Four\"\
    ;\n    } else if (i < 100000) {\n      name = \"Five\";\n    } else if (i < 1000000)\
    \ {\n      name = \"Six\";\n    } else if (i < 10000000) {\n      name = \"Seven\"\
    ;\n    } else if (i < 100000000) {\n      name = \"Eight\";\n    } else if (i\
    \ < 1000000000) {\n      name = \"Nine\";\n    }\n    res.push_back(name);\n \
    \ }\n  std::reverse(arr.begin(), arr.end());\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    arr[i] = arr[i] + \"\";\n  }\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    arr[i] = arr[i][0];\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4zewfx4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpm4zewfx4.cpp:47:21: error:\
    \ invalid conversion from \u2018const char*\u2019 to \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} [-fpermissive]\n\
    \   47 |     arr[i] = arr[i] + \"\";\n/tmp/tmpm4zewfx4.cpp:50:22: error: invalid\
    \ types \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\
    \ {aka long int}[int]\u2019 for array subscript\n   50 |     arr[i] = arr[i][0];\n\
    \      |                      ^\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long curr = arr[0];\n  for (long i : arr)\
    \ {\n    if (i <= 9) {\n      res.push_back(to_string(curr));\n      curr = i;\n\
    \    } else {\n      res.push_back(to_string(curr));\n      res.push_back(to_string(i\
    \ - 10));\n      curr = i;\n    }\n  }\n  res.push_back(to_string(curr));\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvw0epa_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnvw0epa_.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(curr));\n      |                    \
    \ ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnvw0epa_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpnvw0epa_.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(curr));\n      |                    \
    \ ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnvw0epa_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string("
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long range = (max - min) + 1;\n  long digits = std::ceil(std::log10(range));\n\
    \  std::vector<std::string> result;\n  for (long i = min; i <= max; i++) {\n \
    \   long index = range / i;\n    long remainder = range % i;\n    result.push_back(to_string(index)\
    \ + (remainder == 0 ? \"\" : to_string(10 - remainder)));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1cja7xt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpf1cja7xt.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(index) + (remainder == 0 ? \"\" : to_string(10\
    \ - remainder)));\n      |                      ^~~~~~~~~\n      |           \
    \           std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf1cja7xt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(\"One\");\n    } else if (i >= 10 && i <= 99) {\n\
    \      res.push_back(\"Two\");\n    } else if (i >= 100 && i <= 999) {\n     \
    \ res.push_back(\"Three\");\n    } else if (i >= 1000 && i <= 9999) {\n      res.push_back(\"\
    Four\");\n    } else if (i >= 10000 && i <= 99999) {\n      res.push_back(\"Five\"\
    );\n    } else if (i >= 100000 && i <= 999999) {\n      res.push_back(\"Six\"\
    );\n    } else if (i >= 1000000 && i <= 9999999) {\n      res.push_back(\"Seven\"\
    );\n    } else if (i >= 10000000 && i <= 99999999) {\n      res.push_back(\"Eight\"\
    );\n    } else if (i >= 100000000 && i <= 999999999) {\n      res.push_back(\"\
    Nine\");\n    } else {\n      res.push_back(\"Unknown\");\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpuzh4ac0f: /tmp/tmpuzh4ac0f.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  std::vector<std::string> res;\n  for (long\
    \ i : arr) {\n    if (i < mid) {\n      res.push_back(\"One\");\n    } else if\
    \ (i > mid) {\n      res.push_back(\"Nine\");\n    } else {\n      res.push_back(\"\
    Two\");\n    }\n  }\n  std::reverse(arr.begin(), arr.end());\n  for (long i :\
    \ arr) {\n    std::string s = std::to_string(i);\n    std::string t = std::to_string(i\
    \ - 1);\n    res.erase(std::remove(std::begin(res), std::end(res), t), std::end(res));\n\
    \    res.insert(std::begin(res), s);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpaldczt8d: /tmp/tmpaldczt8d.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> result;\n  for (long val = min_val; val <= max_val;\
    \ val++) {\n    result.push_back(to_string(val));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (long val : arr) {\n    long index = std::distance(result.begin(),\
    \ std::find(result.begin(), result.end(), to_string(val)));\n    result[index]\
    \ = to_string(val);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1uzbnmc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpe1uzbnmc.cpp:25:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpe1uzbnmc.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpe1uzbnmc.cpp:29:88: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     long index = std::distance(result.begin(), std::find(result.begin(),\
    \ result.end(), to_string(val)));\n      |                                   \
    \                                                     ^~~~~~~~~\n      |     \
    \                                                                            \
    \       std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ std::vector<std::string>();\n    }\n    std::vector<std::string> res;\n    long\
    \ cur = arr[0];\n    long cur2 = cur;\n    long cur3 = cur;\n    long cur4 = cur;\n\
    \    long cur5 = cur;\n    long cur6 = cur;\n    long cur7 = cur;\n    long cur8\
    \ = cur;\n    long cur9 = cur;\n    long cur10 = cur;\n    long cur11 = cur;\n\
    \    long cur12 = cur;\n    long cur13 = cur;\n    long cur14 = cur;\n    long\
    \ cur15 = cur;\n    long cur16 = cur;\n    long cur17 = cur;\n    long cur18 =\
    \ cur;\n    long cur19 = cur;\n    long cur20 = cur;\n    long cur21 = cur;\n\
    \    long cur22 = cur;\n    long cur23 = cur;\n    long cur24 = cur;\n    long\
    \ cur25 = cur;\n    long cur26 = cur;\n    long cur27 = cur;\n    long cur28 =\
    \ cur;\n    long cur29 = cur;\n    long cur30 = cur;\n    long cur31 = cur;\n\
    \    long cur32 = cur;\n    long cur33 = cur;\n    long cur34 = cur;\n    long\
    \ cur35 = cur;\n    long cur36 = cur;\n    long cur37 = cur;\n    long cur38 =\
    \ cur;\n    long cur39 = cur;\n    long cur40 = cur;\n    long cur41 = cur;\n\
    \    long cur42 = cur;\n    long cur43 = cur;\n    long cur44 = cur;\n    long\
    \ cur45 = cur;\n    long cur46 = cur;\n    long cur47 = cur;\n    long cur48 =\
    \ cur;\n    long cur49 = cur;\n    long cur50 = cur;\n    long cur51 = cur;\n\
    \    long cur52 = cur;\n    long cur53 = cur;\n    long cur54 = cur;\n    long\
    \ cur55 = cur;\n    long cur56 = cur;\n    long cur57 = cur;\n    long cur58 =\
    \ cur;\n    long cur59 = cur;\n    long cur60 = cur;\n    long cur61 = cur;\n\
    \    long cur62 = cur;\n    long cur63 = cur;\n    long cur\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdombz8b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphdombz8b.cpp:84:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmphdombz8b.cpp:84:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long min = std::numeric_limits<long>::min();\n\
    \  long max = std::numeric_limits<long>::max();\n  for (long i : arr) {\n    if\
    \ (i >= min && i <= max) {\n      result.push_back(std::to_string(i));\n    }\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  for (auto &i : result)\
    \ {\n    i = std::to_string(i).substr(0, 1);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6f7535n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpd6f7535n.cpp:27:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   27 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpd6f7535n.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135830
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_len = *std::max_element(arr.begin(), arr.end()) + 1;\n  std::vector<std::string>\
    \ res;\n  for (long i = 0; i < max_len; ++i) {\n    std::string name;\n    if\
    \ (arr[i] < 10) {\n      name = \"One\";\n    } else if (arr[i] < 20) {\n    \
    \  name = \"Two\";\n    } else if (arr[i] < 30) {\n      name = \"Three\";\n \
    \   } else if (arr[i] < 40) {\n      name = \"Four\";\n    } else if (arr[i] <\
    \ 50) {\n      name = \"Five\";\n    } else if (arr[i] < 60) {\n      name = \"\
    Six\";\n    } else if (arr[i] < 70) {\n      name = \"Seven\";\n    } else if\
    \ (arr[i] < 80) {\n      name = \"Eight\";\n    } else {\n      name = \"Nine\"\
    ;\n    }\n    res.push_back(name);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmphbbnm1tt: /tmp/tmphbbnm1tt.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> reversed;\n  for (long i = min; i <= max; i++)\
    \ {\n    reversed.push_back(i);\n  }\n  std::reverse(reversed.begin(), reversed.end());\n\
    \  std::vector<std::string> result;\n  for (long i : reversed) {\n    std::string\
    \ name;\n    switch (i) {\n      case 1:\n        name = \"One\";\n        break;\n\
    \      case 2:\n        name = \"Two\";\n        break;\n      case 3:\n     \
    \   name = \"Three\";\n        break;\n      case 4:\n        name = \"Four\"\
    ;\n        break;\n      case 5:\n        name = \"Five\";\n        break;\n \
    \     case 6:\n        name = \"Six\";\n        break;\n      case 7:\n      \
    \  name = \"Seven\";\n        break;\n      case 8:\n        name = \"Eight\"\
    ;\n        break;\n      case 9:\n        name = \"Nine\";\n        break;\n \
    \     default:\n        name = \"?\";\n    }\n    result.push_back(name);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp3kur5v_s: /tmp/tmp3kur5v_s.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long min_val = std::numeric_limits<long>::min();\n  long max_val = std::numeric_limits<long>::max();\n\
    \  for (long val : arr) {\n    if (val < min_val) {\n      min_val = val;\n  \
    \  }\n    if (val > max_val) {\n      max_val = val;\n    }\n  }\n  std::vector<std::string>\
    \ result;\n  for (long val = min_val; val <= max_val; val++) {\n    result.push_back(to_string(val));\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  for (long val : arr) {\n\
    \    long index = result.size() - 1 - val;\n    result.at(index) = to_string(val);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9rs2dga4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp9rs2dga4.cpp:31:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |     result.push_back(to_string(val));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9rs2dga4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp9rs2dga4.cpp:36:24: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   36 |     result.at(index) = to_string(val);\n      |                   \
    \     ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9rs2dga4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   t"
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // find minimum value\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // find maximum value\n\
    \  std::vector<std::string> res;\n  for (long i = min; i <= max; i++) {\n    std::string\
    \ s = to_string(i);\n    res.push_back(s);\n  }\n  std::reverse(arr.begin(), arr.end());\
    \ // reverse the vector\n  for (long i = 0; i < arr.size(); i++) {\n    arr[i]\
    \ = arr[i] + to_string(i); // add each element to the vector\n  }\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    arr[i] = arr[i][0] - '0'; // subtract each\
    \ element from the vector\n  }\n  for (long i = 0; i < arr.size(); i++) {\n  \
    \  arr[i] = arr[i] + \"One\"; // add each element to the vector\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24yp7xpd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp24yp7xpd.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     std::string s = to_string(i);\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp24yp7xpd.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp24yp7xpd.cpp:26:23: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     arr[i] = arr[i] + to_string(i); // add each element to the vector\n\
    \      |                       ^~~~~~~~~\n      |                       std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp24yp7xpd.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 de"
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max = *std::max_element(arr.begin(), arr.end());\n  long min = *std::min_element(arr.begin(),\
    \ arr.end());\n  long diff = max - min;\n  long mod = diff % 10;\n  long digits\
    \ = diff / 10;\n  std::vector<std::string> result;\n  for (long i = 0; i < digits;\
    \ i++) {\n    long val = min + i;\n    std::string name = to_string(val);\n  \
    \  result.push_back(name);\n  }\n  if (mod != 0) {\n    result.push_back(to_string(mod));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixap0a_f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpixap0a_f.cpp:25:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     std::string name = to_string(val);\n      |                   \
    \     ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpixap0a_f.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpixap0a_f.cpp:29:22: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     result.push_back(to_string(mod));\n      |                    \
    \  ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpixap0a_f.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   t"
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push_back(to_string(arr[i]));\n\
    \    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n  for (int i = 0;\
    \ i < res.size(); i++) {\n    res[i] = to_string(res[i][0]);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa09cgq84.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpa09cgq84.cpp:22:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       res.push_back(to_string(arr[i]));\n      |                  \
    \   ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpa09cgq84.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpa09cgq84.cpp:27:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res[i] = to_string(res[i][0]);\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpa09cgq84.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __v"
  stdout: ''
  timestamp: 1660135830
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto val : arr) {\n\
    \    if (val < min_val) min_val = val;\n    if (val > max_val) max_val = val;\n\
    \  }\n  std::vector<std::string> result;\n  for (long i = min_val; i <= max_val;\
    \ i++) {\n    std::string name = \"\";\n    switch (i) {\n      case 1:\n    \
    \    name = \"One\";\n        break;\n      case 2:\n        name = \"Two\";\n\
    \        break;\n      case 3:\n        name = \"Three\";\n        break;\n  \
    \    case 4:\n        name = \"Four\";\n        break;\n      case 5:\n      \
    \  name = \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n\
    \        break;\n      case 7:\n        name = \"Seven\";\n        break;\n  \
    \    case 8:\n        name = \"Eight\";\n        break;\n      case 9:\n     \
    \   name = \"Nine\";\n        break;\n      default:\n        break;\n    }\n\
    \    result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpcs7nash5: /tmp/tmpcs7nash5.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string s = to_string(i);\n    res.push_back(s);\n  }\n  std::reverse(arr.begin(),\
    \ arr.end());\n  for (long i = 0; i < arr.size(); i++) {\n    arr[i] = arr[i]\
    \ + to_string(i).length();\n  }\n  for (long i = 0; i < arr.size(); i++) {\n \
    \   arr[i] = arr[i] % 10;\n  }\n  for (long i = 0; i < arr.size(); i++) {\n  \
    \  arr[i] = arr[i] / 10;\n  }\n  for (long i = 0; i < arr.size(); i++) {\n   \
    \ arr[i] = arr[i] + '0';\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0v70320l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp0v70320l.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     std::string s = to_string(i);\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0v70320l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp0v70320l.cpp:26:23: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     arr[i] = arr[i] + to_string(i).length();\n      |             \
    \          ^~~~~~~~~\n      |                       std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0v70320l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_"
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  long max = std::numeric_limits<long>::max();\n\
    \  for (long num : arr) {\n    if (num < 1 || num > max) continue;\n    std::string\
    \ name = names[num - 1];\n    if (name.empty()) name = to_string(num);\n    names.push_back(name);\n\
    \  }\n  std::reverse(names.begin(), names.end());\n  for (int i = 0; i < names.size();\
    \ i++) {\n    std::string name = names[i];\n    if (name.empty()) name = to_string(names[i]);\n\
    \    names[i] = name;\n  }\n  return names;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4nbqe43.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpg4nbqe43.cpp:22:30: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |     if (name.empty()) name = to_string(num);\n      |             \
    \                 ^~~~~~~~~\n      |                              std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpg4nbqe43.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpg4nbqe43.cpp:28:48: error: no matching\
    \ function for call to \u2018to_string(__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type&)\u2019\n   28 |     if (name.empty())\
    \ name = to_string(names[i]);\n      |                                       \
    \         ^\nIn file included from /usr/include/c++/9/string:55,\n           \
    \      from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpg4nbqe43.cpp:2:\n/usr/include/c++/9/bits/basic_"
  stdout: ''
  timestamp: 1660135831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> result;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i < min || i > max) continue;\n        result.push_back(to_string(i\
    \ - min));\n    }\n    std::reverse(result.begin(), result.end());\n    for (long\
    \ i : arr) {\n        if (i < min || i > max) continue;\n        result.push_back(to_string(i\
    \ - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemywshcg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpemywshcg.cpp:22:26: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |         result.push_back(to_string(i - min));\n      |            \
    \              ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpemywshcg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpemywshcg.cpp:27:26: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |         result.push_back(to_string(i - min));\n      |            \
    \              ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpemywshcg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string"
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  long mid2 = mid / 10;\n  long mid3 = mid2\
    \ / 10;\n  long mid4 = mid3 / 10;\n  long mid5 = mid4 / 10;\n  long mid6 = mid5\
    \ / 10;\n  long mid7 = mid6 / 10;\n  long mid8 = mid7 / 10;\n  long mid9 = mid8\
    \ / 10;\n  long mid10 = mid9 / 10;\n  long mid11 = mid10 / 10;\n  long mid12 =\
    \ mid11 / 10;\n  long mid13 = mid12 / 10;\n  long mid14 = mid13 / 10;\n  long\
    \ mid15 = mid14 / 10;\n  long mid16 = mid15 / 10;\n  long mid17 = mid16 / 10;\n\
    \  long mid18 = mid17 / 10;\n  long mid19 = mid18 / 10;\n  long mid20 = mid19\
    \ / 10;\n  long mid21 = mid20 / 10;\n  long mid22 = mid21 / 10;\n  long mid23\
    \ = mid22 / 10;\n  long mid24 = mid23 / 10;\n  long mid25 = mid24 / 10;\n  long\
    \ mid26 = mid25 / 10;\n  long mid27 = mid26 / 10;\n  long mid28 = mid27 / 10;\n\
    \  long mid29 = mid28 / 10;\n  long mid30 = mid29 / 10;\n  long mid31 = mid30\
    \ / 10;\n  long mid32 = mid31 / 10;\n  long mid33 = mid32 / 10;\n  long mid34\
    \ = mid33 / 10;\n  long mid35 = mid34 / 10;\n  long mid36 = mid35 / 10;\n  long\
    \ mid37 = mid36 / 10;\n  long mid38 = mid37 / 10;\n  long mid39 = mid38 / 10;\n\
    \  long mid40 = mid39 / 10;\n  long mid41 = mid40 / 10;\n  long mid42 = mid41\
    \ / 10;\n  long mid43 = mid42 / 10;\n  long mid44 = mid43 / 10;\n  long mid45\
    \ = mid44 / 10;\n  long mid46 = mid45 / 10;\n  long mid47 = mid46 / 10;\n  long\
    \ mid48 = mid47 / 10;\n  long mid49 = mid48 / 10;\n\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp7sdg5aam: /tmp/tmp7sdg5aam.cpp:72: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n  long min = *std::min_element(arr.begin(), arr.end()) + 1;\n\
    \  for (long i = min; i <= max; ++i) {\n    std::string name;\n    if (i >= 1\
    \ && i <= 9) {\n      name = \"One\";\n    } else if (i >= 10 && i <= 99) {\n\
    \      name = \"Two\";\n    } else if (i >= 100 && i <= 999) {\n      name = \"\
    Three\";\n    } else if (i >= 1000 && i <= 9999) {\n      name = \"Four\";\n \
    \   } else if (i >= 10000 && i <= 99999) {\n      name = \"Five\";\n    } else\
    \ if (i >= 100000 && i <= 999999) {\n      name = \"Six\";\n    } else if (i >=\
    \ 1000000 && i <= 9999999) {\n      name = \"Seven\";\n    } else if (i >= 10000000\
    \ && i <= 99999999) {\n      name = \"Eight\";\n    } else if (i >= 1000000 &&\
    \ i <= 999999999) {\n      name = \"Nine\";\n    } else {\n      name = \"Unknown\"\
    ;\n    }\n    res.push_back(name);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpntc97w2e: /tmp/tmpntc97w2e.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  std::string name;\n  for (long i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      name = to_string(static_cast<int>(i));\n\
    \    } else {\n      name = \"?\";\n    }\n    names.push_back(name);\n  }\n \
    \ std::reverse(names.begin(), names.end());\n  return names;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk3976fe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjk3976fe.cpp:21:14: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       name = to_string(static_cast<int>(i));\n      |             \
    \ ^~~~~~~~~\n      |              std::__cxx11::to_string\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjk3976fe.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  long max_len = 0, min_len = std::numeric_limits<long>::max();\n  for (long\
    \ i : arr) {\n    min_len = std::min(min_len, i);\n    max_len = std::max(max_len,\
    \ i);\n  }\n  std::vector<std::string> res;\n  for (long i = min_len; i <= max_len;\
    \ ++i) {\n    res.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &i : res) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mnp8frz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp4mnp8frz.cpp:26:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     res.push_back(to_string(static_cast<int>(i)));\n      |       \
    \            ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4mnp8frz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp4mnp8frz.cpp:30:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   30 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmp4mnp8frz.cpp:30:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x8"
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long curr = arr[0];\n    long last\
    \ = arr[0];\n    for (long i : arr) {\n        if (i > last) {\n            res.push_back((std::to_string(curr)));\n\
    \            curr = i;\n        }\n        last = i;\n    }\n    res.push_back((std::to_string(curr)));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp9v4wwq8a: /tmp/tmp9v4wwq8a.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &i : res) {\n    i = std::to_string(i).substr(0,\
    \ 1);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshyx2jzh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpshyx2jzh.cpp:25:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpshyx2jzh.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    } else {\n\
    \      res.push_back(\"One\");\n    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpp6811saa: /tmp/tmpp6811saa.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto i : arr)\
    \ {\n    if (i < min_val) {\n      min_val = i;\n    } else if (i > max_val) {\n\
    \      max_val = i;\n    }\n  }\n  std::vector<std::string> res;\n  for (long\
    \ i = min_val; i <= max_val; i++) {\n    res.push_back(to_string(static_cast<int>(i)));\n\
    \  }\n  std::reverse(std::begin(res), std::end(res));\n  for (auto i : res) {\n\
    \    std::string name = to_string(static_cast<int>(i));\n    std::string replacement_name\
    \ = \"\";\n    if (name == \"One\") {\n      replacement_name = \"One\";\n   \
    \ } else if (name == \"Two\") {\n      replacement_name = \"Two\";\n    } else\
    \ if (name == \"Three\") {\n      replacement_name = \"Three\";\n    } else if\
    \ (name == \"Four\") {\n      replacement_name = \"Four\";\n    } else if (name\
    \ == \"Five\") {\n      replacement_name = \"Five\";\n    } else if (name == \"\
    Six\") {\n      replacement_name = \"Six\";\n    } else if (name == \"Seven\"\
    ) {\n      replacement_name = \"Seven\";\n    } else if (name == \"Eight\") {\n\
    \      replacement_name = \"Eight\";\n    } else if (name == \"Nine\") {\n   \
    \   replacement_name = \"Nine\";\n    }\n    if (replacement_name != \"\") {\n\
    \      res.erase(std::remove(res.begin(), res.end(), replacement_name), res.end());\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph3y3cz_o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmph3y3cz_o.cpp:30:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     res.push_back(to_string(static_cast<int>(i)));\n      |       \
    \            ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmph3y3cz_o.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmph3y3cz_o.cpp:34:52: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   34 |     std::string name = to_string(static_cast<int>(i));\n  \
    \    |                                                    ^\n/tmp/tmph3y3cz_o.cpp:34:24:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   34 |     std::string name = to_string(static_cast<int>(i));\n\
    \      |                        ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \               "
  stdout: ''
  timestamp: 1660135831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back(to_string(static_cast<int>(i)));\n    } else {\n\
    \      res.push_back(\"\");\n    }\n  }\n  std::reverse(std::begin(res), std::end(res));\n\
    \  for (auto &i : res) {\n    i = to_string(static_cast<int>(i));\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s_ckzto.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp9s_ckzto.cpp:20:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       res.push_back(to_string(static_cast<int>(i)));\n      |     \
    \                ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9s_ckzto.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp9s_ckzto.cpp:27:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   27 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmp9s_ckzto.cpp:27:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/incl"
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) if (i\
    \ < min_val) min_val = i;\n  for (long i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    std::string s = \"\";\n    for (long j = 1; j <= 9; j++) {\n      if\
    \ (i == j) s += \"One\";\n      else if (i < j) s += \"Two\";\n      else if (i\
    \ > j) s += \"Three\";\n      else s += \"Four\";\n    }\n    res.push_back(s);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpq1o5vl2c: /tmp/tmpq1o5vl2c.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  long max_len = 0, min_len = 0, max_val\
    \ = 0, min_val = 0, cur_val = 0, cur_len = 0;\n  for (long val : arr) {\n    if\
    \ (val > 9) {\n      res.emplace_back(to_string(val));\n      continue;\n    }\n\
    \    if (val < 1) {\n      res.emplace_back(to_string(val));\n      continue;\n\
    \    }\n    if (val > max_len) {\n      max_len = val;\n    }\n    if (val < min_len)\
    \ {\n      min_len = val;\n    }\n    if (val > max_val) {\n      max_val = val;\n\
    \    }\n    if (val < min_val) {\n      min_val = val;\n    }\n    cur_len = val\
    \ - min_len;\n    if (cur_len > cur_val) {\n      cur_val = cur_len;\n    }\n\
    \  }\n  res.emplace_back(to_string(max_len));\n  res.emplace_back(to_string(min_len));\n\
    \  res.emplace_back(to_string(max_val));\n  res.emplace_back(to_string(min_val));\n\
    \  res.emplace_back(to_string(cur_val));\n  return res;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnee5lbs4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnee5lbs4.cpp:23:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |       res.emplace_back(to_string(val));\n      |                  \
    \      ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnee5lbs4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpnee5lbs4.cpp:27:24: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |       res.emplace_back(to_string(val));\n      |                  \
    \      ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnee5lbs4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 660"
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = arr[0];\n  long max = arr[0];\n  for (long i : arr) min = std::min(i,\
    \ min);\n  for (long i : arr) max = std::max(i, max);\n  std::vector<std::string>\
    \ res;\n  for (long i = min; i <= max; i++) {\n    std::string name = \"\";\n\
    \    if (i < 10) name += \"One\";\n    else if (i < 20) name += \"Two\";\n   \
    \ else if (i < 30) name += \"Three\";\n    else if (i < 40) name += \"Four\";\n\
    \    else if (i < 50) name += \"Five\";\n    else if (i < 60) name += \"Six\"\
    ;\n    else if (i < 70) name += \"Seven\";\n    else if (i < 80) name += \"Eight\"\
    ;\n    else if (i < 90) name += \"Nine\";\n    else name += \"Ten\";\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpksz98893: /tmp/tmpksz98893.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  long mid2 = mid / 10;\n  long mid3 = mid\
    \ % 10;\n  long mid4 = mid2 / 10;\n  long mid5 = mid2 % 10;\n  long mid6 = mid3\
    \ / 10;\n  long mid7 = mid3 % 10;\n  long mid8 = mid4 / 10;\n  long mid9 = mid4\
    \ % 10;\n  long mid10 = mid5 / 10;\n  long mid11 = mid5 % 10;\n  long mid12 =\
    \ mid6 / 10;\n  long mid13 = mid6 % 10;\n  long mid14 = mid7 / 10;\n  long mid15\
    \ = mid7 % 10;\n  long mid16 = mid8 / 10;\n  long mid17 = mid8 % 10;\n  long mid18\
    \ = mid9 / 10;\n  long mid19 = mid9 % 10;\n  long mid20 = mid10 / 10;\n  long\
    \ mid21 = mid10 % 10;\n  long mid22 = mid11 / 10;\n  long mid23 = mid11 % 10;\n\
    \  long mid24 = mid12 / 10;\n  long mid25 = mid12 % 10;\n  long mid26 = mid13\
    \ / 10;\n  long mid27 = mid13 % 10;\n  long mid28 = mid14 / 10;\n  long mid29\
    \ = mid14 % 10;\n  long mid30 = mid15 / 10;\n  long mid31 = mid15 % 10;\n  long\
    \ mid32 = mid16 / 10;\n  long mid33 = mid16 % 10;\n  long mid34 = mid17 / 10;\n\
    \  long mid35 = mid17 % 10;\n  long mid36 = mid18 / 10;\n  long mid37 = mid18\
    \ % 10;\n  long mid38 = mid19 / 10;\n  long mid39 = mid19 % 10;\n  long mid40\
    \ = mid20 / 10;\n  long mid41 = mid20 % 10;\n  long mid42 = mid21 / 10;\n  long\
    \ mid43 = mid21 % 10;\n  long mid44 = mid22 / 10;\n  long mid45 = mid22 % 10;\n\
    \  long mid46 = mid23 / 10;\n  long mid47 = mid23 % 10;\n  long mid48 = mid24\
    \ / 10;\n  long mid49 = mid24\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwd8w2bs9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwd8w2bs9.cpp:70:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   70 |\
    \ }\n      | ^\n/tmp/tmpwd8w2bs9.cpp:70:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   70 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660135831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_len = 0, min_len = std::numeric_limits<long>::max();\n  for (long\
    \ i : arr) {\n    if (i < min_len) min_len = i;\n    if (i > max_len) max_len\
    \ = i;\n  }\n  std::vector<std::string> res;\n  for (long i = min_len; i <= max_len;\
    \ ++i) {\n    std::string s = \"\";\n    for (long j : arr) {\n      if (j ==\
    \ i) s += \"One\";\n      else if (j == i + 1) s += \"Two\";\n      else if (j\
    \ == i + 2) s += \"Three\";\n      else if (j == i + 3) s += \"Four\";\n     \
    \ else if (j == i + 4) s += \"Five\";\n      else if (j == i + 5) s += \"Six\"\
    ;\n      else if (j == i + 6) s += \"Seven\";\n      else if (j == i + 7) s +=\
    \ \"Eight\";\n      else if (j == i + 8) s += \"Nine\";\n      else s += \"?\"\
    ;\n    }\n    res.push_back(s);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpq5uir9wk: /tmp/tmpq5uir9wk.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  long length = arr.size();\n  for (long i\
    \ = 0; i < length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      names.push_back(std::to_string(arr[i]));\n\
    \    }\n  }\n  std::reverse(names.begin(), names.end());\n  for (long i = 0; i\
    \ < length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      names[i] = names[arr[i]\
    \ - 1];\n    }\n  }\n  return names;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpb5h5cln8: /tmp/tmpb5h5cln8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> sorted_arr;\n  for (long i = min; i <= max;\
    \ i++) {\n    sorted_arr.push_back(i);\n  }\n  std::reverse(sorted_arr.begin(),\
    \ sorted_arr.end());\n  std::vector<std::string> result;\n  for (long i : sorted_arr)\
    \ {\n    result.push_back(name_by_length(i));\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpguvqdqag.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpguvqdqag.cpp:26:22: error:\
    \ \u2018name_by_length\u2019 was not declared in this scope; did you mean \u2018\
    by_length\u2019?\n   26 |     result.push_back(name_by_length(i));\n      |  \
    \                    ^~~~~~~~~~~~~~\n      |                      by_length\n"
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  long max = *std::max_element(arr.begin(), arr.end());\n  std::vector<std::string>\
    \ result;\n  for (long i = 1; i <= max; i++) {\n    long index = i;\n    while\
    \ (index > 0) {\n      index = index / 10;\n      result.push_back(names[index]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprng4mib_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmprng4mib_.cpp:25:24: error:\
    \ \u2018names\u2019 was not declared in this scope\n   25 |       result.push_back(names[index]);\n\
    \      |                        ^~~~~\n"
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    res.push_back(to_name(i));\n  }\n  std::reverse(arr.begin(), arr.end());\n\
    \  for (long i : arr) {\n    res.push_back(to_name(i));\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w6d6tzf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8w6d6tzf.cpp:21:19: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     res.push_back(to_name(i));\n      |                   ^~~~~~~\n\
    \      |                   tzname\n/tmp/tmp8w6d6tzf.cpp:25:19: error: \u2018to_name\u2019\
    \ was not declared in this scope; did you mean \u2018tzname\u2019?\n   25 |  \
    \   res.push_back(to_name(i));\n      |                   ^~~~~~~\n      |   \
    \                tzname\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    res.push_back(to_name(i));\n  }\n  std::reverse(arr.begin(), arr.end());\n\
    \  for (long i : arr) {\n    res.push_back(to_name(i));\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w6d6tzf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8w6d6tzf.cpp:21:19: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     res.push_back(to_name(i));\n      |                   ^~~~~~~\n\
    \      |                   tzname\n/tmp/tmp8w6d6tzf.cpp:25:19: error: \u2018to_name\u2019\
    \ was not declared in this scope; did you mean \u2018tzname\u2019?\n   25 |  \
    \   res.push_back(to_name(i));\n      |                   ^~~~~~~\n      |   \
    \                tzname\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr)\
    \ {\n    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> result;\n  for (long i = min_val; i <= max_val;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgec_u0tf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgec_u0tf.cpp:27:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     result.push_back(to_string(static_cast<int>(i)));\n      |    \
    \                  ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgec_u0tf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpgec_u0tf.cpp:31:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   31 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpgec_u0tf.cpp:31:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/i"
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) {\n\
    \    if (i < min_val) min_val = i;\n    if (i > max_val) max_val = i;\n  }\n \
    \ std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++) {\n\
    \    res.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &i : res) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgiipsr03.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgiipsr03.cpp:25:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     res.push_back(to_string(static_cast<int>(i)));\n      |       \
    \            ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgiipsr03.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpgiipsr03.cpp:29:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   29 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpgiipsr03.cpp:29:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x8"
  stdout: ''
  timestamp: 1660135832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n  long min = *std::min_element(arr.begin(), arr.end()) + 1;\n\
    \  for (long i = min; i <= max; i++) {\n    std::string name;\n    if (i < 10)\
    \ {\n      name = \"One\";\n    } else if (i < 100) {\n      name = \"Two\";\n\
    \    } else if (i < 1000) {\n      name = \"Three\";\n    } else if (i < 10000)\
    \ {\n      name = \"Four\";\n    } else if (i < 100000) {\n      name = \"Five\"\
    ;\n    } else if (i < 1000000) {\n      name = \"Six\";\n    } else if (i < 10000000)\
    \ {\n      name = \"Seven\";\n    } else if (i < 100000000) {\n      name = \"\
    Eight\";\n    } else {\n      name = \"Nine\";\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp42_e7mv4: /tmp/tmp42_e7mv4.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string ans = \"\";\n  for (long i : arr) {\n    ans += \"One\";\n    if\
    \ (i < 10) ans += \"Two\";\n    if (i < 20) ans += \"Three\";\n    if (i < 30)\
    \ ans += \"Four\";\n    if (i < 40) ans += \"Five\";\n    if (i < 50) ans += \"\
    Six\";\n    if (i < 60) ans += \"Seven\";\n    if (i < 70) ans += \"Eight\";\n\
    \    if (i < 80) ans += \"Nine\";\n  }\n  return std::vector<std::string>(ans.begin(),\
    \ ans.end());\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp5o5p7h3t.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmp5o5p7h3t.cpp:31:57:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  std::string digits = \"0123456789\";\n  std::string\
    \ tens = \"10\";\n  std::string ones = \"1\";\n  std::string tens_digits = \"\
    01234567\";\n  std::string ones_digits = \"012345\";\n  std::string tens_ones\
    \ = \"01234567\";\n  std::string ones_tens = \"0123456789\";\n  std::string tens_tens\
    \ = \"01234567\";\n  std::string ones_ones = \"0123456789\";\n  std::string tens_ones_tens\
    \ = \"0123456789\";\n  std::string ones_tens_tens = \"0123456789\";\n  std::string\
    \ tens_ones_ones = \"0123456789\";\n  std::string ones_tens_ones = \"0123456789\"\
    ;\n  std::string tens_tens_tens = \"0123456789\";\n  std::string ones_tens_tens_tens\
    \ = \"0123456789\";\n  std::string ones_tens_ones_tens = \"0123456789\";\n  std::string\
    \ tens_ones_tens_ones = \"0123456789\";\n  std::string ones_tens_ones_tens = \"\
    0123456789\";\n  std::string tens_tens_tens_tens = \"0123456789\";\n  std::string\
    \ ones_tens_tens_ones_tens = \"0123456789\";\n  std::string tens_ones_tens_ones_tens\
    \ = \"0123456789\";\n  std::string ones_tens_ones_tens_tens = \"0123456789\";\n\
    \  std::string tens_tens_ones_ones_tens = \"0123456789\";\n  std::string ones_tens_ones_tens_ones_tens\
    \ = \"0123456789\";\n  std::string tens_tens_tens_tens_tens = \"0123456789\";\n\
    \  std::string ones_tens_tens_ones_ones_tens = \"0123456789\";\n  std::string\
    \ tens_ones_tens_ones_ones_tens = \"0123456789\";\n  std::string ones_tens_ones_tens_tens_tens\
    \ = \"0123456789\";\n  std::string tens_tens_ones_ones_ones_tens = \"0123456789\"\
    ;\n  std::string ones_tens_ones_tens_ones_ones_tens = \"0123456789\";\n  std::string\
    \ tens_tens_tens_tens_tens_tens = \"0123456789\";\n  std::string ones_tens_tens_ones_ones_ones_tens\
    \ = \"0123456789\";\n  std::string tens_ones_tens_ones_ones_ones_tens = \"0123456789\"\
    ;\n  std::string ones_tens_ones_tens_tens_ones_tens = \"0123456789\";\n  std::string\
    \ tens_tens_ones_ones_ones_ones_tens = \"0123456789\";\n  std::string ones_tens_ones_tens_tens_tens_ones_tens\
    \ = \"0123456789\";\n  std::string tens_\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqxmf78o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpfqxmf78o.cpp:35:15: error:\
    \ redeclaration of \u2018std::string ones_tens_ones_tens\u2019\n   35 |   std::string\
    \ ones_tens_ones_tens = \"0123456789\";\n      |               ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfqxmf78o.cpp:33:15: note: \u2018std::string ones_tens_ones_tens\u2019\
    \ previously declared here\n   33 |   std::string ones_tens_ones_tens = \"0123456789\"\
    ;\n      |               ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfqxmf78o.cpp:55:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpfqxmf78o.cpp:55:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   55 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string ret = \"\";\n  for (long i : arr) {\n    ret += name(i);\n  }\n\
    \  return std::vector<std::string>(ret.begin(), ret.end());\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3mu7cmev.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3mu7cmev.cpp:21:12: error:\
    \ \u2018name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     ret += name(i);\n      |            ^~~~\n      |            tzname\n\
    In file included from /usr/include/c++/9/vector:66,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3mu7cmev.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h:\
    \ In instantiation of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char"
  stdout: ''
  timestamp: 1660135832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  long max_value = *std::max_element(arr.begin(), arr.end());\n  long min_value\
    \ = *std::min_element(arr.begin(), arr.end());\n  std::vector<std::string> result;\n\
    \  for (long i = min_value; i <= max_value; i++) {\n    std::string name;\n  \
    \  if (i < 10) {\n      name = \"One\";\n    } else if (i < 20) {\n      name\
    \ = \"Two\";\n    } else if (i < 30) {\n      name = \"Three\";\n    } else if\
    \ (i < 40) {\n      name = \"Four\";\n    } else if (i < 50) {\n      name = \"\
    Five\";\n    } else if (i < 60) {\n      name = \"Six\";\n    } else if (i < 70)\
    \ {\n      name = \"Seven\";\n    } else if (i < 80) {\n      name = \"Eight\"\
    ;\n    } else {\n      name = \"Nine\";\n    }\n    result.push_back(name);\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpqe9igfpj: /tmp/tmpqe9igfpj.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> names;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 100) {\n      name = \"Two\";\n    } else if (i < 1000)\
    \ {\n      name = \"Three\";\n    } else if (i < 10000) {\n      name = \"Four\"\
    ;\n    } else if (i < 100000) {\n      name = \"Five\";\n    } else if (i < 1000000)\
    \ {\n      name = \"Six\";\n    } else if (i < 10000000) {\n      name = \"Seven\"\
    ;\n    } else if (i < 100000000) {\n      name = \"Eight\";\n    } else if (i\
    \ < 1000000000) {\n      name = \"Nine\";\n    } else {\n      name = \"Ten\"\
    ;\n    }\n    names.push_back(name);\n  }\n  std::reverse(names.begin(), names.end());\n\
    \  return names;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpkgp171nh: /tmp/tmpkgp171nh.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long curr = arr[0];\n  for (long i = 1; i\
    \ < arr.size(); i++) {\n    if (arr[i] < curr) {\n      res.push_back(to_string(curr));\n\
    \      curr = arr[i];\n    } else {\n      res.push_back(to_string(arr[i]));\n\
    \    }\n  }\n  res.push_back(to_string(curr));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnegv03a9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnegv03a9.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(curr));\n      |                    \
    \ ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnegv03a9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpnegv03a9.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(arr[i]));\n      |                  \
    \   ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnegv03a9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_strin"
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    res.push_back(to_name(i));\n  }\n  std::reverse(arr.begin(), arr.end());\n\
    \  for (long i : arr) {\n    res.push_back(to_name(i));\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w6d6tzf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8w6d6tzf.cpp:21:19: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   21 |     res.push_back(to_name(i));\n      |                   ^~~~~~~\n\
    \      |                   tzname\n/tmp/tmp8w6d6tzf.cpp:25:19: error: \u2018to_name\u2019\
    \ was not declared in this scope; did you mean \u2018tzname\u2019?\n   25 |  \
    \   res.push_back(to_name(i));\n      |                   ^~~~~~~\n      |   \
    \                tzname\n"
  stdout: ''
  timestamp: 1660135825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push_back(by_length(arr));\n\
    \    } else {\n      res.push_back(std::to_string((int)arr[i]));\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpojjkj0_n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpojjkj0_n.cpp:20:35: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   20 |\
    \       res.push_back(by_length(arr));\n      |                              \
    \     ^\nIn file included from /usr/include/c++/9/vector:67,\n               \
    \  from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpojjkj0_n.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> >::value_typ"
  stdout: ''
  timestamp: 1660135832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = std::to_string(i).substr(0, 1);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dyf2q51.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8dyf2q51.cpp:25:25: error:\
    \ no matching function for call to \u2018to_string(std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |     i = std::to_string(i).substr(0, 1);\n      |                   \
    \      ^\nIn file included from /usr/include/c++/9/string:55,\n              \
    \   from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8dyf2q51.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549 |   to_string(int\
    \ __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6554 |   to_string(unsigned __val)\n      |  \
    \           ~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(long int)\u2019\n 6560\
    \ |   to_string(long __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6560:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018long int\u2019\n 6560 |   to_string(long __val)\n      |          \
    \   ~~~~~^~~~~\n/us"
  stdout: ''
  timestamp: 1660135823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) min_val\
    \ = std::min(min_val, val);\n  for (long val : arr) max_val = std::max(max_val,\
    \ val);\n  std::vector<std::string> result;\n  for (long val = min_val; val <=\
    \ max_val; val++) {\n    std::string name;\n    if (val < 10) {\n      name =\
    \ \"One\";\n    } else if (val < 20) {\n      name = \"Two\";\n    } else if (val\
    \ < 30) {\n      name = \"Three\";\n    } else if (val < 40) {\n      name = \"\
    Four\";\n    } else if (val < 50) {\n      name = \"Five\";\n    } else if (val\
    \ < 60) {\n      name = \"Six\";\n    } else if (val < 70) {\n      name = \"\
    Seven\";\n    } else if (val < 80) {\n      name = \"Eight\";\n    } else if (val\
    \ < 90) {\n      name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n\
    \    result.push_back(name);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpouma8w39: /tmp/tmpouma8w39.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) {\n\
    \    min_val = std::min(i, min_val);\n    max_val = std::max(i, max_val);\n  }\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    res.push_back(to_name(i));\n  }\n  std::reverse(std::begin(res), std::end(res));\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2hhv_u5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn2hhv_u5.cpp:25:19: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   25 |     res.push_back(to_name(i));\n      |                   ^~~~~~~\n\
    \      |                   tzname\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long curr = arr[0];\n  for (long i = 1;\
    \ i < arr.size(); i++) {\n    if (arr[i] < curr) break;\n    result.push_back(to_string(arr[i]));\n\
    \    curr = arr[i];\n  }\n  result.push_back(to_string(curr));\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplho06si7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmplho06si7.cpp:21:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |     result.push_back(to_string(arr[i]));\n      |                 \
    \     ^~~~~~~~~\n      |                      std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmplho06si7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmplho06si7.cpp:24:20: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |   result.push_back(to_string(curr));\n      |                    ^~~~~~~~~\n\
    \      |                    std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplho06si7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_strin"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long digits = max - min;\n    long tens = digits / 10;\n    long ones\
    \ = digits % 10;\n    std::string tens_name = to_string(tens);\n    std::string\
    \ ones_name = to_string(ones);\n    std::string name = ones_name;\n    if (ones\
    \ == 1) {\n        name = ones_name;\n    }\n    if (tens == 1) {\n        name\
    \ = tens_name;\n    }\n    res.push_back(name);\n    for (long i = min; i <= max;\
    \ i++) {\n        long digit = i - min;\n        long tens = digit / 10;\n   \
    \     long ones = digit % 10;\n        std::string tens_name = to_string(tens);\n\
    \        std::string ones_name = to_string(ones);\n        std::string name =\
    \ ones_name;\n        if (ones == 1) {\n            name = ones_name;\n      \
    \  }\n        if (tens == 1) {\n            name = tens_name;\n        }\n   \
    \     res.push_back(name);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6850neh6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6850neh6.cpp:25:29: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     std::string tens_name = to_string(tens);\n      |             \
    \                ^~~~~~~~~\n      |                             std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6850neh6.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_len = 0, min_len = 0;\n  for (long i : arr) {\n    if (max_len < i)\
    \ max_len = i;\n    if (min_len > i) min_len = i;\n  }\n  std::vector<std::string>\
    \ res;\n  for (long i = min_len; i <= max_len; ++i) {\n    std::string name;\n\
    \    if (i < 10) {\n      name = \"One\";\n    } else if (i < 100) {\n      name\
    \ = \"Two\";\n    } else if (i < 1000) {\n      name = \"Three\";\n    } else\
    \ if (i < 10000) {\n      name = \"Four\";\n    } else if (i < 100000) {\n   \
    \   name = \"Five\";\n    } else if (i < 1000000) {\n      name = \"Six\";\n \
    \   } else if (i < 10000000) {\n      name = \"Seven\";\n    } else if (i < 100000000)\
    \ {\n      name = \"Eight\";\n    } else {\n      name = \"Nine\";\n    }\n  \
    \  res.push_back(name);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpai9phc37: /tmp/tmpai9phc37.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long range = (max - min) + 1;\n  long digit = range;\n  std::vector<std::string>\
    \ names;\n  while (digit > 0) {\n    long mod = (digit - 1) % 10;\n    names.push_back((std::string)names[mod]);\n\
    \    digit /= 10;\n  }\n  reverse(names.begin(), names.end());\n  for (int i =\
    \ 0; i < names.size(); i++) {\n    long num = arr[i];\n    long mod = (num - min)\
    \ % 10;\n    long new_num = names[mod];\n    arr[i] = new_num;\n  }\n  return\
    \ names;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjef_j3y9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjef_j3y9.cpp:31:29: error:\
    \ cannot convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018long int\u2019 in initialization\n   31 |     long new_num = names[mod];\n\
    \      |                             ^\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> result;\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  long min = *std::min_element(arr.begin(), arr.end());\n  for\
    \ (long i = min; i <= max; i++) {\n    std::string name = \"\";\n    switch (i)\
    \ {\n      case 1:\n        name = \"One\";\n        break;\n      case 2:\n \
    \       name = \"Two\";\n        break;\n      case 3:\n        name = \"Three\"\
    ;\n        break;\n      case 4:\n        name = \"Four\";\n        break;\n \
    \     case 5:\n        name = \"Five\";\n        break;\n      case 6:\n     \
    \   name = \"Six\";\n        break;\n      case 7:\n        name = \"Seven\";\n\
    \        break;\n      case 8:\n        name = \"Eight\";\n        break;\n  \
    \    case 9:\n        name = \"Nine\";\n        break;\n      default:\n     \
    \   break;\n    }\n    result.push_back(name);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpv9wckjgy: /tmp/tmpv9wckjgy.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto i : arr) if (i\
    \ < min_val) min_val = i;\n  for (auto i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    std::string name;\n    if (i < 10) {\n      name = \"One\";\n    } else\
    \ if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n      name =\
    \ \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n    } else if\
    \ (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n      name = \"\
    Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    } else if (i <\
    \ 80) {\n      name = \"Eight\";\n    } else {\n      name = \"Nine\";\n    }\n\
    \    res.push_back(name);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpmzcb0375: /tmp/tmpmzcb0375.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string ret = \"\";\n  for (long i : arr) {\n    std::string s = std::to_string(i);\n\
    \    if (s.length() == 1) s = \"One\";\n    if (s.length() == 2) s = \"Two\";\n\
    \    if (s.length() == 3) s = \"Three\";\n    if (s.length() == 4) s = \"Four\"\
    ;\n    if (s.length() == 5) s = \"Five\";\n    if (s.length() == 6) s = \"Six\"\
    ;\n    if (s.length() == 7) s = \"Seven\";\n    if (s.length() == 8) s = \"Eight\"\
    ;\n    if (s.length() == 9) s = \"Nine\";\n    ret += s;\n  }\n  return std::vector<std::string>({ret});\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpq78sbcyq: /tmp/tmpq78sbcyq.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = 0;\n    for (auto i : arr)\
    \ {\n        if (i > max) max = i;\n    }\n    long cur = 0;\n    for (auto i\
    \ : arr) {\n        if (i <= max) {\n            while (cur < i) {\n         \
    \       res.emplace_back(std::to_string(cur));\n                cur++;\n     \
    \       }\n            res.emplace_back(std::to_string(i - cur));\n          \
    \  cur = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpomlbq4vz: /tmp/tmpomlbq4vz.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    if (min > 9) {\n        min = 9; // We don't want \"One\" to\
    \ be replaced by \"Ten\"\n    }\n    if (max < 9) {\n        max = 9;\n    }\n\
    \    long diff = max - min;\n    long mod = diff % 10;\n    long tens = diff /\
    \ 10;\n    long tensMod = tens % 10;\n    long tensDiff = tens / 10;\n    long\
    \ tensTensDiff = tensDiff / 10;\n    long tensTensMod = tensTensDiff % 10;\n \
    \   long tensTensTensDiff = tensTensDiff / 10;\n    long tensTensTensMod = tensTensTensDiff\
    \ % 10;\n    long tensTensTensTensDiff = tensTensTensDiff / 10;\n    long tensTensTensTensMod\
    \ = tensTensTensTensDiff % 10;\n    long tensTensTensTensTensDiff = tensTensTensTensDiff;\n\
    \    long tensTensTensTensTensMod = tensTensTensTensTensDiff;\n    long tensTensTensTensTensTensDiff\
    \ = tensTensTensTensTensMod;\n    long tensTensTensTensTensTensMod = tensTensTensTensTensTensDiff;\n\
    \    long tensTensTensTensTensTensTensDiff = tensTensTensTensTensTensTensMod;\n\
    \    long tensTensTensTensTensTensTensMod = tensTensTensTensTensTensTensTensDiff;\n\
    \    long tensTensTensTensTensTensTensTensDiff = tensTensTensTensTensTensTensTensMod;\n\
    \    long tensTensTensTensTensTensTensTensTensDiff = tensTensTensTensTensTensTensTens\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr3gj1a8s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpr3gj1a8s.cpp:50:45: error:\
    \ \u2018tensTensTensTensTensTensTensMod\u2019 was not declared in this scope;\
    \ did you mean \u2018tensTensTensTensTensTensTensDiff\u2019?\n   50 |     long\
    \ tensTensTensTensTensTensTensDiff = tensTensTensTensTensTensTensMod;\n      |\
    \                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                             tensTensTensTensTensTensTensDiff\n\
    /tmp/tmpr3gj1a8s.cpp:51:44: error: \u2018tensTensTensTensTensTensTensTensDiff\u2019\
    \ was not declared in this scope; did you mean \u2018tensTensTensTensTensTensTensDiff\u2019\
    ?\n   51 |     long tensTensTensTensTensTensTensMod = tensTensTensTensTensTensTensTensDiff;\n\
    \      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                            tensTensTensTensTensTensTensDiff\n\
    /tmp/tmpr3gj1a8s.cpp:52:49: error: \u2018tensTensTensTensTensTensTensTensMod\u2019\
    \ was not declared in this scope; did you mean \u2018tensTensTensTensTensTensTensDiff\u2019\
    ?\n   52 |     long tensTensTensTensTensTensTensTensDiff = tensTensTensTensTensTensTensTensMod;\n\
    \      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                 tensTensTensTensTensTensTensDiff\n\
    /tmp/tmpr3gj1a8s.cpp:53:53: error: \u2018tensTensTensTensTensTensTensTens\u2019\
    \ was not declared in this scope; did you mean \u2018tensTensTensTensTensTensTensDiff\u2019\
    ?\n   53 |     long tensTensTensTensTensTensTensTensTensDiff = tensTensTensTensTensTensTensTens\n\
    \      |                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                     tensTensTensTensTensTensTensDiff\n\
    /tmp/tmpr3gj1a8s.cpp:54:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   54 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  std::vector<long> temp;\n  for (long i\
    \ : arr) {\n    if (i <= mid) {\n      temp.push_back(i);\n    } else if (i >\
    \ mid) {\n      temp.push_back(mid);\n      mid = i;\n    }\n  }\n  long mid2\
    \ = mid * 2;\n  std::vector<long> temp2;\n  for (long i : temp) {\n    if (i <=\
    \ mid2) {\n      temp2.push_back(i);\n    } else if (i > mid2) {\n      temp2.push_back(mid2);\n\
    \      mid2 = i;\n    }\n  }\n  std::vector<std::string> result;\n  for (long\
    \ i : temp2) {\n    std::string name = \"\";\n    if (i < 10) {\n      name =\
    \ \"One\";\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i\
    \ < 30) {\n      name = \"Three\";\n    } else if (i < 40) {\n      name = \"\
    Four\";\n    } else if (i < 50) {\n      name = \"Five\";\n    } else if (i <\
    \ 60) {\n      name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\"\
    ;\n    } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n\
    \      name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpigd6qro8: /tmp/tmpigd6qro8.cpp:69: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (std::string &s : res)\
    \ {\n    std::string &t = s;\n    t = std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqdm8t7q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpuqdm8t7q.cpp:26:1890: error:\
    \ expected primary-expression before \u2018(\u2019 token\n   26 |     t = std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(),\
    \ t.end()) + std::string(t.begin(), t.end()) + std::string(t.begin(), t.end())\
    \ + std::string(t.begin(), "
  stdout: ''
  timestamp: 1660135829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long max_num =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min_num = *std::min_element(arr.begin(),\
    \ arr.end());\n    if (max_num < 1 || min_num > 9) {\n        return result;\n\
    \    }\n    long length = max_num - min_num + 1;\n    long digit = min_num;\n\
    \    while (length > 0) {\n        result.push_back(to_string(digit));\n     \
    \   length--;\n        digit += 10;\n    }\n    long reversed_max_num = max_num;\n\
    \    long reversed_min_num = min_num;\n    while (reversed_max_num > 0) {\n  \
    \      result.push_back(to_string(max_num % 10));\n        reversed_max_num--;\n\
    \    }\n    while (reversed_min_num < 9) {\n        result.push_back(to_string(min_num\
    \ % 10));\n        reversed_min_num++;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78bmataz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp78bmataz.cpp:28:26: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |         result.push_back(to_string(digit));\n      |              \
    \            ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp78bmataz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp78bmataz.cpp:35:26: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   35 |         result.push_back(to_string(max_num % 10));\n      |       \
    \                   ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp78bmataz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_strin"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long diff = max - min;\n    long mod = diff % 10;\n    if (mod\
    \ == 0) {\n        mod = 10;\n    }\n    long rem = diff / 10;\n    long start\
    \ = min + mod;\n    long end = max + mod;\n    long start = start % 10;\n    long\
    \ end = end % 10;\n    long start = start / 10;\n    long end = end / 10;\n  \
    \  long start = start - 1;\n    long end = end - 1;\n    long start = start %\
    \ 10;\n    long end = end % 10;\n    long start = start / 10;\n    long end =\
    \ end / 10;\n    long start = start - 1;\n    long end = end - 1;\n    long start\
    \ = start % 10;\n    long end = end % 10;\n    long start = start / 10;\n    long\
    \ end = end / 10;\n    long start = start - 1;\n    long end = end - 1;\n    long\
    \ start = start % 10;\n    long end = end % 10;\n    long start = start / 10;\n\
    \    long end = end / 10;\n    long start = start - 1;\n    long end = end - 1;\n\
    \    long start = start % 10;\n    long end = end % 10;\n    long start = start\
    \ / 10;\n    long end = end / 10;\n    long start = start - 1;\n    long end =\
    \ end - 1;\n    long start = start % 10;\n    long end = end % 10;\n    long start\
    \ = start / 10;\n    long end = end / 10;\n    long start = start - 1;\n    long\
    \ end = end - 1;\n    long start = start % 10;\n    long end = end % 10;\n   \
    \ long start = start / 10;\n    long end = end / 10;\n    long start = start -\
    \ 1;\n    long end = end - 1;\n    long start = start % 10;\n    long end = end\
    \ % 10;\n    long start = start / 10;\n    long end = end / 10;\n    long start\
    \ = start - 1;\n    long end = end - 1;\n    long start = start % 10;\n    long\
    \ end = end % 10;\n    long start = start / 10;\n    long end = end / 10;\n  \
    \  long start = start - 1;\n    long end = end - 1;\n    long start = start %\
    \ 10;\n    long end = end % 10;\n    long start = start / 10;\n    long end =\
    \ end / 10;\n    long start = start - 1;\n    long \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaqjqgqg6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpaqjqgqg6.cpp:37:10: error:\
    \ redeclaration of \u2018long int start\u2019\n   37 |     long start = start\
    \ % 10;\n      |          ^~~~~\n/tmp/tmpaqjqgqg6.cpp:35:10: note: \u2018long\
    \ int start\u2019 previously declared here\n   35 |     long start = min + mod;\n\
    \      |          ^~~~~\n/tmp/tmpaqjqgqg6.cpp:38:10: error: redeclaration of \u2018\
    long int end\u2019\n   38 |     long end = end % 10;\n      |          ^~~\n/tmp/tmpaqjqgqg6.cpp:36:10:\
    \ note: \u2018long int end\u2019 previously declared here\n   36 |     long end\
    \ = max + mod;\n      |          ^~~\n/tmp/tmpaqjqgqg6.cpp:39:10: error: redeclaration\
    \ of \u2018long int start\u2019\n   39 |     long start = start / 10;\n      |\
    \          ^~~~~\n/tmp/tmpaqjqgqg6.cpp:35:10: note: \u2018long int start\u2019\
    \ previously declared here\n   35 |     long start = min + mod;\n      |     \
    \     ^~~~~\n/tmp/tmpaqjqgqg6.cpp:40:10: error: redeclaration of \u2018long int\
    \ end\u2019\n   40 |     long end = end / 10;\n      |          ^~~\n/tmp/tmpaqjqgqg6.cpp:36:10:\
    \ note: \u2018long int end\u2019 previously declared here\n   36 |     long end\
    \ = max + mod;\n      |          ^~~\n/tmp/tmpaqjqgqg6.cpp:41:10: error: redeclaration\
    \ of \u2018long int start\u2019\n   41 |     long start = start - 1;\n      |\
    \          ^~~~~\n/tmp/tmpaqjqgqg6.cpp:35:10: note: \u2018long int start\u2019\
    \ previously declared here\n   35 |     long start = min + mod;\n      |     \
    \     ^~~~~\n/tmp/tmpaqjqgqg6.cpp:42:10: error: redeclaration of \u2018long int\
    \ end\u2019\n   42 |     long end = end - 1;\n      |          ^~~\n/tmp/tmpaqjqgqg6.cpp:36:10:\
    \ note: \u2018long int end\u2019 previously declared here\n   36 |     long end\
    \ = max + mod;\n      |          ^~~\n/tmp/tmpaqjqgqg6.cpp:43:10: error: redeclaration\
    \ of \u2018long int start\u2019\n   43 |     long start = start % 10;\n      |\
    \          ^~~~~\n/tmp/tmpaqjqgqg6.cpp:35:10: note: \u2018long int start\u2019\
    \ previously declared here\n   35 |     long start = min + mod;\n      |     \
    \     ^~~~~\n/tmp/tmpaqjqgqg6.cpp:44:10: error: redeclaration of \u2018long int\
    \ end"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> result;\n  for (long i : arr) {\n    if (i >=\
    \ 1 && i <= 9) {\n      result.push_back(to_string(i - 1));\n    } else {\n  \
    \    result.push_back(\"\");\n    }\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  for (size_t i = 0; i < result.size(); i++) {\n    result[i] = \"One\";\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpog1aha6b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpog1aha6b.cpp:22:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       result.push_back(to_string(i - 1));\n      |                \
    \        ^~~~~~~~~\n      |                        std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpog1aha6b.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> result;\n    long max_len = 0, min_len = std::numeric_limits<long>::max();\n\
    \    for (auto i : arr) {\n        if (max_len < i) max_len = i;\n        if (min_len\
    \ > i) min_len = i;\n    }\n    long diff = max_len - min_len;\n    for (auto\
    \ i : arr) {\n        if (i < min_len) continue;\n        if (i > max_len) break;\n\
    \        long diff = i - min_len;\n        long index = diff / 10;\n        std::string\
    \ name = to_string(index);\n        name += to_string(diff % 10);\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6b_g19hr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6b_g19hr.cpp:29:28: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |         std::string name = to_string(index);\n      |             \
    \               ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6b_g19hr.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      names.push_back((std::string)std::to_string(i));\n    }\n \
    \ }\n  std::reverse(names.begin(), names.end());\n  for (std::string name : names)\
    \ {\n    std::string replacement_name = \"\";\n    switch (name) {\n      case\
    \ \"One\":\n        replacement_name = \"Eight\";\n        break;\n      case\
    \ \"Two\":\n        replacement_name = \"Five\";\n        break;\n      case \"\
    Three\":\n        replacement_name = \"Four\";\n        break;\n      case \"\
    Four\":\n        replacement_name = \"Three\";\n        break;\n      case \"\
    Five\":\n        replacement_name = \"Two\";\n        break;\n      case \"Six\"\
    :\n        replacement_name = \"Two\";\n        break;\n      case \"Seven\":\n\
    \        replacement_name = \"One\";\n        break;\n      case \"Eight\":\n\
    \        replacement_name = \"One\";\n        break;\n      case \"Nine\":\n \
    \       replacement_name = \"One\";\n        break;\n      default:\n        break;\n\
    \    }\n    std::string replacement_name_reversed = \"\";\n    switch (replacement_name)\
    \ {\n      case \"Eight\":\n        replacement_name_reversed = \"One\";\n   \
    \     break;\n      case \"Five\":\n        replacement_name_reversed = \"Two\"\
    ;\n        break;\n      case \"Four\":\n        replacement_name_reversed = \"\
    Three\";\n        break;\n      case \"Three\":\n        replacement_name_reversed\
    \ = \"Four\";\n        break;\n      case \"Two\":\n        replacement_name_reversed\
    \ = \"Five\";\n        break;\n      case \"One\":\n        replacement_name_reversed\
    \ = \"Six\";\n        break;\n      case \"Six\":\n        replacement_name_reversed\
    \ = \"Seven\";\n        break;\n      case \"Seven\":\n        replacement_name_reversed\
    \ = \"Eight\";\n        break;\n      case \"Eight\":\n        replacement_name_reversed\
    \ = \"Nine\";\n        break;\n      case \"Nine\":\n        replacement_name_reversed\
    \ = \"Eight\";\n        break;\n      default:\n        break;\n    }\n    std::string\
    \ replacement_name_reversed_reversed = \"\";\n    switch (replacement_name_reversed)\
    \ {\n      case \"One\":\n        replacement_name_reversed_reversed = \"Eight\"\
    ;\n        break;\n      case \"Two\":\n        replacement_name_reversed_reversed\
    \ = \"Five\";\n        break;\n      case \"Three\":\n        replacement_name_reversed_reversed\
    \ = \"Four\";\n        break;\n      case \"Four\":\n        replace\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnxmzhd9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpfnxmzhd9.cpp:26:17: error:\
    \ switch quantity not an integer\n   26 |     switch (name) {\n      |       \
    \          ^\n/tmp/tmpfnxmzhd9.cpp:58:29: error: switch quantity not an integer\n\
    \   58 |     switch (replacement_name) {\n      |                            \
    \ ^\n/tmp/tmpfnxmzhd9.cpp:93:38: error: switch quantity not an integer\n   93\
    \ |     switch (replacement_name_reversed) {\n      |                        \
    \              ^\n/tmp/tmpfnxmzhd9.cpp:104:9: error: \u2018replace\u2019 was not\
    \ declared in this scope\n  104 |         replace\n      |         ^~~~~~~\n/tmp/tmpfnxmzhd9.cpp:104:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfnxmzhd9.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note:   \u2018std::replace\u2019\n  174 | replace(_ExecutionPolicy&& __exec,\
    \ _ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value,\n\
    \      | ^~~~~~~\nIn file included from /usr/include/c++/9/filesystem:36,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpfnxmzhd9.cpp:2:\n/usr/include/c++/9/bits/fs_fwd.h:200:7:\
    \ note:   \u2018std::filesystem::perm_options::replace\u2019\n  200 |       replace\
    \ = 0x1,\n      |       ^~~~~~~\n/tmp/tmpfnxmzhd9.cpp:106:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  106 | int main() {\n     \
    \ |            ^\n/tmp/tmpfnxmzhd9.cpp:113:1: error: expected \u2018}\u2019 at\
    \ end of input\n  113 | }\n      | ^\n/tmp/tmpfnxmzhd9.cpp:24:34: note: to match\
    \ this \u2018{\u2019\n   24 |   for (std::string name : names) {\n      |    \
    \                              ^\n/tmp/tmpfnxmzhd9.cpp:113:1: error: expected\
    \ \u2018}\u2019 at end of input\n  113 | }\n      | ^\n/tmp/tmpfnxmzhd9.cpp:15:59:\
    \ note: to match this \u2018{\u2019\n   15 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |           "
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> ans;\n  long curr = arr[0];\n  long last = arr[0];\n\
    \  for (size_t i = 1; i < arr.size(); i++) {\n    if (arr[i] < curr) continue;\n\
    \    if (arr[i] > last) continue;\n    ans.push_back(to_string(arr[i]));\n   \
    \ curr = arr[i];\n    last = arr[i];\n  }\n  return ans;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp899c66s9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp899c66s9.cpp:23:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |     ans.push_back(to_string(arr[i]));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp899c66s9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_val = *std::max_element(arr.begin(), arr.end());\n  long min_val =\
    \ *std::min_element(arr.begin(), arr.end());\n  long diff = max_val - min_val\
    \ + 1;\n  long digits = diff / 10;\n  std::vector<std::string> names;\n  names.reserve(digits);\n\
    \  for (long i = min_val; i <= max_val; i++) {\n    long val = i - min_val;\n\
    \    std::string name = \"\";\n    if (val < 10) {\n      name = to_string(val);\n\
    \    } else if (val < 100) {\n      name = to_string(val / 10) + \"Hundred\";\n\
    \    } else if (val < 1000) {\n      name = to_string(val / 100) + \"Thousand\"\
    ;\n    } else if (val < 10000) {\n      name = to_string(val / 1000) + \"Lakh\"\
    ;\n    } else if (val < 100000) {\n      name = to_string(val / 10000) + \"Crore\"\
    ;\n    } else if (val < 1000000) {\n      name = to_string(val / 100000) + \"\
    Thousand\";\n    } else if (val < 10000000) {\n      name = to_string(val / 1000000)\
    \ + \"Crore\";\n    } else if (val < 100000000) {\n      name = to_string(val\
    \ / 10000000) + \"Lakh\";\n    } else if (val < 1000000000) {\n      name = to_string(val\
    \ / 100000000) + \"Crore\";\n    } else if (val < 10000000000) {\n      name =\
    \ to_string(val / 1000000000) + \"Lakh\";\n    } else if (val < 100000000000)\
    \ {\n      name = to_string(val / 10000000000) + \"Crore\";\n    } else if (val\
    \ < 1000000000000) {\n      name = to_string(val / 100000000000) + \"Lakh\";\n\
    \    } else if (val < 10000000000000) {\n      name = to_string(val / 1000000000000)\
    \ + \"Crore\";\n    } else if (val < 100000000000000) {\n      name = to_string(val\
    \ / 10000000000000) + \"Lakh\";\n    } else if (val < 1000000000000000) {\n  \
    \    name = to_string(val / 100000000000000) + \"Crore\";\n    } else if (val\
    \ < 10000000000000000) {\n      name = to_string(val / 1000000000000000) + \"\
    Lakh\";\n    } else if (val < 100000000000000000) {\n      name = to_string(val\
    \ / 10000000000000000) + \"Crore\";\n    } else if (val < 100000000000000000)\
    \ {\n      name = to_string(val / 100000000000000000) + \"Lakh\";\n    } else\
    \ if (val < 1000000000000000000) {\n      name = to_string(val / 1000000000000000000)\
    \ + \"Crore\";\n    } else {\n      name = to_string(val / 1000000000000000000)\
    \ + \"Lakh\";\n    }\n    names.push_back(name);\n  }\n  std::reverse(names.begin(),\
    \ names.end());\n  std::transform(names.\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5vbw8nw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpy5vbw8nw.cpp:27:14: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |       name = to_string(val);\n      |              ^~~~~~~~~\n    \
    \  |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpy5vbw8nw.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpy5vbw8nw.cpp:29:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |       name = to_string(val / 10) + \"Hundred\";\n      |          \
    \    ^~~~~~~~~\n      |              std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpy5vbw8nw.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   "
  stdout: ''
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (auto i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto i : res) {\n   \
    \ if (i.size() == 1) {\n      res.push_back(std::to_string(i[0]));\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp96hjrtpf: /tmp/tmp96hjrtpf.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  std::vector<std::string> res;\n  for (long val = min_val; val <= max_val;\
    \ val++) {\n    res.push_back(to_string(val));\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &s : res) {\n    std::string &str = s;\n    str.erase(str.begin());\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqsjwto4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbqsjwto4.cpp:25:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     res.push_back(to_string(val));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbqsjwto4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135833
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long long num = arr[0];\n  for (long i = 1;\
    \ i < arr.size(); i++) {\n    if (arr[i] < num) {\n      res.push_back(to_string(num));\n\
    \      num = arr[i];\n    } else {\n      res.push_back(to_string(arr[i]));\n\
    \    }\n  }\n  res.push_back(to_string(num));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp94nugwip.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp94nugwip.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(num));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp94nugwip.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp94nugwip.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(arr[i]));\n      |                  \
    \   ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp94nugwip.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) if (i\
    \ < min_val) min_val = i;\n  for (long i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  while (min_val < 9) {\n    res.push_back(to_string(min_val));\n\
    \    min_val++;\n  }\n  while (max_val > 0) {\n    res.push_back(to_string(max_val));\n\
    \    max_val--;\n  }\n  for (long i : arr) {\n    if (min_val < 9 && i <= 9) res.push_back(to_string(min_val));\n\
    \    if (max_val > 0 && i >= 9) res.push_back(to_string(max_val));\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppd9x1wv0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmppd9x1wv0.cpp:23:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |     res.push_back(to_string(min_val));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppd9x1wv0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmppd9x1wv0.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(max_val));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppd9x1wv0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ d"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  long first = arr[0];\n  long last = arr[0];\n\
    \  for (long i : arr) {\n    if (i < first) first = i;\n    if (i > last) last\
    \ = i;\n  }\n  std::vector<std::string> res;\n  while (first <= 9) {\n    res.push_back(to_string(first));\n\
    \    first++;\n  }\n  while (last >= 1) {\n    res.push_back(to_string(last));\n\
    \    last--;\n  }\n  for (long i : arr) {\n    if (i < first) continue;\n    if\
    \ (i > last) continue;\n    res.push_back(to_string(i));\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppv3pbs6x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmppv3pbs6x.cpp:26:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     res.push_back(to_string(first));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppv3pbs6x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmppv3pbs6x.cpp:30:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     res.push_back(to_string(last));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppv3pbs6x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long num = arr[0];\n  for (long i = 1; i <\
    \ arr.size(); i++) {\n    if (arr[i] < num) {\n      res.push_back(\"One\");\n\
    \      num = arr[i];\n    } else if (arr[i] > num) {\n      res.push_back(\"Nine\"\
    );\n      num = arr[i];\n    } else {\n      res.push_back(to_string(num));\n\
    \      num = arr[i];\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kw_xi3h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3kw_xi3h.cpp:27:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |       res.push_back(to_string(num));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3kw_xi3h.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n\
    \  }\n  std::reverse(arr.begin(), arr.end());\n  for (auto& i : arr) {\n    std::string\
    \ name = \"\";\n    if (i < 10) {\n      name = \"One\";\n    } else if (i < 20)\
    \ {\n      name = \"Two\";\n    } else if (i < 30) {\n      name = \"Three\";\n\
    \    } else if (i < 40) {\n      name = \"Four\";\n    } else if (i < 50) {\n\
    \      name = \"Five\";\n    } else if (i < 60) {\n      name = \"Six\";\n   \
    \ } else if (i < 70) {\n      name = \"Seven\";\n    } else if (i < 80) {\n  \
    \    name = \"Eight\";\n    } else if (i < 90) {\n      name = \"Nine\";\n   \
    \ } else {\n      name = \"Ten\";\n    }\n    res.push_back(name);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpuay2ojgk: /tmp/tmpuay2ojgk.cpp:75: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = lookup(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7b2usfux.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7b2usfux.cpp:25:9: error:\
    \ \u2018lookup\u2019 was not declared in this scope\n   25 |     i = lookup(i);\n\
    \      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> ans;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      ans.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(ans.begin(),\
    \ ans.end());\n  for (std::string s : ans) {\n    std::replace(s.begin(), s.end(),\
    \ '0', '1');\n    std::replace(s.begin(), s.end(), '1', '2');\n    std::replace(s.begin(),\
    \ s.end(), '2', '3');\n    std::replace(s.begin(), s.end(), '3', '4');\n    std::replace(s.begin(),\
    \ s.end(), '4', '5');\n    std::replace(s.begin(), s.end(), '5', '6');\n    std::replace(s.begin(),\
    \ s.end(), '6', '7');\n    std::replace(s.begin(), s.end(), '7', '8');\n    std::replace(s.begin(),\
    \ s.end(), '8', '9');\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpnk8gih58: /tmp/tmpnk8gih58.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long max_len = 0, min_len = std::numeric_limits<long>::max();\n  for (long\
    \ i : arr) {\n    min_len = std::min(min_len, i);\n    max_len = std::max(max_len,\
    \ i);\n  }\n  std::vector<std::string> res;\n  for (long i = min_len; i <= max_len;\
    \ ++i) {\n    res.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &i : res) {\n    i = std::string(to_string(static_cast<int>(i))[to_string(static_cast<int>(i)).size()\
    \ - 1]);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgb60d7h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbgb60d7h.cpp:24:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |     res.push_back(to_string(static_cast<int>(i)));\n      |       \
    \            ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpbgb60d7h.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpbgb60d7h.cpp:28:49: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   28 |     i = std::string(to_string(static_cast<int>(i))[to_string(static_cast<int>(i)).size()\
    \ - 1]);\n      |                                                 ^\n/tmp/tmpbgb60d7h.cpp:28:21:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   28 |     i = std::string(to_string(static_cast<int>(i))[to_string(static_cast<int>(i)).size()\
    \ - 1]);\n      |                     ^~~~~~~~~\n      |                     std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  for (long i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      names.push_back(to_string(static_cast<int>(i)));\n    }\n \
    \ }\n  std::reverse(names.begin(), names.end());\n  for (std::string name : names)\
    \ {\n    std::string replaced = name;\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '0'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '1'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '2'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '3'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '4'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '5'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '6'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '7'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '8'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), '9'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'A'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'B'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'C'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'D'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'E'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'F'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'G'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'H'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'I'), replaced.end());\n    replaced.erase(std::remove(replaced.begin(),\
    \ replaced.end(), 'J'), replaced.end());\n    replaced.erase(std::remove(\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1gf07y6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn1gf07y6.cpp:20:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |       names.push_back(to_string(static_cast<int>(i)));\n      |   \
    \                    ^~~~~~~~~\n      |                       std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpn1gf07y6.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpn1gf07y6.cpp:47:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpn1gf07y6.cpp:48:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   48 | int main() {\n      |            ^\n/tmp/tmpn1gf07y6.cpp:55:1: error:\
    \ expected \u2018}\u2019 at end of input\n   55 | }\n      | ^\n/tmp/tmpn1gf07y6.cpp:15:59:\
    \ note: to match this \u2018{\u2019\n   15 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpn1gf07y6.cpp:55:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660135834
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name;\n    if (i >= 1 && i <= 9) {\n      name = \"\
    One\";\n    } else if (i >= 10 && i <= 99) {\n      name = \"Two\";\n    } else\
    \ if (i >= 100 && i <= 999) {\n      name = \"Three\";\n    } else if (i >= 1000\
    \ && i <= 9999) {\n      name = \"Four\";\n    } else if (i >= 10000 && i <= 99999)\
    \ {\n      name = \"Five\";\n    } else if (i >= 100000 && i <= 999999) {\n  \
    \    name = \"Six\";\n    } else if (i >= 1000000 && i <= 9999999) {\n      name\
    \ = \"Seven\";\n    } else if (i >= 10000000 && i <= 99999999) {\n      name =\
    \ \"Eight\";\n    } else if (i >= 100000000 && i <= 999999999) {\n      name =\
    \ \"Nine\";\n    } else {\n      continue;\n    }\n    res.push_back(name);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp3ro6smva: /tmp/tmp3ro6smva.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135835
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    switch (i) {\n      case 1:\n    \
    \    name = \"One\";\n        break;\n      case 2:\n        name = \"Two\";\n\
    \        break;\n      case 3:\n        name = \"Three\";\n        break;\n  \
    \    case 4:\n        name = \"Four\";\n        break;\n      case 5:\n      \
    \  name = \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n\
    \        break;\n      case 7:\n        name = \"Seven\";\n        break;\n  \
    \    case 8:\n        name = \"Eight\";\n        break;\n      case 9:\n     \
    \   name = \"Nine\";\n        break;\n      default:\n        break;\n    }\n\
    \    res.push_back(name);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp1om7038y: /tmp/tmp1om7038y.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizvg0erb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpizvg0erb.cpp:23:22: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |     result.push_back(to_string(static_cast<int>(i)));\n      |    \
    \                  ^~~~~~~~~\n      |                      std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpizvg0erb.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpizvg0erb.cpp:27:37: error: invalid\
    \ static_cast from type \u2018std::__cxx11::basic_string<char>\u2019 to type \u2018\
    int\u2019\n   27 |     i = to_string(static_cast<int>(i));\n      |          \
    \                           ^\n/tmp/tmpizvg0erb.cpp:27:9: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     i = to_string(static_cast<int>(i));\n      |         ^~~~~~~~~\n\
    \      |         std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/i"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long cur = arr[0];\n  for (size_t i = 1; i\
    \ < arr.size(); i++) {\n    if (arr[i] > cur) {\n      res.push_back(to_string(cur));\n\
    \      cur = arr[i];\n    } else {\n      res.push_back(to_string(arr[i]));\n\
    \    }\n  }\n  res.push_back(to_string(cur));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcs2hcek.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmptcs2hcek.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(cur));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptcs2hcek.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmptcs2hcek.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(arr[i]));\n      |                  \
    \   ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptcs2hcek.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long num = arr[0];\n  for (long i = 1; i <\
    \ arr.size(); i++) {\n    if (arr[i] < num) {\n      res.push_back(to_string(num));\n\
    \      num = arr[i];\n    } else {\n      res.push_back(to_string(arr[i]));\n\
    \    }\n  }\n  res.push_back(to_string(num));\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpce8f_p6o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpce8f_p6o.cpp:21:21: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |       res.push_back(to_string(num));\n      |                     ^~~~~~~~~\n\
    \      |                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpce8f_p6o.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpce8f_p6o.cpp:24:21: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |       res.push_back(to_string(arr[i]));\n      |                  \
    \   ^~~~~~~~~\n      |                     std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpce8f_p6o.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (auto i : arr) if (i\
    \ < min_val) min_val = i;\n  for (auto i : arr) if (i > max_val) max_val = i;\n\
    \  std::vector<std::string> res;\n  while (min_val < 9) {\n    res.push_back(to_string(min_val));\n\
    \    min_val += 1;\n  }\n  while (max_val > 0) {\n    res.push_back(to_string(max_val));\n\
    \    max_val -= 1;\n  }\n  for (auto i : arr) {\n    if (i >= 1 && i <= 9) {\n\
    \      res.push_back(to_string(i));\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfojclnee.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpfojclnee.cpp:23:19: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |     res.push_back(to_string(min_val));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfojclnee.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpfojclnee.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(max_val));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfojclnee.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ d"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    if (min > 9) {\n        min = 9; // To avoid overflow\n\
    \    }\n    if (max < 1) {\n        max = 1; // To avoid overflow\n    }\n   \
    \ long mid = min + (max - min) / 2;\n    long left = mid;\n    long right = mid;\n\
    \    while (left < max) {\n        long mid = left + (right - left) / 2;\n   \
    \     if (arr[mid] < mid) {\n            left = mid + 1;\n        } else {\n \
    \           right = mid - 1;\n        }\n    }\n    long temp = arr[left];\n \
    \   arr[left] = arr[right];\n    arr[right] = temp;\n    for (auto i : arr) {\n\
    \        res.push_back(names[i]);\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7hypo66.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpu7hypo66.cpp:51:23: error:\
    \ \u2018names\u2019 was not declared in this scope\n   51 |         res.push_back(names[i]);\n\
    \      |                       ^~~~~\n"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<long> result;\n  for (long i = min; i <= max; i++)\
    \ {\n    result.push_back(i);\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  for (long i : result) {\n    std::string name = to_name(i);\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rusd2zj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5rusd2zj.cpp:25:24: error:\
    \ \u2018to_name\u2019 was not declared in this scope; did you mean \u2018tzname\u2019\
    ?\n   25 |     std::string name = to_name(i);\n      |                       \
    \ ^~~~~~~\n      |                        tzname\n/tmp/tmp5rusd2zj.cpp:26:26:\
    \ error: no matching function for call to \u2018std::vector<long int>::push_back(std::string&)\u2019\
    \n   26 |     result.push_back(name);\n      |                          ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5rusd2zj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&"
  stdout: ''
  timestamp: 1660135834
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto& i : res) {\n  \
    \  i = lookup(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8z_o1ea.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpd8z_o1ea.cpp:25:9: error:\
    \ \u2018lookup\u2019 was not declared in this scope\n   25 |     i = lookup(i);\n\
    \      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660135834
