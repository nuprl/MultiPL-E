name: HumanEval_22_filter_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any\
  \ cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"\
  a\", (std::string)3.14, (std::string)5})))\n// (std::vector<long>({(long)5}))\n\
  // >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(),\
  \ std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n\
  std::vector<long> filter_integers(std::vector<std::any> values) {\n"
tests: "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(),\
  \ std::vector<long>(), 23.2, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n\
  \    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) ==\
  \ (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
completions: ["    std::vector<long> result;\n    for(auto value : values) {\n   \
    \     if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto i : values) {\n        if(std::holds_alternative<long>(i))\
    \ {\n            out.push_back(std::any_cast<long>(i));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ i : values) {\n        if (std::holds_alternative<long>(i)) {\n            out.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for(auto value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for(auto v: values) {\n  \
    \      if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::get<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto& v : values) {\n    \
    \    if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto v: values) {\n      \
    \  if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto i : values) {\n        if (std::holds_alternative<long>(i)) {\n      \
    \      result.push_back(std::get<long>(i));\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        if(std::holds_alternative<long>(value))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> out;\n    for(auto &v : values)\
    \ {\n        if(v.type() == typeid(long)) {\n            out.push_back(v);\n \
    \       }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto& v : values) {\n  \
    \      if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v: values) {\n        if(v.type() == typeid(long)) {\n            out.push_back(v);\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ i : values) {\n        if (std::holds_alternative<long>(i)) {\n            out.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<std::string>(value)) {\n            out.push_back(std::any_cast<std::string>(value));\n\
    \        } else if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        } else if(std::holds_alternative<std::map<long,long>>(value)) {\n   \
    \         out.push_back(std::any_cast<std::map<long,long>>(value)[std::any_cast<long>(value)].first);\n\
    \        } else if(std::holds_alternative<std::vector<long>>(value)) {\n     \
    \       out.push_back(std::any_cast<std::vector<long>>(value)[std::any_cast<long>(value)].first);\n\
    \        } else {\n            throw std::runtime_error(\"Unsupported type\");\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto &value : values) {\n        if (std::holds_alternative<long>(value)) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for (auto it : values) {\n\
    \        if (std::holds_alternative<long>(it)) {\n            out.push_back(std::any_cast<long>(it));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::holds_alternative<long>(value)) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto &value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto &v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (auto value : values) {\n\
    \        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto v: values) {\n      \
    \  if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ &value : values) {\n        if (std::holds_alternative<long>(value)) {\n   \
    \         out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> out;\n    for (auto value : values) {\n      \
    \  if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ i : values) {\n        if (std::holds_alternative<long>(i)) {\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto &value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto v: values) {\n      \
    \  if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto& value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::holds_alternative<long>(value)) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for(auto &v : values) {\n\
    \        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto it = values.begin();\
    \ it != values.end(); ++it) {\n        if(std::holds_alternative<long>(*it)) {\n\
    \            out.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> result;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto &value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto &v : values) {\n       \
    \ if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> out;\n    for(auto i : values) {\n   \
    \     if(std::holds_alternative<long>(i)) {\n            out.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return out;", "    std::vector<long> out;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto it = values.begin();\
    \ it != values.end(); ++it) {\n        if(std::holds_alternative<long>(*it)) {\n\
    \            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n \
    \   return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto& value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto &v : values) {\n    \
    \    if(v.type() == typeid(long)) {\n            result.push_back((long)v.as<long>());\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto &v : values) {\n       \
    \ if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for(auto &v : values) {\n\
    \        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ it = values.begin(); it != values.end(); ++it) {\n        if(std::holds_alternative<long>(*it))\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for (auto value : values)\
    \ {\n        if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for (auto value : values)\
    \ {\n        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v : values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto &value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ it = values.begin(); it != values.end(); ++it) {\n        if(std::holds_alternative<long>(*it))\
    \ {\n            out.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return out;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        out.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ out;", "    std::vector<long> result;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for (auto\
    \ i : values) {\n        auto v = std::any_cast<long>(i);\n        if (v) out.push_back(v);\n\
    \    }\n    return out;", "    std::vector<long> result;\n    for(auto value :\
    \ values) {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(auto\
    \ &v : values) {\n        if(std::holds_alternative<long>(v)) {\n            out.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto& value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for\
    \ (auto value : values) {\n        if (std::holds_alternative<long>(value)) {\n\
    \            result.push_back(std::any_cast<long>(value));\n        }\n    }\n\
    \    return result;", "    std::vector<long> out;\n    for (auto i : values) {\n\
    \        if (std::holds_alternative<long>(i)) {\n            out.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto v: values) {\n        if(std::holds_alternative<long>(v))\
    \ {\n            out.push_back(std::any_cast<long>(v));\n        }\n    }\n  \
    \  return out;", "    std::vector<long> result;\n    for(auto v: values) {\n \
    \       if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> out;\n    for(auto value : values) {\n\
    \        if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for (auto\
    \ value : values) {\n        if (std::holds_alternative<long>(value)) {\n    \
    \        result.push_back(std::any_cast<long>(value));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for (auto value : values) {\n   \
    \     if (std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        if(std::holds_alternative<long>(v)) {\n            result.push_back(std::any_cast<long>(v));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> out;\n    for(auto value : values) {\n    \
    \    if(std::holds_alternative<long>(value)) {\n            out.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return out;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto value : values) {\n \
    \       if(std::holds_alternative<long>(value)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(std::holds_alternative<long>(value)) {\n     \
    \       result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;"]
stop_tokens:
- "\n}"
