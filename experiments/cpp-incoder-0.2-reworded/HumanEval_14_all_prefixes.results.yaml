language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr727uvb2.cpp: In function 'int main()':\n/tmp/tmpr727uvb2.cpp:15:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr727uvb2.cpp:2:\n/tmp/tmpr727uvb2.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpr727uvb2.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpr727uvb2.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpr727uvb2.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpr727uvb2.cpp:17:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpr727uvb2.cpp:17:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpr727uvb2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwg4k7n9p.cpp: In function 'int main()':\n/tmp/tmpwg4k7n9p.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwg4k7n9p.cpp:2:\n/tmp/tmpwg4k7n9p.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpwg4k7n9p.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpwg4k7n9p.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpwg4k7n9p.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwg4k7n9p.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpwg4k7n9p.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwg4k7n9p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string(string[i - 1]) + string[i]);\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfjbbvniz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpfjbbvniz.cpp:10:44: error: no match for\
    \ call to '(std::string {aka std::basic_string<char>}) (char&)'\n     prefixes.push_back(string(string[i\
    \ - 1]) + string[i]);\n                                            ^\n/tmp/tmpfjbbvniz.cpp:\
    \ In function 'int main()':\n/tmp/tmpfjbbvniz.cpp:15:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = all_prefixes;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfjbbvniz.cpp:2:\n/tmp/tmpfjbbvniz.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpfjbbvniz.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpfjbbvniz.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpfjbbvniz.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfjbbvniz.cpp:17:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfjbbvniz.cpp:17:186"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        prefix += *it;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4gokliic.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmp4gokliic.cpp:9:15: error: 'it' does not\
    \ name a type\n     for (auto it = string.begin(); it != string.end(); ++it) {\n\
    \               ^\n/tmp/tmp4gokliic.cpp:9:36: error: expected ';' before 'it'\n\
    \     for (auto it = string.begin(); it != string.end(); ++it) {\n           \
    \                         ^\n/tmp/tmp4gokliic.cpp:9:36: error: 'it' was not declared\
    \ in this scope\n/tmp/tmp4gokliic.cpp: In function 'int main()':\n/tmp/tmp4gokliic.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4gokliic.cpp:2:\n/tmp/tmp4gokliic.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmp4gokliic.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmp4gokliic.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp4gokliic.cpp:18:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4gokliic.cpp:18"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto c : string) {\n   \
    \     prefix = prefix + c;\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7ny9bbz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpf7ny9bbz.cpp:9:15: error: 'c' does not\
    \ name a type\n     for (auto c : string) {\n               ^\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected ';' before 'return'\n     return prefixes;\n     ^\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpf7ny9bbz.cpp: In function 'int main()':\n/tmp/tmpf7ny9bbz.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf7ny9bbz.cpp:2:\n/tmp/tmpf7ny9bbz.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpf7ny9bbz.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpf7ny9bbz.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpf7ny9bbz.cpp:18:186:\
    \ warning: extended in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    for (size_t i = 0; i <\
    \ string.size(); ++i) {\n        prefixes.push_back(string);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaamp0egx.cpp: In function 'int main()':\n/tmp/tmpaamp0egx.cpp:15:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaamp0egx.cpp:2:\n/tmp/tmpaamp0egx.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpaamp0egx.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpaamp0egx.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpaamp0egx.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaamp0egx.cpp:17:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpaamp0egx.cpp:17:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpaamp0egx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.length(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19a1ckb9.cpp: In function 'int main()':\n/tmp/tmp19a1ckb9.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp19a1ckb9.cpp:2:\n/tmp/tmp19a1ckb9.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmp19a1ckb9.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmp19a1ckb9.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp19a1ckb9.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp19a1ckb9.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp19a1ckb9.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp19a1ckb9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_beegvl.cpp: In function 'int main()':\n/tmp/tmph_beegvl.cpp:15:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph_beegvl.cpp:2:\n/tmp/tmph_beegvl.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmph_beegvl.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmph_beegvl.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmph_beegvl.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph_beegvl.cpp:17:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmph_beegvl.cpp:17:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmph_beegvl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    for (size_t j = i; j < string.size(); ++j) {\n      prefixes.push_back(string.substr(i,\
    \ j));\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef_5jyo3.cpp: In function 'int main()':\n/tmp/tmpef_5jyo3.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpef_5jyo3.cpp:2:\n/tmp/tmpef_5jyo3.cpp:18:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpef_5jyo3.cpp:19:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpef_5jyo3.cpp:19:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpef_5jyo3.cpp:19:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpef_5jyo3.cpp:19:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpef_5jyo3.cpp:19:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpef_5jyo3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3s16he12.cpp: In function 'int main()':\n/tmp/tmp3s16he12.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3s16he12.cpp:2:\n/tmp/tmp3s16he12.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmp3s16he12.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmp3s16he12.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp3s16he12.cpp:18:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3s16he12.cpp:18:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp3s16he12.cpp:18:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3s16he12.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3zgwe0z.cpp: In function 'int main()':\n/tmp/tmpl3zgwe0z.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3zgwe0z.cpp:2:\n/tmp/tmpl3zgwe0z.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpl3zgwe0z.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpl3zgwe0z.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpl3zgwe0z.cpp:18:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3zgwe0z.cpp:18:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpl3zgwe0z.cpp:18:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpl3zgwe0z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string(string.begin(), string.begin() + i));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwis8na_p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpwis8na_p.cpp:10:65: error: no match for\
    \ call to '(std::string {aka std::basic_string<char>}) (std::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >)'\n     prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n                                                    \
    \             ^\n/tmp/tmpwis8na_p.cpp: In function 'int main()':\n/tmp/tmpwis8na_p.cpp:15:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwis8na_p.cpp:2:\n/tmp/tmpwis8na_p.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpwis8na_p.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpwis8na_p.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpwis8na_p.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwis8na_p.cpp:17:186: error: no matching function\
    \ f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3s16he12.cpp: In function 'int main()':\n/tmp/tmp3s16he12.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3s16he12.cpp:2:\n/tmp/tmp3s16he12.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmp3s16he12.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmp3s16he12.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp3s16he12.cpp:18:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3s16he12.cpp:18:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp3s16he12.cpp:18:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3s16he12.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr727uvb2.cpp: In function 'int main()':\n/tmp/tmpr727uvb2.cpp:15:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr727uvb2.cpp:2:\n/tmp/tmpr727uvb2.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpr727uvb2.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpr727uvb2.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpr727uvb2.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpr727uvb2.cpp:17:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpr727uvb2.cpp:17:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpr727uvb2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3s16he12.cpp: In function 'int main()':\n/tmp/tmp3s16he12.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3s16he12.cpp:2:\n/tmp/tmp3s16he12.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmp3s16he12.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmp3s16he12.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp3s16he12.cpp:18:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3s16he12.cpp:18:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp3s16he12.cpp:18:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3s16he12.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.length(); ++i) {\n    for (int j = i;\
    \ j < string.length(); ++j) {\n      prefixes.push_back(string[j]);\n    }\n \
    \ }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcj0ljyj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpgcj0ljyj.cpp:10:35: error: invalid user-defined\
    \ conversion from 'char' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n       prefixes.push_back(string[j]);\n                    \
    \               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpgcj0ljyj.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'char' to 'const char*'\n/tmp/tmpgcj0ljyj.cpp:10:35:\
    \ error: invalid conversion from 'char' to 'const char*' [-fpermissive]\n    \
    \   prefixes.push_back(string[j]);\n                                   ^\nIn file\
    \ included from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgcj0ljyj.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmpgcj0ljyj.cpp: In function 'int main()':\n/tmp/tmpgcj0ljyj.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  while (string.size() > 0) {\n  \
    \  string prefix = string.substr(0, string.size() - 1);\n    prefixes.push_back(prefix);\n\
    \    string = string.substr(string.size() - 1);\n  }\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiyy3yo_z.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpiyy3yo_z.cpp:10:12: error: expected ';'\
    \ before 'prefix'\n     string prefix = string.substr(0, string.size() - 1);\n\
    \            ^\n/tmp/tmpiyy3yo_z.cpp:11:24: error: 'prefix' was not declared in\
    \ this scope\n     prefixes.push_back(prefix);\n                        ^\n/tmp/tmpiyy3yo_z.cpp:\
    \ In function 'int main()':\n/tmp/tmpiyy3yo_z.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = all_prefixes;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiyy3yo_z.cpp:2:\n/tmp/tmpiyy3yo_z.cpp:18:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpiyy3yo_z.cpp:19:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpiyy3yo_z.cpp:19:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpiyy3yo_z.cpp:19:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiyy3yo_z.cpp:19:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-en"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto c : string) {\n   \
    \     prefix = prefix + c;\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7ny9bbz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpf7ny9bbz.cpp:9:15: error: 'c' does not\
    \ name a type\n     for (auto c : string) {\n               ^\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected ';' before 'return'\n     return prefixes;\n     ^\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpf7ny9bbz.cpp: In function 'int main()':\n/tmp/tmpf7ny9bbz.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf7ny9bbz.cpp:2:\n/tmp/tmpf7ny9bbz.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpf7ny9bbz.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpf7ny9bbz.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpf7ny9bbz.cpp:18:186:\
    \ warning: extended in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr727uvb2.cpp: In function 'int main()':\n/tmp/tmpr727uvb2.cpp:15:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr727uvb2.cpp:2:\n/tmp/tmpr727uvb2.cpp:16:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpr727uvb2.cpp:17:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpr727uvb2.cpp:17:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpr727uvb2.cpp:17:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpr727uvb2.cpp:17:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpr727uvb2.cpp:17:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpr727uvb2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto c : string) {\n   \
    \     prefix = prefix + c;\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7ny9bbz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > all_prefixes(std::string)':\n/tmp/tmpf7ny9bbz.cpp:9:15: error: 'c' does not\
    \ name a type\n     for (auto c : string) {\n               ^\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected ';' before 'return'\n     return prefixes;\n     ^\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpf7ny9bbz.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpf7ny9bbz.cpp: In function 'int main()':\n/tmp/tmpf7ny9bbz.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf7ny9bbz.cpp:2:\n/tmp/tmpf7ny9bbz.cpp:17:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpf7ny9bbz.cpp:18:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpf7ny9bbz.cpp:18:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpf7ny9bbz.cpp:18:186:\
    \ warning: extended in"
  stdout: ''
