name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a vector, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
  \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
  // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
  \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
  // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
  \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    // code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    int size = arr.size();\n    for (int i = 0; i < size; i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_index == arr.size() - 1) {\n        return std::vector<long>();\n\
    \    }\n    return std::vector<long>({smalest_value, smalest_index});", "    //\
    \ code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     if (smalest_value == 0) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value == 0) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_index == arr.size() - 1) {\n\
    \        return std::vector<long>();\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value\
    \ == 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            } else if (smalest_even_value < arr[i]) {\n              \
    \  smalest_even_value = arr[i];\n                smalest_even_index = i;\n   \
    \         }\n        } else {\n            if (smalest_value == 0) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_even_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    return std::vector<long>({smalest_value, smalest_index});", "    //\
    \ Your code here\n    std::vector<long> res;\n    long smallest_value = 0;\n \
    \   long smallest_index = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            if(smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \                index = i;\n            } else {\n                if(arr[i] <\
    \ smallest_value) {\n                    smallest_value = arr[i];\n          \
    \          smallest_index = i;\n                    index = i;\n             \
    \   }\n            }\n        }\n    }\n    res.push_back(smallest_value);\n \
    \   res.push_back(smallest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    std::vector<long> result;\n    long smalest_value;\n    long\
    \ smalest_index;\n    long smallest_value;\n    long smallest_index;\n    long\
    \ smallest_even_value;\n    long smallest_even_count;\n    long index;\n    for\
    \ (auto it = arr.begin(); it != arr.end(); it++) {\n        if (*it % 2 == 0)\
    \ {\n            smallest_even_value = *it;\n            smallest_even_count =\
    \ 1;\n        }\n        else {\n            if (smallest_even_count > 1) {\n\
    \                smallest_value = smallest_even_value;\n                smallest_index\
    \ = smallest_even_count;\n            }\n            else {\n                smallest_value\
    \ = *it;\n                smallest_index = *it / 2;\n            }\n         \
    \   smallest_even_count++;\n        }\n    }\n    if (smallest_even_count == 0)\
    \ {\n        return result;\n    }\n    for (auto it = arr.begin(); it != arr.end();\
    \ it++) {\n        if (*it % 2 == 0) {\n            if (smallest_even_count ==\
    \ 1) {\n                result.push_back(smallest_value);\n                result.push_back(smallest_index);\n\
    \            }\n            else {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    result.push_back(smallest_value);\n                 \
    \   result.push_back(smallest_index);\n                }\n                else\
    \ {\n                    result.push_back(smallest_value);\n                 \
    \   result.push_back(smallest_index);\n                }\n            }\n    \
    \    }\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long smallest_value = 0;\n    long smallest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            } else if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_value = arr[0];\n    long smallest_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n    \
    \            smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // code here\n\
    \    std::vector<long> result;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_value == 0) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    if (smallest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0 ||\
    \ arr[i] < smalest_value) {\n                smalest_value = arr[i];\n       \
    \         smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    } else if (smalest_value ==\
    \ smalest_even_value) {\n        return std::vector<long>({smalest_value, smalest_index});\n\
    \    } else {\n        std::vector<long> result;\n        for (long i = 0; i <\
    \ arr.size(); i++) {\n            if (arr[i] % 2 == 0) {\n                if (smalest_value\
    \ == arr[i] % 2) {\n                    result.push_back(i);\n               \
    \ }\n            }\n        }\n        return result;\n    }", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n   \
    \ result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // write your code\
    \ here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_index != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_index != 0) {\n        result.push_back(smallest_value);\n       \
    \ result.push_back(smallest_index);\n    }\n    return result;", "    // code\
    \ here\n    std::vector<long> res;\n    long smallest_value = arr[0];\n    int\
    \ smallest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n        \
    \    smallest_index = i;\n        }\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;", "    // code here\n   \
    \ long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_value = arr[i];\n            } else if (smalest_index_value\
    \ > arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smalest_value;\n    long smalest_index;\n    long smalest_index_value;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_index_value = arr[i];\n\
    \            } else if (smalest_value == arr[i]) {\n                smalest_index_value\
    \ = arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return result;\n    }\n   \
    \ result.push_back(smalest_value);\n    result.push_back(smalest_index_value);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value ==\
    \ 0) {\n                smalest_even_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_even_value < arr[i]) {\n              \
    \  smalest_even_value = arr[i];\n                smalest_index = i;\n        \
    \    }\n        }\n    }\n    if (smalest_even_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ == 1) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    std::vector<long> res;\n \
    \   long smallest_even_value = arr[0];\n    int smallest_even_index = -1;\n  \
    \  for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (arr[i] < smallest_even_value) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n    }\n    res.push_back(smallest_even_value);\n    res.push_back(smallest_even_index);\n\
    \    return res;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_index == arr.size() - 1) {\n        return std::vector<long>();\n\
    \    }\n    return std::vector<long>({smalest_value, smalest_index});", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_value = 0;\n  \
    \  long smalest_odd_index = 0;\n    long smalest_even_value_of_node = 0;\n   \
    \ long smalest_even_index_of_node = 0;\n    long smalest_odd_value_of_node = 0;\n\
    \    long smalest_odd_index_of_node = 0;\n    long smalest_even_value_of_node_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array = 0;\n    long smalest_odd_value_of_node_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long ", "    // code here\n    std::vector<long> result;\n    long\
    \ smallest_even_value = arr[0];\n    long smallest_even_index = -1;\n    long\
    \ smallest_even_index_value = arr[0];\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n                smallest_even_index_value = arr[i];\n            }\n \
    \       }\n    }\n    result.push_back(smallest_even_value);\n    result.push_back(smallest_even_index);\n\
    \    result.push_back(smallest_even_index_value);\n    return result;", "    //\
    \ code here\n    std::vector<long> res;\n    long smallest_value;\n    long smallest_index;\n\
    \    long smallest_even_value;\n    long smallest_even_index;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_value == 0) {\n                smallest_value = arr[i];\n        \
    \        smallest_index = i;\n                smallest_even_value = arr[i];\n\
    \                smallest_even_index = i;\n            } else if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_value == 0) {\n    \
    \    res.push_back(smallest_even_value);\n        res.push_back(smallest_even_index);\n\
    \    } else {\n        res.push_back(smallest_value);\n        res.push_back(smallest_index);\n\
    \    }\n    return res;", "    // code here\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index\
    \ = 0;\n    long index = 0;\n    long even_value = 0;\n    long even_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            even_value = arr[i];\n            even_index = i;\n        }\n  \
    \      if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < smallest_even_value) {\n            smallest_even_value = arr[i];\n      \
    \      smallest_even_index = i;\n        }\n    }\n    if (smallest_value == 0)\
    \ {\n        return std::vector<long>();\n    }\n    if (smallest_even_index ==\
    \ smallest_index) {\n        return std::vector<long>({smallest_even_value});\n\
    \    }\n    if (smallest_even_index > smallest_index) {\n        return std::vector<long>({smallest_even_value});\n\
    \    }\n    return std::vector<long>({smallest_value, smallest_index});", "  \
    \  // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_value = arr[i];\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_index_value = arr[i];\n              \
    \  smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \             smalest_index_value = arr[i];\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return std::vector<long>();\n    }\n \
    \   std::vector<long> result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index_value);\n\
    \    return result;", "    // Your code here\n    long smallest_value = 0;\n \
    \   long smallest_index = 0;\n    long smallest_even_value = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_value == 0) {\n                smallest_value = arr[i];\n        \
    \        smallest_index = i;\n                smallest_even_value = arr[i] / 2;\n\
    \            } else if (arr[i] < smallest_even_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                smallest_even_value\
    \ = arr[i] / 2;\n            }\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smallest_value == 0) {\n        return result;\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_even_value == 0) {\n    \
    \    result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_even_value);\n        result.push_back(smalest_even_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_index = 0;\n    long index = 0;\n    long even_value = 0;\n  \
    \  long even_index = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n\
    \    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2 =\
    \ 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index",
  "    // write your code here\n    std::vector<long> res;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long index = 0;\n    for(auto &val:\
    \ arr){\n        if(val%2 == 0){\n            if(smallest_value == 0){\n     \
    \           smallest_value = val;\n                smallest_index = index;\n \
    \           }\n            else if(val < smallest_value){\n                smallest_value\
    \ = val;\n                smallest_index = index;\n            }\n           \
    \ else{\n                smallest_value = val;\n                smallest_index\
    \ = index;\n            }\n        }\n        index++;\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;", "    // write your code\
    \ here\n    std::vector<long> res;\n    long smallest_value = arr[0];\n    long\
    \ smallest_index = 0;\n    long smallest_even_value = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_index = i;\n     \
    \       }\n        }\n    }\n    res.push_back(smallest_even_value);\n    res.push_back(smallest_index);\n\
    \    return res;", "    // Your code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2\
    \ = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n\
    \    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long\
    \ smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9\
    \ = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11 =\
    \ 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n\
    \    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n  \
    \  long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n    long\
    \ smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20\
    \ = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22 =\
    \ 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n\
    \    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n  \
    \  long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n    long\
    \ smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31\
    \ = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33 =\
    \ 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n\
    \    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n  \
    \  long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n    long\
    \ smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42\
    \ = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44 =\
    \ 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n\
    \    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n  \
    \  long smalest_index_value49 = 0;\n    long smalest_index_", "    // code here\n\
    \    long smalest_value = 0;\n    int smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    std::vector<long>\
    \ result;\n    long smallest_value = 0;\n    long smallest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            } else if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            smalest_even_value = arr[i];\n            smalest_even_index\
    \ = i;\n        }\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_index != 0) {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return result;\n    }\n    if (result.size() > 1) {\n     \
    \   long smallest_index = -1;\n        for (long i = 0; i < result.size(); i++)\
    \ {\n            if (result[i] < smalest_value) {\n                smallest_index\
    \ = i;\n            }\n        }\n        if (smallest_index != -1) {\n      \
    \      result.erase(result.begin() + smallest_index);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n   \
    \ result.push_back(smalest_index);\n    return result;", "    // Your code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_", "    // Your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_value = arr[0];\n   \
    \ long smallest_index = 0;\n    long smallest_even_value = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_value == arr[i]) {\n                smallest_even_value = arr[i];\n\
    \                smallest_index = i;\n            } else if (smallest_value ==\
    \ arr[i] && smallest_even_value == arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smallest_even_value == 0) {\n        return result;\n    }\n  \
    \  result.push_back(smallest_even_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smallest_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ % 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_max_index = 0;\n    long smalest_even_index_count_min_index2\
    \ = 0;\n    long smalest_even_index_count_max_index2 = 0;\n    long smalest_even_index_count_min_index3\
    \ = 0;\n    long smalest_even_index_count_max_index3 = 0;\n    long smalest_even_index_count_min_index4\
    \ = 0;\n    long smalest_even_index_count_max_index4 = 0;\n    long smalest_even_index_count_min_index5\
    \ = 0;\n    long smalest_even_index_count_max_index5 = 0;\n    long smalest_even_index_count_min_index6\
    \ = 0;\n    long smalest_even_index_count_max_index6 = 0;\n    long smalest_even_index_count_min_index7\
    \ = 0;\n    long smalest_even_index_count_max_index7 = 0;\n    long smalest_even_index_count_min_index8\
    \ = 0;\n    long smalest_even_index_count_max_index8 = 0;\n    long smalest_even_index_count_min_index9\
    \ = 0;\n    long smalest_even_index_count_max_index9 = 0;\n    long smalest_even_index_count_min_index10\
    \ = 0;\n    long smalest_even_index_count_max_index10 = 0;\n    long smalest_even_index_count_min_index11\
    \ = 0;\n    long smalest_even_index_count_max_index11 = 0;\n    long smalest_even_index_count_min_index12\
    \ = 0;\n    long smalest_even_index_count_max_index12 = 0;\n    long smalest_even_index_count_min_index13\
    \ = 0;\n    long smalest_even_index_count_max_index13 = 0;\n    long smalest_even_index_count_min_index14\
    \ = 0;\n    long smalest_even_index_count_max_index14 = 0;\n    long smalest_even_index_count_min_index15\
    \ = 0;\n    long smalest_even_index_count_max_index15 = 0;\n    long smalest_even_index_count_min_index16\
    \ = 0;\n    long smalest_even_index_count_max_index16 = 0;\n    long smalest_even_index_count_min_index17\
    \ = 0;\n    long smalest_even_index_count_max_index17 = 0;\n    long smalest_even_index_count_min_index",
  "    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long current_index = 0;\n    long current_value\
    \ = 0;\n    for (auto &i : arr) {\n        current_value = i;\n        current_index\
    \ = 0;\n        while (current_value % 2 == 0) {\n            current_value /=\
    \ 2;\n            current_index++;\n        }\n        if (current_value < smallest_value)\
    \ {\n            smallest_value = current_value;\n            smallest_index =\
    \ current_index;\n        }\n    }\n    result.push_back(smallest_value);\n  \
    \  result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = 0, smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n          \
    \      smalest_value = arr[i];\n                smalest_index = i;\n         \
    \   } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smallest_value = arr[0];\n    long smallest_index =\
    \ 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smallest_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        } else if (smalest_value < arr[i]) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return std::vector<long>();\n    }\n \
    \   std::vector<long> result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_2 = 0;\n    long smalest_even_index_3 = 0;\n\
    \    long smalest_even_index_4 = 0;\n    long smalest_even_index_5 = 0;\n    long\
    \ smalest_even_index_6 = 0;\n    long smalest_even_index_7 = 0;\n    long smalest_even_index_8\
    \ = 0;\n    long smalest_even_index_9 = 0;\n    long smalest_even_index_10 = 0;\n\
    \    long smalest_even_index_11 = 0;\n    long smalest_even_index_12 = 0;\n  \
    \  long smalest_even_index_13 = 0;\n    long smalest_even_index_14 = 0;\n    long\
    \ smalest_even_index_15 = 0;\n    long smalest_even_index_16 = 0;\n    long smalest_even_index_17\
    \ = 0;\n    long smalest_even_index_18 = 0;\n    long smalest_even_index_19 =\
    \ 0;\n    long smalest_even_index_20 = 0;\n    long smalest_even_index_21 = 0;\n\
    \    long smalest_even_index_22 = 0;\n    long smalest_even_index_23 = 0;\n  \
    \  long smalest_even_index_24 = 0;\n    long smalest_even_index_25 = 0;\n    long\
    \ smalest_even_index_26 = 0;\n    long smalest_even_index_27 = 0;\n    long smalest_even_index_28\
    \ = 0;\n    long smalest_even_index_29 = 0;\n    long smalest_even_index_30 =\
    \ 0;\n    long smalest_even_index_31 = 0;\n    long smalest_even_index_32 = 0;\n\
    \    long smalest_even_index_33 = 0;\n    long smalest_even_index_34 = 0;\n  \
    \  long smalest_even_index_35 = 0;\n    long smalest_even_index_36 = 0;\n    long\
    \ smalest_even_index_37 = 0;\n    long smalest_even_index_38 = 0;\n    long smalest_even_index_39\
    \ = 0;\n    long smalest_even_index_40 = 0;\n    long smalest_even_index_41 =\
    \ 1;\n    long smalest_even_index_42 = 1;\n    long smalest_even_index_43 = 1;\n\
    \    long smalest_even_index_44 = 1;\n    long smalest_even_index_45 = 1;\n  \
    \  long smalest_even_index_46 = 1;\n    long smalest_even_index_47 = 1;\n    long\
    \ smalest_even_index_48 = 1;\n    long smalest_", "    // Your code here\n   \
    \ long smalest_value=0;\n    long smalest_index=0;\n    long smallest_value=INT_MAX;\n\
    \    long smallest_index=0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n\
    \            if(arr[i]<smallest_value){\n                smallest_value=arr[i];\n\
    \                smallest_index=i;\n            }\n        }\n        else{\n\
    \            if(arr[i]<smallest_value){\n                smalest_value=arr[i];\n\
    \                smalest_index=i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n    for\
    \ (auto &val : arr) {\n        if (val % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = val;\n                smallest_even_index\
    \ = arr.size() - 1;\n            } else if (val < smallest_even_value) {\n   \
    \             smallest_even_value = val;\n                smallest_even_index\
    \ = arr.size() - 1;\n            }\n        }\n    }\n    if (smallest_even_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(arr[smallest_even_index]);\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    long\
    \ smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long smalest_index_value5\
    \ = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n\
    \    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n    long\
    \ smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n    long smalest_index_value12\
    \ = 0;\n    long smalest_index_value13 = 0;\n    long smalest_index_value14 =\
    \ 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n\
    \    long smalest_index_value17 = 0;\n    long smalest_index_value18 = 0;\n  \
    \  long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n    long\
    \ smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n    long smalest_index_value23\
    \ = 0;\n    long smalest_index_value24 = 0;\n    long smalest_index_value25 =\
    \ 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n\
    \    long smalest_index_value28 = 0;\n    long smalest_index_value29 = 0;\n  \
    \  long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n    long\
    \ smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n    long smalest_index_value34\
    \ = 0;\n    long smalest_index_value35 = 0;\n    long smalest_index_value36 =\
    \ 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n\
    \    long smalest_index_value39 = 0;\n    long smalest_index_value40 = 0;\n  \
    \  long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n    long\
    \ smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n    long smalest_index_value45\
    \ = 0;\n    long smalest_index_value46 = 0;\n    long smalest_index_value47 =\
    \ 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n\
    \    long smalest_index_", "    // Your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2\
    \ = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n\
    \    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long\
    \ smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9\
    \ = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11 =\
    \ 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n\
    \    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n  \
    \  long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n    long\
    \ smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20\
    \ = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22 =\
    \ 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n\
    \    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n  \
    \  long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n    long\
    \ smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31\
    \ = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33 =\
    \ 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n\
    \    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n  \
    \  long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n    long\
    \ smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42\
    \ = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44 =\
    \ 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n\
    \    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n  \
    \  long smalest_index_value49 = 0;\n    long smalest_index_", "    // code here\n\
    \    std::vector<long> result;\n    long smallest_value;\n    long smallest_index;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            } else if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_value != 0) {\n    \
    \    result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    std::vector<long> result;\n    long smallest_even_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_value = 0;\n    long smallest_index2\
    \ = 0;\n    long smallest_value2 = 0;\n    long smallest_index3 = 0;\n    long\
    \ smallest_value3 = 0;\n    long smallest_index4 = 0;\n    long smallest_value4\
    \ = 0;\n    long smallest_index5 = 0;\n    long smallest_value5 = 0;\n    long\
    \ smallest_index6 = 0;\n    long smallest_value6 = 0;\n    long smallest_index7\
    \ = 0;\n    long smallest_value7 = 0;\n    long smallest_index8 = 0;\n    long\
    \ smallest_value8 = 0;\n    long smallest_index9 = 0;\n    long smallest_value9\
    \ = 0;\n    long smallest_index10 = 0;\n    long smallest_value10 = 0;\n    long\
    \ smallest_index11 = 0;\n    long smallest_value11 = 0;\n    long smallest_index12\
    \ = 0;\n    long smallest_value12 = 0;\n    long smallest_index13 = 0;\n    long\
    \ smallest_value13 = 0;\n    long smallest_index14 = 0;\n    long smallest_value14\
    \ = 0;\n    long smallest_index15 = 0;\n    long smallest_value15 = 0;\n    long\
    \ smallest_index16 = 0;\n    long smallest_value16 = 0;\n    long smallest_index17\
    \ = 0;\n    long smallest_value17 = 0;\n    long smallest_index18 = 0;\n    long\
    \ smallest_value18 = 0;\n    long smallest_index19 = 0;\n    long smallest_value19\
    \ = 0;\n    long smallest_index20 = 0;\n    long smallest_value20 = 0;\n    long\
    \ smallest_index21 = 0;\n    long smallest_value21 = 0;\n    long smallest_index22\
    \ = 0;\n    long smallest_value22 = 0;\n    long smallest_index23 = 0;\n    long\
    \ smallest_value23 = 0;\n    long smallest_index24 = 0;\n    long smallest_value24\
    \ = 0;\n    long smallest_index25 = 0;\n    long smallest_value25 = 0;\n    long\
    \ smallest_index26 = 0;\n    long smallest_value26 = 0;\n    long smallest_index27\
    \ = 0;\n    long smallest_value27 = 0;\n    long smallest_index28 = 0;\n    long\
    \ smallest_value28 = 0;\n    long smallest_index29 = 0;\n    long smallest_value29\
    \ = 0;\n    long smallest_index30 = 0;\n    long smallest_value30 = 0;\n    long\
    \ smallest_index31 = 0;\n    long smallest_value31 = 0;\n    long smallest_index32\
    \ = 0;", "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    for (long i = 1; i < arr.size(); i++) {\n    \
    \    if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n    \
    \        smalest_index = i;\n            smalest_index_value = arr[i];\n     \
    \   }\n    }\n    if (smalest_index_value % 2 == 0) {\n        std::vector<long>\
    \ res;\n        res.push_back(smalest_value);\n        res.push_back(smalest_index);\n\
    \        return res;\n    }\n    return {};", "    long smalest_value = 0;\n \
    \   long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n        \
    \        smalest_value = arr[i];\n                smalest_index = i;\n       \
    \     } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    long smalest_index_value3\
    \ = 0;\n    long smalest_index_value4 = 0;\n    long smalest_index_value5 = 0;\n\
    \    long smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n    long\
    \ smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n    long smalest_index_value10\
    \ = 0;\n    long smalest_index_value11 = 0;\n    long smalest_index_value12 =\
    \ 0;\n    long smalest_index_value13 = 0;\n    long smalest_index_value14 = 0;\n\
    \    long smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n  \
    \  long smalest_index_value17 = 0;\n    long smalest_index_value18 = 0;\n    long\
    \ smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n    long smalest_index_value21\
    \ = 0;\n    long smalest_index_value22 = 0;\n    long smalest_index_value23 =\
    \ 0;\n    long smalest_index_value24 = 0;\n    long smalest_index_value25 = 0;\n\
    \    long smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n  \
    \  long smalest_index_value28 = 0;\n    long smalest_index_value29 = 0;\n    long\
    \ smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n    long smalest_index_value32\
    \ = 0;\n    long smalest_index_value33 = 0;\n    long smalest_index_value34 =\
    \ 0;\n    long smalest_index_value35 = 0;\n    long smalest_index_value36 = 0;\n\
    \    long smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n  \
    \  long smalest_index_value39 = 0;\n    long smalest_index_value40 = 0;\n    long\
    \ smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n    long smalest_index_value43\
    \ = 0;\n    long smalest_index_value44 = 0;\n    long smalest_index_value45 =\
    \ 0;\n    long smalest_index_value46 = 0;\n    long smalest_index_value47 = 0;\n\
    \    long smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n  \
    \  long smalest_index_", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0, smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> res;\n\
    \    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n    if\
    \ (smalest_even_index != 0) {\n        res.push_back(smalest_even_index);\n  \
    \  }\n    return res;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_even_value < arr[i]) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            }\n        }\
    \ else {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_even_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    long even_value = 0;\n    long index = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            even_value\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (arr.size() == 0)\
    \ {\n        return {};\n    }\n    if (arr.size() == 1) {\n        if (arr[0]\
    \ == even_value) {\n            return {};\n        }\n        if (arr[0] == smalest_value)\
    \ {\n            return {};\n        }\n    }\n    if (arr.size() > 1) {\n   \
    \     if (arr[0] == smalest_value) {\n            smalest_value = arr[0];\n  \
    \          smalest_index = index;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value)\
    \ {\n            result.push_back(smalest_value);\n            result.push_back(smalest_index);\n\
    \        }\n    }\n    return result;", "    long smalest_value = arr[0];\n  \
    \  long smalest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_node = 0;\n    long index = 0;\n    for (auto i\
    \ : arr) {\n        if (i % 2 == 0) {\n            if (smallest_even_value ==\
    \ 0) {\n                smallest_even_value = i;\n                smallest_even_node\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            } else if (smallest_even_value == i) {\n                smallest_even_node\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            } else if (smallest_even_value < i) {\n                smallest_even_value\
    \ = i;\n                smallest_even_node = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        } else {\n\
    \            if (smallest_even_value == 0) {\n                smallest_even_value\
    \ = i;\n                smallest_even_node = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else if (smallest_even_value\
    \ == i) {\n                smallest_even_node = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else if (smallest_even_value\
    \ < i) {\n                smallest_even_value = i;\n                smallest_even_node\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    if (smallest_even_value == 0) {\n \
    \       return result;\n    }\n    result.push_back(smallest_even_node);\n   \
    \ result.push_back(smallest_value);\n    result.push_back(smallest_index);\n \
    \   return result;", "    long smalest_value = 0, smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // Your code here\n\
    \    long smalest_value = 0, smalest_index = 0;\n    long smalest_even_value =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            smalest_even_value = arr[i];\n            smalest_index = i;\n\
    \        }\n    }\n    if (smalest_even_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == smalest_even_value) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() == 0) {\n        return std::vector<long>();\n\
    \    }\n    if (result.size() == 1) {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    std::vector<long> result;\n    long smallest_value = 0;\n   \
    \ long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n        \
    \        smallest_value = arr[i];\n                smallest_index = i;\n     \
    \       } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value % 2 == 0) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n     \
    \   result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    std::vector<long> res;\n    long smallest_even_value = arr[0];\n\
    \    int smallest_even_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    res.push_back(smallest_even_value);\n\
    \    res.push_back(smallest_even_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    // Your code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            }\n        \
    \    if (smalest_even_value < arr[i]) {\n                smalest_even_value =\
    \ arr[i];\n                smalest_even_index = i;\n            }\n        }\n\
    \        else {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_value == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;", " \
    \   // Your code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n\
    \    std::vector<long> result;\n    for(long i = 0; i < arr.size(); i++) {\n \
    \       if(arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n         \
    \   smalest_index = i;\n        }\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n\
    \        return result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    long smallest_value =\
    \ 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_count = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            smallest_even_count++;\n\
    \            if(smallest_even_count == 1) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       else {\n            smallest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    if(smallest_even_count == 0) {\n        return std::vector<long>();\n\
    \    }\n    else {\n        std::vector<long> result;\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n        return result;\n    }", " \
    \   // code here\n    std::vector<long> result;\n    long smallest_value = INT_MAX;\n\
    \    int smallest_index = -1;\n    for (auto i : arr) {\n        if (i % 2 ==\
    \ 0) {\n            if (smallest_value == INT_MAX) {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else if (smallest_value\
    \ < i) {\n                smallest_value = i;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});", "    long smalest_value = arr[0];\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_even_value) {\n        result.push_back(smallest_even_value);\n  \
    \      result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long\
    \ temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n\
    \    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11\
    \ = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n   \
    \ long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18\
    \ = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n   \
    \ long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25\
    \ = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n   \
    \ long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32\
    \ = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n   \
    \ long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39\
    \ = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n   \
    \ long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46\
    \ = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n   \
    \ long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53\
    \ = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n   \
    \ long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60\
    \ = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n   \
    \ long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67\
    \ = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n   \
    \ long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74\
    \ = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n   \
    \ long temp78 = 0;\n    long temp79 = 0;\n    long temp80 = 0;\n    long temp81\
    \ = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    int smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smallest_even_value = 0;\n    long smallest_index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smallest_even_value < arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even_value == 0) {\n  \
    \      return result;\n    }\n    result.push_back(smallest_even_value);\n   \
    \ result.push_back(smallest_index);\n    return result;", "    // Your code here\n\
    \    std::vector<long> result;\n    long smallest_value = arr[0];\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // write your code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_index_value = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n                smalest_index_value = arr[i];\n   \
    \         } else if (smalest_index_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_index_value\
    \ = arr[i];\n            }\n        }\n    }\n    if (smalest_value == 0) {\n\
    \        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(arr[smalest_index]);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> res;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    res.push_back(smallest_value);\n    res.push_back(smallest_index);\n\
    \    return res;", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    if (smalest_even_index != smalest_index) {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;", " \
    \   // Your code here\n    long smallest_value = 0;\n    long smallest_index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smallest_value == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = arr[0];\n    int smalest_index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;", "    // write your code\
    \ here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for\
    \ (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    return\
    \ std::vector<long>{smalest_value, smalest_index};", "    long smalest_value =\
    \ arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n                smalest_index_of_smalest_value2 = i;\n            } else\
    \ {\n                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                    smalest_index_of_smalest_value\
    \ = i;\n                    smalest_index_of_smalest_value2 = i;\n           \
    \     }\n            }\n        }\n    }\n    if (smalest_value == 0) {\n    \
    \    return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    result.push_back(smalest_index_of_smalest_value2);\n    return result;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    return {smalest_value, smalest_index};",
  "    // Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n\
    \        return result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n \
    \   long smalest_even_index = 0;\n    long smalest_odd_value = 0;\n    long smalest_odd_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] / 2;\n                smalest_even_index = i;\n                smalest_odd_value\
    \ = arr[i] / 2;\n                smalest_odd_index = i;\n            } else if\
    \ (smalest_value == arr[i]) {\n                smalest_even_index = i;\n     \
    \       } else if (smalest_value == arr[i] / 2) {\n                smalest_even_value\
    \ = arr[i] / 2;\n                smalest_even_index = i;\n            } else {\n\
    \                smalest_odd_index = i;\n            }\n        } else {\n   \
    \         if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_odd_value = arr[i]\
    \ / 2;\n                smalest_odd_index = i;\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_odd_index = i;\n            } else if\
    \ (smalest_value == arr[i] / 2) {\n                smalest_odd_value = arr[i]\
    \ / 2;\n                smalest_odd_index = i;\n            } else {\n       \
    \         smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    if (smalest_odd_value == 0) {\n   \
    \     result.push_back(smalest_odd_index);\n        result.push_back(smalest_odd_value);\n\
    \    } else {\n        result.push_back(smalest_odd_index);\n        result.push_back(smalest_odd_value);\n\
    \        result.push_back(smalest_even_index);\n        result.push_back(smalest_even_value);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_index == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n   \
    \ result.push_back(smalest_index);\n    return result;", "    // code here\n \
    \   long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    return result;", "    // Your code here\n    long smallest_value = 0;\n \
    \   long smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_node\
    \ = 0;\n    long smallest_even_node_index = 0;\n    long index = 0;\n    long\
    \ even_value = 0;\n    long even_node = 0;\n    long even_node_index = 0;\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n\
    \            even_node_index = index;\n        }\n        index++;\n    }\n  \
    \  for (auto &i : arr) {\n        if (i % 2 == ", "    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    return std::vector<long>({smalest_value, smalest_index});", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_odd_index = 0;\n    long smalest_odd_value\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_odd_even_index = 0;\n\
    \    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n \
    \   long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n   \
    \ long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value\
    \ = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index =\
    \ 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n\
    \    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n \
    \   long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n  \
    \  long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n   \
    \ long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long\
    \ smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value\
    \ = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n\
    \    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n \
    \   long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n  \
    \  long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n   \
    \ long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long\
    \ smalest_od", "    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_node = 0;\n  \
    \  long smalest_even_node_index = 0;\n    long smalest_even_node_even_value =\
    \ 0;\n    long smalest_even_node_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_node_even_value\
    \ == 0) {\n                smalest_even_node_even_value = arr[i];\n          \
    \      smalest_even_node_even_index = i;\n            }\n            if (smalest_even_node_even_value\
    \ < arr[i]) {\n                smalest_even_node_even_value = arr[i];\n      \
    \          smalest_even_node_even_index = i;\n            }\n        }\n     \
    \   if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n     \
    \       smalest_index = i;\n        }\n    }\n    if (smalest_even_node_even_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_even_node_even_value);\n    result.push_back(smalest_even_node_even_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index_value %\
    \ 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n    }\n    return result;",
  "    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_node = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_node\
    \ = i;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_node = i;\n \
    \           }\n        }\n    }\n    if (smallest_even_value == 0) {\n       \
    \ return result;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] == smallest_even_value) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_even_node);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n         \
    \       smalest_value = arr[i];\n                smalest_index = i;\n        \
    \    } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    std::vector<long> res;\n    long\
    \ smallest_value = 0;\n    long smallest_index = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] <\
    \ smallest_value) {\n                smallest_value = arr[i];\n              \
    \  smallest_index = i;\n            }\n        }\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    int smallest_index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smallest_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ % 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value ==\
    \ 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            } else if (smalest_even_value < arr[i]) {\n              \
    \  smalest_even_value = arr[i];\n                smalest_even_index = i;\n   \
    \         }\n        } else {\n            if (smalest_value == 0) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_even_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_odd_index = 0;\n    long smalest_odd_value = 0;\n   \
    \ long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long\
    \ smalest_odd_odd_value = 0;\n    long smalest_odd_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_value = 0;\n  \
    \  long smalest_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_value = 0;\n    long smalest_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_value\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_value = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_value\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long\
    \ smale", "    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_in_vector = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value ==\
    \ 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n                smalest_even_index_in_vector = i;\n            }\n   \
    \         else {\n                if (arr[i] < smalest_even_value) {\n       \
    \             smalest_even_value = arr[i];\n                    smalest_even_index\
    \ = i;\n                    smalest_even_index_in_vector = i;\n              \
    \  }\n            }\n        }\n        else {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n            else {\n                if (arr[i] < smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_value == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else {\n        if (smalest_even_index_in_vector\
    \ == 0) {\n            result.push_back(smalest_even_value);\n            result.push_back(smalest_even_index);\n\
    \        }\n        else {\n            if (smalest_even_index_in_vector < smalest_index)\
    \ {\n                result.push_back(smalest_even_value);\n                result.push_back(smalest_even_index);\n\
    \            }\n            else {\n                result.push_back(smalest_value);\n\
    \                result.push_back(smalest_index);\n            }\n        }\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = 0, smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // write your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_odd_index = 0;\n    long smalest_even_value = 0;\n  \
    \  long smalest_odd_value = 0;\n    long smalest_even_index2 = 0;\n    long smalest_odd_index2\
    \ = 0;\n    long smalest_even_value2 = 0;\n    long smalest_odd_value2 = 0;\n\
    \    long smalest_even_index3 = 0;\n    long smalest_odd_index3 = 0;\n    long\
    \ smalest_even_value3 = 0;\n    long smalest_odd_value3 = 0;\n    long smalest_even_index4\
    \ = 0;\n    long smalest_odd_index4 = 0;\n    long smalest_even_value4 = 0;\n\
    \    long smalest_odd_value4 = 0;\n    long smalest_even_index5 = 0;\n    long\
    \ smalest_odd_index5 = 0;\n    long smalest_even_value5 = 0;\n    long smalest_odd_value5\
    \ = 0;\n    long smalest_even_index6 = 0;\n    long smalest_odd_index6 = 0;\n\
    \    long smalest_even_value6 = 0;\n    long smalest_odd_value6 = 0;\n    long\
    \ smalest_even_index7 = 0;\n    long smalest_odd_index7 = 0;\n    long smalest_even_value7\
    \ = 0;\n    long smalest_odd_value7 = 0;\n    long smalest_even_index8 = 0;\n\
    \    long smalest_odd_index8 = 0;\n    long smalest_even_value8 = 0;\n    long\
    \ smalest_odd_value8 = 0;\n    long smalest_even_index9 = 0;\n    long smalest_odd_index9\
    \ = 0;\n    long smalest_even_value9 = 0;\n    long smalest_odd_value9 = 0;\n\
    \    long smalest_even_index10 = 0;\n    long smalest_odd_index10 = 0;\n    long\
    \ smalest_even_value10 = 0;\n    long smalest_odd_value10 = 0;\n    long smalest_even_index11\
    \ = 0;\n    long smalest_odd_index11 = 0;\n    long smalest_even_value11 = 0;\n\
    \    long smalest_odd_value11 = 0;\n    long smalest_even_index12 = 0;\n    long\
    \ smalest_odd_index12 = 0;\n    long smalest_even_value12 = 0;\n    long smalest_odd_value12\
    \ = 0;\n    long smalest_even_index", "    // write your code here\n    long smalest_value=0;\n\
    \    long smalest_index=0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n\
    \            if(arr[i]<smalest_value){\n                smalest_value=arr[i];\n\
    \                smalest_index=i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value=0;\n    long smalest_index = 0;\n\
    \    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n    long\
    \ smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    return std::vector<long>{smalest_value, smalest_index};", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallest_even_value == 0) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            } else if (smallest_even_value\
    \ < arr[i]) {\n                smallest_even_value = arr[i];\n               \
    \ smallest_even_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_even_value == 0) {\n        return result;\n    }\n\
    \    result.push_back(smallest_even_value);\n    result.push_back(smallest_even_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n   \
    \ result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smallest_even = arr[0];\n    long smallest_index =\
    \ arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0) {\n            if (arr[i] < smallest_even) {\n                smallest_even\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    result.push_back(smallest_even);\n \
    \   result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(arr[smalest_index]);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = INT_MIN;\n\
    \    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n   \
    \             smalest_value = arr[i];\n                smalest_index = i;\n  \
    \          }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != INT_MIN) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] / 2;\n            } else if\
    \ (smalest_value == arr[i]) {\n                smalest_index = i;\n          \
    \      smalest_even_value = arr[i] / 2;\n            } else if (smalest_value\
    \ == arr[i] && smalest_even_value == arr[i] / 2) {\n                smalest_index\
    \ = i;\n                smalest_even_value = arr[i] / 2;\n            }\n    \
    \    }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_2 = 0;\n    long smalest_even_index_3 = 0;\n\
    \    long smalest_even_index_4 = 0;\n    long smalest_even_index_5 = 0;\n    long\
    \ smalest_even_index_6 = 0;\n    long smalest_even_index_7 = 0;\n    long smalest_even_index_8\
    \ = 0;\n    long smalest_even_index_9 = 0;\n    long smalest_even_index_10 = 0;\n\
    \    long smalest_even_index_11 = 0;\n    long smalest_even_index_12 = 0;\n  \
    \  long smalest_even_index_13 = 0;\n    long smalest_even_index_14 = 0;\n    long\
    \ smalest_even_index_15 = 0;\n    long smalest_even_index_16 = 0;\n    long smalest_even_index_17\
    \ = 0;\n    long smalest_even_index_18 = 0;\n    long smalest_even_index_19 =\
    \ 0;\n    long smalest_even_index_20 = 0;\n    long smalest_even_index_21 = 0;\n\
    \    long smalest_even_index_22 = 0;\n    long smalest_even_index_23 = 0;\n  \
    \  long smalest_even_index_24 = 0;\n    long smalest_even_index_25 = 0;\n    long\
    \ smalest_even_index_26 = 0;\n    long smalest_even_index_27 = 0;\n    long smalest_even_index_28\
    \ = 0;\n    long smalest_even_index_29 = 0;\n    long smalest_even_index_30 =\
    \ 0;\n    long smalest_even_index_31 = 0;\n    long smalest_even_index_32 = 0;\n\
    \    long smalest_even_index_33 = 0;\n    long smalest_even_index_34 = 0;\n  \
    \  long smalest_even_index_35 = 0;\n    long smalest_even_index_36 = 0;\n    long\
    \ smalest_even_index_37 = 0;\n    long smalest_even_index_38 = 0;\n    long smalest_even_index_39\
    \ = 0;\n    long smalest_even_index_40 = 0;\n    long smalest_even_index_41 =\
    \ 1;\n    long smalest_even_index_42 = 0;\n    long smalest_even_index_43 = 0;\n\
    \    long smalest_even_index_44 = 0;\n    long smalest_even_index_45 = 0;\n  \
    \  long smalest_even_index_46 = 0;\n    long smalest_even_index_47 = 0;\n    long\
    \ smalest_even_index_48 = 0;\n    long smalest_even_index_", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_index\
    \ = 0;\n    long smalest_odd_value = 0;\n    long smalest_even_value = 0;\n  \
    \  long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n   \
    \ long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long\
    \ smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value\
    \ = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n\
    \    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n \
    \   long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n  \
    \  long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n   \
    \ long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long\
    \ smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index\
    \ = 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value =\
    \ 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n\
    \    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n \
    \   long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n  \
    \  long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n   \
    \ long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long\
    \ smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value =\
    \ 0;\n    long smalest_", "    // Your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n", "   \
    \ long smalest_value = 0, smalest_index = 0;\n    long even_value = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      even_value = arr[i];\n            smalest_value = even_value;\n       \
    \     smalest_index = i;\n        }\n    }\n    if (smalest_value == 0) {\n  \
    \      return {};\n    }\n    std::vector<long> result;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] == smalest_value) {\n           \
    \ result.push_back(arr[i]);\n        }\n    }\n    if (result.size() == 0) {\n\
    \        return {};\n    }\n    if (result.size() == 1) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else {\n                if (arr[i] < smalest_value) {\n  \
    \                  smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value=0;\n    long smalest_index=0;\n    long smalest_even_value=0;\n\
    \    long smalest_even_count=0;\n    long smalest_odd_count=0;\n    long smalest_odd_value=0;\n\
    \    long smalest_odd_index=0;\n    long smalest_odd_even_value=0;\n    long smalest_odd_even_count=0;\n\
    \    long smalest_odd_odd_count=0;\n    long smalest_odd_odd_value=0;\n    long\
    \ smalest_odd_odd_index=0;\n    long smalest_odd_odd_even_value=0;\n    long smalest_odd_odd_even_count=0;\n\
    \    long smalest_odd_odd_odd_count=0;\n    long smalest_odd_odd_odd_value=0;\n\
    \    long smalest_odd_odd_odd_index=0;\n    long smalest_odd_odd_odd_even_value=0;\n\
    \    long smalest_odd_odd_odd_even_count=0;\n    long smalest_odd_odd_odd_odd_count=0;\n\
    \    long smalest_odd_odd_odd_odd_value=0;\n    long smalest_odd_odd_odd_odd_index=0;\n\
    \    long smalest_odd_odd_odd_odd_even_value=0;\n    long smalest_odd_odd_odd_odd_even_count=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_count=0;\n    long smalest_odd_odd_odd_odd_odd_value=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_index=0;\n    long smalest_odd_odd_odd_odd_odd_even_value=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_even_count=0;\n    long smalest_odd_odd_odd_odd_odd_odd_count=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_value=0;\n    long smalest_odd_odd_odd_odd_odd_odd_index=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_even_value=0;\n    long smalest_odd_odd_odd_odd_odd_odd_even_count=0;\n\
    \    long smale", "    long smalest_value = 0, smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0, smalest_index = 0;\n    long even_value = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n \
    \           even_value = arr[i];\n            if (smalest_value == 0) {\n    \
    \            smalest_value = even_value;\n                smalest_index = i;\n\
    \            } else if (smalest_value < even_value) {\n                smalest_value\
    \ = even_value;\n                smalest_index = i;\n            }\n        }\n\
    \    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smallest_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            smalest_even_value = arr[i];\n\
    \            smalest_even_index = i;\n        }\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    if (smalest_even_index == arr.size()) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0, smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n      \
    \          smalest_value = arr[i];\n                smalest_index = i;\n     \
    \       }\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n              \
    \  smallest_value = arr[i];\n                smallest_index = i;\n           \
    \ } else if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    int smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_index != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n   \
    \ result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    int smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n              \
    \  smallest_value = arr[i];\n                smallest_index = i;\n           \
    \ } else if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_temp = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_max = 0;\n    long smalest_even_index_count_temp_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_", "    // code here\n    std::vector<long> res;\n  \
    \  long smallest_value = arr[0];\n    long smallest_index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n      \
    \      smallest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \    }\n    res.push_back(smallest_value);\n    res.push_back(smallest_index);\n\
    \    return res;", "    // write your code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_odd_value = 0;\n    long smalest_odd_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n                smalest_even_value = arr[i] % 2;\n\
    \                smalest_even_index = i;\n            } else if (smalest_value\
    \ == arr[i] % 2) {\n                smalest_even_index = i;\n            } else\
    \ if (smalest_value == arr[i] % 2) {\n                smalest_odd_index = i;\n\
    \            }\n        } else {\n            if (smalest_value == 0) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \             smalest_odd_value = arr[i] % 2;\n                smalest_odd_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            } else if (smalest_value == arr[i] % 2)\
    \ {\n                smalest_odd_index = i;\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return std::vector<long>();\n    }\n \
    \   if (smalest_even_index == smalest_index) {\n        return std::vector<long>({smalest_value,\
    \ smalest_even_index});\n    }\n    if (smalest_odd_index == smalest_index) {\n\
    \        return std::vector<long>({smalest_value, smalest_odd_index});\n    }\n\
    \    return std::vector<long>();", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n   \
    \ result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    return result;"]
stop_tokens:
- "\n}"
