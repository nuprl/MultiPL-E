name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a vector, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
  \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
  // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
  \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
  // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
  \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    // code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    int size = arr.size();\n    for (int i = 0; i < size; i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_index == arr.size() - 1) {\n        return std::vector<long>();\n\
    \    }\n    return std::vector<long>({smalest_value, smalest_index});", "    //\
    \ code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n       \
    \     if (smalest_value == 0) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value == 0) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_index == arr.size() - 1) {\n\
    \        return std::vector<long>();\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value\
    \ == 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            } else if (smalest_even_value < arr[i]) {\n              \
    \  smalest_even_value = arr[i];\n                smalest_even_index = i;\n   \
    \         }\n        } else {\n            if (smalest_value == 0) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_even_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    return std::vector<long>({smalest_value, smalest_index});", "    //\
    \ Your code here\n    std::vector<long> res;\n    long smallest_value = 0;\n \
    \   long smallest_index = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            if(smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \                index = i;\n            } else {\n                if(arr[i] <\
    \ smallest_value) {\n                    smallest_value = arr[i];\n          \
    \          smallest_index = i;\n                    index = i;\n             \
    \   }\n            }\n        }\n    }\n    res.push_back(smallest_value);\n \
    \   res.push_back(smallest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    std::vector<long> result;\n    long smalest_value;\n    long\
    \ smalest_index;\n    long smallest_value;\n    long smallest_index;\n    long\
    \ smallest_even_value;\n    long smallest_even_count;\n    long index;\n    for\
    \ (auto it = arr.begin(); it != arr.end(); it++) {\n        if (*it % 2 == 0)\
    \ {\n            smallest_even_value = *it;\n            smallest_even_count =\
    \ 1;\n        }\n        else {\n            if (smallest_even_count > 1) {\n\
    \                smallest_value = smallest_even_value;\n                smallest_index\
    \ = smallest_even_count;\n            }\n            else {\n                smallest_value\
    \ = *it;\n                smallest_index = *it / 2;\n            }\n         \
    \   smallest_even_count++;\n        }\n    }\n    if (smallest_even_count == 0)\
    \ {\n        return result;\n    }\n    for (auto it = arr.begin(); it != arr.end();\
    \ it++) {\n        if (*it % 2 == 0) {\n            if (smallest_even_count ==\
    \ 1) {\n                result.push_back(smallest_value);\n                result.push_back(smallest_index);\n\
    \            }\n            else {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    result.push_back(smallest_value);\n                 \
    \   result.push_back(smallest_index);\n                }\n                else\
    \ {\n                    result.push_back(smallest_value);\n                 \
    \   result.push_back(smallest_index);\n                }\n            }\n    \
    \    }\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long smallest_value = 0;\n    long smallest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            } else if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_value = arr[0];\n    long smallest_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n    \
    \            smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;"]
stop_tokens:
- "\n}"
