language: cpp
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long \n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmubqov_8.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpmubqov_8.cpp:27:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:34:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:35:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index72\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2je7k7s7.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp2je7k7s7.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmp2je7k7s7.cpp: In function 'int main()':\n\
    /tmp/tmp2je7k7s7.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2je7k7s7.cpp:2:\n/tmp/tmp2je7k7s7.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp2je7k7s7.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp2je7k7s7.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2je7k7s7.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp2je7k7s7.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2je7k7s7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_index2\
    \ = 0;\n    long op_size2 = op.size();\n    long op_index3 = 0;\n    long op_size3\
    \ = op.size();\n    long op_index4 = 0;\n    long op_size4 = op.size();\n    long\
    \ op_index5 = 0;\n    long op_size5 = op.size();\n    long op_index6 = 0;\n  \
    \  long op_size6 = op.size();\n    long op_index7 = 0;\n    long op_size7 = op.size();\n\
    \    long op_index8 = 0;\n    long op_size8 = op.size();\n    long op_index9 =\
    \ 0;\n    long op_size9 = op.size();\n    long op_index10 = 0;\n    long op_size10\
    \ = op.size();\n    long op_index11 = 0;\n    long op_size11 = op.size();\n  \
    \  long op_index12 = 0;\n    long op_size12 = op.size();\n    long op_index13\
    \ = 0;\n    long op_size13 = op.size();\n    long op_index14 = 0;\n    long op_size14\
    \ = op.size();\n    long op_index15 = 0;\n    long op_size15 = op.size();\n  \
    \  long op_index16 = 0;\n    long op_size16 = op.size();\n    long op_index17\
    \ = 0;\n    long op_size17 = op.size();\n    long op_index18 = 0;\n    long op_size18\
    \ = op.size();\n    long op_index19 = 0;\n    long op_size19 = op.size();\n  \
    \  long op_index20 = 0;\n    long op_size20 = op.size();\n    long op_index21\
    \ = 0;\n    long op_size21 = op.size();\n    long op_index22 = 0;\n    long op_size22\
    \ = op.size();\n    long op_index23 = 0;\n    long op_size23 = op.size();\n  \
    \  long op_index24 = 0;\n    long op_size24 = op.size();\n    long op_index25\
    \ = 0;\n    long op_size25 = op.size();\n    long op_index26 = 0;\n    long op_size26\
    \ = op.size();\n    long op_index27 = 0;\n    long op_size27 = op.size();\n  \
    \  long op_index28 = 0;\n    long op_size28 = op.size();\n    long op_index29\
    \ = 0;\n    long op_size29 = op.size();\n    long op_index30 = 0;\n    long op_size30\
    \ = op.size();\n    long op_index\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_gg8isx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpf_gg8isx.cpp:86:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpf_gg8isx.cpp: In function 'int main()':\n\
    /tmp/tmpf_gg8isx.cpp:88:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf_gg8isx.cpp:2:\n/tmp/tmpf_gg8isx.cpp:89:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpf_gg8isx.cpp:89:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpf_gg8isx.cpp:89:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf_gg8isx.cpp:89:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpf_gg8isx.cpp:89:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpf_gg8isx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgenqx7cc.cpp: In function 'int main()':\n/tmp/tmpgenqx7cc.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgenqx7cc.cpp:2:\n/tmp/tmpgenqx7cc.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpgenqx7cc.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpgenqx7cc.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgenqx7cc.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpgenqx7cc.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgenqx7cc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for (size_t i =\
    \ 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '**':\n                result *= operand[i];\n   \
    \             break;\n            default:\n                assert(false);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1aa761u.cpp:38:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpe1aa761u.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpe1aa761u.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpe1aa761u.cpp: In\
    \ function 'int main()':\n/tmp/tmpe1aa761u.cpp:48:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe1aa761u.cpp:2:\n/tmp/tmpe1aa761u.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpe1aa761u.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpe1aa761u.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe1aa761u.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpe1aa761u.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index72\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptx54x8t4.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptx54x8t4.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmptx54x8t4.cpp: In function 'int main()':\n\
    /tmp/tmptx54x8t4.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptx54x8t4.cpp:2:\n/tmp/tmptx54x8t4.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmptx54x8t4.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmptx54x8t4.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptx54x8t4.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmptx54x8t4.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptx54x8t4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_size2 = 0;\n\
    \    long op_size3 = 0;\n    long op_size4 = 0;\n    long op_size5 = 0;\n    long\
    \ op_size6 = 0;\n    long op_size7 = 0;\n    long op_size8 = 0;\n    long op_size9\
    \ = 0;\n    long op_size10 = 0;\n    long op_size11 = 0;\n    long op_size12 =\
    \ 0;\n    long op_size13 = 0;\n    long op_size14 = 0;\n    long op_size15 = 0;\n\
    \    long op_size16 = 0;\n    long op_size17 = 0;\n    long op_size18 = 0;\n \
    \   long op_size19 = 0;\n    long op_size20 = 0;\n    long op_size21 = 0;\n  \
    \  long op_size22 = 0;\n    long op_size23 = 0;\n    long op_size24 = 0;\n   \
    \ long op_size25 = 0;\n    long op_size26 = 0;\n    long op_size27 = 0;\n    long\
    \ op_size28 = 0;\n    long op_size29 = 0;\n    long op_size30 = 0;\n    long op_size31\
    \ = 0;\n    long op_size32 = 0;\n    long op_size33 = 0;\n    long op_size34 =\
    \ 0;\n    long op_size35 = 0;\n    long op_size36 = 0;\n    long op_size37 = 0;\n\
    \    long op_size38 = 0;\n    long op_size39 = 0;\n    long op_size40 = 0;\n \
    \   long op_size41 = 0;\n    long op_size42 = 0;\n    long op_size43 = 0;\n  \
    \  long op_size44 = 0;\n    long op_size45 = 0;\n    long op_size46 = 0;\n   \
    \ long op_size47 = 0;\n    long op_size48 = 0;\n    long op_size49 = 0;\n    long\
    \ op_size50 = 0;\n    long op_size51 = 0;\n    long op_size52 = 0;\n    long op_size53\
    \ = 0;\n    long op_size54 = 0;\n    long op_size55 = 0;\n    long op_size56 =\
    \ 0;\n    long op_size57 = 0;\n    long op_size58 = 0;\n    long op_size59 = 0;\n\
    \    long op_size60 = 0;\n    long op_size61 = 0;\n    long op_size62 = 0;\n \
    \   long op_size63 = 0;\n    long op_size64 = 0;\n    long op_size65 = 0;\n  \
    \  long op_size66 = 0;\n    long op_size67 = 0;\n    long op_size68 = 0;\n   \
    \ long op_size69 = 0;\n    long op_size70 = 0;\n    long op_size71\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsljq01ak.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpsljq01ak.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpsljq01ak.cpp: In function 'int main()':\n\
    /tmp/tmpsljq01ak.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsljq01ak.cpp:2:\n/tmp/tmpsljq01ak.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpsljq01ak.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpsljq01ak.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsljq01ak.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpsljq01ak.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpsljq01ak.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(auto\
    \ i : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n      \
    \  switch(i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                result *= operand[0];\n                break;\n            default:\n\
    \                assert(0);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoj__mz6x.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpoj__mz6x.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpoj__mz6x.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmpoj__mz6x.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmpoj__mz6x.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpoj__mz6x.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpoj__mz6x.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpoj__mz6x.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpoj__mz6x.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmpoj__mz6x.cpp:49:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpoj__mz6x.cpp:49:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpoj__mz6x.cpp:49:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpoj__mz6x.cpp:49:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpoj__mz6x.cpp:49:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpoj__mz6x.cpp: In function 'int main()':\n/tmp/tmpoj__mz6x.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoj__mz6x.cpp:2:\n/tmp/tmpoj__mz6x.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpoj__mz6x.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(size_t\
    \ i = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                assert(false);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_zt0fecn.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp_zt0fecn.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmp_zt0fecn.cpp:\
    \ In function 'int main()':\n/tmp/tmp_zt0fecn.cpp:48:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_zt0fecn.cpp:2:\n/tmp/tmp_zt0fecn.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp_zt0fecn.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp_zt0fecn.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_zt0fecn.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp_zt0fecn.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_zt0fecn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long sum\
    \ = 0;\n    long product = 1;\n    long floor = 0;\n    long exponent = 1;\n \
    \   long power = 1;\n    long power2 = 1;\n    long power3 = 1;\n    long power4\
    \ = 1;\n    long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n   \
    \ long power8 = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11\
    \ = 1;\n    long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n\
    \    long power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long\
    \ power18 = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21\
    \ = 1;\n    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n\
    \    long power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long\
    \ power28 = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31\
    \ = 1;\n    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n\
    \    long power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long\
    \ power38 = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41\
    \ = 1;\n    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n\
    \    long power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long\
    \ power48 = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51\
    \ = 1;\n    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n\
    \    long power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long\
    \ power58 = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61\
    \ = 1;\n    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n\
    \    long power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long\
    \ power68 = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71\
    \ = 1;\n    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n\
    \    long power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long\
    \ power78 = 1;\n    long power79 = 1;\n    long \n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_s3h3gm.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpi_s3h3gm.cpp:108:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpi_s3h3gm.cpp: In function 'int main()':\n\
    /tmp/tmpi_s3h3gm.cpp:110:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi_s3h3gm.cpp:2:\n/tmp/tmpi_s3h3gm.cpp:111:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpi_s3h3gm.cpp:111:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpi_s3h3gm.cpp:111:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpi_s3h3gm.cpp:111:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpi_s3h3gm.cpp:111:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi_s3h3gm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixy7at93.cpp: In function 'int main()':\n/tmp/tmpixy7at93.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/tmp/tmpixy7at93.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpixy7at93.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpixy7at93.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixy7at93.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpixy7at93.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long\
    \ AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ =\
    \ 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n\
    \    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long\
    \ AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW =\
    \ 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n\
    \    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long\
    \ BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ =\
    \ 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n\
    \    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long\
    \ BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW =\
    \ 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n\
    \    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7rr2uy.cpp: In function 'int main()':\n/tmp/tmppk7rr2uy.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/tmp/tmppk7rr2uy.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmppk7rr2uy.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmppk7rr2uy.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppk7rr2uy.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmppk7rr2uy.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(size_t\
    \ i = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpne4_j7ng.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpne4_j7ng.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmpne4_j7ng.cpp:\
    \ In function 'int main()':\n/tmp/tmpne4_j7ng.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpne4_j7ng.cpp:2:\n/tmp/tmpne4_j7ng.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpne4_j7ng.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpne4_j7ng.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpne4_j7ng.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpne4_j7ng.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpne4_j7ng.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long op_index3 = 0;\n\
    \    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4 = 0;\n   \
    \ long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 = 0;\n    long\
    \ op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n    long op_index8\
    \ = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n    long op_size9 = 0;\n\
    \    long op_index10 = 0;\n    long op_size10 = 0;\n    long op_index11 = 0;\n\
    \    long op_size11 = 0;\n    long op_index12 = 0;\n    long op_size12 = 0;\n\
    \    long op_index13 = 0;\n    long op_size13 = 0;\n    long op_index14 = 0;\n\
    \    long op_size14 = 0;\n    long op_index15 = 0;\n    long op_size15 = 0;\n\
    \    long op_index16 = 0;\n    long op_size16 = 0;\n    long op_index17 = 0;\n\
    \    long op_size17 = 0;\n    long op_index18 = 0;\n    long op_size18 = 0;\n\
    \    long op_index19 = 0;\n    long op_size19 = 0;\n    long op_index20 = 0;\n\
    \    long op_size20 = 0;\n    long op_index21 = 0;\n    long op_size21 = 0;\n\
    \    long op_index22 = 0;\n    long op_size22 = 0;\n    long op_index23 = 0;\n\
    \    long op_size23 = 0;\n    long op_index24 = 0;\n    long op_size24 = 0;\n\
    \    long op_index25 = 0;\n    long op_size25 = 0;\n    long op_index26 = 0;\n\
    \    long op_size26 = 0;\n    long op_index27 = 0;\n    long op_size27 = 0;\n\
    \    long op_index28 = 0;\n    long op_size28 = 0;\n    long op_index29 = 0;\n\
    \    long op_size29 = 0;\n    long op_index30 = 0;\n    long op_size30 = 0;\n\
    \    long op_index31 = 0;\n    long op_size31 = 0;\n    long op_index32 = 0;\n\
    \    long op_size32 = 0;\n    long op_index33 = 0;\n    long op_size33 = 0;\n\
    \    long op_index34 = 0;\n    long op_size34 = 0;\n    long op_index35 = 0;\n\
    \    long op_size35 = 0;\n    long op_index36 = 0;\n    long op_size36 = 0;\n\
    \    long op_index37 = 0;\n    long op_size37 = 0;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprj8i0h6c.cpp: In function 'int main()':\n/tmp/tmprj8i0h6c.cpp:99:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprj8i0h6c.cpp:2:\n/tmp/tmprj8i0h6c.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprj8i0h6c.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmprj8i0h6c.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprj8i0h6c.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprj8i0h6c.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprj8i0h6c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(auto\
    \ i : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n      \
    \  switch(i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                result *= operand[0];\n                break;\n            default:\n\
    \                assert(0);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg1jiv2v.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpdg1jiv2v.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpdg1jiv2v.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmpdg1jiv2v.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmpdg1jiv2v.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmpdg1jiv2v.cpp:49:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpdg1jiv2v.cpp:49:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdg1jiv2v.cpp:49:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdg1jiv2v.cpp:49:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdg1jiv2v.cpp:49:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdg1jiv2v.cpp: In function 'int main()':\n/tmp/tmpdg1jiv2v.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdg1jiv2v.cpp:2:\n/tmp/tmpdg1jiv2v.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpdg1jiv2v.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnafpzwz7.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpnafpzwz7.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpnafpzwz7.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpnafpzwz7.cpp: In function\
    \ 'int main()':\n/tmp/tmpnafpzwz7.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnafpzwz7.cpp:2:\n/tmp/tmpnafpzwz7.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpnafpzwz7.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpnafpzwz7.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnafpzwz7.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpnafpzwz7.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpna"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long sum =\
    \ 0;\n    long product = 1;\n    long floordiv = 0;\n    long exponent = 1;\n\
    \    long temp;\n    long i;\n    for(i = 0; i < op.size(); i++) {\n        switch(op[i])\
    \ {\n            case '+':\n                sum += operand[i];\n             \
    \   break;\n            case '-':\n                sum -= operand[i];\n      \
    \          break;\n            case '*':\n                product *= operand[i];\n\
    \                break;\n            case '/':\n                floordiv = operand[i]\
    \ / product;\n                break;\n            case '^':\n                exponent\
    \ = operand[i] * exponent;\n                break;\n            default:\n   \
    \             assert(false);\n        }\n    }\n    temp = sum;\n    temp = floordiv;\n\
    \    temp = temp * exponent;\n    temp = temp / product;\n    result = temp;\n\
    \    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyhrhtby8.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpyhrhtby8.cpp:31:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmpyhrhtby8.cpp:\
    \ In function 'int main()':\n/tmp/tmpyhrhtby8.cpp:59:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyhrhtby8.cpp:2:\n/tmp/tmpyhrhtby8.cpp:60:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpyhrhtby8.cpp:60:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpyhrhtby8.cpp:60:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyhrhtby8.cpp:60:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpyhrhtby8.cpp:60:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpyhrhtby8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for(auto i : operand){\n\
    \        result += i;\n    }\n    for(auto i : op){\n        switch(i){\n    \
    \        case '+':\n                result += operand[0];\n                break;\n\
    \            case '-':\n                result -= operand[0];\n              \
    \  break;\n            case '*':\n                result *= operand[0];\n    \
    \            break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                result *= operand[0];\n                break;\n            default:\n\
    \                assert(false);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgo5bltc9.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpgo5bltc9.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpgo5bltc9.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand){\n              ^\n/tmp/tmpgo5bltc9.cpp:27:5: error: expected ';'\
    \ before 'for'\n     for(auto i : op){\n     ^\n/tmp/tmpgo5bltc9.cpp:27:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpgo5bltc9.cpp:27:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpgo5bltc9.cpp:27:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpgo5bltc9.cpp:27:5: error: expected ')' before 'for'\n\
    /tmp/tmpgo5bltc9.cpp:27:14: error: 'i' does not name a type\n     for(auto i :\
    \ op){\n              ^\n/tmp/tmpgo5bltc9.cpp:49:5: error: expected ';' before\
    \ 'return'\n     return result;\n     ^\n/tmp/tmpgo5bltc9.cpp:49:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpgo5bltc9.cpp:49:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpgo5bltc9.cpp:49:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpgo5bltc9.cpp:49:5: error: expected ')' before 'return'\n\
    /tmp/tmpgo5bltc9.cpp: In function 'int main()':\n/tmp/tmpgo5bltc9.cpp:52:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = do_algebra;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpgo5bltc9.cpp:2:\n/tmp/tmpgo5bltc9.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpgo5bltc9.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41i1rqsw.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp41i1rqsw.cpp:98:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp41i1rqsw.cpp: In function 'int main()':\n\
    /tmp/tmp41i1rqsw.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/tmp/tmp41i1rqsw.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp41i1rqsw.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp41i1rqsw.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp41i1rqsw.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp41i1rqsw.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_index2\
    \ = 0;\n    long op_size2 = op.size() - 1;\n    long op_index3 = 0;\n    long\
    \ op_size3 = op.size() - 2;\n    long op_index4 = 0;\n    long op_size4 = op.size()\
    \ - 3;\n    long op_index5 = 0;\n    long op_size5 = op.size() - 4;\n    long\
    \ op_index6 = 0;\n    long op_size6 = op.size() - 5;\n    long op_index7 = 0;\n\
    \    long op_size7 = op.size() - 6;\n    long op_index8 = 0;\n    long op_size8\
    \ = op.size() - 7;\n    long op_index9 = 0;\n    long op_size9 = op.size() - 8;\n\
    \    long op_index10 = 0;\n    long op_size10 = op.size() - 9;\n    long op_index11\
    \ = 0;\n    long op_size11 = op.size() - 10;\n    long op_index12 = 0;\n    long\
    \ op_size12 = op.size() - 11;\n    long op_index13 = 0;\n    long op_size13 =\
    \ op.size() - 12;\n    long op_index14 = 0;\n    long op_size14 = op.size() -\
    \ 13;\n    long op_index15 = 0;\n    long op_size15 = op.size() - 14;\n    long\
    \ op_index16 = 0;\n    long op_size16 = op.size() - 15;\n    long op_index17 =\
    \ 0;\n    long op_size17 = op.size() - 16;\n    long op_index18 = 0;\n    long\
    \ op_size18 = op.size() - 17;\n    long op_index19 = 0;\n    long op_size19 =\
    \ op.size() - 18;\n    long op_index20 = 0;\n    long op_size20 = op.size() -\
    \ 19;\n    long op_index21 = 0;\n    long op_size21 = op.size() - 20;\n    long\
    \ op_index22 = 0;\n    long op_size22 = op.size() - 21;\n    long op_index23 =\
    \ 0;\n    long op_size23 = op.size() - 22;\n    long op_index24 = 0;\n    long\
    \ op_size24 = op.size() - 23;\n    long op_index25 = 0;\n    long op_size25 =\
    \ op.size() - 24;\n    long op_index26 = 0;\n    long op_size26 = op.size() -\
    \ 25;\n    long op_index27 = 0;\n    long op_size27 = op.size() - 26;\n    long\
    \ op_index28 = 0;\n    long op_size28 = op.size() - 27;\n    \n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgctb3q3.cpp: In function 'int main()':\n/tmp/tmpfgctb3q3.cpp:84:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgctb3q3.cpp:2:\n/tmp/tmpfgctb3q3.cpp:85:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfgctb3q3.cpp:85:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfgctb3q3.cpp:85:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfgctb3q3.cpp:85:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfgctb3q3.cpp:85:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfgctb3q3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnafpzwz7.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpnafpzwz7.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpnafpzwz7.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpnafpzwz7.cpp: In function\
    \ 'int main()':\n/tmp/tmpnafpzwz7.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnafpzwz7.cpp:2:\n/tmp/tmpnafpzwz7.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpnafpzwz7.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpnafpzwz7.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnafpzwz7.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpnafpzwz7.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpna"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh42t6q4.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpmh42t6q4.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpmh42t6q4.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpmh42t6q4.cpp: In\
    \ function 'int main()':\n/tmp/tmpmh42t6q4.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmh42t6q4.cpp:2:\n/tmp/tmpmh42t6q4.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmh42t6q4.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmh42t6q4.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmh42t6q4.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmh42t6q4.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5dzulw9.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmph5dzulw9.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmph5dzulw9.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmph5dzulw9.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long op_size\
    \ = op.size();\n    long op_index = op.size() - 1;\n    long op_index2 = op.size()\
    \ - 2;\n    long op_index3 = op.size() - 3;\n    long op_index4 = op.size() -\
    \ 4;\n    long op_index5 = op.size() - 5;\n    long op_index6 = op.size() - 6;\n\
    \    long op_index7 = op.size() - 7;\n    long op_index8 = op.size() - 8;\n  \
    \  long op_index9 = op.size() - 9;\n    long op_index10 = op.size() - 10;\n  \
    \  long op_index11 = op.size() - 11;\n    long op_index12 = op.size() - 12;\n\
    \    long op_index13 = op.size() - 13;\n    long op_index14 = op.size() - 14;\n\
    \    long op_index15 = op.size() - 15;\n    long op_index16 = op.size() - 16;\n\
    \    long op_index17 = op.size() - 17;\n    long op_index18 = op.size() - 18;\n\
    \    long op_index19 = op.size() - 19;\n    long op_index20 = op.size() - 20;\n\
    \    long op_index21 = op.size() - 21;\n    long op_index22 = op.size() - 22;\n\
    \    long op_index23 = op.size() - 23;\n    long op_index24 = op.size() - 24;\n\
    \    long op_index25 = op.size() - 25;\n    long op_index26 = op.size() - 26;\n\
    \    long op_index27 = op.size() - 27;\n    long op_index28 = op.size() - 28;\n\
    \    long op_index29 = op.size() - 29;\n    long op_index30 = op.size() - 30;\n\
    \    long op_index31 = op.size() - 31;\n    long op_index32 = op.size() - 32;\n\
    \    long op_index33 = op.size() - 33;\n    long op_index34 = op.size() - 34;\n\
    \    long op_index35 = op.size() - 35;\n    long op_index36 = op.size() - 36;\n\
    \    long op_index37 = op.size() - 37;\n    long op_index38 = op.size() - 38;\n\
    \    long op_index39 = op.size() - 39;\n    long op_index40 = op.size() - 40;\n\
    \    long op_index41 = op.size() - 41;\n    long op_index42 = op.size() - 42;\n\
    \    long op_index43 = op.size() - 43;\n    long op_index44 = op.size() - \n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps63s4jx4.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmps63s4jx4.cpp:69:1: error: expected primary-expression\
    \ before '}' token\n }\n ^\n/tmp/tmps63s4jx4.cpp:69:1: error: expected ',' or\
    \ ';' before '}' token\n/tmp/tmps63s4jx4.cpp: In function 'int main()':\n/tmp/tmps63s4jx4.cpp:71:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps63s4jx4.cpp:2:\n/tmp/tmps63s4jx4.cpp:72:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmps63s4jx4.cpp:72:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmps63s4jx4.cpp:72:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps63s4jx4.cpp:72:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmps63s4jx4.cpp:72:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmps63s4jx4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _Inpu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long size = op.size();\n    long size\
    \ = operand.size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long\
    \ AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI =\
    \ 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n\
    \    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long\
    \ AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV =\
    \ 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n\
    \    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long\
    \ BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI =\
    \ 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n\
    \    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long\
    \ BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV =\
    \ 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n\
    \    long CA = 0;\n    long \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wgjiz3z.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wgjiz3z.cpp:24:10: error: redeclaration\
    \ of 'long int size'\n     long size = operand.size();\n          ^\n/tmp/tmp8wgjiz3z.cpp:23:10:\
    \ error: 'long int size' previously declared here\n     long size = op.size();\n\
    \          ^\n/tmp/tmp8wgjiz3z.cpp:123:1: error: expected unqualified-id before\
    \ '}' token\n }\n ^\n/tmp/tmp8wgjiz3z.cpp: In function 'int main()':\n/tmp/tmp8wgjiz3z.cpp:125:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wgjiz3z.cpp:2:\n/tmp/tmp8wgjiz3z.cpp:126:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp8wgjiz3z.cpp:126:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp8wgjiz3z.cpp:126:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8wgjiz3z.cpp:126:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp8wgjiz3z.cpp:126:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1a0my0ff.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp1a0my0ff.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp1a0my0ff.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmp1a0my0ff.cpp: In function\
    \ 'int main()':\n/tmp/tmp1a0my0ff.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1a0my0ff.cpp:2:\n/tmp/tmp1a0my0ff.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp1a0my0ff.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp1a0my0ff.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1a0my0ff.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp1a0my0ff.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp1a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixy7at93.cpp: In function 'int main()':\n/tmp/tmpixy7at93.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/tmp/tmpixy7at93.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpixy7at93.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpixy7at93.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixy7at93.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpixy7at93.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long size\
    \ = operand.size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long\
    \ EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II =\
    \ 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n\
    \    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long\
    \ RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV =\
    \ 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n\
    \    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n\
    \    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n\
    \    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n\
    \    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n\
    \    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n\
    \    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n\
    \    long YYY = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihu3x5sz.cpp: In function 'int main()':\n/tmp/tmpihu3x5sz.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpihu3x5sz.cpp:2:\n/tmp/tmpihu3x5sz.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpihu3x5sz.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpihu3x5sz.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpihu3x5sz.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpihu3x5sz.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpihu3x5sz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long op_index =\
    \ 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv2en755.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpkv2en755.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixy7at93.cpp: In function 'int main()':\n/tmp/tmpixy7at93.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/tmp/tmpixy7at93.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpixy7at93.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpixy7at93.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixy7at93.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpixy7at93.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long sum =\
    \ 0;\n    long product = 1;\n    long floordiv = 0;\n    long exponent = 1;\n\
    \    long power = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n \
    \   long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G\
    \ = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n \
    \   long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P\
    \ = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n \
    \   long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y\
    \ = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n\
    \    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long\
    \ HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL =\
    \ 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n\
    \    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long\
    \ UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY =\
    \ 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n\
    \    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n\
    \    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n\
    \    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n\
    \    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n\
    \    long TTT = 0;\n    long UUU\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznctyi1z.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpznctyi1z.cpp:121:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpznctyi1z.cpp: In function 'int main()':\n\
    /tmp/tmpznctyi1z.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpznctyi1z.cpp:2:\n/tmp/tmpznctyi1z.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpznctyi1z.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpznctyi1z.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpznctyi1z.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpznctyi1z.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpznctyi1z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long size = op.size();\n\
    \    long index = 0;\n    long op_size = op.size();\n    long op_index = 0;\n\
    \    long op_size2 = op.size();\n    long op_index2 = 0;\n    long op_size3 =\
    \ op.size();\n    long op_index3 = 0;\n    long op_size4 = op.size();\n    long\
    \ op_index4 = 0;\n    long op_size5 = op.size();\n    long op_index5 = 0;\n  \
    \  long op_size6 = op.size();\n    long op_index6 = 0;\n    long op_size7 = op.size();\n\
    \    long op_index7 = 0;\n    long op_size8 = op.size();\n    long op_index8 =\
    \ 0;\n    long op_size9 = op.size();\n    long op_index9 = 0;\n    long op_size10\
    \ = op.size();\n    long op_index10 = 0;\n    long op_size11 = op.size();\n  \
    \  long op_index11 = 0;\n    long op_size12 = op.size();\n    long op_index12\
    \ = 0;\n    long op_size13 = op.size();\n    long op_index13 = 0;\n    long op_size14\
    \ = op.size();\n    long op_index14 = 0;\n    long op_size15 = op.size();\n  \
    \  long op_index15 = 0;\n    long op_size16 = op.size();\n    long op_index16\
    \ = 0;\n    long op_size17 = op.size();\n    long op_index17 = 0;\n    long op_size18\
    \ = op.size();\n    long op_index18 = 0;\n    long op_size19 = op.size();\n  \
    \  long op_index19 = 0;\n    long op_size20 = op.size();\n    long op_index20\
    \ = 0;\n    long op_size21 = op.size();\n    long op_index21 = 0;\n    long op_size22\
    \ = op.size();\n    long op_index22 = 0;\n    long op_size23 = op.size();\n  \
    \  long op_index23 = 0;\n    long op_size24 = op.size();\n    long op_index24\
    \ = 0;\n    long op_size25 = op.size();\n    long op_index25 = 0;\n    long op_size26\
    \ = op.size();\n    long op_index26 = 0;\n    long op_size27 = op.size();\n  \
    \  long op_index27 = 0;\n    long op_size28 = op.size();\n    long op_index28\
    \ = 0;\n    long op_size29 = op.size();\n    long op_index29 = 0;\n    long op_size30\
    \ = op.size();\n    long op_index30\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75ptg1i4.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp75ptg1i4.cpp:86:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmp75ptg1i4.cpp: In function 'int main()':\n\
    /tmp/tmp75ptg1i4.cpp:88:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp75ptg1i4.cpp:2:\n/tmp/tmp75ptg1i4.cpp:89:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp75ptg1i4.cpp:89:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp75ptg1i4.cpp:89:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp75ptg1i4.cpp:89:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp75ptg1i4.cpp:89:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp75ptg1i4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnir7eipn.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpnir7eipn.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n \
    \   long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wg8zjpv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wg8zjpv.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB\
    \ = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n\
    \    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long\
    \ AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO =\
    \ 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n\
    \    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long\
    \ AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB =\
    \ 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n\
    \    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long\
    \ BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO =\
    \ 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n\
    \    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long\
    \ BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB =\
    \ 0;\n    long CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr677he3.cpp: In function 'int main()':\n/tmp/tmpgr677he3.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgr677he3.cpp:2:\n/tmp/tmpgr677he3.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpgr677he3.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpgr677he3.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgr677he3.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpgr677he3.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgr677he3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long \n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmubqov_8.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpmubqov_8.cpp:27:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:34:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:35:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(size_t\
    \ i = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7p4736r.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpu7p4736r.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpu7p4736r.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpu7p4736r.cpp: In function\
    \ 'int main()':\n/tmp/tmpu7p4736r.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7p4736r.cpp:2:\n/tmp/tmpu7p4736r.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpu7p4736r.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpu7p4736r.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7p4736r.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpu7p4736r.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpu7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_size\
    \ = op.size();\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3\
    \ = 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n\
    \    long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph4q2py1p.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmph4q2py1p.cpp:97:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmph4q2py1p.cpp: In function 'int main()':\n\
    /tmp/tmph4q2py1p.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph4q2py1p.cpp:2:\n/tmp/tmph4q2py1p.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmph4q2py1p.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmph4q2py1p.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph4q2py1p.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmph4q2py1p.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmph4q2py1p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82\
    \ = 0;\n    long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnuvhkhq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpfnuvhkhq.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpfnuvhkhq.cpp: In function 'int main()':\n\
    /tmp/tmpfnuvhkhq.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/tmp/tmpfnuvhkhq.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfnuvhkhq.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfnuvhkhq.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfnuvhkhq.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfnuvhkhq.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpvyqdux.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpvpvyqdux.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpvpvyqdux.cpp: In function 'int main()':\n\
    /tmp/tmpvpvyqdux.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/tmp/tmpvpvyqdux.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpvpvyqdux.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpvpvyqdux.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvpvyqdux.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpvpvyqdux.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for (size_t i =\
    \ 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrhfbpso.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpjrhfbpso.cpp:25:22: error: switch quantity\
    \ not an integer\n         switch (op[i]) {\n                      ^\n/tmp/tmpjrhfbpso.cpp:\
    \ In function 'int main()':\n/tmp/tmpjrhfbpso.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjrhfbpso.cpp:2:\n/tmp/tmpjrhfbpso.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpjrhfbpso.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpjrhfbpso.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjrhfbpso.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpjrhfbpso.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjrhfbpso.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vec"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long op_index3 = 0;\n\
    \    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4 = 0;\n   \
    \ long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 = 0;\n    long\
    \ op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n    long op_index8\
    \ = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n    long op_size9 = 0;\n\
    \    long op_index10 = 0;\n    long op_size10 = 0;\n    long op_index11 = 0;\n\
    \    long op_size11 = 0;\n    long op_index12 = 0;\n    long op_size12 = 0;\n\
    \    long op_index13 = 0;\n    long op_size13 = 0;\n    long op_index14 = 0;\n\
    \    long op_size14 = 0;\n    long op_index15 = 0;\n    long op_size15 = 0;\n\
    \    long op_index16 = 0;\n    long op_size16 = 0;\n    long op_index17 = 0;\n\
    \    long op_size17 = 0;\n    long op_index18 = 0;\n    long op_size18 = 0;\n\
    \    long op_index19 = 0;\n    long op_size19 = 0;\n    long op_index20 = 0;\n\
    \    long op_size20 = 0;\n    long op_index21 = 0;\n    long op_size21 = 0;\n\
    \    long op_index22 = 0;\n    long op_size22 = 0;\n    long op_index23 = 0;\n\
    \    long op_size23 = 0;\n    long op_index24 = 0;\n    long op_size24 = 0;\n\
    \    long op_index25 = 0;\n    long op_size25 = 0;\n    long op_index26 = 0;\n\
    \    long op_size26 = 0;\n    long op_index27 = 0;\n    long op_size27 = 0;\n\
    \    long op_index28 = 0;\n    long op_size28 = 0;\n    long op_index29 = 0;\n\
    \    long op_size29 = 0;\n    long op_index30 = 0;\n    long op_size30 = 0;\n\
    \    long op_index31 = 0;\n    long op_size31 = 0;\n    long op_index32 = 0;\n\
    \    long op_size32 = 0;\n    long op_index33 = 0;\n    long op_size33 = 0;\n\
    \    long op_index34 = 0;\n    long op_size34 = 0;\n    long op_index35 = 0;\n\
    \    long op_size35 = 0;\n    long op_index36 = 0;\n    long op_size36 = 0;\n\
    \    long op_index37 = 0;\n    long op_size37 = 0;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprj8i0h6c.cpp: In function 'int main()':\n/tmp/tmprj8i0h6c.cpp:99:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprj8i0h6c.cpp:2:\n/tmp/tmprj8i0h6c.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprj8i0h6c.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmprj8i0h6c.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprj8i0h6c.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprj8i0h6c.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprj8i0h6c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long op_size\
    \ = op.size();\n    long op_index = 0;\n    long op_size2 = operand.size();\n\
    \    long op_index2 = 0;\n    long op_size3 = op.size();\n    long op_index3 =\
    \ 0;\n    long op_size4 = operand.size();\n    long op_index4 = 0;\n    long op_size5\
    \ = op.size();\n    long op_index5 = 0;\n    long op_size6 = operand.size();\n\
    \    long op_index6 = 0;\n    long op_size7 = op.size();\n    long op_index7 =\
    \ 0;\n    long op_size8 = operand.size();\n    long op_index8 = 0;\n    long op_size9\
    \ = op.size();\n    long op_index9 = 0;\n    long op_size10 = operand.size();\n\
    \    long op_index10 = 0;\n    long op_size11 = op.size();\n    long op_index11\
    \ = 0;\n    long op_size12 = operand.size();\n    long op_index12 = 0;\n    long\
    \ op_size13 = op.size();\n    long op_index13 = 0;\n    long op_size14 = operand.size();\n\
    \    long op_index14 = 0;\n    long op_size15 = op.size();\n    long op_index15\
    \ = 0;\n    long op_size16 = operand.size();\n    long op_index16 = 0;\n    long\
    \ op_size17 = op.size();\n    long op_index17 = 0;\n    long op_size18 = operand.size();\n\
    \    long op_index18 = 0;\n    long op_size19 = op.size();\n    long op_index19\
    \ = 0;\n    long op_size20 = operand.size();\n    long op_index20 = 0;\n    long\
    \ op_size21 = op.size();\n    long op_index21 = 0;\n    long op_size22 = operand.size();\n\
    \    long op_index22 = 0;\n    long op_size23 = op.size();\n    long op_index23\
    \ = 0;\n    long op_size24 = operand.size();\n    long op_index24 = 0;\n    long\
    \ op_size25 = op.size();\n    long op_index25 = 0;\n    long op_size26 = operand.size();\n\
    \    long op_index26 = 0;\n    long op_size27 = op.size();\n    long op_index27\
    \ = 0;\n    long op_size28 = operand.size();\n    long op_index28 = 0;\n    long\
    \ op_size29 = op.size();\n    long op_index29 = 0;\n    long op_size30 = operand.size();\n\
    \    long op_index30 = 0;\n    long op_size31 = op.size();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ua0fyhm.cpp: In function 'int main()':\n/tmp/tmp_ua0fyhm.cpp:87:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_ua0fyhm.cpp:2:\n/tmp/tmp_ua0fyhm.cpp:88:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp_ua0fyhm.cpp:88:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp_ua0fyhm.cpp:88:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_ua0fyhm.cpp:88:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp_ua0fyhm.cpp:88:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_ua0fyhm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixy7at93.cpp: In function 'int main()':\n/tmp/tmpixy7at93.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/tmp/tmpixy7at93.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpixy7at93.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpixy7at93.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixy7at93.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpixy7at93.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n \
    \   long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wg8zjpv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wg8zjpv.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long op_index = 0;\n    long op_size = op.size();\n    long op_index2 = 0;\n\
    \    long op_size2 = op.size() - 1;\n    long op_index3 = 0;\n    long op_size3\
    \ = op.size() - 2;\n    long op_index4 = 0;\n    long op_size4 = op.size() - 3;\n\
    \    long op_index5 = 0;\n    long op_size5 = op.size() - 4;\n    long op_index6\
    \ = 0;\n    long op_size6 = op.size() - 5;\n    long op_index7 = 0;\n    long\
    \ op_size7 = op.size() - 6;\n    long op_index8 = 0;\n    long op_size8 = op.size()\
    \ - 7;\n    long op_index9 = 0;\n    long op_size9 = op.size() - 8;\n    long\
    \ op_index10 = 0;\n    long op_size10 = op.size() - 9;\n    long op_index11 =\
    \ 0;\n    long op_size11 = op.size() - 10;\n    long op_index12 = 0;\n    long\
    \ op_size12 = op.size() - 11;\n    long op_index13 = 0;\n    long op_size13 =\
    \ op.size() - 12;\n    long op_index14 = 0;\n    long op_size14 = op.size() -\
    \ 13;\n    long op_index15 = 0;\n    long op_size15 = op.size() - 14;\n    long\
    \ op_index16 = 0;\n    long op_size16 = op.size() - 15;\n    long op_index17 =\
    \ 0;\n    long op_size17 = op.size() - 16;\n    long op_index18 = 0;\n    long\
    \ op_size18 = op.size() - 17;\n    long op_index19 = 0;\n    long op_size19 =\
    \ op.size() - 18;\n    long op_index20 = 0;\n    long op_size20 = op.size() -\
    \ 19;\n    long op_index21 = 0;\n    long op_size21 = op.size() - 20;\n    long\
    \ op_index22 = 0;\n    long op_size22 = op.size() - 21;\n    long op_index23 =\
    \ 0;\n    long op_size23 = op.size() - 22;\n    long op_index24 = 0;\n    long\
    \ op_size24 = op.size() - 23;\n    long op_index25 = 0;\n    long op_size25 =\
    \ op.size() - 24;\n    long op_index26 = 0;\n    long op_size26 = op.size() -\
    \ 25;\n    long op_index27 = 0;\n    long op_size27 = op.size() - 26;\n    long\
    \ op_index28 = 0;\n    long op_size28 = op.size() - 27;\n    long \n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv9j3tct.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpiv9j3tct.cpp:82:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpiv9j3tct.cpp: In function 'int main()':\n\
    /tmp/tmpiv9j3tct.cpp:84:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiv9j3tct.cpp:2:\n/tmp/tmpiv9j3tct.cpp:85:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpiv9j3tct.cpp:85:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpiv9j3tct.cpp:85:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiv9j3tct.cpp:85:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpiv9j3tct.cpp:85:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpiv9j3tct.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wdvck__.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp4wdvck__.cpp:25:22: error: switch quantity\
    \ not an integer\n         switch (op[i]) {\n                      ^\n/tmp/tmp4wdvck__.cpp:\
    \ In function 'int main()':\n/tmp/tmp4wdvck__.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4wdvck__.cpp:2:\n/tmp/tmp4wdvck__.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp4wdvck__.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp4wdvck__.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4wdvck__.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp4wdvck__.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp4wdvck__.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vec"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprz1uwc4u.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprz1uwc4u.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long sum\
    \ = 0;\n    long product = 1;\n    long floor = 0;\n    long exponent = 1;\n \
    \   long pow = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long\
    \ AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI =\
    \ 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n\
    \    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long\
    \ AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV =\
    \ 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n\
    \    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long\
    \ BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI =\
    \ 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n\
    \    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long\
    \ BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV =\
    \ 0;\n    long BW = 0;\n    long BX = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjyhyl07i.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpjyhyl07i.cpp:124:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpjyhyl07i.cpp: In function 'int main()':\n\
    /tmp/tmpjyhyl07i.cpp:126:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjyhyl07i.cpp:2:\n/tmp/tmpjyhyl07i.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpjyhyl07i.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpjyhyl07i.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjyhyl07i.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpjyhyl07i.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjyhyl07i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long\
    \ AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ =\
    \ 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n\
    \    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long\
    \ AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW =\
    \ 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n\
    \    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long\
    \ BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ =\
    \ 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n\
    \    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long\
    \ BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW =\
    \ 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n\
    \    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7rr2uy.cpp: In function 'int main()':\n/tmp/tmppk7rr2uy.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/tmp/tmppk7rr2uy.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmppk7rr2uy.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmppk7rr2uy.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppk7rr2uy.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmppk7rr2uy.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptapqpkfx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptapqpkfx.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(auto\
    \ i : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n      \
    \  switch(i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '^':\n                result %= operand[0];\n\
    \                break;\n            case '**':\n                result %= operand[0];\n\
    \                break;\n            default:\n                assert(0);\n  \
    \              break;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpscc0he90.cpp:44:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpscc0he90.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpscc0he90.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmpscc0he90.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmpscc0he90.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpscc0he90.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpscc0he90.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpscc0he90.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpscc0he90.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmpscc0he90.cpp:52:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpscc0he90.cpp:52:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpscc0he90.cpp:52:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpscc0he90.cpp:52:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpscc0he90.cpp:52:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpscc0he90.cpp: In function 'int main()':\n/tmp/tmpscc0he90.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpscc0he90.cpp:2:\n/tmp/tmpscc0he90.cpp:56:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpscc0he90.cpp:56:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n\
    \    long op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n  \
    \  long op_size4 = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long\
    \ op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7\
    \ = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 =\
    \ 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n\
    \    long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n\
    \    long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n\
    \    long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n\
    \    long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n\
    \    long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9q1jn8z.cpp: In function 'int main()':\n/tmp/tmpa9q1jn8z.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9q1jn8z.cpp:2:\n/tmp/tmpa9q1jn8z.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpa9q1jn8z.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpa9q1jn8z.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa9q1jn8z.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpa9q1jn8z.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpa9q1jn8z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long\
    \ FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ =\
    \ 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n\
    \    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long\
    \ SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW =\
    \ 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n\
    \    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n\
    \    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n\
    \    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n\
    \    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n\
    \    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n\
    \    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifbopx8z.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpifbopx8z.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpifbopx8z.cpp: In function 'int main()':\n\
    /tmp/tmpifbopx8z.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpifbopx8z.cpp:2:\n/tmp/tmpifbopx8z.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpifbopx8z.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpifbopx8z.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpifbopx8z.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpifbopx8z.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpifbopx8z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlohoqet.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpqlohoqet.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpqlohoqet.cpp: In function 'int main()':\n\
    /tmp/tmpqlohoqet.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/tmp/tmpqlohoqet.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpqlohoqet.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpqlohoqet.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqlohoqet.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpqlohoqet.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(auto\
    \ i : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n      \
    \  switch(i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                result *= operand[0];\n                break;\n            default:\n\
    \                assert(false);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprbi21slk.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmprbi21slk.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmprbi21slk.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmprbi21slk.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmprbi21slk.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmprbi21slk.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmprbi21slk.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmprbi21slk.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmprbi21slk.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmprbi21slk.cpp:49:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmprbi21slk.cpp:49:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmprbi21slk.cpp:49:5:\
    \ error: expected ';' before 'return'\n/tmp/tmprbi21slk.cpp:49:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmprbi21slk.cpp:49:5: error: expected\
    \ ')' before 'return'\n/tmp/tmprbi21slk.cpp: In function 'int main()':\n/tmp/tmprbi21slk.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprbi21slk.cpp:2:\n/tmp/tmprbi21slk.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprbi21slk.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpvyqdux.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpvpvyqdux.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpvpvyqdux.cpp: In function 'int main()':\n\
    /tmp/tmpvpvyqdux.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/tmp/tmpvpvyqdux.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpvpvyqdux.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpvpvyqdux.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvpvyqdux.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpvpvyqdux.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB\
    \ = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n\
    \    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long\
    \ AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO =\
    \ 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n\
    \    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long\
    \ AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB =\
    \ 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n\
    \    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long\
    \ BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO =\
    \ 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n\
    \    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long\
    \ BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB =\
    \ 0;\n    long CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr677he3.cpp: In function 'int main()':\n/tmp/tmpgr677he3.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgr677he3.cpp:2:\n/tmp/tmpgr677he3.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpgr677he3.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpgr677he3.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgr677he3.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpgr677he3.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgr677he3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n \
    \   auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprf2z3wpq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprf2z3wpq.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long op_index =\
    \ 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv2en755.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpkv2en755.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpkv2en755.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpkv2en755.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_index2 = 0;\n    long op_index3 = 0;\n    long op_index4 =\
    \ 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n    long op_index7 = 0;\n\
    \    long op_index8 = 0;\n    long op_index9 = 0;\n    long op_index10 = 0;\n\
    \    long op_index11 = 0;\n    long op_index12 = 0;\n    long op_index13 = 0;\n\
    \    long op_index14 = 0;\n    long op_index15 = 0;\n    long op_index16 = 0;\n\
    \    long op_index17 = 0;\n    long op_index18 = 0;\n    long op_index19 = 0;\n\
    \    long op_index20 = 0;\n    long op_index21 = 0;\n    long op_index22 = 0;\n\
    \    long op_index23 = 0;\n    long op_index24 = 0;\n    long op_index25 = 0;\n\
    \    long op_index26 = 0;\n    long op_index27 = 0;\n    long op_index28 = 0;\n\
    \    long op_index29 = 0;\n    long op_index30 = 0;\n    long op_index31 = 0;\n\
    \    long op_index32 = 0;\n    long op_index33 = 0;\n    long op_index34 = 0;\n\
    \    long op_index35 = 0;\n    long op_index36 = 0;\n    long op_index37 = 0;\n\
    \    long op_index38 = 0;\n    long op_index39 = 0;\n    long op_index40 = 0;\n\
    \    long op_index41 = 0;\n    long op_index42 = 0;\n    long op_index43 = 0;\n\
    \    long op_index44 = 0;\n    long op_index45 = 0;\n    long op_index46 = 0;\n\
    \    long op_index47 = 0;\n    long op_index48 = 0;\n    long op_index49 = 0;\n\
    \    long op_index50 = 0;\n    long op_index51 = 0;\n    long op_index52 = 0;\n\
    \    long op_index53 = 0;\n    long op_index54 = 0;\n    long op_index55 = 0;\n\
    \    long op_index56 = 0;\n    long op_index57 = 0;\n    long op_index58 = 0;\n\
    \    long op_index59 = 0;\n    long op_index60 = 0;\n    long op_index61 = 0;\n\
    \    long op_index62 = 0;\n    long op_index63 = 0;\n    long op_index64 = 0;\n\
    \    long op_index65 = 0;\n    long op_index66 = 0;\n    long op_index67 = 0;\n\
    \    long op_index68 = 0;\n    long op_index69 = 0;\n    long op_index70 = 0;\n\
    \    long op_index71 = 0;\n    long op_index72 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedk_68f9.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpedk_68f9.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpedk_68f9.cpp: In function 'int main()':\n\
    /tmp/tmpedk_68f9.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpedk_68f9.cpp:2:\n/tmp/tmpedk_68f9.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpedk_68f9.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpedk_68f9.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpedk_68f9.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpedk_68f9.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpedk_68f9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptapqpkfx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptapqpkfx.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_index2\
    \ = 0;\n    long op_size2 = op.size();\n    long op_index3 = 0;\n    long op_size3\
    \ = op.size();\n    long op_index4 = 0;\n    long op_size4 = op.size();\n    long\
    \ op_index5 = 0;\n    long op_size5 = op.size();\n    long op_index6 = 0;\n  \
    \  long op_size6 = op.size();\n    long op_index7 = 0;\n    long op_size7 = op.size();\n\
    \    long op_index8 = 0;\n    long op_size8 = op.size();\n    long op_index9 =\
    \ 0;\n    long op_size9 = op.size();\n    long op_index10 = 0;\n    long op_size10\
    \ = op.size();\n    long op_index11 = 0;\n    long op_size11 = op.size();\n  \
    \  long op_index12 = 0;\n    long op_size12 = op.size();\n    long op_index13\
    \ = 0;\n    long op_size13 = op.size();\n    long op_index14 = 0;\n    long op_size14\
    \ = op.size();\n    long op_index15 = 0;\n    long op_size15 = op.size();\n  \
    \  long op_index16 = 0;\n    long op_size16 = op.size();\n    long op_index17\
    \ = 0;\n    long op_size17 = op.size();\n    long op_index18 = 0;\n    long op_size18\
    \ = op.size();\n    long op_index19 = 0;\n    long op_size19 = op.size();\n  \
    \  long op_index20 = 0;\n    long op_size20 = op.size();\n    long op_index21\
    \ = 0;\n    long op_size21 = op.size();\n    long op_index22 = 0;\n    long op_size22\
    \ = op.size();\n    long op_index23 = 0;\n    long op_size23 = op.size();\n  \
    \  long op_index24 = 0;\n    long op_size24 = op.size();\n    long op_index25\
    \ = 0;\n    long op_size25 = op.size();\n    long op_index26 = 0;\n    long op_size26\
    \ = op.size();\n    long op_index27 = 0;\n    long op_size27 = op.size();\n  \
    \  long op_index28 = 0;\n    long op_size28 = op.size();\n    long op_index29\
    \ = 0;\n    long op_size29 = op.size();\n    long op_index30 = 0;\n    long op_size30\
    \ = op.size();\n    long op_index31\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8h1rjup.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpu8h1rjup.cpp:86:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpu8h1rjup.cpp: In function 'int main()':\n\
    /tmp/tmpu8h1rjup.cpp:88:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu8h1rjup.cpp:2:\n/tmp/tmpu8h1rjup.cpp:89:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpu8h1rjup.cpp:89:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpu8h1rjup.cpp:89:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu8h1rjup.cpp:89:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpu8h1rjup.cpp:89:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpu8h1rjup.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n \
    \   auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprf2z3wpq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprf2z3wpq.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '**':\n                result *= operand[i];\n   \
    \             result *= operand[i];\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgvg4ejb.cpp:38:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpfgvg4ejb.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpfgvg4ejb.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpfgvg4ejb.cpp: In\
    \ function 'int main()':\n/tmp/tmpfgvg4ejb.cpp:49:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgvg4ejb.cpp:2:\n/tmp/tmpfgvg4ejb.cpp:50:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfgvg4ejb.cpp:50:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfgvg4ejb.cpp:50:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfgvg4ejb.cpp:50:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfgvg4ejb.cpp:50:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long sum\
    \ = 0;\n    long product = 1;\n    long floordiv = 0;\n    long exponent = 1;\n\
    \    long power = 0;\n    long index = 0;\n    long length = op.size();\n    long\
    \ operandLength = operand.size();\n    long operatorLength = op.size() - 1;\n\
    \    long operatorIndex = -1;\n    long operatorIndex2 = 0;\n    long operatorIndex3\
    \ = 0;\n    long operatorIndex4 = 0;\n    long operatorIndex5 = 0;\n    long operatorIndex6\
    \ = 0;\n    long operatorIndex7 = 0;\n    long operatorIndex8 = 0;\n    long operatorIndex9\
    \ = 0;\n    long operatorIndex10 = 0;\n    long operatorIndex11 = 0;\n    long\
    \ operatorIndex12 = 0;\n    long operatorIndex13 = 0;\n    long operatorIndex14\
    \ = 0;\n    long operatorIndex15 = 0;\n    long operatorIndex16 = 0;\n    long\
    \ operatorIndex17 = 0;\n    long operatorIndex18 = 0;\n    long operatorIndex19\
    \ = 0;\n    long operatorIndex20 = 0;\n    long operatorIndex21 = 0;\n    long\
    \ operatorIndex22 = 0;\n    long operatorIndex23 = 0;\n    long operatorIndex24\
    \ = 0;\n    long operatorIndex25 = 0;\n    long operatorIndex26 = 0;\n    long\
    \ operatorIndex27 = 0;\n    long operatorIndex28 = 0;\n    long operatorIndex29\
    \ = 0;\n    long operatorIndex30 = 0;\n    long operatorIndex31 = 0;\n    long\
    \ operatorIndex32 = 0;\n    long operatorIndex33 = 0;\n    long operatorIndex34\
    \ = 0;\n    long operatorIndex35 = 0;\n    long operatorIndex36 = 0;\n    long\
    \ operatorIndex37 = 0;\n    long operatorIndex38 = 0;\n    long operatorIndex39\
    \ = 0;\n    long operatorIndex40 = 0;\n    long operatorIndex41 = 0;\n    long\
    \ operatorIndex42 = 0;\n    long operatorIndex43 = 0;\n    long operatorIndex44\
    \ = 0;\n    long operatorIndex45 = 0;\n    long operatorIndex46 = 0;\n    long\
    \ operatorIndex47 = 0;\n    long operatorIndex48 = 0;\n    long operatorIndex49\
    \ = 0;\n    long operatorIndex50 = 0;\n    long operatorIndex51 = 0;\n    long\
    \ operatorIndex52 = 0;\n    long operatorIndex53 = 0;\n    long operatorIndex54\
    \ = 0;\n    long operatorIndex55 = 0;\n    long operatorIndex56 = 0;\n    long\
    \ operatorIndex57 = 0;\n    long operatorIndex58 = 0;\n    long operatorIndex59\
    \ = 0;\n    long operatorIndex60 = 0;\n    long operatorIndex61 = 0;\n    long\
    \ operatorIndex62 = 0;\n    long operatorIndex63 = 0;\n    long operatorIndex64\
    \ = 0;\n    long operatorIndex\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw458m18z.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpw458m18z.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpw458m18z.cpp: In function 'int main()':\n\
    /tmp/tmpw458m18z.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw458m18z.cpp:2:\n/tmp/tmpw458m18z.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpw458m18z.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpw458m18z.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw458m18z.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpw458m18z.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpw458m18z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long size = op.size();\n\
    \    long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size\
    \ = size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n  \
    \  long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size =\
    \ size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long\
    \ op_size = size - 1;\n    long op_size = size - 1;\n    long op_size = size -\
    \ 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size\
    \ = size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n  \
    \  long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size =\
    \ size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long\
    \ op_size = size - 1;\n    long op_size = size - 1;\n    long op_size = size -\
    \ 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size\
    \ = size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n  \
    \  long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size =\
    \ size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long\
    \ op_size = size - 1;\n    long op_size = size - 1;\n    long op_size = size -\
    \ 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size\
    \ = size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n  \
    \  long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size =\
    \ size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long\
    \ op_size = size - 1;\n    long op_size = size - 1;\n    long op_size = size -\
    \ 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size\
    \ = size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n  \
    \  long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size =\
    \ size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long\
    \ op_size = size - 1;\n    long op_size = size - 1;\n    long op_size = size -\
    \ 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n    long op_size\
    \ = size - 1;\n    long op_size = size - 1;\n    long op_size = size - 1;\n  \
    \  long op_size = size - \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpufic3lyp.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpufic3lyp.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:27:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:28:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:29:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:30:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:31:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:32:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:33:10: error: redeclaration of 'long\
    \ int op_size'\n     long op_size = size - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = size\
    \ - 1;\n          ^\n/tmp/tmpufic3lyp.cpp:34:10: error: redeclaration of 'long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long size = op.size();\n\
    \    long size = operand.size();\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1b4he4o.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpk1b4he4o.cpp:25:10: error: redeclaration\
    \ of 'long int size'\n     long size = operand.size();\n          ^\n/tmp/tmpk1b4he4o.cpp:24:10:\
    \ error: 'long int size' previously declared here\n     long size = op.size();\n\
    \          ^\n/tmp/tmpk1b4he4o.cpp:123:1: error: expected unqualified-id before\
    \ '}' token\n }\n ^\n/tmp/tmpk1b4he4o.cpp: In function 'int main()':\n/tmp/tmpk1b4he4o.cpp:125:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk1b4he4o.cpp:2:\n/tmp/tmpk1b4he4o.cpp:126:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpk1b4he4o.cpp:126:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpk1b4he4o.cpp:126:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk1b4he4o.cpp:126:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpk1b4he4o.cpp:126:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82\
    \ = 0;\n    long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnuvhkhq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpfnuvhkhq.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpfnuvhkhq.cpp: In function 'int main()':\n\
    /tmp/tmpfnuvhkhq.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/tmp/tmpfnuvhkhq.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfnuvhkhq.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfnuvhkhq.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfnuvhkhq.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfnuvhkhq.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long temp2 = 0;\n\
    \    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6\
    \ = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long\
    \ temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n\
    \    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n   \
    \ long temp84 = 0;\n    long temp85 = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1y58m4x.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpk1y58m4x.cpp:109:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpk1y58m4x.cpp: In function 'int main()':\n\
    /tmp/tmpk1y58m4x.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk1y58m4x.cpp:2:\n/tmp/tmpk1y58m4x.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpk1y58m4x.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpk1y58m4x.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk1y58m4x.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpk1y58m4x.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpk1y58m4x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpvyqdux.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpvpvyqdux.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpvpvyqdux.cpp: In function 'int main()':\n\
    /tmp/tmpvpvyqdux.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/tmp/tmpvpvyqdux.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpvpvyqdux.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpvpvyqdux.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvpvyqdux.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpvpvyqdux.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1es7pdd.cpp: In function 'int main()':\n/tmp/tmpb1es7pdd.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1es7pdd.cpp:2:\n/tmp/tmpb1es7pdd.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpb1es7pdd.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpb1es7pdd.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb1es7pdd.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpb1es7pdd.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb1es7pdd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n \
    \   long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wg8zjpv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wg8zjpv.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(auto\
    \ i : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n      \
    \  switch(i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                result *= operand[0];\n                break;\n            default:\n\
    \                assert(0);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg1jiv2v.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpdg1jiv2v.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpdg1jiv2v.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmpdg1jiv2v.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmpdg1jiv2v.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpdg1jiv2v.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmpdg1jiv2v.cpp:49:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpdg1jiv2v.cpp:49:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdg1jiv2v.cpp:49:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdg1jiv2v.cpp:49:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdg1jiv2v.cpp:49:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdg1jiv2v.cpp: In function 'int main()':\n/tmp/tmpdg1jiv2v.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdg1jiv2v.cpp:2:\n/tmp/tmpdg1jiv2v.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpdg1jiv2v.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long A2\
    \ = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long D2 = 0;\n    long E2 = 0;\n\
    \    long F2 = 0;\n    long G2 = 0;\n    long H2 = 0;\n    long I2 = 0;\n    long\
    \ J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n    long M2 = 0;\n    long N2 =\
    \ 0;\n    long O2 = 0;\n    long P2 = 0;\n    long Q2 = 0;\n    long R2 = 0;\n\
    \    long S2 = 0;\n    long T2 = 0;\n    long U2 = 0;\n    long V2 = 0;\n    long\
    \ W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n    long Z2 = 0;\n    long A3 =\
    \ 0;\n    long B3 = 0;\n    long C3 = 0;\n    long D3 = 0;\n    long E3 = 0;\n\
    \    long F3 = 0;\n    long G3 = 0;\n    long H3 = 0;\n    long I3 = 0;\n    long\
    \ J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n    long M3 = 0;\n    long N3 =\
    \ 0;\n    long O3 = 0;\n    long P3 = 0;\n    long Q3 = 0;\n    long R3 = 0;\n\
    \    long S3 = 0;\n    long T3 = 0;\n    long U3 = 0;\n    long V3 = 0;\n    long\
    \ W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n    long Z3 = 0;\n    long A4 =\
    \ 0;\n    long B4 = 0;\n    long C4 = 0;\n    long D4 = 0;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5g2yd73.cpp: In function 'int main()':\n/tmp/tmp_5g2yd73.cpp:127:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5g2yd73.cpp:2:\n/tmp/tmp_5g2yd73.cpp:128:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp_5g2yd73.cpp:128:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp_5g2yd73.cpp:128:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_5g2yd73.cpp:128:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp_5g2yd73.cpp:128:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_5g2yd73.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w5tuch6.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8w5tuch6.cpp:27:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:34:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8w5tuch6.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8w5tuch6.cpp:35:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuk5utv20.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpuk5utv20.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmpuk5utv20.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmpuk5utv20.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmpuk5utv20.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmpuk5utv20.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmpuk5utv20.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmpuk5utv20.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh42t6q4.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpmh42t6q4.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpmh42t6q4.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpmh42t6q4.cpp: In\
    \ function 'int main()':\n/tmp/tmpmh42t6q4.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmh42t6q4.cpp:2:\n/tmp/tmpmh42t6q4.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmh42t6q4.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmh42t6q4.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmh42t6q4.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmh42t6q4.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrbzege8.cpp: In function 'int main()':\n/tmp/tmprrbzege8.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrbzege8.cpp:2:\n/tmp/tmprrbzege8.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprrbzege8.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmprrbzege8.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrbzege8.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprrbzege8.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprrbzege8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long op_index = 0;\n    long op_size = op.size();\n    long op_size2 = operand.size();\n\
    \    long op_size3 = op_size + op_size2;\n    long op_size4 = op_size + op_size\
    \ + op_size2;\n    long op_size5 = op_size + op_size + op_size + op_size2;\n \
    \   long op_size6 = op_size + op_size + op_size + op_size + op_size2;\n    long\
    \ op_size7 = op_size + op_size + op_size + op_size + op_size + op_size2;\n   \
    \ long op_size8 = op_size + op_size + op_size + op_size + op_size + op_size +\
    \ op_size2;\n    long op_size9 = op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size10 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size11\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size2;\n    long op_size12 = op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size2;\n  \
    \  long op_size13 = op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size14\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size15\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size16\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size2;\n  \
    \  long op_size17 = op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size18 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size19\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size2;\n\
    \    long op_size20 = op_size + \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihc4fhmv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpihc4fhmv.cpp:46:1: error: expected primary-expression\
    \ before '}' token\n }\n ^\n/tmp/tmpihc4fhmv.cpp:46:1: error: expected ',' or\
    \ ';' before '}' token\n/tmp/tmpihc4fhmv.cpp: In function 'int main()':\n/tmp/tmpihc4fhmv.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpihc4fhmv.cpp:2:\n/tmp/tmpihc4fhmv.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpihc4fhmv.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpihc4fhmv.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpihc4fhmv.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpihc4fhmv.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpihc4fhmv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _Inpu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for(size_t i =\
    \ 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n \
    \               result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkef625h8.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpkef625h8.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpkef625h8.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpkef625h8.cpp: In function\
    \ 'int main()':\n/tmp/tmpkef625h8.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkef625h8.cpp:2:\n/tmp/tmpkef625h8.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpkef625h8.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpkef625h8.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkef625h8.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpkef625h8.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpke"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzox74e_4.cpp: In function 'int main()':\n/tmp/tmpzox74e_4.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzox74e_4.cpp:2:\n/tmp/tmpzox74e_4.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpzox74e_4.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpzox74e_4.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzox74e_4.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpzox74e_4.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpzox74e_4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_index2 = 0;\n    long op_index3 = 0;\n    long op_index4 = 0;\n \
    \   long op_index5 = 0;\n    long op_index6 = 0;\n    long op_index7 = 0;\n  \
    \  long op_index8 = 0;\n    long op_index9 = 0;\n    long op_index10 = 0;\n  \
    \  long op_index11 = 0;\n    long op_index12 = 0;\n    long op_index13 = 0;\n\
    \    long op_index14 = 0;\n    long op_index15 = 0;\n    long op_index16 = 0;\n\
    \    long op_index17 = 0;\n    long op_index18 = 0;\n    long op_index19 = 0;\n\
    \    long op_index20 = 0;\n    long op_index21 = 0;\n    long op_index22 = 0;\n\
    \    long op_index23 = 0;\n    long op_index24 = 0;\n    long op_index25 = 0;\n\
    \    long op_index26 = 0;\n    long op_index27 = 0;\n    long op_index28 = 0;\n\
    \    long op_index29 = 0;\n    long op_index30 = 0;\n    long op_index31 = 0;\n\
    \    long op_index32 = 0;\n    long op_index33 = 0;\n    long op_index34 = 0;\n\
    \    long op_index35 = 0;\n    long op_index36 = 0;\n    long op_index37 = 0;\n\
    \    long op_index38 = 0;\n    long op_index39 = 0;\n    long op_index40 = 0;\n\
    \    long op_index41 = 0;\n    long op_index42 = 0;\n    long op_index43 = 0;\n\
    \    long op_index44 = 0;\n    long op_index45 = 0;\n    long op_index46 = 0;\n\
    \    long op_index47 = 0;\n    long op_index48 = 0;\n    long op_index49 = 0;\n\
    \    long op_index50 = 0;\n    long op_index51 = 0;\n    long op_index52 = 0;\n\
    \    long op_index53 = 0;\n    long op_index54 = 0;\n    long op_index55 = 0;\n\
    \    long op_index56 = 0;\n    long op_index57 = 0;\n    long op_index58 = 0;\n\
    \    long op_index59 = 0;\n    long op_index60 = 0;\n    long op_index61 = 0;\n\
    \    long op_index62 = 0;\n    long op_index63 = 0;\n    long op_index64 = 0;\n\
    \    long op_index65 = 0;\n    long op_index66 = 0;\n    long op_index67 = 0;\n\
    \    long op_index68 = 0;\n    long op_index69 = 0;\n    long op_index70 = 0;\n\
    \    long op_index71 = 0;\n    long op_index72 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxjwrqp6s.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpxjwrqp6s.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpxjwrqp6s.cpp: In function 'int main()':\n\
    /tmp/tmpxjwrqp6s.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxjwrqp6s.cpp:2:\n/tmp/tmpxjwrqp6s.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpxjwrqp6s.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpxjwrqp6s.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxjwrqp6s.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpxjwrqp6s.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpxjwrqp6s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n \
    \   long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wg8zjpv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wg8zjpv.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    for (size_t i = 0; i < op.size(); i++)\
    \ {\n        switch (op[i]) {\n            case '+':\n                result +=\
    \ operand[i];\n                break;\n            case '-':\n               \
    \ result -= operand[i];\n                break;\n            case '*':\n     \
    \           result *= operand[i];\n                break;\n            case '/':\n\
    \                result /= operand[i];\n                break;\n            case\
    \ '^':\n                result %= operand[i];\n                break;\n      \
    \      case '**':\n                result %= operand[i];\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2r5m3j97.cpp:40:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp2r5m3j97.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp2r5m3j97.cpp:24:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmp2r5m3j97.cpp: In\
    \ function 'int main()':\n/tmp/tmp2r5m3j97.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2r5m3j97.cpp:2:\n/tmp/tmp2r5m3j97.cpp:51:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp2r5m3j97.cpp:51:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp2r5m3j97.cpp:51:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2r5m3j97.cpp:51:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp2r5m3j97.cpp:51:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long size = op.size();\n    long index\
    \ = 0;\n    long temp = 0;\n    long temp_result = 0;\n    long temp_result_index\
    \ = 0;\n    long temp_result_size = 0;\n    long temp_result_size_index = 0;\n\
    \    long temp_result_size_index2 = 0;\n    long temp_result_size_index3 = 0;\n\
    \    long temp_result_size_index4 = 0;\n    long temp_result_size_index5 = 0;\n\
    \    long temp_result_size_index6 = 0;\n    long temp_result_size_index7 = 0;\n\
    \    long temp_result_size_index8 = 0;\n    long temp_result_size_index9 = 0;\n\
    \    long temp_result_size_index10 = 0;\n    long temp_result_size_index11 = 0;\n\
    \    long temp_result_size_index12 = 0;\n    long temp_result_size_index13 = 0;\n\
    \    long temp_result_size_index14 = 0;\n    long temp_result_size_index15 = 0;\n\
    \    long temp_result_size_index16 = 0;\n    long temp_result_size_index17 = 0;\n\
    \    long temp_result_size_index18 = 0;\n    long temp_result_size_index19 = 0;\n\
    \    long temp_result_size_index20 = 0;\n    long temp_result_size_index21 = 0;\n\
    \    long temp_result_size_index22 = 0;\n    long temp_result_size_index23 = 0;\n\
    \    long temp_result_size_index24 = 0;\n    long temp_result_size_index25 = 0;\n\
    \    long temp_result_size_index26 = 0;\n    long temp_result_size_index27 = 0;\n\
    \    long temp_result_size_index28 = 0;\n    long temp_result_size_index29 = 0;\n\
    \    long temp_result_size_index30 = 0;\n    long temp_result_size_index31 = 0;\n\
    \    long temp_result_size_index32 = 0;\n    long temp_result_size_index33 = 0;\n\
    \    long temp_result_size_index34 = 0;\n    long temp_result_size_index35 = 0;\n\
    \    long temp_result_size_index36 = 0;\n    long temp_result_size_index37 = 0;\n\
    \    long temp_result_size_index38 = 0;\n    long temp_result_size_index39 = 0;\n\
    \    long temp_result_size_index40 = 0;\n    long temp_result_size_index41 = 0;\n\
    \    long temp_result_size_index42 = 0;\n    long temp_result_size_index43 = 0;\n\
    \    long temp_result_size_index44 = 0;\n    long temp_result_size_index45 = 0;\n\
    \    long temp_result_size_index46 = 0;\n    long temp_result_size_index47 = 0;\n\
    \    long temp_result_size_index48 = 0;\n    long temp_result_size_index49 = 0;\n\
    \    long temp_result_size_index50 = 0;\n    long temp_result_size_index51 = 0;\n\
    \    long temp_result_size_index52 = 0;\n    long temp_result_size_index53\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpup7ysgt5.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpup7ysgt5.cpp:82:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpup7ysgt5.cpp: In function 'int main()':\n\
    /tmp/tmpup7ysgt5.cpp:84:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpup7ysgt5.cpp:2:\n/tmp/tmpup7ysgt5.cpp:85:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpup7ysgt5.cpp:85:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpup7ysgt5.cpp:85:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpup7ysgt5.cpp:85:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpup7ysgt5.cpp:85:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpup7ysgt5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '%':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptnh36dmg.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptnh36dmg.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmptnh36dmg.cpp:\
    \ In function 'int main()':\n/tmp/tmptnh36dmg.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptnh36dmg.cpp:2:\n/tmp/tmptnh36dmg.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmptnh36dmg.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmptnh36dmg.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptnh36dmg.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmptnh36dmg.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptnh36dmg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = op.size();\n    long op_size2 = op_size;\n    long op_size3\
    \ = op_size;\n    long op_size4 = op_size;\n    long op_size5 = op_size;\n   \
    \ long op_size6 = op_size;\n    long op_size7 = op_size;\n    long op_size8 =\
    \ op_size;\n    long op_size9 = op_size;\n    long op_size10 = op_size;\n    long\
    \ op_size11 = op_size;\n    long op_size12 = op_size;\n    long op_size13 = op_size;\n\
    \    long op_size14 = op_size;\n    long op_size15 = op_size;\n    long op_size16\
    \ = op_size;\n    long op_size17 = op_size;\n    long op_size18 = op_size;\n \
    \   long op_size19 = op_size;\n    long op_size20 = op_size;\n    long op_size21\
    \ = op_size;\n    long op_size22 = op_size;\n    long op_size23 = op_size;\n \
    \   long op_size24 = op_size;\n    long op_size25 = op_size;\n    long op_size26\
    \ = op_size;\n    long op_size27 = op_size;\n    long op_size28 = op_size;\n \
    \   long op_size29 = op_size;\n    long op_size30 = op_size;\n    long op_size31\
    \ = op_size;\n    long op_size32 = op_size;\n    long op_size33 = op_size;\n \
    \   long op_size34 = op_size;\n    long op_size35 = op_size;\n    long op_size36\
    \ = op_size;\n    long op_size37 = op_size;\n    long op_size38 = op_size;\n \
    \   long op_size39 = op_size;\n    long op_size40 = op_size;\n    long op_size41\
    \ = op_size;\n    long op_size42 = op_size;\n    long op_size43 = op_size;\n \
    \   long op_size44 = op_size;\n    long op_size45 = op_size;\n    long op_size46\
    \ = op_size;\n    long op_size47 = op_size;\n    long op_size48 = op_size;\n \
    \   long op_size49 = op_size;\n    long op_size50 = op_size;\n    long op_size51\
    \ = op_size;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvnhi5e66.cpp: In function 'int main()':\n/tmp/tmpvnhi5e66.cpp:78:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvnhi5e66.cpp:2:\n/tmp/tmpvnhi5e66.cpp:79:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpvnhi5e66.cpp:79:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpvnhi5e66.cpp:79:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvnhi5e66.cpp:79:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpvnhi5e66.cpp:79:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvnhi5e66.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_index2\
    \ = 0;\n    long op_size2 = op.size();\n    long op_index3 = 0;\n    long op_size3\
    \ = op.size();\n    long op_index4 = 0;\n    long op_size4 = op.size();\n    long\
    \ op_index5 = 0;\n    long op_size5 = op.size();\n    long op_index6 = 0;\n  \
    \  long op_size6 = op.size();\n    long op_index7 = 0;\n    long op_size7 = op.size();\n\
    \    long op_index8 = 0;\n    long op_size8 = op.size();\n    long op_index9 =\
    \ 0;\n    long op_size9 = op.size();\n    long op_index10 = 0;\n    long op_size10\
    \ = op.size();\n    long op_index11 = 0;\n    long op_size11 = op.size();\n  \
    \  long op_index12 = 0;\n    long op_size12 = op.size();\n    long op_index13\
    \ = 0;\n    long op_size13 = op.size();\n    long op_index14 = 0;\n    long op_size14\
    \ = op.size();\n    long op_index15 = 0;\n    long op_size15 = op.size();\n  \
    \  long op_index16 = 0;\n    long op_size16 = op.size();\n    long op_index17\
    \ = 0;\n    long op_size17 = op.size();\n    long op_index18 = 0;\n    long op_size18\
    \ = op.size();\n    long op_index19 = 0;\n    long op_size19 = op.size();\n  \
    \  long op_index20 = 0;\n    long op_size20 = op.size();\n    long op_index21\
    \ = 0;\n    long op_size21 = op.size();\n    long op_index22 = 0;\n    long op_size22\
    \ = op.size();\n    long op_index23 = 0;\n    long op_size23 = op.size();\n  \
    \  long op_index24 = 0;\n    long op_size24 = op.size();\n    long op_index25\
    \ = 0;\n    long op_size25 = op.size();\n    long op_index26 = 0;\n    long op_size26\
    \ = op.size();\n    long op_index27 = 0;\n    long op_size27 = op.size();\n  \
    \  long op_index28 = 0;\n    long op_size28 = op.size();\n    long op_index29\
    \ = 0;\n    long op_size29 = op.size();\n    long op_index30 = 0;\n    long op_size30\
    \ = op.size();\n    long op_index\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_gg8isx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpf_gg8isx.cpp:86:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpf_gg8isx.cpp: In function 'int main()':\n\
    /tmp/tmpf_gg8isx.cpp:88:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf_gg8isx.cpp:2:\n/tmp/tmpf_gg8isx.cpp:89:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpf_gg8isx.cpp:89:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpf_gg8isx.cpp:89:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf_gg8isx.cpp:89:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpf_gg8isx.cpp:89:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpf_gg8isx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size2 = operand.size();\n \
    \   long op_size3 = op_size + op_size2;\n    long op_size4 = op_size + op_size\
    \ + op_size2;\n    long op_size5 = op_size + op_size + op_size + op_size2;\n \
    \   long op_size6 = op_size + op_size + op_size + op_size + op_size2;\n    long\
    \ op_size7 = op_size + op_size + op_size + op_size + op_size + op_size2;\n   \
    \ long op_size8 = op_size + op_size + op_size + op_size + op_size + op_size +\
    \ op_size2;\n    long op_size9 = op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size10 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size11\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size2;\n    long op_size12 = op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size13\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size14 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size2;\n    long op_size15 = op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size2;\n  \
    \  long op_size16 = op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size17\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size2;\n    long op_size18 = op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size2;\n    long op_size19 = op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size2;\n    long op_size20 = op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size2;\n    long op_size21 = op_size\
    \ + op_size + op_size + \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4amspdc.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpm4amspdc.cpp:46:1: error: expected primary-expression\
    \ before '}' token\n }\n ^\n/tmp/tmpm4amspdc.cpp:46:1: error: expected ',' or\
    \ ';' before '}' token\n/tmp/tmpm4amspdc.cpp: In function 'int main()':\n/tmp/tmpm4amspdc.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm4amspdc.cpp:2:\n/tmp/tmpm4amspdc.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpm4amspdc.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpm4amspdc.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm4amspdc.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpm4amspdc.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm4amspdc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _Inpu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for(size_t i =\
    \ 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n \
    \               result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                assert(false);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4fksn7fb.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp4fksn7fb.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmp4fksn7fb.cpp:\
    \ In function 'int main()':\n/tmp/tmp4fksn7fb.cpp:48:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4fksn7fb.cpp:2:\n/tmp/tmp4fksn7fb.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp4fksn7fb.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp4fksn7fb.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4fksn7fb.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp4fksn7fb.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp4fksn7fb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpvyqdux.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpvpvyqdux.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpvpvyqdux.cpp: In function 'int main()':\n\
    /tmp/tmpvpvyqdux.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/tmp/tmpvpvyqdux.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpvpvyqdux.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpvpvyqdux.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvpvyqdux.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpvpvyqdux.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnir7eipn.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpnir7eipn.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpnir7eipn.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpnir7eipn.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlohoqet.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpqlohoqet.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpqlohoqet.cpp: In function 'int main()':\n\
    /tmp/tmpqlohoqet.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/tmp/tmpqlohoqet.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpqlohoqet.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpqlohoqet.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqlohoqet.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpqlohoqet.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long A2\
    \ = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long D2 = 0;\n    long E2 = 0;\n\
    \    long F2 = 0;\n    long G2 = 0;\n    long H2 = 0;\n    long I2 = 0;\n    long\
    \ J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n    long M2 = 0;\n    long N2 =\
    \ 0;\n    long O2 = 0;\n    long P2 = 0;\n    long Q2 = 0;\n    long R2 = 0;\n\
    \    long S2 = 0;\n    long T2 = 0;\n    long U2 = 0;\n    long V2 = 0;\n    long\
    \ W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n    long Z2 = 0;\n    long A3 =\
    \ 0;\n    long B3 = 0;\n    long C3 = 0;\n    long D3 = 0;\n    long E3 = 0;\n\
    \    long F3 = 0;\n    long G3 = 0;\n    long H3 = 0;\n    long I3 = 0;\n    long\
    \ J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n    long M3 = 0;\n    long N3 =\
    \ 0;\n    long O3 = 0;\n    long P3 = 0;\n    long Q3 = 0;\n    long R3 = 0;\n\
    \    long S3 = 0;\n    long T3 = 0;\n    long U3 = 0;\n    long V3 = 0;\n    long\
    \ W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n    long Z3 = 0;\n    long A4 =\
    \ 0;\n    long B4 = 0;\n    long C4 = 0;\n    long D4 = 0;\n\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7c2a0c8.cpp: In function 'int main()':\n/tmp/tmp_7c2a0c8.cpp:128:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_7c2a0c8.cpp:2:\n/tmp/tmp_7c2a0c8.cpp:129:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp_7c2a0c8.cpp:129:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp_7c2a0c8.cpp:129:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_7c2a0c8.cpp:129:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp_7c2a0c8.cpp:129:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_7c2a0c8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n   \
    \ auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcwcpvb5l.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpcwcpvb5l.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpcwcpvb5l.cpp: In function 'int main()':\n\
    /tmp/tmpcwcpvb5l.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcwcpvb5l.cpp:2:\n/tmp/tmpcwcpvb5l.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcwcpvb5l.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcwcpvb5l.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcwcpvb5l.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcwcpvb5l.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcwcpvb5l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx06zta_q.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpx06zta_q.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpx06zta_q.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpx06zta_q.cpp: In\
    \ function 'int main()':\n/tmp/tmpx06zta_q.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx06zta_q.cpp:2:\n/tmp/tmpx06zta_q.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpx06zta_q.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpx06zta_q.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpx06zta_q.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpx06zta_q.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41i1rqsw.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp41i1rqsw.cpp:98:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp41i1rqsw.cpp: In function 'int main()':\n\
    /tmp/tmp41i1rqsw.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/tmp/tmp41i1rqsw.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp41i1rqsw.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp41i1rqsw.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp41i1rqsw.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp41i1rqsw.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41i1rqsw.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp41i1rqsw.cpp:98:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp41i1rqsw.cpp: In function 'int main()':\n\
    /tmp/tmp41i1rqsw.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/tmp/tmp41i1rqsw.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp41i1rqsw.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp41i1rqsw.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp41i1rqsw.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp41i1rqsw.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_value = op[op_index];\n    long op_value_size = op_value.size();\n\
    \    long op_value_value = op_value[op_value_size-1];\n    long op_value_value_size\
    \ = op_value_value.size();\n    long op_value_value_value = op_value_value[op_value_value_size-1];\n\
    \    long op_value_value_value_size = op_value_value_value.size();\n    long op_value_value_value_value\
    \ = op_value_value_value[op_value_value_value_size-1];\n    long op_value_value_value_value_size\
    \ = op_value_value_value_value.size();\n    long op_value_value_value_value_value\
    \ = op_value_value_value_value[op_value_value_value_value_size-1];\n    long op_value_value_value_value_value_size\
    \ = op_value_value_value_value_value.size();\n    long op_value_value_value_value_value_value\
    \ = op_value_value_value_value_value[op_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1191hyv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpo1191hyv.cpp:25:32: error: cannot convert\
    \ 'std::basic_string<char>' to 'long int' in initialization\n     long op_value\
    \ = op[op_index];\n                                ^\n/tmp/tmpo1191hyv.cpp:26:35:\
    \ error: request for member 'size' in 'op_value', which is of non-class type 'long\
    \ int'\n     long op_value_size = op_value.size();\n                         \
    \          ^\n/tmp/tmpo1191hyv.cpp:27:51: error: invalid types 'long int[long\
    \ int]' for array subscript\n     long op_value_value = op_value[op_value_size-1];\n\
    \                                                   ^\n/tmp/tmpo1191hyv.cpp:28:47:\
    \ error: request for member 'size' in 'op_value_value', which is of non-class\
    \ type 'long int'\n     long op_value_value_size = op_value_value.size();\n  \
    \                                             ^\n/tmp/tmpo1191hyv.cpp:29:69: error:\
    \ invalid types 'long int[long int]' for array subscript\n     long op_value_value_value\
    \ = op_value_value[op_value_value_size-1];\n                                 \
    \                                    ^\n/tmp/tmpo1191hyv.cpp:30:59: error: request\
    \ for member 'size' in 'op_value_value_value', which is of non-class type 'long\
    \ int'\n     long op_value_value_value_size = op_value_value_value.size();\n \
    \                                                          ^\n/tmp/tmpo1191hyv.cpp:31:87:\
    \ error: invalid types 'long int[long int]' for array subscript\n     long op_value_value_value_value\
    \ = op_value_value_value[op_value_value_value_size-1];\n                     \
    \                                                                  ^\n/tmp/tmpo1191hyv.cpp:32:71:\
    \ error: request for member 'size' in 'op_value_value_value_value', which is of\
    \ non-class type 'long int'\n     long op_value_value_value_value_size = op_value_value_value_value.size();\n\
    \                                                                       ^\n/tmp/tmpo1191hyv.cpp:33:105:\
    \ error: invalid types 'long int[long int]' for array subscript\n     l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index72\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptx54x8t4.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptx54x8t4.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmptx54x8t4.cpp: In function 'int main()':\n\
    /tmp/tmptx54x8t4.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptx54x8t4.cpp:2:\n/tmp/tmptx54x8t4.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmptx54x8t4.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmptx54x8t4.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptx54x8t4.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmptx54x8t4.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptx54x8t4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long\
    \ AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG =\
    \ 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n\
    \    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long\
    \ AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT =\
    \ 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n\
    \    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long\
    \ BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG =\
    \ 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n\
    \    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long\
    \ BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT =\
    \ 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n\
    \    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long\
    \ CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp446ua38_.cpp: In function 'int main()':\n/tmp/tmp446ua38_.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/tmp/tmp446ua38_.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp446ua38_.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp446ua38_.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp446ua38_.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp446ua38_.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82\
    \ = 0;\n    long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnuvhkhq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpfnuvhkhq.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpfnuvhkhq.cpp: In function 'int main()':\n\
    /tmp/tmpfnuvhkhq.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/tmp/tmpfnuvhkhq.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfnuvhkhq.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfnuvhkhq.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfnuvhkhq.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfnuvhkhq.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for(size_t i =\
    \ 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n \
    \               result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkef625h8.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpkef625h8.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpkef625h8.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpkef625h8.cpp: In function\
    \ 'int main()':\n/tmp/tmpkef625h8.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkef625h8.cpp:2:\n/tmp/tmpkef625h8.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpkef625h8.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpkef625h8.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkef625h8.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpkef625h8.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpke"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (auto\
    \ i : operand) {\n        result += i;\n    }\n    for (auto i : op) {\n     \
    \   switch (i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '^':\n                result %= operand[0];\n\
    \                break;\n            case '**':\n                result %= operand[0];\n\
    \                break;\n            default:\n                assert(false);\n\
    \                break;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjpa9__oc.cpp:44:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpjpa9__oc.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpjpa9__oc.cpp:24:15: error: 'i' does not name a type\n     for\
    \ (auto i : operand) {\n               ^\n/tmp/tmpjpa9__oc.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for (auto i : op) {\n     ^\n/tmp/tmpjpa9__oc.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpjpa9__oc.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpjpa9__oc.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpjpa9__oc.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpjpa9__oc.cpp:27:15: error: 'i' does not name a type\n\
    \     for (auto i : op) {\n               ^\n/tmp/tmpjpa9__oc.cpp:52:5: error:\
    \ expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpjpa9__oc.cpp:52:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpjpa9__oc.cpp:52:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpjpa9__oc.cpp:52:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpjpa9__oc.cpp:52:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpjpa9__oc.cpp: In function 'int main()':\n/tmp/tmpjpa9__oc.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjpa9__oc.cpp:2:\n/tmp/tmpjpa9__oc.cpp:56:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpjpa9__oc.cpp:56:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(cand"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(auto\
    \ i : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n      \
    \  switch(i) {\n            case '+':\n                result += operand[0];\n\
    \                break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '^':\n                result %= operand[0];\n\
    \                break;\n            case '**':\n                result %= operand[0];\n\
    \                break;\n            default:\n                assert(0);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpht45lea_.cpp:44:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpht45lea_.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpht45lea_.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmpht45lea_.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmpht45lea_.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpht45lea_.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpht45lea_.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpht45lea_.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpht45lea_.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmpht45lea_.cpp:51:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpht45lea_.cpp:51:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpht45lea_.cpp:51:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpht45lea_.cpp:51:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpht45lea_.cpp:51:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpht45lea_.cpp: In function 'int main()':\n/tmp/tmpht45lea_.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpht45lea_.cpp:2:\n/tmp/tmpht45lea_.cpp:55:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpht45lea_.cpp:55:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrbzege8.cpp: In function 'int main()':\n/tmp/tmprrbzege8.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrbzege8.cpp:2:\n/tmp/tmprrbzege8.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprrbzege8.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmprrbzege8.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrbzege8.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprrbzege8.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprrbzege8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_size2 = 0;\n\
    \    long op_size3 = 0;\n    long op_size4 = 0;\n    long op_size5 = 0;\n    long\
    \ op_size6 = 0;\n    long op_size7 = 0;\n    long op_size8 = 0;\n    long op_size9\
    \ = 0;\n    long op_size10 = 0;\n    long op_size11 = 0;\n    long op_size12 =\
    \ 0;\n    long op_size13 = 0;\n    long op_size14 = 0;\n    long op_size15 = 0;\n\
    \    long op_size16 = 0;\n    long op_size17 = 0;\n    long op_size18 = 0;\n \
    \   long op_size19 = 0;\n    long op_size20 = 0;\n    long op_size21 = 0;\n  \
    \  long op_size22 = 0;\n    long op_size23 = 0;\n    long op_size24 = 0;\n   \
    \ long op_size25 = 0;\n    long op_size26 = 0;\n    long op_size27 = 0;\n    long\
    \ op_size28 = 0;\n    long op_size29 = 0;\n    long op_size30 = 0;\n    long op_size31\
    \ = 0;\n    long op_size32 = 0;\n    long op_size33 = 0;\n    long op_size34 =\
    \ 0;\n    long op_size35 = 0;\n    long op_size36 = 0;\n    long op_size37 = 0;\n\
    \    long op_size38 = 0;\n    long op_size39 = 0;\n    long op_size40 = 0;\n \
    \   long op_size41 = 0;\n    long op_size42 = 0;\n    long op_size43 = 0;\n  \
    \  long op_size44 = 0;\n    long op_size45 = 0;\n    long op_size46 = 0;\n   \
    \ long op_size47 = 0;\n    long op_size48 = 0;\n    long op_size49 = 0;\n    long\
    \ op_size50 = 0;\n    long op_size51 = 0;\n    long op_size52 = 0;\n    long op_size53\
    \ = 0;\n    long op_size54 = 0;\n    long op_size55 = 0;\n    long op_size56 =\
    \ 0;\n    long op_size57 = 0;\n    long op_size58 = 0;\n    long op_size59 = 0;\n\
    \    long op_size60 = 0;\n    long op_size61 = 0;\n    long op_size62 = 0;\n \
    \   long op_size63 = 0;\n    long op_size64 = 0;\n    long op_size65 = 0;\n  \
    \  long op_size66 = 0;\n    long op_size67 = 0;\n    long op_size68 = 0;\n   \
    \ long op_size69 = 0;\n    long op_size70 = 0;\n    long op_size71 = 0;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtpuj7nb.cpp: In function 'int main()':\n/tmp/tmpwtpuj7nb.cpp:99:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwtpuj7nb.cpp:2:\n/tmp/tmpwtpuj7nb.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpwtpuj7nb.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpwtpuj7nb.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwtpuj7nb.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpwtpuj7nb.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwtpuj7nb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    for (size_t i = 0; i < op.size(); i++)\
    \ {\n        switch (op[i]) {\n            case '+':\n                result +=\
    \ operand[i];\n                break;\n            case '-':\n               \
    \ result -= operand[i];\n                break;\n            case '*':\n     \
    \           result *= operand[i];\n                break;\n            case '/':\n\
    \                result /= operand[i];\n                break;\n            case\
    \ '^':\n                result %= operand[i];\n                break;\n      \
    \      case '**':\n                result %= operand[i];\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2r5m3j97.cpp:40:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp2r5m3j97.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp2r5m3j97.cpp:24:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmp2r5m3j97.cpp: In\
    \ function 'int main()':\n/tmp/tmp2r5m3j97.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2r5m3j97.cpp:2:\n/tmp/tmp2r5m3j97.cpp:51:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp2r5m3j97.cpp:51:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp2r5m3j97.cpp:51:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2r5m3j97.cpp:51:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp2r5m3j97.cpp:51:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long size\
    \ = op.size();\n    long index = 0;\n    long temp = 0;\n    long temp2 = 0;\n\
    \    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6\
    \ = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long\
    \ temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n\
    \    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukkuoxta.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpukkuoxta.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpukkuoxta.cpp: In function 'int main()':\n\
    /tmp/tmpukkuoxta.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukkuoxta.cpp:2:\n/tmp/tmpukkuoxta.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpukkuoxta.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpukkuoxta.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpukkuoxta.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpukkuoxta.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpukkuoxta.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82\
    \ = 0;\n    long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnuvhkhq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpfnuvhkhq.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpfnuvhkhq.cpp: In function 'int main()':\n\
    /tmp/tmpfnuvhkhq.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/tmp/tmpfnuvhkhq.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfnuvhkhq.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfnuvhkhq.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfnuvhkhq.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfnuvhkhq.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh42t6q4.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpmh42t6q4.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpmh42t6q4.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpmh42t6q4.cpp: In\
    \ function 'int main()':\n/tmp/tmpmh42t6q4.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmh42t6q4.cpp:2:\n/tmp/tmpmh42t6q4.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmh42t6q4.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmh42t6q4.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmh42t6q4.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmh42t6q4.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n\
    \    long op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n  \
    \  long op_size4 = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long\
    \ op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7\
    \ = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 =\
    \ 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n\
    \    long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n\
    \    long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n\
    \    long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n\
    \    long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n\
    \    long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9g110lcl.cpp: In function 'int main()':\n/tmp/tmp9g110lcl.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9g110lcl.cpp:2:\n/tmp/tmp9g110lcl.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp9g110lcl.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp9g110lcl.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9g110lcl.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp9g110lcl.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp9g110lcl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                assert(false);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmyteq5n.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpnmyteq5n.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmpnmyteq5n.cpp:\
    \ In function 'int main()':\n/tmp/tmpnmyteq5n.cpp:48:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnmyteq5n.cpp:2:\n/tmp/tmpnmyteq5n.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpnmyteq5n.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpnmyteq5n.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnmyteq5n.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpnmyteq5n.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnmyteq5n.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long\
    \ AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ =\
    \ 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n\
    \    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long\
    \ AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW =\
    \ 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n\
    \    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long\
    \ BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ =\
    \ 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n\
    \    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long\
    \ BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW =\
    \ 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n\
    \    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7rr2uy.cpp: In function 'int main()':\n/tmp/tmppk7rr2uy.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/tmp/tmppk7rr2uy.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmppk7rr2uy.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmppk7rr2uy.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppk7rr2uy.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmppk7rr2uy.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long\
    \ FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ =\
    \ 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n\
    \    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long\
    \ SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW =\
    \ 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n\
    \    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n\
    \    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n\
    \    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n\
    \    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n\
    \    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n\
    \    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifbopx8z.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpifbopx8z.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpifbopx8z.cpp: In function 'int main()':\n\
    /tmp/tmpifbopx8z.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpifbopx8z.cpp:2:\n/tmp/tmpifbopx8z.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpifbopx8z.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpifbopx8z.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpifbopx8z.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpifbopx8z.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpifbopx8z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long\
    \ CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG =\
    \ 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n\
    \    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long\
    \ PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT =\
    \ 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n\
    \    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n  \
    \  long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n  \
    \  long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n  \
    \  long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n  \
    \  long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n  \
    \  long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n  \
    \  long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n  \
    \  \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2meqzdci.cpp: In function 'int main()':\n/tmp/tmp2meqzdci.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2meqzdci.cpp:2:\n/tmp/tmp2meqzdci.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp2meqzdci.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp2meqzdci.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2meqzdci.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp2meqzdci.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2meqzdci.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n \
    \   auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprf2z3wpq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprf2z3wpq.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7osladul.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp7osladul.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp7osladul.cpp: In function 'int main()':\n\
    /tmp/tmp7osladul.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7osladul.cpp:2:\n/tmp/tmp7osladul.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp7osladul.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp7osladul.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7osladul.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp7osladul.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp7osladul.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfjezc7g.cpp: In function 'int main()':\n/tmp/tmpcfjezc7g.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcfjezc7g.cpp:2:\n/tmp/tmpcfjezc7g.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcfjezc7g.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcfjezc7g.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcfjezc7g.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcfjezc7g.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcfjezc7g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n \
    \   auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprf2z3wpq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprf2z3wpq.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long sum = 0;\n\
    \    long product = 1;\n    long floor = 1;\n    long exponent = 1;\n    long\
    \ temp = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n\
    \    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long\
    \ I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n\
    \    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long\
    \ R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n\
    \    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long\
    \ AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE =\
    \ 0;\n    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n\
    \    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long\
    \ NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR =\
    \ 0;\n    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n\
    \    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long\
    \ AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long\
    \ EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long\
    \ III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long\
    \ MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long\
    \ QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long\
    \ UUU = 0;\n    long VVV\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphvnjdvsc.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmphvnjdvsc.cpp:121:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmphvnjdvsc.cpp: In function 'int main()':\n\
    /tmp/tmphvnjdvsc.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphvnjdvsc.cpp:2:\n/tmp/tmphvnjdvsc.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmphvnjdvsc.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmphvnjdvsc.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphvnjdvsc.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphvnjdvsc.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphvnjdvsc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_size2\
    \ = operand.size();\n    long op_size3 = op_size + op_size2;\n    long op_size4\
    \ = op_size + op_size + op_size2;\n    long op_size5 = op_size + op_size + op_size\
    \ + op_size2;\n    long op_size6 = op_size + op_size + op_size + op_size + op_size2;\n\
    \    long op_size7 = op_size + op_size + op_size + op_size + op_size + op_size2;\n\
    \    long op_size8 = op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size2;\n    long op_size9 = op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size10 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size11\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size2;\n    long op_size12 = op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size13\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size14 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size2;\n    long op_size15 = op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size2;\n  \
    \  long op_size16 = op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size2;\n    long op_size17\
    \ = op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size2;\n    long op_size18 = op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size2;\n    long op_size19 = op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size + op_size2;\n    long op_size20 = op_size + op_size + op_size + op_size\
    \ + op_size + op_size + op_size + op_size + op_size + op_size + op_size + op_size\
    \ + op_size2;\n    long op_size21 = op_size + op_size + op_size + op_size + op_size\
    \ + \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp92vzqpmy.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp92vzqpmy.cpp:47:1: error: expected primary-expression\
    \ before '}' token\n }\n ^\n/tmp/tmp92vzqpmy.cpp:47:1: error: expected ',' or\
    \ ';' before '}' token\n/tmp/tmp92vzqpmy.cpp: In function 'int main()':\n/tmp/tmp92vzqpmy.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp92vzqpmy.cpp:2:\n/tmp/tmp92vzqpmy.cpp:50:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp92vzqpmy.cpp:50:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp92vzqpmy.cpp:50:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp92vzqpmy.cpp:50:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp92vzqpmy.cpp:50:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp92vzqpmy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _Inpu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB\
    \ = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n\
    \    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long\
    \ AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO =\
    \ 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n\
    \    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long\
    \ AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB =\
    \ 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n\
    \    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long\
    \ BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO =\
    \ 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n\
    \    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long\
    \ BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB =\
    \ 0;\n    long CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr677he3.cpp: In function 'int main()':\n/tmp/tmpgr677he3.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgr677he3.cpp:2:\n/tmp/tmpgr677he3.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpgr677he3.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpgr677he3.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgr677he3.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpgr677he3.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgr677he3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long\
    \ CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG =\
    \ 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n\
    \    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long\
    \ PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT =\
    \ 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n\
    \    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n  \
    \  long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n  \
    \  long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n  \
    \  long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n  \
    \  long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n  \
    \  long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n  \
    \  long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n  \
    \  \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2meqzdci.cpp: In function 'int main()':\n/tmp/tmp2meqzdci.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2meqzdci.cpp:2:\n/tmp/tmp2meqzdci.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp2meqzdci.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp2meqzdci.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2meqzdci.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp2meqzdci.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2meqzdci.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for (size_t i =\
    \ 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result %= operand[i];\n\
    \                break;\n            case '**':\n                result *= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgyni309l.cpp:44:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpgyni309l.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpgyni309l.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpgyni309l.cpp: In\
    \ function 'int main()':\n/tmp/tmpgyni309l.cpp:54:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgyni309l.cpp:2:\n/tmp/tmpgyni309l.cpp:55:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpgyni309l.cpp:55:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpgyni309l.cpp:55:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgyni309l.cpp:55:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpgyni309l.cpp:55:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82\
    \ = 0;\n    long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnuvhkhq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpfnuvhkhq.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpfnuvhkhq.cpp: In function 'int main()':\n\
    /tmp/tmpfnuvhkhq.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/tmp/tmpfnuvhkhq.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfnuvhkhq.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfnuvhkhq.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfnuvhkhq.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfnuvhkhq.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long \n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmubqov_8.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpmubqov_8.cpp:27:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:34:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpmubqov_8.cpp:26:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpmubqov_8.cpp:35:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(auto i\
    \ : operand){\n        result += i;\n    }\n    for(auto i : op){\n        switch(i){\n\
    \            case '+':\n                result += operand[0];\n              \
    \  break;\n            case '-':\n                result -= operand[0];\n    \
    \            break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                result *= operand[0];\n                break;\n            default:\n\
    \                assert(0);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60cihkpv.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp60cihkpv.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp60cihkpv.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand){\n              ^\n/tmp/tmp60cihkpv.cpp:27:5: error: expected ';'\
    \ before 'for'\n     for(auto i : op){\n     ^\n/tmp/tmp60cihkpv.cpp:27:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmp60cihkpv.cpp:27:5: error:\
    \ expected ';' before 'for'\n/tmp/tmp60cihkpv.cpp:27:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmp60cihkpv.cpp:27:5: error: expected ')' before 'for'\n\
    /tmp/tmp60cihkpv.cpp:27:14: error: 'i' does not name a type\n     for(auto i :\
    \ op){\n              ^\n/tmp/tmp60cihkpv.cpp:49:5: error: expected ';' before\
    \ 'return'\n     return result;\n     ^\n/tmp/tmp60cihkpv.cpp:49:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp60cihkpv.cpp:49:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp60cihkpv.cpp:49:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp60cihkpv.cpp:49:5: error: expected ')' before 'return'\n\
    /tmp/tmp60cihkpv.cpp: In function 'int main()':\n/tmp/tmp60cihkpv.cpp:52:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = do_algebra;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp60cihkpv.cpp:2:\n/tmp/tmp60cihkpv.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp60cihkpv.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long\
    \ CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG =\
    \ 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n\
    \    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long\
    \ PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT =\
    \ 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n\
    \    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n  \
    \  long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n  \
    \  long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n  \
    \  long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n  \
    \  long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n  \
    \  long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n  \
    \  long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n  \
    \  \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2meqzdci.cpp: In function 'int main()':\n/tmp/tmp2meqzdci.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2meqzdci.cpp:2:\n/tmp/tmp2meqzdci.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp2meqzdci.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp2meqzdci.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2meqzdci.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp2meqzdci.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2meqzdci.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n    \
    \            result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n            case '**':\n                result %= operand[i];\n   \
    \             break;\n            default:\n                assert(false);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszxmlz7i.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpszxmlz7i.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpszxmlz7i.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpszxmlz7i.cpp: In function\
    \ 'int main()':\n/tmp/tmpszxmlz7i.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszxmlz7i.cpp:2:\n/tmp/tmpszxmlz7i.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpszxmlz7i.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpszxmlz7i.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpszxmlz7i.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpszxmlz7i.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpsz"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82\
    \ = 0;\n    long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnuvhkhq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpfnuvhkhq.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpfnuvhkhq.cpp: In function 'int main()':\n\
    /tmp/tmpfnuvhkhq.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/tmp/tmpfnuvhkhq.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpfnuvhkhq.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpfnuvhkhq.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfnuvhkhq.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfnuvhkhq.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfnuvhkhq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprz1uwc4u.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprz1uwc4u.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprz1uwc4u.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprz1uwc4u.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n   \
    \ auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcwcpvb5l.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpcwcpvb5l.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpcwcpvb5l.cpp: In function 'int main()':\n\
    /tmp/tmpcwcpvb5l.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcwcpvb5l.cpp:2:\n/tmp/tmpcwcpvb5l.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcwcpvb5l.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcwcpvb5l.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcwcpvb5l.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcwcpvb5l.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcwcpvb5l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfjezc7g.cpp: In function 'int main()':\n/tmp/tmpcfjezc7g.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcfjezc7g.cpp:2:\n/tmp/tmpcfjezc7g.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcfjezc7g.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcfjezc7g.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcfjezc7g.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcfjezc7g.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcfjezc7g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long op_size =\
    \ op.size();\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3\
    \ = 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n\
    \    long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdm18kotz.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpdm18kotz.cpp:97:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpdm18kotz.cpp: In function 'int main()':\n\
    /tmp/tmpdm18kotz.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdm18kotz.cpp:2:\n/tmp/tmpdm18kotz.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpdm18kotz.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpdm18kotz.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdm18kotz.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpdm18kotz.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpdm18kotz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqqu2qkb.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpiqqu2qkb.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpiqqu2qkb.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmpiqqu2qkb.cpp: In\
    \ function 'int main()':\n/tmp/tmpiqqu2qkb.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqqu2qkb.cpp:2:\n/tmp/tmpiqqu2qkb.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpiqqu2qkb.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpiqqu2qkb.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqqu2qkb.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpiqqu2qkb.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(0);\n  \
    \              break;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l27u75t.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp5l27u75t.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp5l27u75t.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmp5l27u75t.cpp: In\
    \ function 'int main()':\n/tmp/tmp5l27u75t.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l27u75t.cpp:2:\n/tmp/tmp5l27u75t.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l27u75t.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l27u75t.cpp:53:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l27u75t.cpp:53:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l27u75t.cpp:53:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlohoqet.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpqlohoqet.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpqlohoqet.cpp: In function 'int main()':\n\
    /tmp/tmpqlohoqet.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/tmp/tmpqlohoqet.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpqlohoqet.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpqlohoqet.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqlohoqet.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpqlohoqet.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75od41cp.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp75od41cp.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp75od41cp.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmp75od41cp.cpp: In\
    \ function 'int main()':\n/tmp/tmp75od41cp.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp75od41cp.cpp:2:\n/tmp/tmp75od41cp.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp75od41cp.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp75od41cp.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp75od41cp.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp75od41cp.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(size_t\
    \ i = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '%':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprjiw0byl.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprjiw0byl.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmprjiw0byl.cpp:\
    \ In function 'int main()':\n/tmp/tmprjiw0byl.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprjiw0byl.cpp:2:\n/tmp/tmprjiw0byl.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprjiw0byl.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmprjiw0byl.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprjiw0byl.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprjiw0byl.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprjiw0byl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long op_size\
    \ = op.size();\n    long op_index = op_size - 1;\n    long op_index2 = op_index\
    \ - 1;\n    long op_index3 = op_index2 - 1;\n    long op_index4 = op_index3 -\
    \ 1;\n    long op_index5 = op_index4 - 1;\n    long op_index6 = op_index5 - 1;\n\
    \    long op_index7 = op_index6 - 1;\n    long op_index8 = op_index7 - 1;\n  \
    \  long op_index9 = op_index8 - 1;\n    long op_index10 = op_index9 - 1;\n   \
    \ long op_index11 = op_index10 - 1;\n    long op_index12 = op_index11 - 1;\n \
    \   long op_index13 = op_index12 - 1;\n    long op_index14 = op_index13 - 1;\n\
    \    long op_index15 = op_index14 - 1;\n    long op_index16 = op_index15 - 1;\n\
    \    long op_index17 = op_index16 - 1;\n    long op_index18 = op_index17 - 1;\n\
    \    long op_index19 = op_index18 - 1;\n    long op_index20 = op_index19 - 1;\n\
    \    long op_index21 = op_index20 - 1;\n    long op_index22 = op_index21 - 1;\n\
    \    long op_index23 = op_index22 - 1;\n    long op_index24 = op_index23 - 1;\n\
    \    long op_index25 = op_index24 - 1;\n    long op_index26 = op_index25 - 1;\n\
    \    long op_index27 = op_index26 - 1;\n    long op_index28 = op_index27 - 1;\n\
    \    long op_index29 = op_index28 - 1;\n    long op_index30 = op_index29 - 1;\n\
    \    long op_index31 = op_index30 - 1;\n    long op_index32 = op_index31 - 1;\n\
    \    long op_index33 = op_index32 - 1;\n    long op_index34 = op_index33 - 1;\n\
    \    long op_index35 = op_index34 - 1;\n    long op_index36 = op_index35 - 1;\n\
    \    long op_index37 = op_index36 - 1;\n    long op_index38 = op_index37 - 1;\n\
    \    long op_index39 = op_index38 - 1;\n    long op_index40 = op_index39 - 1;\n\
    \    long op_index41 = op_index40 - 1;\n    long op_index42 = op_index41 - 1;\n\
    \    long op_index43 = op_index\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqj9w507j.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpqj9w507j.cpp:68:1: error: expected ','\
    \ or ';' before '}' token\n }\n ^\n/tmp/tmpqj9w507j.cpp: In function 'int main()':\n\
    /tmp/tmpqj9w507j.cpp:70:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqj9w507j.cpp:2:\n/tmp/tmpqj9w507j.cpp:71:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpqj9w507j.cpp:71:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpqj9w507j.cpp:71:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqj9w507j.cpp:71:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpqj9w507j.cpp:71:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqj9w507j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, con"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(long\
    \ i = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe907bvhn.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpe907bvhn.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmpe907bvhn.cpp:\
    \ In function 'int main()':\n/tmp/tmpe907bvhn.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe907bvhn.cpp:2:\n/tmp/tmpe907bvhn.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpe907bvhn.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpe907bvhn.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe907bvhn.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpe907bvhn.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpe907bvhn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long\
    \ AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ =\
    \ 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n\
    \    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long\
    \ AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW =\
    \ 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n\
    \    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long\
    \ BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ =\
    \ 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n\
    \    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long\
    \ BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW =\
    \ 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n\
    \    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7rr2uy.cpp: In function 'int main()':\n/tmp/tmppk7rr2uy.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/tmp/tmppk7rr2uy.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmppk7rr2uy.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmppk7rr2uy.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppk7rr2uy.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmppk7rr2uy.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppk7rr2uy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long\
    \ AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG =\
    \ 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n\
    \    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long\
    \ AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT =\
    \ 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n\
    \    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long\
    \ BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG =\
    \ 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n\
    \    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long\
    \ BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT =\
    \ 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n\
    \    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long\
    \ CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp446ua38_.cpp: In function 'int main()':\n/tmp/tmp446ua38_.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/tmp/tmp446ua38_.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp446ua38_.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp446ua38_.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp446ua38_.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp446ua38_.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '%':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptnh36dmg.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptnh36dmg.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmptnh36dmg.cpp:\
    \ In function 'int main()':\n/tmp/tmptnh36dmg.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptnh36dmg.cpp:2:\n/tmp/tmptnh36dmg.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmptnh36dmg.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmptnh36dmg.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptnh36dmg.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmptnh36dmg.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptnh36dmg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_size\
    \ = op.size();\n    long op_index = 0;\n    long op_value = 0;\n    long op_value2\
    \ = 0;\n    long op_value3 = 0;\n    long op_value4 = 0;\n    long op_value5 =\
    \ 0;\n    long op_value6 = 0;\n    long op_value7 = 0;\n    long op_value8 = 0;\n\
    \    long op_value9 = 0;\n    long op_value10 = 0;\n    long op_value11 = 0;\n\
    \    long op_value12 = 0;\n    long op_value13 = 0;\n    long op_value14 = 0;\n\
    \    long op_value15 = 0;\n    long op_value16 = 0;\n    long op_value17 = 0;\n\
    \    long op_value18 = 0;\n    long op_value19 = 0;\n    long op_value20 = 0;\n\
    \    long op_value21 = 0;\n    long op_value22 = 0;\n    long op_value23 = 0;\n\
    \    long op_value24 = 0;\n    long op_value25 = 0;\n    long op_value26 = 0;\n\
    \    long op_value27 = 0;\n    long op_value28 = 0;\n    long op_value29 = 0;\n\
    \    long op_value30 = 0;\n    long op_value31 = 0;\n    long op_value32 = 0;\n\
    \    long op_value33 = 0;\n    long op_value34 = 0;\n    long op_value35 = 0;\n\
    \    long op_value36 = 0;\n    long op_value37 = 0;\n    long op_value38 = 0;\n\
    \    long op_value39 = 0;\n    long op_value40 = 0;\n    long op_value41 = 0;\n\
    \    long op_value42 = 0;\n    long op_value43 = 0;\n    long op_value44 = 0;\n\
    \    long op_value45 = 0;\n    long op_value46 = 0;\n    long op_value47 = 0;\n\
    \    long op_value48 = 0;\n    long op_value49 = 0;\n    long op_value50 = 0;\n\
    \    long op_value51 = 0;\n    long op_value52 = 0;\n    long op_value53 = 0;\n\
    \    long op_value54 = 0;\n    long op_value55 = 0;\n    long op_value56 = 0;\n\
    \    long op_value57 = 0;\n    long op_value58 = 0;\n    long op_value59 = 0;\n\
    \    long op_value60 = 0;\n    long op_value61 = 0;\n    long op_value62 = 0;\n\
    \    long op_value63 = 0;\n    long op_value64 = 0;\n    long op_value65 = 0;\n\
    \    long op_value66 = 0;\n    long op_value67 = 0;\n    long op_value68 = 0;\n\
    \    long op_value69 = 0;\n    long op_value70 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7yt2fci.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpz7yt2fci.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpz7yt2fci.cpp: In function 'int main()':\n\
    /tmp/tmpz7yt2fci.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz7yt2fci.cpp:2:\n/tmp/tmpz7yt2fci.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpz7yt2fci.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpz7yt2fci.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpz7yt2fci.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz7yt2fci.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz7yt2fci.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfjezc7g.cpp: In function 'int main()':\n/tmp/tmpcfjezc7g.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcfjezc7g.cpp:2:\n/tmp/tmpcfjezc7g.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcfjezc7g.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcfjezc7g.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcfjezc7g.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcfjezc7g.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcfjezc7g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long sum\
    \ = 0;\n    long product = 1;\n    long floordiv = 0;\n    long power = 1;\n \
    \   long exponent = 1;\n    long index = 0;\n    long sum2 = 0;\n    long product2\
    \ = 0;\n    long floordiv2 = 0;\n    long power2 = 0;\n    long exponent2 = 0;\n\
    \    long index2 = 0;\n    long sum3 = 0;\n    long product3 = 0;\n    long floordiv3\
    \ = 0;\n    long power3 = 0;\n    long exponent3 = 0;\n    long index3 = 0;\n\
    \    long sum4 = 0;\n    long product4 = 0;\n    long floordiv4 = 0;\n    long\
    \ power4 = 0;\n    long exponent4 = 0;\n    long index4 = 0;\n    long sum5 =\
    \ 0;\n    long product5 = 0;\n    long floordiv5 = 0;\n    long power5 = 0;\n\
    \    long exponent5 = 0;\n    long index5 = 0;\n    long sum6 = 0;\n    long product6\
    \ = 0;\n    long floordiv6 = 0;\n    long power6 = 0;\n    long exponent6 = 0;\n\
    \    long index6 = 0;\n    long sum7 = 0;\n    long product7 = 0;\n    long floordiv7\
    \ = 0;\n    long power7 = 0;\n    long exponent7 = 0;\n    long index7 = 0;\n\
    \    long sum8 = 0;\n    long product8 = 0;\n    long floordiv8 = 0;\n    long\
    \ power8 = 0;\n    long exponent8 = 0;\n    long index8 = 0;\n    long sum9 =\
    \ 0;\n    long product9 = 0;\n    long floordiv9 = 0;\n    long power9 = 0;\n\
    \    long exponent9 = 0;\n    long index9 = 0;\n    long sum10 = 0;\n    long\
    \ product10 = 0;\n    long floordiv10 = 0;\n    long power10 = 0;\n    long exponent10\
    \ = 0;\n    long index10 = 0;\n    long sum11 = 0;\n    long product11 = 0;\n\
    \    long floordiv11 = 0;\n    long power11 = 0;\n    long exponent11 = 0;\n \
    \   long index11 = 0;\n    long sum12 = 0;\n    long product12 = 0;\n    long\
    \ floordiv12 = 0;\n    long power12 = 0;\n    long exponent12 = 0;\n    long index12\
    \ = 0;\n    long sum13 = 0;\n    long product13 = 0;\n    long floordiv13 = 0;\n\
    \    long power13 = 0;\n    long exponent13 = 0;\n    long index13 = 0;\n    long\
    \ sum14 = 0;\n    long product14 = 0;\n    long floordiv14 = 0;\n    long power14\
    \ = 0;\n    long exponent14 = 0;\n    long index14 = 0;\n    long sum15 = 0;\n\
    \    long product15 = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4u0z437.cpp: In function 'int main()':\n/tmp/tmpd4u0z437.cpp:113:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd4u0z437.cpp:2:\n/tmp/tmpd4u0z437.cpp:114:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpd4u0z437.cpp:114:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpd4u0z437.cpp:114:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpd4u0z437.cpp:114:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpd4u0z437.cpp:114:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpd4u0z437.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l236dej.cpp: In function 'int main()':\n/tmp/tmp5l236dej.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/tmp/tmp5l236dej.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5l236dej.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5l236dej.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5l236dej.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5l236dej.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5l236dej.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long\
    \ AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG =\
    \ 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n\
    \    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long\
    \ AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT =\
    \ 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n\
    \    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long\
    \ BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG =\
    \ 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n\
    \    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long\
    \ BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT =\
    \ 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n\
    \    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long\
    \ CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp446ua38_.cpp: In function 'int main()':\n/tmp/tmp446ua38_.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/tmp/tmp446ua38_.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp446ua38_.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp446ua38_.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp446ua38_.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp446ua38_.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmw3_ii1u.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpmw3_ii1u.cpp:25:22: error: switch quantity\
    \ not an integer\n         switch (op[i]) {\n                      ^\n/tmp/tmpmw3_ii1u.cpp:\
    \ In function 'int main()':\n/tmp/tmpmw3_ii1u.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmw3_ii1u.cpp:2:\n/tmp/tmpmw3_ii1u.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmw3_ii1u.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmw3_ii1u.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmw3_ii1u.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmw3_ii1u.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmw3_ii1u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vec"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(auto i\
    \ : operand) {\n        result += i;\n    }\n    for(auto i : op) {\n        switch(i)\
    \ {\n            case '+':\n                result += operand[0];\n          \
    \      break;\n            case '-':\n                result -= operand[0];\n\
    \                break;\n            case '*':\n                result *= operand[0];\n\
    \                break;\n            case '/':\n                result /= operand[0];\n\
    \                break;\n            case '^':\n                result *= operand[0];\n\
    \                break;\n            case '**':\n                result *= operand[0];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3rfn3cp.cpp:44:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpl3rfn3cp.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpl3rfn3cp.cpp:24:14: error: 'i' does not name a type\n     for(auto\
    \ i : operand) {\n              ^\n/tmp/tmpl3rfn3cp.cpp:27:5: error: expected\
    \ ';' before 'for'\n     for(auto i : op) {\n     ^\n/tmp/tmpl3rfn3cp.cpp:27:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpl3rfn3cp.cpp:27:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpl3rfn3cp.cpp:27:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpl3rfn3cp.cpp:27:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpl3rfn3cp.cpp:27:14: error: 'i' does not name a type\n\
    \     for(auto i : op) {\n              ^\n/tmp/tmpl3rfn3cp.cpp:51:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpl3rfn3cp.cpp:51:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl3rfn3cp.cpp:51:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl3rfn3cp.cpp:51:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl3rfn3cp.cpp:51:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl3rfn3cp.cpp: In function 'int main()':\n/tmp/tmpl3rfn3cp.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3rfn3cp.cpp:2:\n/tmp/tmpl3rfn3cp.cpp:55:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpl3rfn3cp.cpp:55:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n \
    \   long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wg8zjpv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wg8zjpv.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n    long\
    \ op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4\
    \ = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n\
    \    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n  \
    \  long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n    long\
    \ op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10\
    \ = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12\
    \ = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13\
    \ = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15\
    \ = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16\
    \ = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18\
    \ = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19\
    \ = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21\
    \ = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22\
    \ = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24\
    \ = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25\
    \ = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27\
    \ = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28\
    \ = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30\
    \ = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31\
    \ = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33\
    \ = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34\
    \ = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36\
    \ = 0;\n    long op_size36 = 0;\n    long op\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7l8y6l3.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpm7l8y6l3.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpm7l8y6l3.cpp: In function 'int main()':\n\
    /tmp/tmpm7l8y6l3.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm7l8y6l3.cpp:2:\n/tmp/tmpm7l8y6l3.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpm7l8y6l3.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpm7l8y6l3.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm7l8y6l3.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpm7l8y6l3.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm7l8y6l3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7osladul.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp7osladul.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp7osladul.cpp: In function 'int main()':\n\
    /tmp/tmp7osladul.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7osladul.cpp:2:\n/tmp/tmp7osladul.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp7osladul.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp7osladul.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7osladul.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp7osladul.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp7osladul.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrbzege8.cpp: In function 'int main()':\n/tmp/tmprrbzege8.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrbzege8.cpp:2:\n/tmp/tmprrbzege8.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmprrbzege8.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmprrbzege8.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrbzege8.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprrbzege8.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprrbzege8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ 0;\n    long op_size2 = 0;\n    long op_size3 = 0;\n    long op_size4 = 0;\n\
    \    long op_size5 = 0;\n    long op_size6 = 0;\n    long op_size7 = 0;\n    long\
    \ op_size8 = 0;\n    long op_size9 = 0;\n    long op_size10 = 0;\n    long op_size11\
    \ = 0;\n    long op_size12 = 0;\n    long op_size13 = 0;\n    long op_size14 =\
    \ 0;\n    long op_size15 = 0;\n    long op_size16 = 0;\n    long op_size17 = 0;\n\
    \    long op_size18 = 0;\n    long op_size19 = 0;\n    long op_size20 = 0;\n \
    \   long op_size21 = 0;\n    long op_size22 = 0;\n    long op_size23 = 0;\n  \
    \  long op_size24 = 0;\n    long op_size25 = 0;\n    long op_size26 = 0;\n   \
    \ long op_size27 = 0;\n    long op_size28 = 0;\n    long op_size29 = 0;\n    long\
    \ op_size30 = 0;\n    long op_size31 = 0;\n    long op_size32 = 0;\n    long op_size33\
    \ = 0;\n    long op_size34 = 0;\n    long op_size35 = 0;\n    long op_size36 =\
    \ 0;\n    long op_size37 = 0;\n    long op_size38 = 0;\n    long op_size39 = 0;\n\
    \    long op_size40 = 0;\n    long op_size41 = 0;\n    long op_size42 = 0;\n \
    \   long op_size43 = 0;\n    long op_size44 = 0;\n    long op_size45 = 0;\n  \
    \  long op_size46 = 0;\n    long op_size47 = 0;\n    long op_size48 = 0;\n   \
    \ long op_size49 = 0;\n    long op_size50 = 0;\n    long op_size51 = 0;\n    long\
    \ op_size52 = 0;\n    long op_size53 = 0;\n    long op_size54 = 0;\n    long op_size55\
    \ = 0;\n    long op_size56 = 0;\n    long op_size57 = 0;\n    long op_size58 =\
    \ 0;\n    long op_size59 = 0;\n    long op_size60 = 0;\n    long op_size61 = 0;\n\
    \    long op_size62 = 0;\n    long op_size63 = 0;\n    long op_size64 = 0;\n \
    \   long op_size65 = 0;\n    long op_size66 = 0;\n    long op_size67 = 0;\n  \
    \  long op_size68 = 0;\n    long op_size69 = 0;\n    long op_size70 = 0;\n   \
    \ long op_size71 = 0;\n    long op_size72 = 0;\n    long \n}\nint main() {\n \
    \   auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaeds72l.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpcaeds72l.cpp:97:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpcaeds72l.cpp: In function 'int main()':\n\
    /tmp/tmpcaeds72l.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcaeds72l.cpp:2:\n/tmp/tmpcaeds72l.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcaeds72l.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcaeds72l.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcaeds72l.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcaeds72l.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcaeds72l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long\
    \ AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG =\
    \ 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n\
    \    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long\
    \ AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT =\
    \ 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n\
    \    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long\
    \ BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG =\
    \ 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n\
    \    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long\
    \ BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT =\
    \ 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n\
    \    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long\
    \ CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp446ua38_.cpp: In function 'int main()':\n/tmp/tmp446ua38_.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/tmp/tmp446ua38_.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp446ua38_.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp446ua38_.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp446ua38_.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp446ua38_.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp446ua38_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n\
    \    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2 = 0;\n    long\
    \ op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 = 0;\n    long op_size4\
    \ = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n    long op_index6 =\
    \ 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n    long op_size7 = 0;\n\
    \    long op_index8 = 0;\n    long op_size8 = 0;\n    long op_index9 = 0;\n  \
    \  long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10 = 0;\n   \
    \ long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12 = 0;\n  \
    \  long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13 = 0;\n  \
    \  long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15 = 0;\n \
    \   long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16 = 0;\n \
    \   long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18 = 0;\n\
    \    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19 = 0;\n\
    \    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21 = 0;\n\
    \    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22 = 0;\n\
    \    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24 = 0;\n\
    \    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25 = 0;\n\
    \    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27 = 0;\n\
    \    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28 = 0;\n\
    \    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30 = 0;\n\
    \    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31 = 0;\n\
    \    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33 = 0;\n\
    \    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34 = 0;\n\
    \    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36 = 0;\n\
    \    long op_size36 = 0;\n    long op_index37 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdfktt3b.cpp: In function 'int main()':\n/tmp/tmpmdfktt3b.cpp:100:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/tmp/tmpmdfktt3b.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpmdfktt3b.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpmdfktt3b.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmdfktt3b.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmdfktt3b.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmdfktt3b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for (size_t i =\
    \ 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68_f7jdw.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp68_f7jdw.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp68_f7jdw.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmp68_f7jdw.cpp: In\
    \ function 'int main()':\n/tmp/tmp68_f7jdw.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp68_f7jdw.cpp:2:\n/tmp/tmp68_f7jdw.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp68_f7jdw.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp68_f7jdw.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp68_f7jdw.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp68_f7jdw.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op = 0;\n    long\
    \ op2 = 0;\n    long op3 = 0;\n    long op4 = 0;\n    long op5 = 0;\n    long\
    \ op6 = 0;\n    long op7 = 0;\n    long op8 = 0;\n    long op9 = 0;\n    long\
    \ op10 = 0;\n    long op11 = 0;\n    long op12 = 0;\n    long op13 = 0;\n    long\
    \ op14 = 0;\n    long op15 = 0;\n    long op16 = 0;\n    long op17 = 0;\n    long\
    \ op18 = 0;\n    long op19 = 0;\n    long op20 = 0;\n    long op21 = 0;\n    long\
    \ op22 = 0;\n    long op23 = 0;\n    long op24 = 0;\n    long op25 = 0;\n    long\
    \ op26 = 0;\n    long op27 = 0;\n    long op28 = 0;\n    long op29 = 0;\n    long\
    \ op30 = 0;\n    long op31 = 0;\n    long op32 = 0;\n    long op33 = 0;\n    long\
    \ op34 = 0;\n    long op35 = 0;\n    long op36 = 0;\n    long op37 = 0;\n    long\
    \ op38 = 0;\n    long op39 = 0;\n    long op40 = 0;\n    long op41 = 0;\n    long\
    \ op42 = 0;\n    long op43 = 0;\n    long op44 = 0;\n    long op45 = 0;\n    long\
    \ op46 = 0;\n    long op47 = 0;\n    long op48 = 0;\n    long op49 = 0;\n    long\
    \ op50 = 0;\n    long op51 = 0;\n    long op52 = 0;\n    long op53 = 0;\n    long\
    \ op54 = 0;\n    long op55 = 0;\n    long op56 = 0;\n    long op57 = 0;\n    long\
    \ op58 = 0;\n    long op59 = 0;\n    long op60 = 0;\n    long op61 = 0;\n    long\
    \ op62 = 0;\n    long op63 = 0;\n    long op64 = 0;\n    long op65 = 0;\n    long\
    \ op66 = 0;\n    long op67 = 0;\n    long op68 = 0;\n    long op69 = 0;\n    long\
    \ op70 = 0;\n    long op71 = 0;\n    long op72 = 0;\n    long op73 = 0;\n    long\
    \ op74 = 0;\n    long op75 = 0;\n    long op76 = 0;\n    long op77 = 0;\n    long\
    \ op78 = 0;\n    long op79 = 0;\n    long op80 = 0;\n    long op81 = 0;\n    long\
    \ op82\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx3wcy3p8.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpx3wcy3p8.cpp:27:10: error: declaration\
    \ of 'long int op' shadows a parameter\n     long op = 0;\n          ^\n/tmp/tmpx3wcy3p8.cpp:109:1:\
    \ error: expected initializer before '}' token\n }\n ^\n/tmp/tmpx3wcy3p8.cpp:\
    \ In function 'int main()':\n/tmp/tmpx3wcy3p8.cpp:111:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx3wcy3p8.cpp:2:\n/tmp/tmpx3wcy3p8.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpx3wcy3p8.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpx3wcy3p8.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpx3wcy3p8.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpx3wcy3p8.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpx3wcy3p8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(size_t\
    \ i = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                break;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcicl9jw_.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpcicl9jw_.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmpcicl9jw_.cpp:\
    \ In function 'int main()':\n/tmp/tmpcicl9jw_.cpp:48:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcicl9jw_.cpp:2:\n/tmp/tmpcicl9jw_.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpcicl9jw_.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpcicl9jw_.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcicl9jw_.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcicl9jw_.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpcicl9jw_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\n\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbv32tvh.cpp: In function 'int main()':\n/tmp/tmplbv32tvh.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbv32tvh.cpp:2:\n/tmp/tmplbv32tvh.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmplbv32tvh.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmplbv32tvh.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbv32tvh.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmplbv32tvh.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplbv32tvh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7osladul.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp7osladul.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp7osladul.cpp: In function 'int main()':\n\
    /tmp/tmp7osladul.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7osladul.cpp:2:\n/tmp/tmp7osladul.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp7osladul.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp7osladul.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7osladul.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp7osladul.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp7osladul.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n \
    \   long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wg8zjpv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8wg8zjpv.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp8wg8zjpv.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp8wg8zjpv.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long AA =\
    \ 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long AA =\
    \ 0;\n    long AB = 0;\n    long AC = 0;\n    long AD\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i5tzmor.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8i5tzmor.cpp:95:10: error: redeclaration\
    \ of 'long int AA'\n     long AA = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:69:10:\
    \ error: 'long int AA' previously declared here\n     long AA = 0;\n         \
    \ ^\n/tmp/tmp8i5tzmor.cpp:96:10: error: redeclaration of 'long int AB'\n     long\
    \ AB = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:70:10: error: 'long int AB' previously\
    \ declared here\n     long AB = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:97:10: error:\
    \ redeclaration of 'long int AC'\n     long AC = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:71:10:\
    \ error: 'long int AC' previously declared here\n     long AC = 0;\n         \
    \ ^\n/tmp/tmp8i5tzmor.cpp:98:10: error: redeclaration of 'long int AD'\n     long\
    \ AD = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:72:10: error: 'long int AD' previously\
    \ declared here\n     long AD = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:99:10: error:\
    \ redeclaration of 'long int AE'\n     long AE = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:73:10:\
    \ error: 'long int AE' previously declared here\n     long AE = 0;\n         \
    \ ^\n/tmp/tmp8i5tzmor.cpp:100:10: error: redeclaration of 'long int AF'\n    \
    \ long AF = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:74:10: error: 'long int AF'\
    \ previously declared here\n     long AF = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:101:10:\
    \ error: redeclaration of 'long int AG'\n     long AG = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:75:10:\
    \ error: 'long int AG' previously declared here\n     long AG = 0;\n         \
    \ ^\n/tmp/tmp8i5tzmor.cpp:102:10: error: redeclaration of 'long int AH'\n    \
    \ long AH = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:76:10: error: 'long int AH'\
    \ previously declared here\n     long AH = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:103:10:\
    \ error: redeclaration of 'long int AI'\n     long AI = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:77:10:\
    \ error: 'long int AI' previously declared here\n     long AI = 0;\n         \
    \ ^\n/tmp/tmp8i5tzmor.cpp:104:10: error: redeclaration of 'long int AJ'\n    \
    \ long AJ = 0;\n          ^\n/tmp/tmp8i5tzmor.cpp:78:10: "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    for(size_t i =\
    \ 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n \
    \               result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkef625h8.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpkef625h8.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpkef625h8.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpkef625h8.cpp: In function\
    \ 'int main()':\n/tmp/tmpkef625h8.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkef625h8.cpp:2:\n/tmp/tmpkef625h8.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpkef625h8.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpkef625h8.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkef625h8.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpkef625h8.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpke"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA =\
    \ 0;\n    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixy7at93.cpp: In function 'int main()':\n/tmp/tmpixy7at93.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/tmp/tmpixy7at93.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpixy7at93.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpixy7at93.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixy7at93.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpixy7at93.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpixy7at93.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptapqpkfx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptapqpkfx.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    \    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1z_mue4e.cpp: In function 'int main()':\n/tmp/tmp1z_mue4e.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1z_mue4e.cpp:2:\n/tmp/tmp1z_mue4e.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp1z_mue4e.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp1z_mue4e.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1z_mue4e.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp1z_mue4e.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp1z_mue4e.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long op\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlohoqet.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpqlohoqet.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpqlohoqet.cpp: In function 'int main()':\n\
    /tmp/tmpqlohoqet.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/tmp/tmpqlohoqet.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpqlohoqet.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpqlohoqet.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqlohoqet.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpqlohoqet.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqlohoqet.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptapqpkfx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptapqpkfx.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1es7pdd.cpp: In function 'int main()':\n/tmp/tmpb1es7pdd.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1es7pdd.cpp:2:\n/tmp/tmpb1es7pdd.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpb1es7pdd.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpb1es7pdd.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb1es7pdd.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpb1es7pdd.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb1es7pdd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long temp\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n \
    \   auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprf2z3wpq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmprf2z3wpq.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmprf2z3wpq.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmprf2z3wpq.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for (size_t\
    \ i = 0; i < op.size(); i++) {\n        switch (op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                assert(false);\n\
    \                break;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_grivggk.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmp_grivggk.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmp_grivggk.cpp:25:22: error: switch quantity not an integer\n\
    \         switch (op[i]) {\n                      ^\n/tmp/tmp_grivggk.cpp: In\
    \ function 'int main()':\n/tmp/tmp_grivggk.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_grivggk.cpp:2:\n/tmp/tmp_grivggk.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp_grivggk.cpp:53:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp_grivggk.cpp:53:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_grivggk.cpp:53:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp_grivggk.cpp:53:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n\
    \    long op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n   \
    \ long op_index4 = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long\
    \ op_size5 = 0;\n    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7\
    \ = 0;\n    long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n\
    \    long op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n \
    \   long op_size10 = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n \
    \   long op_index12 = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n\
    \    long op_size13 = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n\
    \    long op_index15 = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n\
    \    long op_size16 = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n\
    \    long op_index18 = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n\
    \    long op_size19 = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n\
    \    long op_index21 = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n\
    \    long op_size22 = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n\
    \    long op_index24 = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n\
    \    long op_size25 = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n\
    \    long op_index27 = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n\
    \    long op_size28 = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n\
    \    long op_index30 = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n\
    \    long op_size31 = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n\
    \    long op_index33 = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n\
    \    long op_size34 = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n\
    \    long op_index36 = 0;\n    long op_size36 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41i1rqsw.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp41i1rqsw.cpp:98:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp41i1rqsw.cpp: In function 'int main()':\n\
    /tmp/tmp41i1rqsw.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/tmp/tmp41i1rqsw.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp41i1rqsw.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp41i1rqsw.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp41i1rqsw.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp41i1rqsw.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp41i1rqsw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                assert(false);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_enuogl.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpq_enuogl.cpp:25:21: error: switch quantity\
    \ not an integer\n         switch(op[i]) {\n                     ^\n/tmp/tmpq_enuogl.cpp:\
    \ In function 'int main()':\n/tmp/tmpq_enuogl.cpp:48:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq_enuogl.cpp:2:\n/tmp/tmpq_enuogl.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpq_enuogl.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpq_enuogl.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq_enuogl.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpq_enuogl.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpq_enuogl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long sum\
    \ = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu = 0;\n\
    \    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n    long\
    \ Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n    long Ddd\
    \ = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n    long Hhh\
    \ = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n    long Lll\
    \ = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n    long Ppp\
    \ = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n    long Ttt\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0vp4yidr.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp0vp4yidr.cpp:117:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp0vp4yidr.cpp: In function 'int main()':\n\
    /tmp/tmp0vp4yidr.cpp:119:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0vp4yidr.cpp:2:\n/tmp/tmp0vp4yidr.cpp:120:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp0vp4yidr.cpp:120:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp0vp4yidr.cpp:120:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0vp4yidr.cpp:120:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp0vp4yidr.cpp:120:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp0vp4yidr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    long temp\
    \ = 0;\n    long op_index = 0;\n    long op_index2 = 0;\n    long op_index3 =\
    \ 0;\n    long op_index4 = 0;\n    long op_index5 = 0;\n    long op_index6 = 0;\n\
    \    long op_index7 = 0;\n    long op_index8 = 0;\n    long op_index9 = 0;\n \
    \   long op_index10 = 0;\n    long op_index11 = 0;\n    long op_index12 = 0;\n\
    \    long op_index13 = 0;\n    long op_index14 = 0;\n    long op_index15 = 0;\n\
    \    long op_index16 = 0;\n    long op_index17 = 0;\n    long op_index18 = 0;\n\
    \    long op_index19 = 0;\n    long op_index20 = 0;\n    long op_index21 = 0;\n\
    \    long op_index22 = 0;\n    long op_index23 = 0;\n    long op_index24 = 0;\n\
    \    long op_index25 = 0;\n    long op_index26 = 0;\n    long op_index27 = 0;\n\
    \    long op_index28 = 0;\n    long op_index29 = 0;\n    long op_index30 = 0;\n\
    \    long op_index31 = 0;\n    long op_index32 = 0;\n    long op_index33 = 0;\n\
    \    long op_index34 = 0;\n    long op_index35 = 0;\n    long op_index36 = 0;\n\
    \    long op_index37 = 0;\n    long op_index38 = 0;\n    long op_index39 = 0;\n\
    \    long op_index40 = 0;\n    long op_index41 = 0;\n    long op_index42 = 0;\n\
    \    long op_index43 = 0;\n    long op_index44 = 0;\n    long op_index45 = 0;\n\
    \    long op_index46 = 0;\n    long op_index47 = 0;\n    long op_index48 = 0;\n\
    \    long op_index49 = 0;\n    long op_index50 = 0;\n    long op_index51 = 0;\n\
    \    long op_index52 = 0;\n    long op_index53 = 0;\n    long op_index54 = 0;\n\
    \    long op_index55 = 0;\n    long op_index56 = 0;\n    long op_index57 = 0;\n\
    \    long op_index58 = 0;\n    long op_index59 = 0;\n    long op_index60 = 0;\n\
    \    long op_index61 = 0;\n    long op_index62 = 0;\n    long op_index63 = 0;\n\
    \    long op_index64 = 0;\n    long op_index65 = 0;\n    long op_index66 = 0;\n\
    \    long op_index67 = 0;\n    long op_index68 = 0;\n    long op_index69 = 0;\n\
    \    long op_index70 = 0;\n    long op_index71 = 0;\n    long op_index\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpvyqdux.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpvpvyqdux.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpvpvyqdux.cpp: In function 'int main()':\n\
    /tmp/tmpvpvyqdux.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/tmp/tmpvpvyqdux.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpvpvyqdux.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpvpvyqdux.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvpvyqdux.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpvpvyqdux.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvpvyqdux.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n    long\
    \ op_size2 = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4\
    \ = 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n\
    \    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n  \
    \  long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n    long\
    \ op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10\
    \ = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12\
    \ = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13\
    \ = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15\
    \ = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16\
    \ = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18\
    \ = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19\
    \ = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21\
    \ = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22\
    \ = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24\
    \ = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25\
    \ = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27\
    \ = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28\
    \ = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30\
    \ = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31\
    \ = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33\
    \ = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34\
    \ = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36\
    \ = 0;\n    long op_size36 = 0;\n    long op\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7l8y6l3.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpm7l8y6l3.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpm7l8y6l3.cpp: In function 'int main()':\n\
    /tmp/tmpm7l8y6l3.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm7l8y6l3.cpp:2:\n/tmp/tmpm7l8y6l3.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpm7l8y6l3.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpm7l8y6l3.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm7l8y6l3.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpm7l8y6l3.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm7l8y6l3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long op_index\
    \ = 0;\n    long op_size = op.size();\n    long op_size = op.size();\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptapqpkfx.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmptapqpkfx.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmptapqpkfx.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmptapqpkfx.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = 0;\n    long sum\
    \ = 0;\n    long product = 1;\n    long floordiv = 0;\n    long power = 1;\n \
    \   long exponent = 1;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n\
    \    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long\
    \ G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n\
    \    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long\
    \ P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n\
    \    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long\
    \ Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n\
    \    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long\
    \ AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL =\
    \ 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n\
    \    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long\
    \ AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY =\
    \ 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n\
    \    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long\
    \ BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL =\
    \ 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n\
    \    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long\
    \ BU = 0;\n    long BV = 0;\n    long BW = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05te405o.cpp: In function 'int main()':\n/tmp/tmp05te405o.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp05te405o.cpp:2:\n/tmp/tmp05te405o.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp05te405o.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp05te405o.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp05te405o.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp05te405o.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp05te405o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code goes here\n    long result = 0;\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            case '**':\n                result %= operand[i];\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqstmqywk.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpqstmqywk.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpqstmqywk.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpqstmqywk.cpp: In function\
    \ 'int main()':\n/tmp/tmpqstmqywk.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqstmqywk.cpp:2:\n/tmp/tmpqstmqywk.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpqstmqywk.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpqstmqywk.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqstmqywk.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpqstmqywk.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = 0;\n    long op_index = 0;\n    long op_size =\
    \ op.size();\n    long op_value = op[op_index];\n    long op_value_size = op_value.size();\n\
    \    long op_value_value = op_value[op_value_size-1];\n    long op_value_value_size\
    \ = op_value_value.size();\n    long op_value_value_value = op_value_value[op_value_value_size-1];\n\
    \    long op_value_value_value_size = op_value_value_value.size();\n    long op_value_value_value_value\
    \ = op_value_value_value[op_value_value_value_size-1];\n    long op_value_value_value_value_size\
    \ = op_value_value_value_value.size();\n    long op_value_value_value_value_value\
    \ = op_value_value_value_value[op_value_value_value_value_size-1];\n    long op_value_value_value_value_value_size\
    \ = op_value_value_value_value_value.size();\n    long op_value_value_value_value_value_value\
    \ = op_value_value_value_value_value[op_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value_value.size();\n\
    \    long op_value_value_value_value_value_value = op_value_value_value_value_value_value_value_value[op_value_value_value_value_value_value_size-1];\n\
    \    long op_value_value_value_value_value_size = op_value_value_value_value_value_value_value_value.size();\n\
    \    long op\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv59nh8dz.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpv59nh8dz.cpp:25:32: error: cannot convert\
    \ 'std::basic_string<char>' to 'long int' in initialization\n     long op_value\
    \ = op[op_index];\n                                ^\n/tmp/tmpv59nh8dz.cpp:26:35:\
    \ error: request for member 'size' in 'op_value', which is of non-class type 'long\
    \ int'\n     long op_value_size = op_value.size();\n                         \
    \          ^\n/tmp/tmpv59nh8dz.cpp:27:51: error: invalid types 'long int[long\
    \ int]' for array subscript\n     long op_value_value = op_value[op_value_size-1];\n\
    \                                                   ^\n/tmp/tmpv59nh8dz.cpp:28:47:\
    \ error: request for member 'size' in 'op_value_value', which is of non-class\
    \ type 'long int'\n     long op_value_value_size = op_value_value.size();\n  \
    \                                             ^\n/tmp/tmpv59nh8dz.cpp:29:69: error:\
    \ invalid types 'long int[long int]' for array subscript\n     long op_value_value_value\
    \ = op_value_value[op_value_value_size-1];\n                                 \
    \                                    ^\n/tmp/tmpv59nh8dz.cpp:30:59: error: request\
    \ for member 'size' in 'op_value_value_value', which is of non-class type 'long\
    \ int'\n     long op_value_value_value_size = op_value_value_value.size();\n \
    \                                                          ^\n/tmp/tmpv59nh8dz.cpp:31:87:\
    \ error: invalid types 'long int[long int]' for array subscript\n     long op_value_value_value_value\
    \ = op_value_value_value[op_value_value_value_size-1];\n                     \
    \                                                                  ^\n/tmp/tmpv59nh8dz.cpp:32:71:\
    \ error: request for member 'size' in 'op_value_value_value_value', which is of\
    \ non-class type 'long int'\n     long op_value_value_value_value_size = op_value_value_value_value.size();\n\
    \                                                                       ^\n/tmp/tmpv59nh8dz.cpp:33:105:\
    \ error: invalid types 'long int[long int]' for array subscript\n     l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long\
    \ E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n\
    \    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long\
    \ N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n\
    \    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long\
    \ W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long\
    \ FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ =\
    \ 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n\
    \    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long\
    \ SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW =\
    \ 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n\
    \    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n\
    \    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n\
    \    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n\
    \    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n\
    \    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n\
    \    long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifbopx8z.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpifbopx8z.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpifbopx8z.cpp: In function 'int main()':\n\
    /tmp/tmpifbopx8z.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpifbopx8z.cpp:2:\n/tmp/tmpifbopx8z.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpifbopx8z.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpifbopx8z.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpifbopx8z.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpifbopx8z.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpifbopx8z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
