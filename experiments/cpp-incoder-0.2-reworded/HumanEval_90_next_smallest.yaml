name: HumanEval_90_next_smallest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of\
  \ integers.\n// Write a function next_smallest() that returns the 2nd smallest element\
  \ of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n\
  // std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n\
  // std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1})))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35,\
  \ (long)34, (long)12, (long)-45}))) == -35);\n}\n"
completions: ["    if (lst.size() == 0)\n        return std::nullopt;\n    auto it\
    \ = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n    \
    \    return std::nullopt;\n    return *it;", "    if (lst.size() == 0) {\n   \
    \     return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto it2 =\
    \ lst.begin();\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2)\
    \ {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n   \
    \ if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    long min = lst[0];\n    for (long i : lst) {\n        if (i < min)\n    \
    \        min = i;\n    }\n    return min;", "    if (lst.size() == 0)\n      \
    \  return std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\n\
    \        ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    auto\
    \ prev = *it;\n    ++it;\n    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    auto next = *it;\n    if (next < prev)\n  \
    \      return std::nullopt;\n    return next;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [&smallest](long\
    \ x) { return x < smallest; });\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    smallest = *it;\n    return smallest;", "    if (lst.size() == 0)\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n\
    \    if (*it < *it2)\n        ++it;\n    else\n        ++it2;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (it2 == lst.end())\n        return *it;\n\
    \    if (*it < *it2)\n        ++it;\n    else\n        ++it2;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (it2 == lst.end())\n        return *it;\n\
    \    if (*it < *it2)\n        ++it;\n    else\n        ++it2;\n    return *it2;",
  "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        } else if (i > max) {\n   \
    \         max = i;\n        }\n    }\n    return std::optional<long>(max);", " \
    \   if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n\
    \        if (*it < prev) {\n            return prev;\n        }\n        prev\
    \ = *it;\n    }\n    return prev;", "    // Your code here\n    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev)\n\
    \            return prev;\n        prev = *it;\n    }\n    return prev;", "  \
    \  if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto next = std::next(it);\n    while (next != lst.end() && next < lst.end())\
    \ {\n        if (*next < *it)\n            ++it;\n        else\n            return\
    \ *it;\n        ++next;\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n\
    \    for (long i : lst) {\n        if (i < smallest) {\n            smallest =\
    \ i;\n        }\n    }\n    return smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator it = std::find_if(lst.begin(),\
    \ lst.end(), [&smallest](long x) { return x < smallest; });\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    smallest = *it;\n    return smallest;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end())\n        return std::nullopt;\n    return\
    \ *it;", "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it\
    \ = lst.begin();\n    auto prev = *it;\n    ++it;\n    while (it != lst.end())\
    \ {\n        if (*it < prev)\n            break;\n        prev = *it;\n      \
    \  ++it;\n    }\n    if (it == lst.end())\n        return std::nullopt;\n    return\
    \ *it;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n   \
    \ if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    for (long i\
    \ = lst.size() - 1; i >= 0; --i) {\n        if (lst[i] < smallest) {\n       \
    \     smallest = lst[i];\n        }\n    }\n    return smallest;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto last = lst.end();\n    auto next = std::next(it);\n    if (*it < std::min(*next,\
    \ *last)) {\n        return *it;\n    }\n    for (; next != last; ++it, ++next)\
    \ {\n        if (*it < std::min(*next, *last)) {\n            return *it;\n  \
    \      }\n    }\n    return std::nullopt;", "    if(lst.size() == 0)\n       \
    \ return std::nullopt;\n    long min = lst[0];\n    long min_index = -1;\n   \
    \ for(size_t i = 1; i < lst.size(); ++i) {\n        if(lst[i] < min) {\n     \
    \       min = lst[i];\n            min_index = i;\n        }\n    }\n    if(min_index\
    \ == lst.size() - 1)\n        return std::nullopt;\n    return lst[min_index +\
    \ 1];", "    long smallest = lst[0];\n    long second_smallest = lst[1];\n   \
    \ for (long i : lst) {\n        if (i < smallest) {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        } else if (i > second_smallest)\
    \ {\n            second_smallest = i;\n        }\n    }\n    return second_smallest\
    \ == smallest ? std::nullopt : second_smallest;", "    // Your code here\n   \
    \ long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (long i\
    \ = 2; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n            second_smallest\
    \ = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest\
    \ == lst.size() ? std::nullopt : second_smallest;", "    if (lst.empty())\n  \
    \      return std::nullopt;\n    auto it = lst.begin();\n    auto next = std::next(it);\n\
    \    if (*next < *it)\n        return *it;\n    return *next;", "    long min\
    \ = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ min) {\n            min = i;\n        }\n        if (i > max) {\n          \
    \  max = i;\n        }\n    }\n    if (min == max) {\n        return std::nullopt;\n\
    \    }\n    return max;", "    // Your code here\n    long min = lst[0];\n   \
    \ long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n     \
    \       min = i;\n        } else if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return std::optional<long>(max);", "    if (lst.empty())\n  \
    \      return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    auto next = *it;\n    if (*it < next)\n        ++it;\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    auto prev = *it;\n\
    \    if (*it < prev)\n        ++", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n\
    \    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n       \
    \ ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if\
    \ (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n \
    \       ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n\
    \    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n \
    \       ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n\
    \    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n \
    \       ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n\
    \    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it < *it2) {\n \
    \       ++it;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n\
    \    std::vector<long> rest = lst;\n    rest.erase(std::remove(rest.begin(), rest.end(),\
    \ smallest), rest.end());\n    if (rest.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    return next_smallest(rest);", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n\
    \    auto it = std::find(lst.begin(), lst.end(), smallest);\n    if (it != lst.end())\
    \ {\n        smallest = *it;\n    }\n    return smallest;", "    // Your code\
    \ here\n    long smallest = lst[0];\n    long second_smallest = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < smallest) {\n            second_smallest =\
    \ smallest;\n            smallest = i;\n        } else if (i == smallest) {\n\
    \            second_smallest = i;\n        }\n    }\n    return second_smallest\
    \ == smallest ? std::nullopt : second_smallest;", "    if (lst.size() == 0)\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n\
    \    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it == *it2)\n\
    \        return std::nullopt;\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n\
    \    }\n    if (*it == *it2)\n        return std::nullopt;\n    if (*it < *it2)\
    \ {\n        ++it;\n        ++it2;\n    }\n    if (*it == *it2)\n        return\
    \ std::nullopt;\n    return *it2;", "    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for(long i : lst) {\n   \
    \     if(i < min)\n            min = i;\n        if(i > max)\n            max\
    \ = i;\n    }\n    if(min == max)\n        return std::nullopt;\n    return max;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n\
    \        if (*it < prev) {\n            return prev;\n        }\n        prev\
    \ = *it;\n    }\n    return prev;", "    if (lst.size() == 0) return std::nullopt;\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    return\
    \ max == min ? std::nullopt : max;", "    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    if (min\
    \ == max) {\n        return std::nullopt;\n    }\n    return max;", "    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    if (lst.size() ==\
    \ 1) {\n        return std::nullopt;\n    }\n    std::vector<long> rest = lst;\n\
    \    rest.erase(std::remove(rest.begin(), rest.end(), smallest), rest.end());\n\
    \    return next_smallest(rest);", "    if (lst.empty())\n        return std::nullopt;\n\
    \    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    lst.erase(it);\n    return *it;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   if (*it < lst.front()) {\n        ++it;\n    }\n    auto res = *it;\n    if\
    \ (it == lst.end()) {\n        return res;\n    }\n    if (*it < lst.back()) {\n\
    \        ++it;\n    }\n    if (it == lst.end()) {\n        return res;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (it == lst.end()) {\n\
    \        return res;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (it == lst.end()) {\n        return res;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (it == lst.end()) {\n        return res;\n \
    \   }\n    if (*it < lst.back()) {\n        ++it;\n    }\n    if (it == lst.end())\
    \ {\n        return res;\n    }\n    if (*it < lst.back()) {\n        ++it;\n\
    \    }\n    if (it == lst.end()) {\n        return res;\n    }\n    if (*it <\
    \ lst.back()) {\n        ++it;\n    }\n    if (it == lst.end()) {\n        return\
    \ res;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n    if (it ==\
    \ lst.end()) {\n        return res;\n    }\n    if (*it < lst.back()) {\n    \
    \    ++it;\n    }\n    if (it == lst.end()) {\n        return res;\n    }\n  \
    \  if (*it < lst.back()) {\n        ++it;\n    }\n    if (it == lst.end()) {\n\
    \        return res;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (it == lst.end()) {\n        return res;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (it == lst.end()) {\n        return res;\n \
    \   }\n    if (*it < lst.back()) {\n        ++it;\n    }\n    if (it == lst.end())\
    \ {\n        return res;\n    }\n    if (*it < lst.back()) {\n        ++it;\n\
    \    }\n    if (it == lst.end()) {\n        return res;\n    }\n    if (*it <\
    \ lst.back()) {\n        ++it;\n    }\n    if (it == lst.end()) {\n        return\
    \ res;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n    if (it ",
  "    // Your code here\n    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        } else\
    \ if (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto it2 = lst.begin();\n    if (*it < *it2)\n        ++it;\n    if (*it\
    \ < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it <\
    \ *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n\
    \        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n  \
    \      ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n    \
    \    ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n      \
    \  ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n\
    \    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n  \
    \  if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if\
    \ (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it\
    \ < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it <\
    \ *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n\
    \        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n  \
    \      ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n    \
    \    ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n      \
    \  ++it2;\n    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n\
    \    if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n  \
    \  if (*it < *it2)\n        ++it2;\n    if (*it < *it2)\n        ++it2;\n    if\
    \ (", "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long\
    \ index = std::distance(std::begin(lst), std::find(std::begin(lst), std::end(lst),\
    \ smallest));\n    if (index == lst.size()) {\n        return std::nullopt;\n\
    \    }\n    return lst[index + 1];", "    // Your code here\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    if (min == max) {\n        return std::nullopt;\n    }\n\
    \    return max;", "    if (lst.size() == 0)\n        return std::nullopt;\n \
    \   long min_val = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(),\
    \ lst.end(), min_val);\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    lst.erase(it);\n    return *std::min_element(lst.begin(), lst.end());", " \
    \   if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n         \
    \   smallest = i;\n        }\n    }\n    return smallest;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev)\n\
    \            return std::nullopt;\n        prev = *it;\n    }\n    return prev;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n\
    \        if (*it < prev) {\n            return prev;\n        }\n        prev\
    \ = *it;\n    }\n    return prev;", "    if(lst.size() == 0) return std::nullopt;\n\
    \    long smallest = *lst.begin();\n    for(long i = 1; i < lst.size(); i++) {\n\
    \        if(smallest<lst[i]) smallest = lst[i];\n    }\n    return smallest;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto it2 = lst.begin();\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n", "    if (lst.empty())\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n\
    \    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it ", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    for (long i : lst) {\n        if (i <\
    \ smallest) {\n            smallest = i;\n        }\n    }\n    return smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    return std::nullopt if\
    \ second_smallest == smallest;\n    return second_smallest;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n\
    \    for (long i : lst) {\n        if (i < smallest) {\n            smallest =\
    \ i;\n        }\n    }\n    return smallest;", "    if (lst.size() == 0) {\n \
    \       return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    auto next = *it;\n    if (prev < next) {\n        return prev;\n \
    \   }\n    return next;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n    if (*it <\
    \ *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n\
    \    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n \
    \       ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \ }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n   \
    \ }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n    \
    \    ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it >\
    \ *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n\
    \    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n       \
    \ ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if\
    \ (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n \
    \       ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \ }\n    if (*it > *it2) {\n        ++it2;\n    }\n", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator it = std::find_if(lst.begin(),\
    \ lst.end(), [&smallest](long x) { return x < smallest; });\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    long next = *it;\n    lst.erase(it);\n\
    \    return next;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    for (;\
    \ it != lst.end(); ++it) {\n        if (*it < prev) {\n            return std::nullopt;\n\
    \        }\n        prev = *it;\n    }\n    return prev;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    std::vector<long>::iterator\
    \ it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n \
    \       return std::nullopt;\n    std::vector<long>::iterator it2 = std::min_element(lst.begin(),\
    \ it);\n    if (it2 == lst.end())\n        return std::nullopt;\n    if (*it <\
    \ smallest)\n        return smallest;\n    if (*it2 < smallest)\n        return\
    \ *it2;\n    return std::nullopt;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        }\n    }\n    return min;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    for (size_t i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    // Your code here\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long secondSmallest = *std::min_element(lst.begin() + 1, lst.end());\n  \
    \  if (smallest == secondSmallest) {\n        return secondSmallest;\n    }\n\
    \    return std::nullopt;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    for (++it; it !=\
    \ lst.end(); ++it) {\n        if (*it < prev) {\n            return std::nullopt;\n\
    \        }\n        prev = *it;\n    }\n    return prev;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto next = std::next(it);\n    if (*next < *it) {\n        std::iter_swap(it,\
    \ next);\n    }\n    return *it;", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    long smallest = lst[0];\n    for (long i : lst)\n        if (i < smallest)\n\
    \            smallest = i;\n    return smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n\
    \    if (second_smallest == smallest)\n        return std::nullopt;\n    return\
    \ second_smallest;", "    auto it = lst.begin();\n    auto end = lst.end();\n\
    \    if (it == end) {\n        return std::nullopt;\n    }\n    if (*it == *std::next(it))\
    \ {\n        ++it;\n    }\n    if (it == end) {\n        return std::nullopt;\n\
    \    }\n    if (*it < *std::next(it)) {\n        return *it;\n    }\n    return\
    \ *std::next(it);", "    if (lst.size() == 0) return std::nullopt;\n    auto it\
    \ = lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it == lst.end()) return\
    \ std::nullopt;\n    auto next = *it;\n    if (next < prev) return std::nullopt;\n\
    \    return next;", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    return *it;", "    if (lst.size() == 0)\n \
    \       return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    ++it;\n    if (it == lst.end())\n        return prev;\n    while (it != lst.end())\
    \ {\n        if (*it < prev)\n            return prev;\n        prev = *it;\n\
    \        ++it;\n    }\n    return prev;", "    if (lst.size() == 0) {\n      \
    \  return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    if (*it < prev) {\n        return prev;\n    }\n    return *it;", "    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(),\
    \ lst.end(), [&smallest](long x) { return x < smallest; });\n    if (it != lst.end())\
    \ {\n        smallest = *it;\n    }\n    return smallest;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    if (*it\
    \ < lst.front())\n        ++it;\n    if (*it == lst.front())\n        return std::nullopt;\n\
    \    if (*it < lst.back())\n        ++it;\n    if (*it == lst.back())\n      \
    \  return std::nullopt;\n    return *it;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [&smallest](long\
    \ x) { return x < smallest; });\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    smallest = *it;\n    return smallest;", "    if (lst.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find(lst.begin(), lst.end(), min_val);\n   \
    \ if (it == lst.end()) {\n        return std::nullopt;\n    }\n    lst.erase(it);\n\
    \    return *std::min_element(lst.begin(), lst.end());", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto\
    \ prev = *it;\n    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it\
    \ < prev) {\n            return prev;\n        }\n        prev = *it;\n    }\n\
    \    return prev;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    for (;\
    \ it != lst.end(); ++it) {\n        if (*it < prev) {\n            return prev;\n\
    \        }\n        prev = *it;\n    }\n    return prev;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    long second_smallest = *std::min_element(lst.begin()\
    \ + 1, lst.end());\n    if (second_smallest == smallest)\n        return std::nullopt;\n\
    \    return second_smallest;", "    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    if (min == max) {\n        return\
    \ std::nullopt;\n    }\n    return lst[std::distance(std::begin(lst), std::lower_bound(std::begin(lst),\
    \ std::end(lst), min))];", "    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    if (min == max)\
    \ {\n        return std::nullopt;\n    }\n    if (min < max) {\n        return\
    \ min;\n    }\n    return max;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    if (*it < lst.front()) {\n        ++it;\n\
    \    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.back()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.back()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.back())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    if (lst.empty())\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    for (++it; it != lst.end(); ++it) {\n        if (*it < prev)\n          \
    \  return std::nullopt;\n        prev = *it;\n    }\n    return prev;", "    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    long index = std::distance(std::begin(lst),\
    \ std::find(std::begin(lst), std::end(lst), smallest));\n    if (index == lst.size()\
    \ - 1) {\n        return std::nullopt;\n    }\n    return lst[index + 1];", " \
    \   long smallest = lst[0];\n    long second_smallest = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        } else if (i > second_smallest) {\n      \
    \      second_smallest = i;\n        }\n    }\n    return second_smallest == lst[0]\
    \ ? std::nullopt : second_smallest;", "    if (lst.empty()) return std::nullopt;\n\
    \    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\
    \ return std::nullopt;\n    return *it;", "    if (lst.empty()) return std::nullopt;\n\
    \    long smallest = *std::min_element(lst.begin(), lst.end());\n    std::vector<long>\
    \ rest = lst;\n    rest.erase(std::remove_if(lst.begin(), lst.end(), [smallest](long\
    \ x) { return x < smallest; }), lst.end());\n    if (rest.empty()) return std::nullopt;\n\
    \    return next_smallest(rest);", "    // Your code here\n    long smallest =\
    \ lst[0];\n    long second_smallest = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < smallest) {\n            second_smallest = smallest;\n          \
    \  smallest = i;\n        } else if (i < second_smallest) {\n            second_smallest\
    \ = i;\n        }\n    }\n    return second_smallest == lst[0] ? std::nullopt\
    \ : second_smallest;", "    if (lst.empty()) return std::nullopt;\n    auto it\
    \ = lst.begin();\n    auto prev = *it;\n    for (++it; it != lst.end(); ++it)\
    \ {\n        if (*it < prev) return std::nullopt;\n        prev = *it;\n    }\n\
    \    return prev;", "    long min = lst[0];\n    long max = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    return std::optional<long>(max);",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    if (*it < lst.front()) {\n        ++it;\n    }\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    auto prev = *it;\n\
    \    ++it;\n    if (*it < prev) {\n        ++it;\n    }\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    auto next = *it;\n    if (next <\
    \ prev) {\n        ++it;\n    }\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    return next;", "    if (lst.empty()) return std::nullopt;\n    auto\
    \ it = lst.begin();\n    auto prev = *it;\n    ++it;\n    for (; it != lst.end();\
    \ ++it) {\n        if (*it < prev) {\n            prev = *it;\n        }\n   \
    \ }\n    return prev;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n \
    \   if (second_smallest == smallest)\n        return std::nullopt;\n    return\
    \ second_smallest;", "    long min = lst[0];\n    long max = lst[0];\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    if (min ==\
    \ max) {\n        return std::nullopt;\n    }\n    return max;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto it2 = lst.begin();\n    if (*it < *it2) {\n        ++it;\n    }\n   \
    \ if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n   \
    \ }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n    \
    \    ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it >\
    \ *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n\
    \    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n       \
    \ ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if\
    \ (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n \
    \       ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it\
    \ > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \ }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n   \
    \ }\n    if (*it < *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n    \
    \    ++it2;\n    }\n", "    // Your code here\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n\
    \    if (second_smallest == smallest) {\n        return std::nullopt;\n    }\n\
    \    return second_smallest;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n    if (*it <\
    \ *it2) {\n        it2 = lst.end();\n    }\n    if (it2 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it3 = it2;\n    while (it3 != lst.end()\
    \ && *it3 < *it2) {\n        it3++;\n    }\n    if (it3 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it4 = it3;\n    while (it4 != lst.end()\
    \ && *it4 < *it2) {\n        it4++;\n    }\n    if (it4 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it5 = it4;\n    while (it5 != lst.end()\
    \ && *it5 < *it2) {\n        it5++;\n    }\n    if (it5 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it6 = it5;\n    while (it6 != lst.end()\
    \ && *it6 < *it2) {\n        it6++;\n    }\n    if (it6 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it7 = it6;\n    while (it7 != lst.end()\
    \ && *it7 < *it2) {\n        it7++;\n    }\n    if (it7 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it8 = it7;\n    while (it8 != lst.end()\
    \ && *it8 < *it2) {\n        it8++;\n    }\n    if (it8 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it9 = it8;\n    while (it9 != lst.end()\
    \ && *it9 < *it2) {\n        it9++;\n    }\n    if (it9 == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    auto it10 = it9;\n    while (it10 != lst.end()\
    \ && *it10 < *it2) {\n        it10++;\n    }\n    if (it10 == lst.end()) {\n \
    \       return std::nullopt;\n    }\n    auto it11 = it10;\n    while (it11 !=\
    \ lst.end() && *it11 < *it2) {\n        it11++;\n    }\n    if (it11 == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    auto it12 = it11;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    long second_smallest = *std::min_element(lst.begin()\
    \ + 1, lst.end());\n    if (second_smallest == smallest) {\n        return std::nullopt;\n\
    \    }\n    return second_smallest;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    auto it = lst.begin();\n    auto next = std::next(it);\n\
    \    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n    \
    \    ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next\
    \ < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n\
    \    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n\
    \        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if\
    \ (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n\
    \    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n\
    \        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if\
    \ (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n\
    \    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n\
    \        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if\
    \ (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n\
    \    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n\
    \        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if\
    \ (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n\
    \    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n\
    \        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if\
    \ (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n\
    \    }\n    if (*next < *it) {\n        ++next;\n    }\n    if (*next < *it) {\n\
    \        ++next;\n    }\n    if (*next < *it) {\n        ++next;\n    }\n    if\
    \ (*next < *it) {\n        ++next;\n    }\n    if (*next < *", "    // Your code\
    \ here\n    long smallest = *std::min_element(lst.begin(), lst.end());\n    long\
    \ second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_smallest\
    \ == smallest)\n        return std::nullopt;\n    return second_smallest;", " \
    \   long smallest = *std::min_element(lst.begin(), lst.end());\n    auto it =\
    \ std::find_if(lst.begin(), lst.end(), [&smallest](long x) { return x < smallest;\
    \ });\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    smallest\
    \ = *it;\n    auto it2 = std::find_if(lst.begin(), lst.end(), [&smallest](long\
    \ x) { return x < smallest; });\n    if (it2 == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    return *it2;", "    auto it = lst.begin();\n    auto end = lst.end();\n\
    \    if (it == end) return std::nullopt;\n    auto next = std::min_element(it,\
    \ end);\n    if (*next == *end) return std::nullopt;\n    return *next;", "  \
    \  long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        } else if (i > max) {\n   \
    \         max = i;\n        }\n    }\n    return std::optional<long>(max);", " \
    \   if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) return std::nullopt;\n    return *it;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin(), lst.begin() + 1);\n    return second_smallest\
    \ < smallest ? second_smallest : std::nullopt;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n\
    \    if (second_smallest == smallest)\n        return std::nullopt;\n    return\
    \ second_smallest;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for\
    \ (size_t i = 2; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n  \
    \          second_smallest = smallest;\n            smallest = lst[i];\n     \
    \   } else if (lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    return second_smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find(lst.begin(), lst.end(), smallest);\n  \
    \  if (it == lst.end())\n        return std::nullopt;\n    lst.erase(it);\n  \
    \  return smallest;", "    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    auto it = lst.begin();\n    auto it2 = lst.begin();\n    for(; it2 != lst.end();\
    \ ++it2) {\n        if(*it2 < *it) {\n            it = it2;\n        }\n    }\n\
    \    return *it;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long min_val = *std::min_element(lst.begin(), lst.end());\n    long\
    \ second_min_val = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_min_val\
    \ == min_val) {\n        return std::nullopt;\n    }\n    return second_min_val;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    if (*it < lst.front()) {\n        ++it;\n    }\n    auto prev\
    \ = *it;\n    ++it;\n    if (*it < lst.front()) {\n        ++it;\n    }\n    if\
    \ (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front()) {\n\
    \        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n  \
    \  if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;\n    }\n    if (*it < lst.front())\
    \ {\n        ++it;\n    }\n    if (*it < lst.front()) {\n        ++it;\n    }\n\
    \    if (*it < lst.front()) {\n        ++it;", "    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        } else if (i > max) {\n            max = i;\n        }\n\
    \    }\n    if (min == max) {\n        return std::nullopt;\n    }\n    return\
    \ max;", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n  \
    \  auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    if (*it < prev) {\n        return\
    \ std::nullopt;\n    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    if (*it < prev) {\n        return std::nullopt;\n\
    \    }\n    prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }", "    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long second_smallest = *std::min_element(lst.begin(), lst.end(), [&smallest](long\
    \ a, long b){return (a<smallest?a:smallest) < (b<smallest?b:smallest);});\n  \
    \  return second_smallest == smallest ? std::nullopt : second_smallest;", "  \
    \  long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_smallest ==\
    \ smallest)\n        return std::nullopt;\n    return second_smallest;", "   \
    \ if (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n        if (*it\
    \ < prev)\n            return std::nullopt;\n        prev = *it;\n    }\n    return\
    \ prev;", "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    if (min == max) {\n        return\
    \ std::nullopt;\n    }\n    return max;", "    if (lst.size() == 0) {\n      \
    \  return std::nullopt;\n    }\n    long smallest = *lst.begin();\n    long second_smallest\
    \ = *lst.begin();\n    for (auto it = lst.begin() + 1; it != lst.end(); ++it)\
    \ {\n        if (*it < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = *it;\n        } else if (*it < second_smallest) {\n  \
    \          second_smallest = *it;\n        }\n    }\n    return second_smallest;",
  "    auto it = lst.begin();\n    auto it2 = lst.begin();\n    long smallest = *it;\n\
    \    long smallest2 = *it2;\n    it++;\n    it2++;\n    while (it != lst.end()\
    \ && it2 != lst.end()) {\n        if (*it < *it2) {\n            smallest = *it;\n\
    \            it++;\n        } else if (*it > *it2) {\n            smallest2 =\
    \ *it2;\n            it2++;\n        } else {\n            it++;\n           \
    \ it2++;\n        }\n    }\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    } else if (it2 == lst.end()) {\n        return smallest;\n    } else {\n\
    \        return smallest2;\n    }", "    if (lst.empty()) return std::nullopt;\n\
    \    auto it = lst.begin();\n    auto it2 = lst.begin();\n    if (*it < *it2)\
    \ it2 = it;\n    ++it2;\n    if (it2 == lst.end()) return std::nullopt;\n    if\
    \ (*it2 < *it) return std::nullopt;\n    ++it;\n    if (it == lst.end()) return\
    \ std::nullopt;\n    if (*it < *it2) it2 = it;\n    ++it2;\n    if (it2 == lst.end())\
    \ return std::nullopt;\n    if (*it2 < *it) return std::nullopt;\n    ++it;\n\
    \    if (it == lst.end()) return std::nullopt;\n    if (*it < *it2) it2 = it;\n\
    \    ++it2;\n    if (it2 == lst.end()) return std::nullopt;\n    if (*it2 < *it)\
    \ return std::nullopt;\n    ++it;\n    if (it == lst.end()) return std::nullopt;\n\
    \    if (*it < *it2) it2 = it;\n    ++it2;\n    if (it2 == lst.end()) return std::nullopt;\n\
    \    if (*it2 < *it) return std::nullopt;\n    ++it;\n    if (it == lst.end())\
    \ return std::nullopt;\n    if (*it < *it2) it2 = it;\n    ++it2;\n    if (it2\
    \ == lst.end()) return std::nullopt;\n    if (*it2 < *it) return std::nullopt;\n\
    \    ++it;\n    if (it == lst.end()) return std::nullopt;\n    if (*it < *it2)\
    \ it2 = it;\n    ++it2;\n    if (it2 == lst.end()) return std::nullopt;\n    if\
    \ (*it2 < *it) return std::nullopt;\n    ++it;\n    if (it == lst.end()) return\
    \ std::nullopt;\n    if (*it < *it2) it2 = it;\n    ++it2;\n    if (it2 == lst.end())\
    \ return std::nullopt;\n    if (*it2 < *it) return std::nullopt;\n    ++it;\n\
    \    if (it == lst.end()) return std::nullopt;\n    if (*it < *it2) it2 = it;\n\
    \    ++it2;\n    if (it2 == lst.end()) return std::nullopt", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(),\
    \ lst.end(), [smallest](long x) { return x < smallest; });\n    if (it != lst.end())\
    \ {\n        smallest = *it;\n    }\n    return smallest;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    long second_smallest = *std::min_element(lst.begin()\
    \ + 1, lst.end());\n    return second_smallest < smallest ? second_smallest :\
    \ smallest;", "    // Your code here\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < smallest) {\n         \
    \   second_smallest = smallest;\n            smallest = i;\n        } else if\
    \ (i < second_smallest) {\n            second_smallest = i;\n        }\n    }\n\
    \    return second_smallest == lst[0] ? std::nullopt : second_smallest;", "  \
    \  if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    if (*it == *std::min_element(it,lst.end()) ) {\n        return\
    \ std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end())\
    \ ) {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end())\
    \ ) {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end())\
    \ ) {\n        return std::nullopt;\n    }\n    return *it;", "    if (lst.size()\
    \ == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    while (it != lst.end()) {\n        if (*it < prev)\n            return prev;\n\
    \        prev = *it;\n        ++it;\n    }\n    return prev;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(),\
    \ lst.end(), [&smallest](long x) { return x < smallest; });\n    if (it == lst.end())\
    \ return std::nullopt;\n    if (*it == smallest) return std::nullopt;\n    return\
    \ *it;", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n  \
    \  auto it = lst.begin();\n    auto next = *it;\n    if (next < lst.front()) {\n\
    \        ++it;\n        next = *it;\n    }\n    if (next == lst.front()) {\n \
    \       return std::nullopt;\n    }\n    while (it != lst.end()) {\n        next\
    \ = *it;\n        if (next < next) {\n            ++it;\n            next = *it;\n\
    \        }\n        if (next == next) {\n            return next;\n        }\n\
    \    }\n    return std::nullopt;", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it == *lst.begin())\n        return std::nullopt;\n\
    \    return *it;", "    if(lst.size() == 0)\n        return std::nullopt;\n  \
    \  long smallest = lst[0];\n    long second_smallest = lst[1];\n    for(long i\
    \ = 2; i < lst.size(); i++) {\n        if(lst[i] < smallest) {\n            second_smallest\
    \ = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i]\
    \ < second_smallest) {\n            second_smallest = lst[i];\n        }\n   \
    \ }\n    return second_smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [&smallest](long\
    \ x) { return x < smallest; });\n    if (it != lst.end()) {\n        smallest\
    \ = *it;\n    }\n    return smallest;", "    if (lst.empty())\n        return\
    \ std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\n    \
    \    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    auto next\
    \ = *it;\n    ++it;\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    if (*it < next)\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    next = *it;\n    ++it;\n    if (it == lst.end())\n      \
    \  return std::nullopt;\n    if (*it < next)\n        ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    next = *it;\n    ++it;\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    if (*it < next)\n        ++it;\n    if (it\
    \ == lst.end())\n        return std::nullopt;\n    return next;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(),\
    \ lst.end(), [smallest](long x) { return x < smallest; });\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    smallest = *it;\n    auto it2 =\
    \ std::find_if(lst.begin(), lst.end(), [smallest](long x) { return x < smallest;\
    \ });\n    if (it2 == lst.end()) {\n        return std::nullopt;\n    }\n    return\
    \ *it2;", "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it\
    \ = lst.begin();\n    auto it2 = lst.begin();\n    if (*it < *it2) {\n       \
    \ ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n       \
    \ ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n\
    \    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*", "    if (lst.size()\
    \ == 0) return std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n\
    \    if (*it < *it2) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n  \
    \  ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2\
    \ = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 <\
    \ *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if\
    \ (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n\
    \    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n  \
    \  ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2\
    \ = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 <\
    \ *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if\
    \ (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n\
    \    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n  \
    \  ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2\
    \ = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 <\
    \ *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it2;\n    if\
    \ (*it2 < *it) it2 = it;\n    ++it2;\n    if (*it2 < *it) it2 = it;\n    ++it",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(),\
    \ lst.end(), smallest);\n    if (it != lst.end()) {\n        smallest = *it;\n\
    \    }\n    return smallest;", "    if (lst.empty())\n        return std::nullopt;\n\
    \    auto it = lst.begin();\n    if (*it < lst.front())\n        ++it;\n    if\
    \ (it == lst.end())\n        return std::nullopt;\n    if (*it < lst.front())\n\
    \        ++it;\n    if (it == lst.end())\n        return std::nullopt;\n    if\
    \ (*it < lst.front())\n        ++it;\n    if (it == lst.end())\n        return\
    \ std::nullopt;\n    return *it;", "    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for(long i : lst)\n     \
    \   if(i < min)\n            min = i;\n        else if(i > max)\n            max\
    \ = i;\n    return max;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long smallest = *std::min_element(lst.begin(), lst.end());\n    std::vector<long>::iterator\
    \ it = std::find(lst.begin(), lst.end(), smallest);\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    std::vector<long>::iterator it2\
    \ = std::find(lst.begin(), lst.end(), *it);\n    if (it2 == lst.end()) {\n   \
    \     return std::nullopt;\n    }\n    return *it2;", "    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    return std::optional<long>(max);", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    if (min == max) {\n        return std::nullopt;\n    }\n    return\
    \ max;", "    long smallest = *std::min_element(lst.begin(), lst.end());\n   \
    \ long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n    if\
    \ (second_smallest == smallest)\n        return std::nullopt;\n    return second_smallest;",
  "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) {\n            min = i;\n        } else if (i > max) {\n   \
    \         max = i;\n        }\n    }\n    return std::optional<long>(max);", " \
    \   if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    ++it;\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    auto next = *it;\n    if (prev < next)\
    \ {\n        return prev;\n    }\n    return next;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n\
    \    auto it = std::upper_bound(lst.begin(), lst.end(), smallest);\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    return *it;", "  \
    \  if (lst.size() == 0)\n        return std::nullopt;\n    auto it = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end())\n        return std::nullopt;\n    return\
    \ *it;", "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it\
    \ = lst.begin();\n    if (*it < lst.front())\n        ++it;\n    return *it;",
  "    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n    \
    \    if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    if (min\
    \ == max) return std::nullopt;\n    return max;", "    if (lst.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev\
    \ = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    auto next = *it;\n    if (next < prev) {\n        return std::nullopt;\n\
    \    }\n    return next;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find(lst.begin(), lst.end(), smallest);\n  \
    \  if (it != lst.end()) {\n        smallest = *it;\n    }\n    return smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_smallest ==\
    \ smallest) {\n        return std::nullopt;\n    }\n    return second_smallest;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    auto next = std::next(it);\n    if (*next < *it)\n        return std::nullopt;\n\
    \    return *next;", "    // Your code here\n    long smallest = lst[0];\n   \
    \ long second_smallest = lst[0];\n    for (long i : lst) {\n        if (i < smallest)\
    \ {\n            second_smallest = smallest;\n            smallest = i;\n    \
    \    } else if (i == smallest) {\n            second_smallest = i;\n        }\n\
    \    }\n    return second_smallest == smallest ? std::nullopt : second_smallest;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long index\
    \ = std::distance(std::begin(lst), std::find(std::begin(lst), std::end(lst), smallest));\n\
    \    if (index == lst.size()) {\n        return std::nullopt;\n    }\n    return\
    \ lst[index + 1];", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    auto it = lst.begin();\n    auto next = std::next(it);\n    if (*next < *it)\n\
    \        return *it;\n    else\n        return *next;", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    if\
    \ (*it == *std::min_element(it,lst.end())) {\n        return std::nullopt;\n \
    \   }\n    ++it;\n    if (*it == *std::min_element(it,lst.end())) {\n        return\
    \ std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    return *it;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(),\
    \ lst.end(), [&smallest](long n){return n<smallest;});\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    else\n        return *it;", "    // Your code\
    \ here\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for\
    \ (long i : lst) {\n        if (i < smallest) {\n            second_smallest =\
    \ smallest;\n            smallest = i;\n        } else if (i < second_smallest)\
    \ {\n            second_smallest = i;\n        }\n    }\n    return second_smallest\
    \ == smallest ? std::nullopt : second_smallest;", "    if (lst.size() == 0)\n\
    \        return std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n\
    \    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2)\
    \ {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n   \
    \     ++it;\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n   \
    \     ++it2;\n    }\n    if (*it < *it2) {\n        ++it;\n        ++it2;\n  \
    \  }\n    if (*", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    return min;", "    if (lst.empty())\
    \ return std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\
    \ return std::nullopt;\n    auto prev = it;\n    for (++it; it != lst.end(); ++it)\
    \ {\n        if (*it < prev) {\n            prev = it;\n        }\n    }\n   \
    \ return *prev;", "    if (lst.size() == 0)\n        return std::nullopt;\n  \
    \  auto it = lst.begin();\n    auto prev = *it;\n    if (*it == *lst.begin())\n\
    \        return std::nullopt;\n    for (++it; it != lst.end(); ++it) {\n     \
    \   if (*it < prev)\n            return std::nullopt;\n        prev = *it;\n \
    \   }\n    return prev;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n    if (*it <\
    \ *it2) {\n        ++it;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n\
    \    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it > *it2) {\n       \
    \ ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it > *it2)\
    \ {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n   \
    \ if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n\
    \    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it2;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it > *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it > *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it > *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it > *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it > *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it > *it2) {\n        ++it2;\n    }\n", "    if\
    \ (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n\
    \    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n        if (*it\
    \ < prev) {\n            return prev;\n        }\n        prev = *it;\n    }\n\
    \    return prev;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    return min;", "    if (lst.size()\
    \ == 0) return std::nullopt;\n    auto it = lst.begin();\n    auto prev = *it;\n\
    \    ++it;\n    for (; it != lst.end(); ++it) {\n        if (*it < prev) {\n \
    \           prev = *it;\n        }\n    }\n    return prev;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    long second_smallest = *std::min_element(lst.begin()\
    \ + 1, lst.end());\n    if (second_smallest == smallest)\n        return std::nullopt;\n\
    \    return second_smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n\
    \    return second_smallest < smallest ? second_smallest : smallest;", "    if\
    \ (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n\
    \    auto it2 = lst.begin();\n    if (*it < *it2) {\n        ++it;\n    }\n  \
    \  if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n\
    \    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n\
    \        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n  \
    \  }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it < *it2) {\n  \
    \      ++it2;\n    }\n    if (*it < *it2) {\n        ++it2;\n    }\n    if (*it\
    \ < *it2) {\n        ++it2;\n    }\n", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    auto it = lst.begin();\n    auto prev = *it;\n   \
    \ if (*it == *lst.begin()) {\n        ++it;\n    }\n    for (; it != lst.end();\
    \ ++it) {\n        if (*it < prev) {\n            return std::nullopt;\n     \
    \   }\n        prev = *it;\n    }\n    return prev;", "    if (lst.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto\
    \ prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    for (; it != lst.end(); ++it) {\n        if (*it < prev) {\n     \
    \       return prev;\n        }\n        prev = *it;\n    }\n    return prev;",
  "    long smallest = *std::min_element(lst.begin(), lst.end());\n    long second_smallest\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    if (second_smallest ==\
    \ smallest) {\n        return second_smallest;\n    }\n    return std::nullopt;",
  "    // Your code here\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    long secondSmallest = *std::min_element(lst.begin() + 1, lst.end());\n  \
    \  if (smallest == secondSmallest) {\n        return secondSmallest;\n    }\n\
    \    return std::nullopt;", "    if (lst.empty())\n        return std::nullopt;\n\
    \    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    return *it;", "    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [min](long x)\
    \ { return x < min; });\n    if (it == lst.end())\n        return std::nullopt;\n\
    \    return *it;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(it,lst.end()))\
    \ {\n        return std::nullopt;\n    }\n    ++it;\n    if (*it == *std::min_element(",
  "    if (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it < lst.front())\n        ++it;\n    return *it;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto prev = *it;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n\
    \        if (*it < prev) {\n            prev = *it;\n        }\n    }\n    return\
    \ prev;", "    // Your code here\n    long smallest = lst[0];\n    long secondSmallest\
    \ = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ smallest) {\n            secondSmallest = smallest;\n            smallest =\
    \ lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest\
    \ = lst[i];\n        }\n    }\n    return secondSmallest;", "    long smallest\
    \ = *std::min_element(lst.begin(), lst.end());\n    long second_smallest = *std::min_element(lst.begin()\
    \ + 1, lst.end());\n    if (second_smallest == smallest)\n        return std::nullopt;\n\
    \    return second_smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find(lst.begin(), lst.end(), smallest);\n  \
    \  if (it != lst.end()) {\n        smallest = *it;\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0)\n        return std::nullopt;\n    long smallest = lst[0];\n\
    \    for (long i : lst)\n        if (i < smallest)\n            smallest = i;\n\
    \    return smallest;", "    if (lst.empty())\n        return std::nullopt;\n\
    \    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end())\n\
    \        return std::nullopt;\n    auto it2 = std::next(it);\n    if (it2 == lst.end())\n\
    \        return std::nullopt;\n    return *it2;", "    if (lst.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    long smallest = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < smallest) {\n            smallest = i;\n       \
    \ }\n    }\n    return smallest;", "    if (lst.size() == 0)\n        return std::nullopt;\n\
    \    auto it = lst.begin();\n    auto next = std::next(it);\n    if (*next < *it)\n\
    \        return *it;\n    else\n        return *next;", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto\
    \ prev = *it;\n    for (++it; it != lst.end(); ++it) {\n        if (*it < prev)\
    \ {\n            prev = *it;\n        }\n    }\n    return prev;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n \
    \   auto prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    auto next = *it;\n    if (next < prev) {\n        return std::nullopt;\n\
    \    }\n    ++it;\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    auto prev = *it;\n    ++it;\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    auto next = *it;\n    if (next < prev) {\n       \
    \ return std::nullopt;\n    }\n    ++it;\n    if (it == lst.end()) {\n       \
    \ return std::nullopt;\n    }\n    auto prev = *it;\n    ++it;\n    if (it ==\
    \ lst.end()) {\n        return std::nullopt;\n    }\n    auto next = *it;\n  \
    \  if (next < prev) {\n        return std::nullopt;\n    }\n    return next;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n\
    \        if (*it < prev) {\n            return prev;\n        }\n        prev\
    \ = *it;\n    }\n    return prev;", "    if (lst.size() == 0) return std::nullopt;\n\
    \    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (long\
    \ i : lst) {\n        if (i < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        } else if (i < second_smallest) {\n      \
    \      second_smallest = i;\n        }\n    }\n    return second_smallest;", " \
    \   long smallest = *std::min_element(lst.begin(), lst.end());\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    auto it = std::upper_bound(lst.begin(),\
    \ lst.end(), smallest);\n    if (it == lst.end()) {\n        return std::nullopt;\n\
    \    }\n    return *it;", "    if (lst.size() == 0) return std::nullopt;\n   \
    \ auto it = lst.begin();\n    if (*it < lst.front()) return std::nullopt;\n  \
    \  auto prev = *it;\n    for (++it; it != lst.end(); ++it) {\n        if (*it\
    \ < prev) return std::nullopt;\n        prev = *it;\n    }\n    return prev;",
  "    if (lst.size() == 0) return std::nullopt;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) min = i;\n   \
    \     if (i > max) max = i;\n    }\n    return max == min ? std::nullopt : max;",
  "    if (lst.empty())\n        return std::nullopt;\n    auto it = lst.begin();\n\
    \    if (*it < lst.front())\n        ++it;\n    return *it;", "    if (lst.empty())\
    \ return std::nullopt;\n    long min = *lst.begin();\n    for (long i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n    }\n    return min;",
  "    if(lst.size() == 0) {\n        return std::nullopt;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    for(long i = 2; i < lst.size();\
    \ i++) {\n        if(lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if(lst[i] < second_smallest) {\n\
    \            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min_index = -1;\n    for (size_t i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] < min) {\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min_index == lst.size() - 1) {\n        return\
    \ std::nullopt;\n    }\n    return lst[min_index + 1];", "    if (lst.size() ==\
    \ 0) return std::nullopt;\n    long min = lst[0];\n    for (long i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n    }\n    return min;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    auto it =\
    \ lst.begin();\n    auto prev = *it;\n    if (prev < prev + 1) {\n        ++it;\n\
    \        prev = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n     \
    \   prev = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n        prev\
    \ = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n        prev = *it;\n\
    \    }\n    if (prev < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n\
    \    if (prev < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n    if\
    \ (prev < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n    if (prev\
    \ < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n    if (prev < prev\
    \ + 1) {\n        ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1)\
    \ {\n        ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1) {\n \
    \       ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1) {\n      \
    \  ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n\
    \        prev = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n     \
    \   prev = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n        prev\
    \ = *it;\n    }\n    if (prev < prev + 1) {\n        ++it;\n        prev = *it;\n\
    \    }\n    if (prev < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n\
    \    if (prev < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n    if\
    \ (prev < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n    if (prev\
    \ < prev + 1) {\n        ++it;\n        prev = *it;\n    }\n    if (prev < prev\
    \ + 1) {\n        ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1)\
    \ {\n        ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1) {\n \
    \       ++it;\n        prev = *it;\n    }\n    if (prev < prev + 1) {\n      \
    \  ++it;\n        prev = *it;\n    }\n    if (prev", "    if (lst.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n    }\n\
    \    return min;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    auto it = lst.begin();\n    auto prev = *it;\n    ++it;\n    for (;\
    \ it != lst.end(); ++it) {\n        if (*it < prev) {\n            return prev;\n\
    \        }\n        prev = *it;\n    }\n    return prev;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n\
    \    for (long i : lst) {\n        if (i < smallest) {\n            smallest =\
    \ i;\n        }\n    }\n    return smallest;", "    if (lst.size() == 0)\n   \
    \     return std::nullopt;\n    auto it = lst.begin();\n    if (*it < lst.front())\n\
    \        ++it;\n    if (*it < lst.back())\n        ++it;\n    if (*it < lst.front())\n\
    \        ++it;\n    return *it;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    long second_smallest = *std::min_element(lst.begin() + 1, lst.end());\n\
    \    if (second_smallest == smallest) {\n        return std::nullopt;\n    }\n\
    \    return second_smallest;", "    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto it = std::find(lst.begin(), lst.end(), smallest);\n  \
    \  if (it != lst.end()) {\n        smallest = *it;\n    }\n    return smallest;",
  "    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (long\
    \ i : lst) {\n        if (i < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        } else if (i > second_smallest) {\n      \
    \      second_smallest = i;\n        }\n    }\n    return second_smallest == smallest\
    \ ? std::nullopt : second_smallest;", "    long min = lst[0];\n    long max =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < min) {\n            min =\
    \ i;\n        } else if (i > max) {\n            max = i;\n        }\n    }\n\
    \    return std::optional<long>(max);"]
stop_tokens:
- "\n}"
