name: HumanEval_128_prod_signs
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr\
  \ of integers and you need to return\n// sum of magnitudes of integers multiplied\
  \ by product of all signs\n// of each number in the vector, represented by 1, -1\
  \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
  \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
  std::optional<long> prod_signs(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
completions: ["    if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for\
    \ (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return\
    \ ans;", "    long res = 0;\n    for (auto i : arr) {\n        res += std::abs(i)\
    \ * std::sign(i);\n    }\n    return res;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n        prod *= i;\n\
    \    long sum = 0;\n    for (long i : arr)\n        sum += std::abs(i) * prod;\n\
    \    return sum;", "    if (arr.empty()) return std::nullopt;\n    long res =\
    \ 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n \
    \   }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long product = 1;\n    for (long i : arr) {\n        product *= i;\n    }\n\
    \    long sum = 0;\n    for (long i : arr) {\n        sum += std::abs(i) * product;\n\
    \    }\n    return sum;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    long sum = 0;\n\
    \    for (long i : arr) {\n        sum += std::abs(i);\n    }\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long product = 1;\n    for (long\
    \ i : arr) {\n        product *= i;\n    }\n    return sum * product;", "    if\
    \ (arr.empty())\n        return std::nullopt;\n    long long ans = 0;\n    for\
    \ (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long prod =\
    \ 1;\n    for (long i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n\
    \    for (long i : arr) {\n        sum += std::abs(i) * std::abs(prod);\n    \
    \    prod *= -1;\n    }\n    return sum;", "    long ans = 0;\n    for (long i\
    \ : arr) {\n        ans += std::abs(i);\n    }\n    for (long i : arr) {\n   \
    \     ans *= std::signbit(i);\n    }\n    return ans;", "  if (arr.empty())\n\
    \    return std::nullopt;\n  long res = 0;\n  for (long i : arr) {\n    res +=\
    \ std::abs(i) * std::sign(i);\n  }\n  return res;", "    long result = 0;\n  \
    \  for (long i : arr) {\n        result *= i;\n        result += (i & 1);\n  \
    \  }\n    return result > 0 ? result : std::nullopt;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (long i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = arr[0];\n    for (auto i : arr)\n        ans = std::max(ans, i * ans);\n\
    \    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans =\
    \ 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n     \
    \   return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n       \
    \ prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *= (i <\
    \ 0 ? -1 : 1);\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \      ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign *\
    \ i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (long long i : arr) {\n\
    \        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if\
    \ (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (auto i :\
    \ arr) {\n        sum += std::abs(i) * std::sign(i);\n    }\n    return sum *\
    \ prod;", "    if (arr.empty()) return std::nullopt;\n    long res = 0;\n    for\
    \ (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n    return\
    \ res;", "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n\
    \    for (long i : arr)\n        ans += abs(i);\n    long prod = 1;\n    for (long\
    \ i : arr)\n        prod *= i;\n    for (long i : arr)\n        ans *= prod *\
    \ (i == 0 ? 1 : -1);\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i);\n  \
    \  }\n    for (long i : arr) {\n        res *= std::signbit(i);\n    }\n    return\
    \ res;", "    if (arr.empty())\n        return std::nullopt;\n    long res = 0;\n\
    \    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;", "    if (arr.empty()) return std::nullopt;\n    long ans =\
    \ 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n \
    \   }\n    return ans;", "    long long ans = 0;\n    for (long long i : arr)\
    \ {\n        ans += i * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n  \
    \      prod *= i;\n    long res = 0;\n    for (long i : arr)\n        res += std::abs(i)\
    \ * prod;\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ product = 1;\n    for (long i : arr) {\n        product *= i;\n    }\n    long\
    \ sum = 0;\n    for (long i : arr) {\n        sum += std::abs(i) * product;\n\
    \    }\n    return sum;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (auto i : arr)\n        res += i * std::signbit(i);\n\
    \    return res;", "    if (arr.empty()) return std::nullopt;\n    long prod =\
    \ 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i) * prod;\n    }\n    return\
    \ sum;", "    if (arr.empty())\n        return std::nullopt;\n    long res = 0;\n\
    \    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;", "    if (arr.empty()) return std::nullopt;\n    long res =\
    \ 0;\n    for (long i : arr) {\n        res += std::abs(i);\n        res *= std::signbit(i)\
    \ ? 1 : -1;\n    }\n    return res;", "    long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "  \
    \  if (arr.empty())\n        return std::nullopt;\n    long ans = 0, sign = 1;\n\
    \    for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ?\
    \ -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n   \
    \ long sign = 1;\n    for (auto i : arr) {\n        sign *= i;\n    }\n    return\
    \ sign * prod;", "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for\
    \ (long i : arr) {\n        sum += std::abs(i) * std::sign(i);\n    }\n    return\
    \ sum * prod;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ product = 1;\n    for (auto i : arr) {\n        product *= i;\n    }\n    long\
    \ sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * product;\n\
    \    }\n    return sum;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i);\n  \
    \      ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n   \
    \ return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    long res = 0;\n    for (auto i : arr) {\n     \
    \   res += std::abs(i) * std::sign(i);\n    }\n    return res;", "    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr) {\n   \
    \     ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n   \
    \ long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * prod;\n\
    \    }\n    return sum;", "    long ans = 0;\n    for (auto i : arr) {\n     \
    \   ans += std::abs(i);\n    }\n    for (auto i : arr) {\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long product = 1;\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return std::make_optional(std::abs(sum)\
    \ * product);", "    if (arr.empty()) return std::nullopt;\n    long res = 0;\n\
    \    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr)\n        ans += std::abs(i) * std::sign(i);\n\
    \    return ans;", "    long product = 1;\n    for (auto i : arr) {\n        product\
    \ *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n\
    \    }\n    return std::optional<long>(sum * product);", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;", "    if (arr.empty())\n   \
    \     return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr)\
    \ {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long product\
    \ = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        product *= i;\n\
    \        sign *= i;\n    }\n    return std::make_optional(sign * product);", " \
    \   if (arr.empty()) return std::nullopt;\n    long res = 0;\n    for (long i\
    \ : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n    return res;",
  "    if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (long i : arr)\n        prod *= i;\n    long sign = 1;\n    for (long i : arr)\n\
    \        sign *= (i < 0) ? -1 : 1;\n    return sign * prod;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i) * std::sign(i);\n    return ans;", "    // Your code\
    \ here\n    long ans = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    prod *= i;\n        ans += std::abs(i) * prod;\n    }\n    return ans;",
  "    if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (long i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (long\
    \ i : arr) {\n        sum += std::abs(i) * std::sign(i);\n    }\n    return sum\
    \ * prod;", "    if (arr.empty())\n        return std::nullopt;\n    long prod\
    \ = 1;\n    for (auto i : arr)\n        prod *= i;\n    long sign = 1;\n    for\
    \ (auto i : arr)\n        sign *= i;\n    return sign * prod;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * prod;\n    }\n    return sum;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    // Your\
    \ code here\n    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n\
    \    }\n    for (long i : arr) {\n        ans *= std::signbit(i);\n    }\n   \
    \ return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ product = 1;\n    for (long i : arr)\n        product *= i;\n    long sum =\
    \ 0;\n    for (long i : arr)\n        sum += std::abs(i);\n    return std::optional<long>(sum\
    \ * product);", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n        ans\
    \ *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n      \
    \  return std::nullopt;\n    long ans = 1;\n    for (auto i : arr) {\n       \
    \ ans *= i;\n        ans *= (i != 0);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res += std::abs(i)\
    \ * std::sign(i);\n    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n   \
    \ long sign = 1;\n    for (auto i : arr) {\n        sign *= (i < 0) ? -1 : 1;\n\
    \    }\n    return sign * prod;", "  if (arr.empty()) return std::nullopt;\n \
    \ long res = 0;\n  for (long i : arr) {\n    res += std::abs(i) * std::sign(i);\n\
    \  }\n  return res;", "    if (arr.empty()) return std::nullopt;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sign = 1;\n\
    \    for (auto i : arr) {\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ sign * prod;", "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        prod *= i;\n    }\n    long sign = 1;\n   \
    \ for (auto i : arr) {\n        sign *= i;\n    }\n    return sign * prod;", " \
    \   if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for (long i\
    \ : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;",
  "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n    for\
    \ (long i : arr)\n        ans += abs(i);\n    for (long i : arr)\n        ans\
    \ *= (i > 0) * 1;\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \      ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;", "   \
    \ if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for (long i :\
    \ arr) {\n        ans += std::abs(i);\n    }\n    long prod = 1;\n    for (long\
    \ i : arr) {\n        prod *= i;\n    }\n    return std::min(ans, std::abs(prod));",
  "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0, sign = 1;\n\
    \    for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ?\
    \ -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    long sum = 0;\n    long product = 1;\n    for (auto\
    \ i : arr) {\n        sum += std::abs(i);\n        product *= i;\n    }\n    return\
    \ std::nullopt;", "    if (arr.empty()) return std::nullopt;\n    long res = 0;\n\
    \    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \  }\n    long prod = 1;\n    for (long i : arr) {\n        prod *= i;\n    }\n\
    \    return ans * prod;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n    long res\
    \ = 0;\n    for (auto i : arr)\n        res += abs(i) * prod;\n    return res;",
  "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for (long i\
    \ : arr) {\n        prod *= i;\n    }\n    long sign = 1;\n    for (long i : arr)\
    \ {\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return sign * prod;", "   \
    \ if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for (long i :\
    \ arr) {\n        ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n\
    \    return ans;", "    if (arr.empty()) return std::nullopt;\n    long prod =\
    \ 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i) * std::sign(i);\n    }\n\
    \    return sum * prod;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n    long sum\
    \ = 0;\n    for (auto i : arr)\n        sum += std::abs(i) * prod;\n    return\
    \ sum;", "    if (arr.empty()) return std::nullopt;\n    long ans = 0, sign =\
    \ 1;\n    for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i <\
    \ 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n\
    \        ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n\
    \    for (auto i : arr) {\n        ans += std::abs(i);\n    }\n    long sign =\
    \ 1;\n    for (auto i : arr) {\n        ans *= sign;\n        ans -= std::abs(i);\n\
    \        sign *= -1;\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n\
    \        ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return sign * prod;", "    // Your code here\n\
    \    long sum = 0;\n    long prod = 1;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i);\n        prod *= i;\n    }\n    return std::nullopt;", "   \
    \ if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for (auto i :\
    \ arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr)\
    \ {\n        sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;",
  "    if (arr.empty())\n        return std::nullopt;\n    long long ans = 0;\n  \
    \  for (long long i : arr) {\n        ans += std::abs(i);\n    }\n    long long\
    \ prod = 1;\n    for (long long i : arr) {\n        prod *= i;\n    }\n    return\
    \ std::min(std::max(ans * prod, 0), 0);", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign *\
    \ i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ prod = 1;\n    for (long i : arr)\n        prod *= i;\n    long sign = 1;\n\
    \    for (long i : arr)\n        sign *= (i < 0) ? -1 : 1;\n    return sign *\
    \ prod;", "    if (arr.empty())\n        return std::nullopt;\n    long prod =\
    \ 1;\n    for (auto i : arr)\n        prod *= i;\n    long sign = 1;\n    for\
    \ (auto i : arr)\n        sign *= i;\n    return sign * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr)\
    \ {\n        prod *= i;\n    }\n    if (prod != 0)\n        ans *= prod;\n   \
    \ return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans = 0;\n\
    \    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;", "  if (arr.empty()) return std::nullopt;\n  long res = 0;\n\
    \  for (auto i : arr) {\n    res += std::abs(i) * std::sign(i);\n  }\n  return\
    \ res;", "    if (arr.empty()) return std::nullopt;\n    long res = 0;\n    for\
    \ (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n    return\
    \ res;", "    if (arr.empty()) return std::nullopt;\n    long long ans = 0;\n\
    \    for (auto i : arr) {\n        ans += std::abs(i);\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;", "    long res = 0;\n    for (auto i : arr) {\n     \
    \   res += i * std::signbit(i);\n    }\n    return res;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n\
    \    for (long i : arr) {\n        ans += std::abs(i);\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;", "    long ans = 0;\n    for (auto i : arr) {\n     \
    \   ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    // Your\
    \ code here\n    long sum = 0;\n    long product = 1;\n    for (auto i : arr)\
    \ {\n        sum += std::abs(i);\n        product *= i;\n    }\n    return sum\
    \ * product;", "    if (arr.empty())\n        return std::nullopt;\n    long ans\
    \ = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n        ans *=\
    \ (i != 0);\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long product = 1;\n    for (auto i : arr) {\n        product *= i;\n    }\n\
    \    long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * product;\n\
    \    }\n    return sum;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long long ans = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n   \
    \ long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * prod;\n\
    \    }\n    return sum;", "    long ans = 0;\n    for (long i : arr) {\n     \
    \   ans += std::abs(i);\n    }\n    ans *= std::accumulate(arr.begin(), arr.end(),\
    \ 0);\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    long ans = 0;\n    for (auto i : arr) {\n     \
    \   ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i) * product;\n    }\n    return sum;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return ans;", " \
    \   // Your code here\n    long sum = 0;\n    long product = 1;\n    for (auto\
    \ i : arr) {\n        sum += std::abs(i);\n        product *= i;\n    }\n    return\
    \ std::optional<long>(sum * product);", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n        prod *=\
    \ i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum += std::abs(i)\
    \ * std::sign(i);\n    }\n    return sum * prod;", "    if (arr.empty())\n   \
    \     return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n    \
    \    res += std::abs(i) * std::sign(i);\n    }\n    return res;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n\
    \    }\n    return ans;", "    // Your code here\n    long ans = 0;\n    for (auto\
    \ i : arr) {\n        ans += std::abs(i);\n    }\n    for (auto i : arr) {\n \
    \       ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i) * std::sign(i);\n    return ans;", "    long long ans\
    \ = 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ long product = 1;\n    for (auto i : arr) {\n        product *= i;\n    }\n\
    \    long long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n\
    \    }\n    return std::optional<long>(sum * product);", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n\
    \    return std::min(sum, prod * std::min(std::abs(arr[0]), std::abs(arr[1])));",
  "    if (arr.empty()) return std::nullopt;\n    long ans = 0, sign = 1;\n    for\
    \ (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n        ans\
    \ *= (i != 0);\n    }\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n\
    \    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i) * std::sign(i);\n\
    \    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \  }\n    long prod = 1;\n    for (long i : arr) {\n        prod *= i;\n    }\n\
    \    return ans * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i);\n    for (long i : arr)\n        ans *= std::signbit(i);\n\
    \    return ans;", "    if (arr.empty()) return std::nullopt;\n    long prod =\
    \ 1;\n    for (long i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n\
    \    for (long i : arr) {\n        sum += std::abs(i) * std::sign(i);\n    }\n\
    \    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    for (long i : arr) {\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    long res = 0;\n    for (auto i : arr) {\n     \
    \   res += std::abs(i) * std::sign(i);\n    }\n    return res;", "    long long\
    \ ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i);\n    }\n   \
    \ for (auto i : arr) {\n        ans *= std::signbit(i);\n    }\n    return ans;",
  "    if (arr.empty()) return std::nullopt;\n    long long ans = 0;\n    for (long\
    \ long i : arr) {\n        ans += std::abs(i);\n        ans *= std::signbit(i)\
    \ ? 1 : -1;\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \      ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;", "    long ans = 0;\n\
    \    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans =\
    \ 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n \
    \   }\n    return ans;", "    // Your code here\n    long sum = 0;\n    long product\
    \ = 1;\n    for (auto i : arr) {\n        sum += std::abs(i);\n        product\
    \ *= i;\n    }\n    return std::nullopt;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i)\
    \ * std::sign(i);\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long product = 1;\n    for (auto i : arr) {\n        product *= i;\n    }\n\
    \    long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * product;\n\
    \    }\n    return sum;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \  }\n    for (long i : arr) {\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long ans = 0, sign =\
    \ 1;\n    for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i <\
    \ 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \  }\n    long prod = 1;\n    for (long i : arr) {\n        prod *= i;\n    }\n\
    \    return ans * prod;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign *\
    \ i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr) {\n     \
    \   prod *= i;\n    }\n    return ans * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    long ans = 0;\n    for (long i : arr) {\n     \
    \   ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return ans;",
  "    if (arr.empty())\n        return std::nullopt;\n    long long ans = 0;\n  \
    \  for (long long i : arr) {\n        ans += i * std::signbit(i);\n    }\n   \
    \ return ans;", "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for\
    \ (long i : arr) {\n        sum += std::abs(i) * prod;\n    }\n    return sum;",
  "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr)\
    \ {\n        sum += std::abs(i) * prod;\n    }\n    return sum;", "    // Your\
    \ code here\n    long long ans = 0;\n    for(long long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return sum * product;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (auto i : arr)\n        prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n\
    \        sign *= i;\n    return sign * prod;", "    // Your code here\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : arr) {\n        sum += std::abs(i);\n\
    \        product *= i;\n    }\n    return sum * product;", "    // Your code here\n\
    \    long ans = 0;\n    long prod = 1;\n    long sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        prod *= sign;\n        sign *= -1;\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * prod;\n    }\n\
    \    return sum;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        sum += std::abs(i) * std::sign(i);\n\
    \    }\n    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign *\
    \ i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return std::nullopt;", " \
    \   if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    long sign =\
    \ 1;\n    for (auto i : arr) {\n        prod *= i;\n        sign *= (i < 0) ?\
    \ -1 : 1;\n    }\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i);\n  \
    \      ans *= std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i);\n    }\n    for (long i : arr) {\n        res *= std::signbit(i);\n\
    \    }\n    return res;", "    // Your code here\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        sum += std::abs(i);\n    }\n    long prod = 1;\n    for\
    \ (auto i : arr) {\n        prod *= i;\n    }\n    return std::optional<long>(sum\
    \ * prod);", "    if (arr.empty())\n        return std::nullopt;\n    long ans\
    \ = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n       \
    \ sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i);\n\
    \        res *= std::signbit(i) ? 1 : -1;\n    }\n    return res;"]
stop_tokens:
- "\n}"
