name: HumanEval_139_special_factorial
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is\
  \ defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where\
  \ n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function\
  \ will receive an integer as input and should return the special\n// factorial of\
  \ this integer.\nlong special_factorial(long n) {\n"
tests: "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
  \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
  \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
completions: ["    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact\
    \ *= i;\n    }\n    return fact;", "    long fact = 1;\n    for (long i = 1; i\
    \ <= n; i++) {\n        fact *= i;\n    }\n    return fact;", "    long fact =\
    \ 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;", "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n\
    \        fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    for (long\
    \ i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;", "    long\
    \ fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;", "    long fact = 1;\n    for (int i = 1; i <= n; i++) {\n\
    \        fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    long i;\n\
    \    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;",
  "    long fact = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *=\
    \ i;\n    }\n    return fact;", "    long fact = 1;\n    for (long i = 1; i <=\
    \ n; i++) {\n        fact *= i;\n    }\n    return fact;", "    long fact = 1;\n\
    \    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;",
  "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n \
    \   }\n    return fact;", "    long fact = 1;\n    for (int i = 1; i <= n; i++)\
    \ {\n        fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;", " \
    \   long factorial = 1;\n    long counter = 1;\n    while (counter <= n) {\n \
    \       factorial *= counter;\n        counter++;\n    }\n    return factorial;",
  "    long fact = 1;\n    long temp = 1;\n    while (n > 1) {\n        fact *= n;\n\
    \        temp *= n;\n        n--;\n    }\n    return fact;", "    long fact =\
    \ 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;", "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact\
    \ *= i;\n    }\n    return fact;", "    if (n == 0)\n        return 1;\n    long\
    \ res = special_factorial(n - 1);\n    return res * n;", "    long fact = 1;\n\
    \    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;"]
stop_tokens:
- "\n}"
