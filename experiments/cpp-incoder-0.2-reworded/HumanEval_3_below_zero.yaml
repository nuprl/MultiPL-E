name: HumanEval_3_below_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of\
  \ deposit and withdrawal operations on a bank account that starts with\n// zero\
  \ balance. Your task is to detect if at any point the balance of account fallls\
  \ below zero, and\n// at that point function should return true. Otherwise it should\
  \ return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n\
  // (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n\
  // (true)\nbool below_zero(std::vector<long> operations) {\n"
tests: "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
  \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
  \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
  }\n"
completions: ["    // Your code here\n    long long balance = 0;\n    for (long long\
    \ i = 0; i < operations.size(); i++) {\n        balance += operations[i];\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    int sum = 0;\n    for (auto i : operations) {\n        sum +=\
    \ i;\n    }\n    return sum < 0;", "    long balance = operations.front();\n \
    \   for (long i = operations.size() - 1; i >= 0; i--) {\n        balance += operations[i];\n\
    \        if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    int sum = 0;\n    for (auto i : operations) {\n        sum +=\
    \ i;\n    }\n    return sum < 0;", "    long long balance = 0;\n    for (auto\
    \ op : operations) {\n        balance += op;\n        if (balance < 0) {\n   \
    \         return true;\n        }\n    }\n    return false;", "    // Your code\
    \ here\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n\
    \    }\n    return sum < 0;", "    // Your code here\n    long sum = 0;\n    for\
    \ (auto i : operations) {\n        sum += i;\n    }\n    if (sum < 0)\n      \
    \  return true;\n    return false;", "    // Your code here\n    long sum = 0;\n\
    \    for (long i = 0; i < operations.size(); i++) {\n        sum += operations[i];\n\
    \    }\n    if (sum < 0) {\n        return true;\n    }\n    return false;", " \
    \   long balance = operations.front();\n    for (long i = operations.size() -\
    \ 1; i >= 0; i--) {\n        balance += operations[i];\n        if (balance <\
    \ 0) {\n            return true;\n        }\n    }\n    return false;", "    int\
    \ n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += operations[i];\n    }\n    if (sum < 0)\n        return true;\n\
    \    return false;", "    long balance = operations.front();\n    for (auto i\
    \ : operations) {\n        balance -= i;\n        if (balance < 0) {\n       \
    \     return true;\n        }\n    }\n    return false;", "    int sum = 0;\n\
    \    for (auto i : operations) {\n        sum += i;\n    }\n    return sum < 0;",
  "    int sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n \
    \   if (sum < 0)\n        return true;\n    return false;", "    long balance\
    \ = operations.front();\n    for (auto it = operations.begin() + 1; it != operations.end();\
    \ ++it) {\n        balance += *it;\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    int sum = 0;\n    for (auto\
    \ i : operations) {\n        sum += i;\n    }\n    return sum < 0;", "    // Your\
    \ code here\n    long long balance = 0;\n    for (auto op : operations) {\n  \
    \      balance += op;\n    }\n    return balance < 0;", "    int sum = 0;\n  \
    \  for (auto i : operations) {\n        sum += i;\n    }\n    if (sum < 0)\n \
    \       return true;\n    return false;", "    long long balance = 0;\n    for\
    \ (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n\
    \            return true;\n        }\n    }\n    return false;", "    int sum\
    \ = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum += operations[i];\n\
    \    }\n    if (sum < 0)\n        return true;\n    return false;", "    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;"]
stop_tokens:
- "\n}"
