language: cpp
name: HumanEval_111_histogram
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = word;\n      count = 0;\n    } else {\n      word = word + c;\n   \
    \   count++;\n    }\n  }\n  histogram[word] = count;\n  return histogram;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ebsvrcl: /tmp/tmp7ebsvrcl.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto c : test) {\n        word = c;\n  \
    \      freq++;\n        if (m.find(word) == m.end()) {\n            m[word] =\
    \ freq;\n        } else {\n            m[word] += freq;\n        }\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxfot1ero: /tmp/tmpxfot1ero.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::pair<std::string,long> >\
    \ v;\n    std::string temp;\n    std::map<std::string,long> m;\n    for(auto &c\
    \ : test) {\n        temp = c;\n        v.push_back(std::make_pair(temp,1));\n\
    \    }\n    for(auto &c : v) {\n        m[c.first] += c.second;\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppcvjuzb0: /tmp/tmppcvjuzb0.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto c : test) {\n        word = c;\n  \
    \      ++count;\n        auto it = m.find(word);\n        if(it == m.end()) {\n\
    \            m.insert({word,count});\n        } else {\n            it->second\
    \ += count;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdhmbi4u_: /tmp/tmpdhmbi4u_.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t max = 0;\n    size_t maxCount = 0;\n    size_t count = 0;\n\
    \    for (size_t i = 0; i < test.size(); i++) {\n        temp = test[i];\n   \
    \     if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp]++;\n        }\n    }\n    for (auto itr : m) {\n    \
    \    if (itr.second > maxCount) {\n            max = itr.second;\n           \
    \ maxCount = count;\n        }\n        count++;\n    }\n    if (maxCount == 0)\
    \ {\n        return std::map<std::string,long>();\n    }\n    return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp530sb1vt: /tmp/tmp530sb1vt.cpp:45: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    size_t\
    \ max = 0;\n    for(auto &c : test) {\n        auto it = m.find(c);\n        if(it\
    \ != m.end()) {\n            it->second++;\n        } else {\n            m[c]\
    \ = 1;\n        }\n        if(it->second > max) {\n            max = it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmov2x3hb.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpmov2x3hb.cpp:21:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpmov2x3hb.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizz9u7za: /tmp/tmpizz9u7za.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t maxCount = 0;\n    for (size_t i = 0; i < test.size(); i++)\
    \ {\n        temp = test[i];\n        if (m.find(temp) == m.end()) {\n       \
    \     m[temp] = 1;\n        } else {\n            m[temp]++;\n        }\n    \
    \    if (m[temp] > maxCount) {\n            maxCount = m[temp];\n        }\n \
    \   }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpci3vdwjc: /tmp/tmpci3vdwjc.cpp:36: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += 1;\n        count += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv51nadhw: /tmp/tmpv51nadhw.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ m;\n    for (auto &token : tokens) {\n        auto it = m.find(token);\n   \
    \     if (it == m.end()) {\n            it = m[token] = 1;\n        } else {\n\
    \            ++it->second;\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvx0__104.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpvx0__104.cpp:28:29: error:\
    \ no match for \u2018operator=\u2019 (operand types are \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >\u2019 and \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::mapped_type\u2019 {aka \u2018long int\u2019})\n   28 |          \
    \   it = m[token] = 1;\n      |                             ^\nIn file included\
    \ from /usr/include/c++/9/map:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpvx0__104.cpp:2:\n/usr/include/c++/9/bits/stl_tree.h:256:12:\
    \ note: candidate: \u2018constexpr std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >& std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >::operator=(const std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >&)\u2019\n  256 |     struct _Rb_tree_iterator\n      |         \
    \   ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_tree.h:256:12: note:   no known\
    \ conversion for argument 1 from \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::mapped_type\u2019 {aka \u2018long int\u2019} to \u2018const std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >&\u2019\n/usr/include/c++/9/bits/stl_tree.h:256:12:\
    \ note: candidate: \u2018constexpr std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >& std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >::operator=(std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >&&)\u2019\n/usr/include/c++/9/bits/stl_tree.h:256:12: note:   no\
    \ known conversion for argument 1 from \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::mapped_type\u2019 {aka \u2018long int\u2019} to \u2018std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >&&\u2019\n"
  stdout: ''
  timestamp: 1660123793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for (auto &c : m) {\n        if (freq > m[c]) {\n\
    \            freq = m[c];\n            temp = c;\n        }\n    }\n    return\
    \ std::map<std::string,long>({{temp, freq}});\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp36pj3hr7.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp36pj3hr7.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp36pj3hr7.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string letter;\n    long count = 0;\n    for(auto &c : test) {\n    \
    \    letter = c;\n        ++count;\n        histogram.insert({letter, count});\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppfam52yw: /tmp/tmppfam52yw.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t max = 0;\n    size_t maxCount = 0;\n    for (size_t i = 0;\
    \ i < test.size(); i++) {\n        temp = test[i];\n        if (m.find(temp) ==\
    \ m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n\
    \        }\n        if (m[temp] > max) {\n            max = m[temp];\n       \
    \     maxCount = 1;\n        } else if (m[temp] == max) {\n            maxCount++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp69uhrihx: /tmp/tmp69uhrihx.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t cnt = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        temp = test.substr(i,1);\n        if (m.find(temp) == m.end()) {\n  \
    \          m[temp] = 1;\n        } else {\n            m[temp] += 1;\n       \
    \ }\n    }\n    for (auto itr : m) {\n        if (cnt < itr.second) {\n      \
    \      cnt = itr.second;\n        }\n    }\n    return m;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxmj4yjpl: /tmp/tmpxmj4yjpl.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for (auto c : test) {\n        if (m.find(c) == m.end()) {\n    \
    \        m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n    }\n\
    \    for (auto c : m) {\n        if (m[c] > 1) {\n            temp = c;\n    \
    \    }\n    }\n    if (temp != \"\") {\n        m.insert({temp, m[temp]});\n \
    \   }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3czwidq.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpl3czwidq.cpp:21:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpl3czwidq.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto &c : test) {\n        word = c;\n \
    \       auto it = m.find(word);\n        if(it != m.end()) {\n            count\
    \ += it->second;\n        } else {\n            count = 1;\n            m.insert({word,\
    \ count});\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr8fir2wd: /tmp/tmpr8fir2wd.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long max = 0;\n  long count = 0;\n  for (auto &c : test) {\n    temp\
    \ = c;\n    histogram[temp]++;\n    if (histogram[temp] > max) {\n      max =\
    \ histogram[temp];\n    }\n  }\n  for (auto &c : histogram) {\n    if (c.second\
    \ > count) {\n      count = c.second;\n    }\n  }\n  return histogram;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1_zdc7zf: /tmp/tmp1_zdc7zf.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for (auto &c : test) {\n        if (m.find(c) == m.end()) {\n   \
    \         m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n   \
    \ }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp33xd3z7y.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp33xd3z7y.cpp:21:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp33xd3z7y.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 0;\n    for (auto &c : test) {\n     \
    \   temp = c;\n        ++count;\n        histogram[temp] += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpml48d0ft: /tmp/tmpml48d0ft.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        if (m.find(temp) == m.end()) {\n            m[temp]\
    \ = 1;\n        } else {\n            m[temp] += 1;\n        }\n    }\n    for\
    \ (auto &c : m) {\n        if (c.second > count) {\n            count = c.second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmphaf4g81l: /tmp/tmphaf4g81l.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::map<std::string,long> histogram;\n    std::istringstream iss(test);\n\
    \    while (std::getline(iss, token, ' ')) {\n        tokens.push_back(token);\n\
    \    }\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzq8vlxz: /tmp/tmpwzq8vlxz.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto c : test) {\n        temp = c;\n  \
    \      ++freq;\n        if (m.find(temp) == m.end()) {\n            m[temp] =\
    \ freq;\n        } else {\n            m[temp] += freq;\n        }\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp972pbyxu: /tmp/tmp972pbyxu.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto &c : test) {\n    temp = c;\n    ++count;\n\
    \    if (m.find(temp) != m.end()) {\n      m[temp] += 1;\n    } else {\n     \
    \ m[temp] = 1;\n    }\n  }\n  for (auto &i : m) {\n    if (i.second > count) {\n\
    \      count = i.second;\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7s49as79: /tmp/tmp7s49as79.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        count = 1;\n    }\n  \
    \  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpq0b0lfkb: /tmp/tmpq0b0lfkb.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string temp;\n    std::map<std::string,long>\
    \ histogram;\n    std::string temp2;\n    long temp3;\n    long temp4;\n    long\
    \ temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n\
    \    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long\
    \ temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n\
    \    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long\
    \ temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n\
    \    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long\
    \ temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n\
    \    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long\
    \ temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n\
    \    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long\
    \ temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n\
    \    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long\
    \ temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n\
    \    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long\
    \ temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n\
    \    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long\
    \ temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n\
    \    long temp82;\n    long temp83;\n    long temp84;\n    long temp85;\n    long\
    \ temp86;\n    long temp87;\n\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyoj3_x22: /tmp/tmpyoj3_x22.cpp:110: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    std::string letter;\n    long count;\n    for (auto &token :\
    \ tokens) {\n        std::istringstream iss2(token);\n        while (iss2 >> letter)\
    \ {\n            histogram[letter] += 1;\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvwwsz_n5: /tmp/tmpvwwsz_n5.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        if(m.find(temp) == m.end()) {\n            m[temp]\
    \ = count;\n        } else {\n            m[temp] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ros0y9o: /tmp/tmp5ros0y9o.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    std::string key;\n    long value;\n    for (auto &token : tokens)\
    \ {\n        histogram[token] = 0;\n    }\n    for (auto &token : tokens) {\n\
    \        histogram[token] += 1;\n    }\n    for (auto &token : tokens) {\n   \
    \     if (histogram[token] > histogram[token]) {\n            key = token;\n \
    \           value = histogram[token];\n        }\n    }\n    return std::map<std::string,long>({{key,\
    \ value}});\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ryop2ql: /tmp/tmp5ryop2ql.cpp:43: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string word;\n    std::map<std::string,long>\
    \ histogram;\n    long count = 1;\n    for(auto &c : test) {\n        word = c;\n\
    \        histogram[word] += count;\n        count += 1;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpllt6lfbe: /tmp/tmpllt6lfbe.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 1;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = count;\n            count = 1;\n        }\
    \ else {\n            count = m[c];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8mhj93e2.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp8mhj93e2.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp8mhj93e2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long freq = 0;\n  for (auto &c : test) {\n    temp = c;\n    ++freq;\n\
    \    if (m.find(temp) == m.end()) {\n      m[temp] = freq;\n    } else {\n   \
    \   m[temp] += freq;\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvako9by2: /tmp/tmpvako9by2.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c: test) {\n        temp = c;\n   \
    \     freq++;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] += freq;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxtrykuga: /tmp/tmpxtrykuga.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    \n    std::map<std::string,long> histogram;\n\
    \    \n    std::string word;\n    \n    // Split string into words\n    std::vector<std::string>\
    \ words;\n    \n    std::istringstream iss(test);\n    \n    while (std::getline(iss,\
    \ word, ' ')) {\n        \n        // Add word to histogram\n        histogram[word]++;\n\
    \        \n        // Add word to words vector\n        words.push_back(word);\n\
    \    }\n    \n    // Iterate over histogram and find max count\n    std::string\
    \ maxWord;\n    long maxCount = 0;\n    \n    for (std::map<std::string,long>::iterator\
    \ it = histogram.begin(); it != histogram.end(); ++it) {\n        \n        if\
    \ (it->second > maxCount) {\n            maxCount = it->second;\n            maxWord\
    \ = it->first;\n        }\n    }\n    \n    // Return map with max count and word\n\
    \    return std::map<std::string,long>({{maxWord, maxCount}});\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0xqlph66: /tmp/tmp0xqlph66.cpp:54: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c: test) {\n        if(!m.count(c))\
    \ {\n            m[c] = 1;\n        } else {\n            m[c] += 1;\n       \
    \ }\n    }\n    for(auto &c: m) {\n        if(c.second > count) {\n          \
    \  temp = c.first;\n            count = c.second;\n        }\n    }\n    if(m.size()\
    \ == 0) {\n        return std::map<std::string,long>();\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ci51yyp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp9ci51yyp.cpp:22:22: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::count(char&)\u2019\n   22 |         if(!m.count(c)) {\n      |  \
    \                    ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmp9ci51yyp.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1214:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::size_type std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::count(const key_type&) const [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::size_type = long unsigned int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \ 1214 |       count(const key_type& __x) const\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_map.h:1214:29:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1214 |       count(const key_type& __x) const\n      |             ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1220:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((const std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_count_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::count(const _Kt&) const [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1220 |  count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))\n\
    \      |  ^~~~~\n/usr/include/c++/9/bits/stl_map.h:1220:2: note:   template argument\
    \ deduction/substitution failed:\n"
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string temp;\n    std::map<std::string,long>\
    \ m;\n    size_t maxCount = 0;\n    size_t maxCountLetter = 0;\n    for (size_t\
    \ i = 0; i < test.size(); i++) {\n        temp = test.substr(i, 1);\n        if\
    \ (m.find(temp) != m.end()) {\n            m[temp] += 1;\n            if (m[temp]\
    \ > maxCount) {\n                maxCount = m[temp];\n                maxCountLetter\
    \ = i;\n            }\n        } else {\n            m[temp] = 1;\n        }\n\
    \    }\n    if (maxCount > 0) {\n        for (auto it = m.begin(); it != m.end();\
    \ ++it) {\n            if (it->second == maxCount) {\n                m.erase(it);\n\
    \                break;\n            }\n        }\n    }\n    return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgdjzk1o1: /tmp/tmpgdjzk1o1.cpp:47: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = std::to_string(count);\n      count = 0;\n      histogram.insert({word,\
    \ 1});\n    } else {\n      ++count;\n    }\n  }\n  if (count > 0) {\n    word\
    \ = std::to_string(count);\n    histogram.insert({word, 1});\n  }\n  return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcb8m7ywr: /tmp/tmpcb8m7ywr.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        temp = test.substr(pos,1);\n        if(m.find(temp) != m.end()) {\n\
    \            m[temp] += 1;\n        } else {\n            m[temp] = 1;\n     \
    \   }\n        pos = pos + 1;\n    }\n    for(auto itr = m.begin(); itr != m.end();\
    \ ++itr) {\n        if(itr->second > count) {\n            count = itr->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbais0ubl: /tmp/tmpbais0ubl.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    size_t\
    \ maxCount = 0;\n    std::string maxKey = \"\";\n    for (auto c : test) {\n \
    \       auto it = m.find(c);\n        if (it == m.end()) {\n            m[c] =\
    \ 1;\n        } else {\n            m[c] += 1;\n        }\n        if (m[c] >\
    \ maxCount) {\n            maxCount = m[c];\n            maxKey = c; // or m[c].first\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfvqcd5od.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpfvqcd5od.cpp:22:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpfvqcd5od.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::pair<std::string,long> >\
    \ v;\n    std::string word;\n    long count = 0;\n    for(auto c : test) {\n \
    \       word = c;\n        v.push_back(std::make_pair(word,count));\n        count++;\n\
    \    }\n    std::map<std::string,long> m;\n    for(auto p : v) {\n        if(m.find(p.first)\
    \ == m.end()) {\n            m[p.first] = p.second;\n        } else {\n      \
    \      m[p.first] += p.second;\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfs0c8ymd: /tmp/tmpfs0c8ymd.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &i : test) {\n        temp = i;\n        if(m.find(temp)\
    \ != m.end()) {\n            m[temp]++;\n        } else {\n            m[temp]\
    \ = 1;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate =\
    \ histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptzsv0wrq: /tmp/tmptzsv0wrq.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::pair<std::string,long> >\
    \ v;\n    std::string temp;\n    long freq = 0;\n    for(auto &c : test) {\n \
    \       temp = c;\n        v.push_back(std::pair<std::string,long>(temp,1));\n\
    \    }\n    for(auto &c : v) {\n        freq += c.second;\n    }\n    std::map<std::string,long>\
    \ m;\n    for(auto &c : v) {\n        m[c.first] = c.second;\n    }\n    for(auto\
    \ &c : m) {\n        if(m[c.first] > freq) {\n            freq = m[c.first];\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjejc8rl0: /tmp/tmpjejc8rl0.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        temp = c;\n \
    \       while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        if(m.find(temp) != m.end()) {\n            m[temp]\
    \ += 1;\n        } else {\n            m[temp] = 1;\n        }\n    }\n    for(auto\
    \ &c : m) {\n        if(c.second > count) {\n            count = c.second;\n \
    \       }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmsrx4lki: /tmp/tmpmsrx4lki.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string letter;\n    long count = 0;\n    for(auto &c : test) {\n    \
    \    letter = c;\n        ++count;\n        histogram.insert({letter, count});\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppfam52yw: /tmp/tmppfam52yw.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        if(m.find(temp) == m.end()) {\n            m[temp]\
    \ = count;\n        } else {\n            m[temp] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ros0y9o: /tmp/tmp5ros0y9o.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        pos = test.find_first_of(' ', pos);\n        if(pos == std::string::npos)\
    \ {\n            pos = test.size();\n        }\n        temp = test.substr(pos,\
    \ test.size() - pos);\n        if(m.find(temp) != m.end()) {\n            m[temp]\
    \ += 1;\n        } else {\n            m[temp] = 1;\n        }\n        pos =\
    \ pos + 1;\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7fas1xnc: /tmp/tmp7fas1xnc.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += 1;\n        count += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv51nadhw: /tmp/tmpv51nadhw.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c : test) {\n        temp = c;\n        if(m.find(temp)\
    \ == m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]\
    \ += 1;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpov20uequ: /tmp/tmpov20uequ.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        temp = c;\n \
    \       ++count;\n        auto it = m.find(temp);\n        if(it != m.end()) {\n\
    \            it->second += count;\n        } else {\n            m[temp] = count;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcclxzefm: /tmp/tmpcclxzefm.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizz9u7za: /tmp/tmpizz9u7za.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for (auto &c : test) {\n        temp = c;\n        ++m[temp];\n \
    \   }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5bkcdpfy: /tmp/tmp5bkcdpfy.cpp:28: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 0;\n    for(auto &c: test) {\n       \
    \ temp = c;\n        while(temp.find(\" \") != std::string::npos) {\n        \
    \    temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\" \")\
    \ != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n       \
    \ }\n        while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        while(temp.find(\" \") != std::string::npos) {\n \
    \           temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\"\
    \ \") != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n   \
    \     }\n        while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        while(temp.find(\" \") != std::string::npos) {\n \
    \           temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\"\
    \ \") != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n   \
    \     }\n        while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        while(temp.find(\" \") != std::string::npos) {\n \
    \           temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\"\
    \ \") != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n   \
    \     }\n        while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        while(temp.find(\" \") != std::string::npos) {\n \
    \           temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\"\
    \ \") != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n   \
    \     }\n        while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        while(temp.find(\" \") != std::string::npos) {\n \
    \           temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\"\
    \ \") != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n   \
    \     }\n        while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        while(temp.find(\" \") != std::string::npos) {\n \
    \           temp.erase(temp.find(\" \"));\n        }\n        while(temp.find(\"\
    \ \") != std::string::npos) {\n            temp.erase(temp.find(\" \"));\n   \
    \     }\n        \n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4kza6om.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpp4kza6om.cpp:85:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   85\
    \ | int main() {\n      |            ^\n/tmp/tmpp4kza6om.cpp:95:1: error: expected\
    \ \u2018}\u2019 at end of input\n   95 | }\n      | ^\n/tmp/tmpp4kza6om.cpp:17:56:\
    \ note: to match this \u2018{\u2019\n   17 | std::map<std::string,long> histogram(std::string\
    \ test) {\n      |                                                        ^\n\
    /tmp/tmpp4kza6om.cpp:95:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   95 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660123796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        ++count;\n    }\n   \
    \ return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpi_u334p5: /tmp/tmpi_u334p5.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    size_t count = 0;\n    for (size_t i = 0; i < test.size();\
    \ i++) {\n        temp = test.substr(i,1);\n        if (histogram.find(temp) ==\
    \ histogram.end()) {\n            histogram[temp] = 1;\n        } else {\n   \
    \         histogram[temp] += 1;\n        }\n    }\n    for (std::map<std::string,long>::iterator\
    \ it = histogram.begin(); it != histogram.end(); ++it) {\n        if (it->second\
    \ > count) {\n            count = it->second;\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpa54egh2f: /tmp/tmpa54egh2f.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        for(auto &i : histogram) {\n            if(i.first == word)\
    \ {\n                i.second += 1;\n                break;\n            }\n \
    \       }\n        if(histogram.find(word) == histogram.end()) {\n           \
    \ histogram[word] = 1;\n        } else {\n            histogram[word] += 1;\n\
    \        }\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpm9s87r05: /tmp/tmpm9s87r05.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::istringstream\
    \ iss(test);\n    std::string token;\n    while (std::getline(iss, token, ' '))\
    \ {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long> histogram;\n\
    \    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxz285bey: /tmp/tmpxz285bey.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        while(temp.find(\" \") != std::string::npos) {\n       \
    \     temp.erase(temp.find(\" \"));\n        }\n        if(histogram.find(temp)\
    \ == histogram.end()) {\n            histogram[temp] = 1;\n        } else {\n\
    \            histogram[temp] += 1;\n        }\n    }\n    for(auto &c : histogram)\
    \ {\n        if(c.second > count) {\n            count = c.second;\n        }\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjpevr91: /tmp/tmpbjpevr91.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto &c : test) {\n        word = c;\n \
    \       ++count;\n        auto it = m.find(word);\n        if(it == m.end()) {\n\
    \            m.insert({word, count});\n        } else {\n            it->second\
    \ += count;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpon8y8ld2: /tmp/tmpon8y8ld2.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 1;\n  for (int i = 0; i < test.size(); i++) {\n    temp\
    \ = test[i];\n    if (m.find(temp) == m.end()) {\n      m[temp] = count;\n   \
    \ } else {\n      m[temp] += count;\n    }\n    count++;\n  }\n  return m;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxsjtkn6y: /tmp/tmpxsjtkn6y.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        auto it = m.find(temp);\n        if(it != m.end())\
    \ {\n            it->second = it->second + count;\n        } else {\n        \
    \    m[temp] = count;\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6agr3wnt: /tmp/tmp6agr3wnt.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto c : test) {\n    temp = c;\n    count\
    \ = 1;\n    if (m.find(temp) != m.end()) {\n      count = m[temp];\n    }\n  \
    \  m[temp] = count;\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmps8t2usuq: /tmp/tmps8t2usuq.cpp:33: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    \n    std::map<std::string,long> histogram;\n\
    \    \n    std::string temp;\n    \n    for (auto &c : test) {\n        \n   \
    \     temp = c;\n        \n        auto it = histogram.find(temp);\n        \n\
    \        if (it == histogram.end()) {\n            \n            histogram[temp]\
    \ = 1;\n            \n        } else {\n            \n            histogram[temp]\
    \ += 1;\n            \n        }\n        \n    }\n    \n    return histogram;\n\
    \    \n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp80810eih: /tmp/tmp80810eih.cpp:46: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto c : test) {\n    if (c != ' ') {\n   \
    \   temp = c;\n      count = 1;\n    } else {\n      ++count;\n    }\n    histogram[temp]\
    \ += count;\n  }\n  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwk6tiphi: /tmp/tmpwk6tiphi.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t cnt = 0;\n    for(auto &c : test) {\n        temp = c;\n \
    \       ++cnt;\n        if(m.find(temp) == m.end()) {\n            m[temp] = 1;\n\
    \        } else {\n            m[temp] += 1;\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdkhjkqw6: /tmp/tmpdkhjkqw6.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c : test) {\n        temp = temp + c;\n    }\n    temp\
    \ = temp + \" \";\n    for(auto &c : temp) {\n        m[c] = m.find(c) == m.end()\
    \ ? 0 : m[c] + 1;\n    }\n    return m;\n}\nint main() {\n    auto candidate =\
    \ histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn09m6zbt.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpn09m6zbt.cpp:25:10: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>\u2019 and \u2018char\u2019)\n   25 |         m[c] = m.find(c) == m.end()\
    \ ? 0 : m[c] + 1;\n      |          ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpn09m6zbt.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operator[](key_type&& __k)\n      |       ^~~~~~~~\n/usr/include"
  stdout: ''
  timestamp: 1660123796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto c : test) {\n       \
    \ word = c;\n        ++count;\n        histogram[word] += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp00yi50tw: /tmp/tmp00yi50tw.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        auto it = m.find(temp);\n        if(it == m.end())\
    \ {\n            m.insert({temp, count});\n        } else {\n            it->second\
    \ += count;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfn5nnvhi: /tmp/tmpfn5nnvhi.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t max = 0;\n    size_t maxCount = 0;\n    for (size_t i = 0;\
    \ i < test.size(); i++) {\n        temp = test.substr(i,1);\n        if (m.find(temp)\
    \ != m.end()) {\n            m[temp] += 1;\n            if (m[temp] > max) {\n\
    \                max = m[temp];\n            }\n        } else {\n           \
    \ m[temp] = 1;\n        }\n    }\n    for (auto i : m) {\n        if (i.second\
    \ > maxCount) {\n            maxCount = i.second;\n        }\n    }\n    for (auto\
    \ i : m) {\n        if (i.second == maxCount) {\n            std::cout << i.first\
    \ << \" \" << i.second << std::endl;\n        }\n    }\n    return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxf9k7r5q: /tmp/tmpxf9k7r5q.cpp:47: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: '  3

    '
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c: test) {\n        temp = temp + c;\n        if(m.find(temp)\
    \ == m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzdw1zlsi: /tmp/tmpzdw1zlsi.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for (auto c : test) {\n        word = c;\n \
    \       if (m.find(word) == m.end()) {\n            m[word] = count;\n       \
    \ } else {\n            m[word] += count;\n        }\n        ++count;\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuz032xbm: /tmp/tmpuz032xbm.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long cnt = 0;\n  for (auto &c : test) {\n    temp = c;\n    ++cnt;\n\
    \    if (m.find(temp) == m.end()) {\n      m[temp] = cnt;\n    } else {\n    \
    \  m[temp] += cnt;\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp66f40kpj: /tmp/tmp66f40kpj.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for (auto c : test) {\n        auto it = m.find(c);\n        if (it\
    \ == m.end()) {\n            m.insert({c, 1});\n        } else {\n           \
    \ ++it->second;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf10mv0a5.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpf10mv0a5.cpp:21:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpf10mv0a5.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        ++count;\n        auto it = histogram.find(word);\n    \
    \    if(it == histogram.end()) {\n            histogram[word] = count;\n     \
    \   } else {\n            it->second += count;\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkutln3e5: /tmp/tmpkutln3e5.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto c : test) {\n        word = c;\n  \
    \      count = m.count(word);\n        m.insert({word,count+1});\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp79vpw0bp: /tmp/tmp79vpw0bp.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for(auto &c : test) {\n    temp = c;\n    ++count;\n\
    \    m.insert({temp,count});\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmphlb3b8hh: /tmp/tmphlb3b8hh.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = std::to_string(count);\n      count = 0;\n      histogram.insert({word,\
    \ 1});\n    } else {\n      ++count;\n    }\n  }\n  return histogram;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpso0i9nya: /tmp/tmpso0i9nya.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while (pos < test.size())\
    \ {\n        pos = test.find_first_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = test.size();\n        }\n        temp = test.substr(pos,\
    \ test.size() - pos);\n        if (m.find(temp) == m.end()) {\n            m[temp]\
    \ = 1;\n        } else {\n            m[temp] += 1;\n        }\n        pos =\
    \ pos + 1;\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph7tkjp45: /tmp/tmph7tkjp45.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string temp;\n    std::map<std::string,long>\
    \ m;\n    size_t maxCount = 0;\n    size_t maxCountLetter = 0;\n    for (size_t\
    \ i = 0; i < test.size(); i++) {\n        temp = test[i];\n        if (m.find(temp)\
    \ == m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n\
    \        }\n        if (m[temp] > maxCount) {\n            maxCount = m[temp];\n\
    \            maxCountLetter = i;\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyvlx1u66: /tmp/tmpyvlx1u66.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long cnt = 0;\n  for (auto &c : test) {\n    temp = c;\n    ++cnt;\n\
    \    if (m.find(temp) == m.end()) {\n      m[temp] = cnt;\n    } else {\n    \
    \  m[temp] += cnt;\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp66f40kpj: /tmp/tmp66f40kpj.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &i : test) {\n        temp = i;\n  \
    \      ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] += freq;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9bwsnw8h: /tmp/tmp9bwsnw8h.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        ++count;\n        auto it = histogram.find(word);\n    \
    \    if(it != histogram.end()) {\n            it->second += count;\n        }\
    \ else {\n            histogram[word] = count;\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp54_i9dd1: /tmp/tmp54_i9dd1.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string letter;\n    long count = 0;\n    for(auto &c : test) {\n    \
    \    letter = c;\n        count = histogram.at(letter);\n        histogram[letter]\
    \ = count + 1;\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        histogram[token] = histogram.at(token)\
    \ + 1;\n    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    size_t count = 0;\n    size_t maxCount = 0;\n    for\
    \ (size_t i = 0; i < test.size(); i++) {\n        temp = test.substr(i, 1);\n\
    \        if (histogram.find(temp) == histogram.end()) {\n            histogram[temp]\
    \ = 1;\n        } else {\n            histogram[temp] += 1;\n        }\n    }\n\
    \    for (std::map<std::string,long>::iterator it = histogram.begin(); it != histogram.end();\
    \ ++it) {\n        if (it->second > maxCount) {\n            maxCount = it->second;\n\
    \        }\n    }\n    for (std::map<std::string,long>::iterator it = histogram.begin();\
    \ it != histogram.end(); ++it) {\n        if (it->second == maxCount) {\n    \
    \        histogram.insert(std::pair<std::string,long>(it->first, it->second));\n\
    \        }\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp398mi6rq: /tmp/tmp398mi6rq.cpp:44: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        if(m.find(temp) == m.end()) {\n            m[temp]\
    \ = count;\n        } else {\n            m[temp] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ros0y9o: /tmp/tmp5ros0y9o.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = \" \";\n      count = 1;\n    } else {\n      word = c;\n      count++;\n\
    \    }\n    histogram[word] += count;\n  }\n  return histogram;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpth7_amuv: /tmp/tmpth7_amuv.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c: test) {\n        temp = temp + c;\n        if(m.find(temp)\
    \ == m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzdw1zlsi: /tmp/tmpzdw1zlsi.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::pair<std::string,long> >\
    \ v;\n    std::string temp;\n    std::map<std::string,long> m;\n    for(auto &c\
    \ : test) {\n        temp = c;\n        v.push_back(std::make_pair(temp,1));\n\
    \    }\n    for(auto &c : v) {\n        m[c.first] += c.second;\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppcvjuzb0: /tmp/tmppcvjuzb0.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c : test) {\n        temp = c;\n  \
    \      ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] += freq;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1vkszmcr: /tmp/tmp1vkszmcr.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizz9u7za: /tmp/tmpizz9u7za.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = word;\n      count = 0;\n    } else {\n      word = word + c;\n   \
    \   count++;\n    }\n  }\n  histogram[word] = count;\n  return histogram;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ebsvrcl: /tmp/tmp7ebsvrcl.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::pair<std::string,long> >\
    \ v;\n    std::string word;\n    long count = 0;\n    for(auto &c : test) {\n\
    \        word = c;\n        v.push_back(std::make_pair(word,count));\n       \
    \ count++;\n    }\n    std::map<std::string,long> m;\n    for(auto &p : v) {\n\
    \        auto it = m.find(p.first);\n        if(it == m.end()) {\n           \
    \ m[p.first] = p.second;\n        } else {\n            m[p.first] += p.second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb9d84gpj: /tmp/tmpb9d84gpj.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for (auto &c : test) {\n        temp = temp + c;\n    }\n    for\
    \ (auto &c : temp) {\n        m[c] = m[c] + 1;\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbsfbg_od.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpbsfbg_od.cpp:24:10: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>\u2019 and \u2018char\u2019)\n   24 |         m[c] = m[c] + 1;\n  \
    \    |          ^\nIn file included from /usr/include/c++/9/map:61,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n       \
    \          from /tmp/tmpbsfbg_od.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operator[](key_type&& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:510:2"
  stdout: ''
  timestamp: 1660123796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        pos = test.find_first_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ {\n            pos = test.size();\n        }\n        temp = test.substr(pos);\n\
    \        if(m.find(temp) != m.end()) {\n            m[temp] += 1;\n        } else\
    \ {\n            m[temp] = 1;\n        }\n        pos = pos + 1;\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpemf6u9fk: /tmp/tmpemf6u9fk.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while (pos < test.size())\
    \ {\n        temp = test.substr(pos, 1);\n        if (m.find(temp) == m.end())\
    \ {\n            m[temp] = 1;\n        } else {\n            m[temp] += 1;\n \
    \       }\n        pos += 1;\n    }\n    for (auto it = m.begin(); it != m.end();\
    \ ++it) {\n        if (it->second > count) {\n            count = it->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1s6qo_lj: /tmp/tmp1s6qo_lj.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        while(temp.find(\" \") == std::string::npos) {\n       \
    \     temp.insert(0,\" \");\n        }\n        auto itr = histogram.find(temp);\n\
    \        if(itr == histogram.end()) {\n            histogram[temp] = 1;\n    \
    \    } else {\n            histogram[temp] += 1;\n        }\n    }\n    for(auto\
    \ &itr : histogram) {\n        if(itr.second > count) {\n            count = itr.second;\n\
    \        }\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptqywa3gt: /tmp/tmptqywa3gt.cpp:42: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        temp = test.substr(pos,1);\n        if(m.find(temp) == m.end()) {\n\
    \            m[temp] = 1;\n        } else {\n            m[temp] += 1;\n     \
    \   }\n        pos += 1;\n    }\n    for(auto itr = m.begin(); itr != m.end();\
    \ ++itr) {\n        if(count < itr->second) {\n            count = itr->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8p15odk7: /tmp/tmp8p15odk7.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for (auto &c : m) {\n        if (m[c] > count) {\n\
    \            count = m[c];\n            temp = c;\n        }\n    }\n    return\
    \ std::map<std::string,long>({{temp,count}});\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn_t371s_.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpn_t371s_.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpn_t371s_.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        pos = test.find_first_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ {\n            break;\n        }\n        temp = test.substr(pos, test.size());\n\
    \        if(m.find(temp) != m.end()) {\n            m[temp] += 1;\n        } else\
    \ {\n            m[temp] = 1;\n        }\n        pos = pos + 1;\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpa4up46ve: /tmp/tmpa4up46ve.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string letter;\n    long count = 0;\n    for(auto &c : test) {\n    \
    \    letter = c;\n        ++count;\n        histogram[letter] += 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1wx0vqay: /tmp/tmp1wx0vqay.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c: test) {\n        temp = temp + c;\n    }\n    for(auto\
    \ &c: temp) {\n        m[c] = m[c] + 1;\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpix62q2av.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpix62q2av.cpp:24:10: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>\u2019 and \u2018char\u2019)\n   24 |         m[c] = m[c] + 1;\n  \
    \    |          ^\nIn file included from /usr/include/c++/9/map:61,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n       \
    \          from /tmp/tmpix62q2av.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operator[](key_type&& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:510:2"
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto c : test) {\n        temp = c;\n  \
    \      freq++;\n        if (m.find(temp) == m.end()) {\n            m[temp] =\
    \ freq;\n        } else {\n            m[temp] += freq;\n        }\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3pczyp_b: /tmp/tmp3pczyp_b.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto c : test) {\n       \
    \ word = c;\n        histogram[word]++;\n        count++;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpz40ox3qe: /tmp/tmpz40ox3qe.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string temp;\n    std::map<std::string,long>\
    \ m;\n    long count = 1;\n    for(auto &c : test) {\n        temp = c;\n    \
    \    if(m.find(temp) == m.end()) {\n            m[temp] = count;\n        } else\
    \ {\n            m[temp] += count;\n        }\n        ++count;\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnxx085ck: /tmp/tmpnxx085ck.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        temp = test[i];\n        if (m.find(temp) == m.end()) {\n           \
    \ m[temp] = 1;\n        } else {\n            m[temp] += 1;\n        }\n    }\n\
    \    for (auto i : m) {\n        if (i.second > count) {\n            count =\
    \ i.second;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsomailox: /tmp/tmpsomailox.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    split(test,\
    \ tokens, \" \");\n    std::map<std::string,long> histogram;\n    for(std::string\
    \ token: tokens) {\n        histogram[token] = histogram.count(token) > 0 ? histogram[token]\
    \ + 1 : 1;\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkowxznav.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpkowxznav.cpp:19:5: error: \u2018\
    split\u2019 was not declared in this scope\n   19 |     split(test, tokens, \"\
    \ \");\n      |     ^~~~~\n"
  stdout: ''
  timestamp: 1660123798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 1;\n    for(auto &c: test) {\n        if(m.find(c) ==\
    \ m.end()) {\n            m[c] = count;\n            count = 1;\n        } else\
    \ {\n            count += m[c];\n        }\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu3xn90xr.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpu3xn90xr.cpp:22:20: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if(m.find(c) == m.end()) {\n \
    \     |                    ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpu3xn90xr.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduct"
  stdout: ''
  timestamp: 1660123799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for (auto &c : m) {\n        if (m[c] > count) {\n\
    \            count = m[c];\n            temp = c;\n        }\n    }\n    return\
    \ std::map<std::string,long>({{temp, count}});\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplq272izk.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmplq272izk.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmplq272izk.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto c : test) {\n        temp = c;\n\
    \        ++count;\n        if(m.find(temp) == m.end()) {\n            m[temp]\
    \ = count;\n        } else {\n            m[temp] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmph0350hfc: /tmp/tmph0350hfc.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   temp = temp + c;\n      continue;\n    }\n    if (histogram.find(temp) !=\
    \ histogram.end()) {\n      histogram[temp] += 1;\n    } else {\n      histogram[temp]\
    \ = 1;\n    }\n  }\n  for (auto &p : histogram) {\n    if (p.second > count) {\n\
    \      count = p.second;\n    }\n  }\n  return histogram;\n}\nint main() {\n \
    \   auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqf7iwus4: /tmp/tmpqf7iwus4.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ m;\n    for(auto &i : tokens) {\n        auto it = m.find(i);\n        if (it\
    \ == m.end()) {\n            m[i] = 1;\n        } else {\n            m[i]++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8ocza80b: /tmp/tmp8ocza80b.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto &c : test) {\n        temp = c;\n \
    \       freq++;\n        if (m.find(temp) == m.end()) {\n            m[temp] =\
    \ freq;\n        } else {\n            m[temp] += freq;\n        }\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkg8vvgdr: /tmp/tmpkg8vvgdr.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto c : test) {\n        word = c;\n  \
    \      ++count;\n        if(m.find(word) == m.end()) {\n            m[word] =\
    \ count;\n        } else {\n            m[word] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbr410s6k: /tmp/tmpbr410s6k.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::istringstream\
    \ iss(test);\n    std::string token;\n    while (std::getline(iss, token, ' '))\
    \ {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long> histogram;\n\
    \    for (std::string token : tokens) {\n        histogram[token] += 1;\n    }\n\
    \    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpg_dxsxat: /tmp/tmpg_dxsxat.cpp:33: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for (auto &c : test) {\n     \
    \   if (histogram.find(c) == histogram.end()) {\n            histogram.insert({c,\
    \ count});\n        } else {\n            histogram[c] += count;\n        }\n\
    \    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvrwefl0y.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpvrwefl0y.cpp:22:29: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (histogram.find(c) == histogram.end())\
    \ {\n      |                             ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpvrwefl0y.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note: "
  stdout: ''
  timestamp: 1660123799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  for (auto &c : test) {\n    if (m.find(c) == m.end()) {\n      m[c]\
    \ = 1;\n    } else {\n      m[c] += 1;\n    }\n  }\n  for (auto &c : m) {\n  \
    \  if (m[c] > 1) {\n      temp = c;\n    }\n  }\n  if (temp != \"\") {\n    m.insert({temp,\
    \ m[temp]});\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3slga8as.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp3slga8as.cpp:21:17: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |     if (m.find(c) == m.end()) {\n    \
    \  |                 ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmp3slga8as.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduction/su"
  stdout: ''
  timestamp: 1660123799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        count = 1;\n    }\n  \
    \  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpq0b0lfkb: /tmp/tmpq0b0lfkb.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto &c : test) {\n    temp = c;\n    m.insert({temp,m.count(temp)+1});\n\
    \  }\n  for (auto &c : m) {\n    if (c.second > count) {\n      count = c.second;\n\
    \    }\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8udfdh9g: /tmp/tmp8udfdh9g.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for (auto &c : test) {\n        word = c;\n \
    \       auto it = m.find(word);\n        if (it == m.end()) {\n            it\
    \ = m.emplace(word, freq).first;\n        }\n        it->second += 1;\n      \
    \  freq++;\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfhb9ptb0: /tmp/tmpfhb9ptb0.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto &c : test) {\n        word = c;\n \
    \       count = m.count(word);\n        if(count > 0) {\n            m[word] +=\
    \ count;\n        } else {\n            m[word] = count;\n        }\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6doz7a1s: /tmp/tmp6doz7a1s.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   m.emplace(word, count);\n      word.clear();\n      count = 0;\n    } else\
    \ {\n      word += c;\n      ++count;\n    }\n  }\n  m.emplace(word, count);\n\
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk36ztde8: /tmp/tmpk36ztde8.cpp:36: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        temp = c;\n \
    \       while(temp.find(\" \")!=std::string::npos) {\n            temp = temp.substr(0,temp.find(\"\
    \ \"));\n            count++;\n        }\n        m.insert({temp,count});\n  \
    \  }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk6hxivvs: /tmp/tmpk6hxivvs.cpp:33: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for (auto c : test) {\n      \
    \  temp = c;\n        histogram[temp] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdchk_6ew: /tmp/tmpdchk_6ew.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for(auto &c : test) {\n        temp = c;\n  \
    \      ++freq;\n        if(m.find(temp) == m.end()) {\n            m[temp] = freq;\n\
    \        } else {\n            m[temp] += freq;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1vkszmcr: /tmp/tmp1vkszmcr.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        histogram[temp] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwpcm_jxv: /tmp/tmpwpcm_jxv.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for (auto c : test) {\n        word = c;\n \
    \       ++count;\n        if (m.find(word) == m.end()) {\n            m[word]\
    \ = count;\n        } else {\n            m[word] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgabzma9f: /tmp/tmpgabzma9f.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto &c : test) {\n        word = c;\n \
    \       ++count;\n        auto itr = m.find(word);\n        if(itr != m.end())\
    \ {\n            m[word] += 1;\n        } else {\n            m[word] = 1;\n \
    \       }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpeori3hqs: /tmp/tmpeori3hqs.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        histogram[temp] += 1;\n        if(histogram[temp] > count)\
    \ {\n            count = histogram[temp];\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpawshxi5i: /tmp/tmpawshxi5i.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::map<std::string,long> histogram;\n    std::istringstream iss(test);\n\
    \    while (std::getline(iss, token, ' ')) {\n        tokens.push_back(token);\n\
    \    }\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzq8vlxz: /tmp/tmpwzq8vlxz.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    size_t count = 0;\n    for(auto &c : test) {\n    \
    \    temp = c;\n        ++count;\n        histogram[temp] = histogram[temp] ?\
    \ histogram[temp] + 1 : 1;\n    }\n    return histogram;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_ivj9fev: /tmp/tmp_ivj9fev.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c;\n        histogram[word] += count;\n        count = 1;\n    }\n  \
    \  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpq0b0lfkb: /tmp/tmpq0b0lfkb.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for(auto &c : test) {\n    temp = c;\n    ++count;\n\
    \    m.insert({temp,count});\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmphlb3b8hh: /tmp/tmphlb3b8hh.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 1;\n    for (auto c : test) {\n        word = c;\n \
    \       if (m.find(word) == m.end()) {\n            m[word] = count;\n       \
    \ } else {\n            m[word] += count;\n        }\n        ++count;\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuz032xbm: /tmp/tmpuz032xbm.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long count = 1;\n  for (auto &c : test) {\n    temp = c;\n    histogram[temp]\
    \ += count;\n    count = 1;\n  }\n  return histogram;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmplz3jdlga: /tmp/tmplz3jdlga.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long freq = 0;\n  for(auto &c : test) {\n    temp = c;\n    ++freq;\n\
    \    m.insert({temp,freq});\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ylf1ch_: /tmp/tmp5ylf1ch_.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::map<std::string,long> histogram;\n    while(std::getline(test,\
    \ token, ' ')){\n        tokens.push_back(token);\n    }\n    for(size_t i = 0;\
    \ i < tokens.size(); i++){\n        histogram[tokens[i]] += 1;\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk38wgdkt.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpk38wgdkt.cpp:21:40: error:\
    \ no matching function for call to \u2018getline(std::string&, std::string&, char)\u2019\
    \n   21 |     while(std::getline(test, token, ' ')){\n      |                \
    \                        ^\nIn file included from /usr/include/c++/9/string:56,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk38wgdkt.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Allocator>&, _CharT)\u2019\n 1538 |     getline(basic_istream<_CharT,\
    \ _Traits>& __in,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk38wgdkt.cpp:21:40:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018std::basic_istream<_CharT, _Traits>\u2019\n   21 |\
    \     while(std::getline(test, token, ' ')){\n      |                        \
    \                ^\nIn file included from /usr/include/c++/9/string:55,\n    \
    \             from /usr/include/c++/9/bits/locale_classes.h:40,\n            \
    \     from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9"
  stdout: ''
  timestamp: 1660123799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        temp = test.substr(pos,1);\n        if(m.find(temp) == m.end()) {\n\
    \            m[temp] = 1;\n        } else {\n            m[temp] += 1;\n     \
    \   }\n        pos += 1;\n    }\n    for(auto itr = m.begin(); itr != m.end();\
    \ ++itr) {\n        if(itr->second > count) {\n            count = itr->second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw2op8frf: /tmp/tmpw2op8frf.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        temp = c;\n \
    \       ++count;\n        auto it = m.find(temp);\n        if(it != m.end()) {\n\
    \            it->second += count;\n        } else {\n            m[temp] = count;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcclxzefm: /tmp/tmpcclxzefm.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long count = 0;\n    for(auto c : test) {\n        word = c;\n  \
    \      auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,\
    \ 1});\n        } else {\n            ++it->second;\n        }\n    }\n    for(auto\
    \ it : m) {\n        if(it.second > count) {\n            count = it.second;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp92odz6ph: /tmp/tmp92odz6ph.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    size_t\
    \ maxCount = 0;\n    std::string maxLetter;\n    for (auto c : test) {\n     \
    \   auto it = m.find(c);\n        if (it == m.end()) {\n            it = m.insert({c,\
    \ 0ll}).first;\n        }\n        it->second++;\n        if (it->second > maxCount)\
    \ {\n            maxCount = it->second;\n            maxLetter = c;\n        }\n\
    \    }\n    if (maxCount == 0) {\n        return std::map<std::string,long>();\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu2qcaqf.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpsu2qcaqf.cpp:22:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpsu2qcaqf.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizz9u7za: /tmp/tmpizz9u7za.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        temp = test[i];\n        if (m.find(temp) == m.end()) {\n           \
    \ m[temp] = 1;\n        } else {\n            m[temp] += 1;\n        }\n    }\n\
    \    for (auto itr = m.begin(); itr != m.end(); ++itr) {\n        if (itr->second\
    \ > count) {\n            count = itr->second;\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmptgotq7q2: /tmp/tmptgotq7q2.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for (auto c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0i67gecd: /tmp/tmp0i67gecd.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  std::istringstream iss(test);\n  while (std::getline(iss, temp, ' '))\
    \ {\n    ++histogram[temp];\n  }\n  return histogram;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8ufglumz: /tmp/tmp8ufglumz.cpp:29: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    word = c;\n    if (m.find(word)\
    \ == m.end()) {\n      m[word] = 1;\n    } else {\n      m[word]++;\n    }\n \
    \ }\n  for (auto i : m) {\n    if (i.second > count) {\n      count = i.second;\n\
    \    }\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpq_h8n5jx: /tmp/tmpq_h8n5jx.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (std::string &token : tokens) {\n        histogram[token]\
    \ = histogram.at(token) + 1;\n    }\n    return histogram;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123801
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for (auto &c : m) {\n        temp = c;\n        freq\
    \ += m[c];\n    }\n    if (freq > 1) {\n        for (auto &c : m) {\n        \
    \    if (m[c] == freq) {\n                m.erase(c);\n            }\n       \
    \ }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp42uvhzfx.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp42uvhzfx.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp42uvhzfx.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto c : test) {\n        temp = c;\n  \
    \      freq++;\n        if (m.find(temp) == m.end()) {\n            m[temp] =\
    \ freq;\n        } else {\n            m[temp] += freq;\n        }\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3pczyp_b: /tmp/tmp3pczyp_b.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        auto it = m.find(temp);\n        if(it != m.end())\
    \ {\n            it->second += count;\n        } else {\n            m.insert({temp,\
    \ count});\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpa6ea_yw7: /tmp/tmpa6ea_yw7.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::istringstream\
    \ iss(test);\n    std::string token;\n    while (std::getline(iss, token, ' '))\
    \ {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long> histogram;\n\
    \    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxz285bey: /tmp/tmpxz285bey.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c : test) {\n        temp = temp + c;\n    }\n    for(auto\
    \ &c : temp) {\n        m[c] = m[c] + 1;\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpicchdea8.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpicchdea8.cpp:24:10: error:\
    \ no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>\u2019 and \u2018char\u2019)\n   24 |         m[c] = m[c] + 1;\n  \
    \    |          ^\nIn file included from /usr/include/c++/9/map:61,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n       \
    \          from /tmp/tmpicchdea8.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  510 |       operator[](key_type&& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:510:2"
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for (auto &c : test) {\n        temp = c;\n        if (m.find(temp)\
    \ == m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n\
    \        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmppg17fs4d: /tmp/tmppg17fs4d.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        if(m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for(auto &c : m) {\n        if(m[c] > count) {\n \
    \           count = m[c];\n            temp = c;\n        }\n    }\n    return\
    \ std::map<std::string,long>({{temp,count}});\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmu7zw612.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpmu7zw612.cpp:22:20: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if(m.find(c) == m.end()) {\n \
    \     |                    ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpmu7zw612.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduct"
  stdout: ''
  timestamp: 1660123800
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        if(!m.count(c))\
    \ {\n            m[c] = 1;\n        } else {\n            m[c] += 1;\n       \
    \ }\n    }\n    for(auto &c : m) {\n        if(m[c] > count) {\n            count\
    \ = m[c];\n            temp = c;\n        }\n    }\n    return std::map<std::string,long>({{temp,\
    \ count}});\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvw8cjc4t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpvw8cjc4t.cpp:22:22: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::count(char&)\u2019\n   22 |         if(!m.count(c)) {\n      |  \
    \                    ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmpvw8cjc4t.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1214:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::size_type std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::count(const key_type&) const [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::size_type = long unsigned int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \ 1214 |       count(const key_type& __x) const\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_map.h:1214:29:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1214 |       count(const key_type& __x) const\n      |             ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1220:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((const std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_count_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::count(const _Kt&) const [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1220 |  count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))\n\
    \      |  ^~~~~\n/usr/include/c++/9/bits/stl_map.h:1220:2: note:   template argument\
    \ deduction/substitution failed:\n"
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t cnt = 0;\n    for (auto &c : test) {\n        temp = c;\n\
    \        ++cnt;\n        if (m.find(temp) == m.end()) {\n            m[temp] =\
    \ 1;\n        } else {\n            m[temp] += 1;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpig9e3bh4: /tmp/tmpig9e3bh4.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for(auto &c: test) {\n        temp = c;\n\
    \        ++count;\n        auto it = m.find(temp);\n        if(it == m.end())\
    \ {\n            m.insert({temp,count});\n        } else {\n            it->second\
    \ = it->second + count;\n        }\n    }\n    return m;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp492vv4o6: /tmp/tmp492vv4o6.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        temp = test[i];\n        if (m.find(temp) == m.end()) {\n           \
    \ m[temp] = 1;\n        } else {\n            m[temp]++;\n        }\n    }\n \
    \   for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second >\
    \ count) {\n            count = it->second;\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqnpq4q1h: /tmp/tmpqnpq4q1h.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        temp = test[i];\n        auto it = m.find(temp);\n        if (it == m.end())\
    \ {\n            m[temp] = 1;\n        } else {\n            it->second++;\n \
    \       }\n    }\n    for (auto it = m.begin(); it != m.end(); ++it) {\n     \
    \   if (it->second > count) {\n            count = it->second;\n        }\n  \
    \  }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc0u_85ex: /tmp/tmpc0u_85ex.cpp:39: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    std::string letter;\n    long count = 0;\n    size_t\
    \ pos = 0;\n    while(pos < test.size()) {\n        word = test.substr(pos, test.size()\
    \ - pos);\n        pos = 0;\n        while(pos < word.size()) {\n            letter\
    \ = word.substr(pos, word.size() - pos);\n            pos = 0;\n            while(pos\
    \ < letter.size()) {\n                count++;\n                pos = pos + 1;\n\
    \            }\n            histogram[letter] = count;\n            count = 1;\n\
    \        }\n    }\n    return histogram;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6ighaoch: /tmp/tmp6ighaoch.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123801
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto i : test) {\n    if (m.find(i) == m.end())\
    \ {\n      m[i] = 1;\n    } else {\n      m[i]++;\n    }\n  }\n  for (auto i :\
    \ m) {\n    if (m[i] > count) {\n      count = m[i];\n      temp = i;\n    }\n\
    \  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7zvl7x9.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpq7zvl7x9.cpp:22:17: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |     if (m.find(i) == m.end()) {\n    \
    \  |                 ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmpq7zvl7x9.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduction/su"
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto &c : test) {\n    temp = c;\n    count\
    \ = 1;\n    if (m.find(temp) != m.end()) {\n      count = m[temp];\n    }\n  \
    \  m[temp] = count;\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwhc1uru4: /tmp/tmpwhc1uru4.cpp:33: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        ++count;\n        auto it = histogram.find(word);\n    \
    \    if(it == histogram.end()) {\n            histogram[word] = count;\n     \
    \   } else {\n            histogram[word] += count;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw7j5g4v3: /tmp/tmpw7j5g4v3.cpp:35: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto i : test) {\n    if (m.find(i) == m.end())\
    \ {\n      m.insert({i,1});\n    } else {\n      m[temp] += 1;\n      if (m[temp]\
    \ > count) {\n        m.insert({temp,m[temp]});\n        count = m[temp];\n  \
    \    }\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp83_muvkm.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp83_muvkm.cpp:22:17: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |     if (m.find(i) == m.end()) {\n    \
    \  |                 ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmp83_muvkm.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduction/su"
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ word;\n  long count = 1;\n  for (auto c : test) {\n    if (c == ' ') {\n   \
    \   word = \" \";\n      count = 1;\n    } else {\n      histogram[word] += count;\n\
    \      word += c;\n      count = 1;\n    }\n  }\n  if (word != \" \") {\n    histogram[word]\
    \ += count;\n  }\n  return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpm28gyqic: /tmp/tmpm28gyqic.cpp:38: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long freq = 0;\n  for (auto &c : test) {\n    if (m.find(c) == m.end())\
    \ {\n      m.insert({c, 1});\n    } else {\n      m[c]++;\n    }\n  }\n  for (auto\
    \ &it : m) {\n    if (it.second > freq) {\n      temp = it.first;\n      freq\
    \ = it.second;\n    }\n  }\n  if (temp != \"\") {\n    m.insert({temp, freq});\n\
    \  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_79p40ns.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp_79p40ns.cpp:22:17: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |     if (m.find(c) == m.end()) {\n    \
    \  |                 ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmp_79p40ns.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduction/su"
  stdout: ''
  timestamp: 1660123801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto i : test) {\n    temp = i;\n    count\
    \ = 1;\n    while(temp.find(\" \") != std::string::npos) {\n      temp.erase(temp.find(\"\
    \ \"));\n      count++;\n    }\n    m[temp] = count;\n  }\n  return m;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqywdt5gm: /tmp/tmpqywdt5gm.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (std::string token : tokens) {\n        histogram[token]\
    \ = histogram.at(token) + 1;\n    }\n    return histogram;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ word;\n  long count = 0;\n  for (auto c : test) {\n    word = c;\n    count\
    \ = 1;\n    if (m.find(word) != m.end()) {\n      count = m[word];\n    }\n  \
    \  m[word] = count;\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_jzahzyk: /tmp/tmp_jzahzyk.cpp:33: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        temp = test.substr(pos, 1);\n        if(m.find(temp) == m.end())\
    \ {\n            m[temp] = 1;\n            count++;\n        } else {\n      \
    \      m[temp] += 1;\n        }\n        pos += 1;\n    }\n    return m;\n}\n\
    int main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzjix_4z1: /tmp/tmpzjix_4z1.cpp:36: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::string temp;\n    std::map<std::string,long>\
    \ histogram;\n    for(auto &c : test) {\n        temp = temp + c;\n    }\n   \
    \ for(auto &c : temp) {\n        auto it = histogram.find(c);\n        if(it !=\
    \ histogram.end()) {\n            it->second++;\n        } else {\n          \
    \  histogram.insert({c, 1});\n        }\n    }\n    return histogram;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpx27wsoxd.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpx27wsoxd.cpp:24:35: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   24 |         auto it = histogram.find(c);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpx27wsoxd.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   templat"
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long maxCount = 0;\n    for(auto &c : test) {\n   \
    \     temp = c;\n        histogram[temp]++;\n        if(histogram[temp] > maxCount)\
    \ {\n            maxCount = histogram[temp];\n        }\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmphqvja5mv: /tmp/tmphqvja5mv.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long cnt = 0;\n    for (auto &c : test) {\n        temp = c;\n  \
    \      ++cnt;\n        if (m.find(temp) == m.end()) {\n            m[temp] = cnt;\n\
    \        } else {\n            m[temp] += cnt;\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnwhsekkb: /tmp/tmpnwhsekkb.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long max = 0;\n    for (auto &c: test) {\n        if\
    \ (histogram.find(c) == histogram.end()) {\n            histogram[c] = 1;\n  \
    \      } else {\n            histogram[c] += 1;\n        }\n    }\n    for (auto\
    \ &c: histogram) {\n        if (histogram[c] > max) {\n            max = histogram[c];\n\
    \            temp = c.first;\n        }\n    }\n    return histogram;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu9iqy46c.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpu9iqy46c.cpp:22:29: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (histogram.find(c) == histogram.end())\
    \ {\n      |                             ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpu9iqy46c.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note: "
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    for(auto &c : test) {\n        temp = temp + c;\n        if(m.find(temp)\
    \ != m.end()) {\n            m[temp]++;\n        } else {\n            m[temp]\
    \ = 1;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate =\
    \ histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmplyt2fy8_: /tmp/tmplyt2fy8_.cpp:32: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto &c : test) {\n    temp = c;\n    ++count;\n\
    \    histogram[temp] += 1;\n  }\n  return histogram;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmphg1bv284: /tmp/tmphg1bv284.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    for(auto &c : test) {\n      \
    \  word = c;\n        count = histogram.at(word);\n        histogram[word] = count\
    \ + 1;\n    }\n    return histogram;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  map::at\n"
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizz9u7za: /tmp/tmpizz9u7za.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n    }\n    return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8q6dxq0d: /tmp/tmp8q6dxq0d.cpp:29: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long count = 0;\n  for (auto c : test) {\n    temp = c;\n    ++count;\n\
    \    if (histogram.find(temp) == histogram.end()) {\n      histogram[temp] = count;\n\
    \    } else {\n      histogram[temp] += count;\n    }\n  }\n  return histogram;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9usb6zj1: /tmp/tmp9usb6zj1.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t max = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        temp = test.substr(i,1);\n        if (m.find(temp) == m.end()) {\n  \
    \          m[temp] = 1;\n        } else {\n            m[temp]++;\n        }\n\
    \        if (m[temp] > max) {\n            max = m[temp];\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyftl2sl4: /tmp/tmpyftl2sl4.cpp:36: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c: test) {\n        temp = c;\n  \
    \      while(temp.find(\" \") != std::string::npos) {\n            temp.erase(temp.find(\"\
    \ \"));\n        }\n        if(m.find(temp) != m.end()) {\n            m[temp]\
    \ += 1;\n        } else {\n            m[temp] = 1;\n        }\n    }\n    for(auto\
    \ &c: m) {\n        if(c.second > count) {\n            count = c.second;\n  \
    \      }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpz9pn0tar: /tmp/tmpz9pn0tar.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for (auto c : test) {\n      \
    \  word = c;\n        histogram[word] += count;\n        ++count;\n    }\n   \
    \ return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk862ujai: /tmp/tmpk862ujai.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        if(m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for(auto &c : m) {\n        if(m[c] > count) {\n \
    \           count = m[c];\n            temp = c;\n        }\n    }\n    return\
    \ std::map<std::string,long>({{temp, count}});\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp605x2df9.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp605x2df9.cpp:22:20: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if(m.find(c) == m.end()) {\n \
    \     |                    ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp605x2df9.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduct"
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  long cnt = 0;\n  for (auto &c : test) {\n    temp = c;\n    ++cnt;\n\
    \    if (m.find(temp) == m.end()) {\n      m[temp] = cnt;\n    } else {\n    \
    \  m[temp] += cnt;\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp66f40kpj: /tmp/tmp66f40kpj.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        histogram[temp] += count;\n        count = 1;\n    }\n \
    \   return histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwpcm_jxv: /tmp/tmpwpcm_jxv.cpp:30: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c : test) {\n        temp = c;\n \
    \       while(temp.back() == ' ') {\n            temp.pop_back();\n        }\n\
    \        if(m.find(temp) != m.end()) {\n            m[temp] += 1;\n        } else\
    \ {\n            m[temp] = 1;\n        }\n    }\n    for(auto &c : m) {\n    \
    \    if(c.second > count) {\n            count = c.second;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyolg5k8w: /tmp/tmpyolg5k8w.cpp:41: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n\
    \        if (test.at(i) == ' ') {\n            temp = test.substr(0,i);\n    \
    \        temp.erase(std::remove(temp.begin(), temp.end(), ' '), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\n'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\t'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\r'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\v'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\f'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\a'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\v'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\a'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\r'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\n'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\t'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\f'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\v'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\r'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\a'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\n'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\t'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\r'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\f'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\v'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\a'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\r'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\n'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\t'), temp.end());\n\
    \            temp.erase(std::remove(temp.begin(), temp.end(), '\\f'), \n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2xu76x2d.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp2xu76x2d.cpp:50:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmp2xu76x2d.cpp:51:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   51 | int main() {\n      |            ^\n/tmp/tmp2xu76x2d.cpp:61:1: error:\
    \ expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp2xu76x2d.cpp:21:46:\
    \ note: to match this \u2018{\u2019\n   21 |     for (size_t i = 0; i < test.size();\
    \ i++) {\n      |                                              ^\n/tmp/tmp2xu76x2d.cpp:61:1:\
    \ error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp2xu76x2d.cpp:17:56:\
    \ note: to match this \u2018{\u2019\n   17 | std::map<std::string,long> histogram(std::string\
    \ test) {\n      |                                                        ^\n\
    /tmp/tmp2xu76x2d.cpp:61:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   61 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long count = 0;\n    for (auto &c : test) {\n        temp = c;\n\
    \        ++count;\n        if (m.find(temp) == m.end()) {\n            m[temp]\
    \ = count;\n        } else {\n            m[temp] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyr0z8w7r: /tmp/tmpyr0z8w7r.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizz9u7za: /tmp/tmpizz9u7za.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ m;\n    for(auto &token : tokens) {\n        auto it = m.find(token);\n    \
    \    if(it == m.end()) {\n            m.insert({token,1});\n        } else {\n\
    \            ++it->second;\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp28jmc3_m: /tmp/tmp28jmc3_m.cpp:38: int main(): Assertion `candidate(("a
    b c a b")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long cnt = 0;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for (auto &c : m) {\n        if (m[c] > cnt) {\n \
    \           cnt = m[c];\n            temp = c;\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsoa4xzna.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpsoa4xzna.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpsoa4xzna.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::string\
    \ temp;\n  for (auto &c : test) {\n    if (m.find(c) == m.end()) {\n      m[c]\
    \ = 1;\n    } else {\n      m[c] += 1;\n    }\n  }\n  for (auto &c : m) {\n  \
    \  if (m[c] > 1) {\n      temp = c;\n    }\n  }\n  if (temp != \"\") {\n    m.insert({temp,\
    \ m[temp]});\n  }\n  return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3slga8as.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp3slga8as.cpp:21:17: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |     if (m.find(c) == m.end()) {\n    \
    \  |                 ^\nIn file included from /usr/include/c++/9/map:61,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n  \
    \               from /tmp/tmp3slga8as.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduction/su"
  stdout: ''
  timestamp: 1660123799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        temp = test.substr(pos, 1);\n        if(m.find(temp) == m.end())\
    \ {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n    \
    \    }\n        pos++;\n    }\n    for(auto itr = m.begin(); itr != m.end(); ++itr)\
    \ {\n        if(itr->second > count) {\n            count = itr->second;\n   \
    \     }\n    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwfou_ajw: /tmp/tmpwfou_ajw.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 0;\n    std::string letter;\n    std::string\
    \ letter2;\n    std::string letter3;\n    std::string letter4;\n    std::string\
    \ letter5;\n    std::string letter6;\n    std::string letter7;\n    std::string\
    \ letter8;\n    std::string letter9;\n    std::string letter10;\n    std::string\
    \ letter11;\n    std::string letter12;\n    std::string letter13;\n    std::string\
    \ letter14;\n    std::string letter15;\n    std::string letter16;\n    std::string\
    \ letter17;\n    std::string letter18;\n    std::string letter19;\n    std::string\
    \ letter20;\n    std::string letter21;\n    std::string letter22;\n    std::string\
    \ letter23;\n    std::string letter24;\n    std::string letter25;\n    std::string\
    \ letter26;\n    std::string letter27;\n    std::string letter28;\n    std::string\
    \ letter29;\n    std::string letter30;\n    std::string letter31;\n    std::string\
    \ letter32;\n    std::string letter33;\n    std::string letter34;\n    std::string\
    \ letter35;\n    std::string letter36;\n    std::string letter37;\n    std::string\
    \ letter38;\n    std::string letter39;\n    std::string letter40;\n    std::string\
    \ letter41;\n    std::string letter42;\n    std::string letter43;\n    std::string\
    \ letter44;\n    std::string letter45;\n    std::string letter46;\n    std::string\
    \ letter47;\n    std::string letter48;\n    std::string letter49;\n    std::string\
    \ letter50;\n    std::string letter51;\n    std::string letter52;\n    std::string\
    \ letter53;\n    std::string letter54;\n    std::string letter55;\n    std::string\
    \ letter56;\n    std::string letter57;\n    std::string letter58;\n    std::string\
    \ letter59;\n    std::string letter60;\n    std::string letter61;\n    std::string\
    \ letter62;\n    std::string letter63;\n    std::string letter64;\n    std::string\
    \ letter65;\n    std::string letter66;\n    std::string letter67;\n    std::string\
    \ letter68;\n    std::string letter69;\n    std::string letter70;\n    std::string\
    \ letter71;\n    std::string letter72;\n    std::string letter73;\n    std::string\
    \ letter74;\n    std::string letter75;\n    std::string letter76;\n    std::string\
    \ letter77;\n    std::string letter78;\n    std::string letter79;\n    std::string\
    \ letter80;\n    std::string letter81;\n    std::string letter82;\n    std::string\
    \ letter83;\n    std::string letter84;\n    std::string letter85;\n    std::string\
    \ letter\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3zfoiu_n.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp3zfoiu_n.cpp:107:1: error:\
    \ expected initializer before \u2018}\u2019 token\n  107 | }\n      | ^\n/tmp/tmp3zfoiu_n.cpp:107:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660123802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    size_t\
    \ max = 0;\n    for (auto &c : test) {\n        auto it = m.find(c);\n       \
    \ if (it != m.end()) {\n            it->second++;\n        } else {\n        \
    \    m[c] = 1;\n        }\n        if (it->second > max) {\n            max =\
    \ it->second;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpotq7mcyl.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmpotq7mcyl.cpp:21:27: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   21 |         auto it = m.find(c);\n      |\
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpotq7mcyl.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ deduc"
  stdout: ''
  timestamp: 1660123802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ word;\n    long freq = 0;\n    for(auto c : test) {\n        word = c;\n   \
    \     auto it = m.find(word);\n        if(it == m.end()) {\n            freq =\
    \ 1;\n            m.insert({word,freq});\n        } else {\n            freq =\
    \ it->second+1;\n            m.insert({word,freq});\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpib4q4wtb: /tmp/tmpib4q4wtb.cpp:36: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long cnt = 0;\n    for (auto c : test) {\n        temp = c;\n   \
    \     ++cnt;\n        if (m.find(temp) == m.end()) {\n            m[temp] = cnt;\n\
    \        } else {\n            if (m[temp] > cnt) {\n                m[temp] =\
    \ cnt;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpe7yla983: /tmp/tmpe7yla983.cpp:36: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t count = 0;\n    for (auto c : test) {\n        temp = c;\n\
    \        ++count;\n        if (m.find(temp) == m.end()) {\n            m[temp]\
    \ = count;\n        } else {\n            m[temp] += count;\n        }\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcg81h4lx: /tmp/tmpcg81h4lx.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    long freq = 0;\n    for (auto &c : test) {\n        if (m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n        } else {\n            m[c] +=\
    \ 1;\n        }\n    }\n    for (auto &c : m) {\n        if (m[c] > freq) {\n\
    \            freq = m[c];\n            temp = c;\n        }\n    }\n    return\
    \ m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1iw1iqw9.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int> histogram(std::string)\u2019:\n/tmp/tmp1iw1iqw9.cpp:22:21: error:\
    \ no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>,\
    \ long int>::find(char&)\u2019\n   22 |         if (m.find(c) == m.end()) {\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp1iw1iqw9.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n\
    \      |  ^~~~\n/usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument\
    \ dedu"
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> histogram;\n \
    \   std::string word;\n    long count = 1;\n    for(auto c : test) {\n       \
    \ word = c;\n        if(histogram.find(word) == histogram.end()) {\n         \
    \   histogram[word] = count;\n        } else {\n            histogram[word] +=\
    \ count;\n        }\n        ++count;\n    }\n    return histogram;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdkqfbe33: /tmp/tmpdkqfbe33.cpp:34: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::string\
    \ temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < test.size())\
    \ {\n        temp = test.substr(pos, 1);\n        if(m.find(temp) == m.end())\
    \ {\n            m[temp] = 1;\n        } else {\n            m[temp] += 1;\n \
    \       }\n        pos += 1;\n    }\n    for(auto &i : m) {\n        if(i.second\
    \ > count) {\n            count = i.second;\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8mouqjto: /tmp/tmp8mouqjto.cpp:40: int main(): Assertion `candidate(("a
    b b a")) == (std::map<std::string,long>({{"a", 2}, {"b", 2}}))'' failed.

    '
  stdout: ''
  timestamp: 1660123803
