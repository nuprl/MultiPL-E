language: cpp
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.length(); i++) {\n        for(long j = 0; j <\
    \ n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'e') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'i')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'o') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'u')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'y') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'h')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'l') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'e')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'l') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 's')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 't') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'e')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'r') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'd')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'a') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'm')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'y') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 's')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 't') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'h')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'e') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'r')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'd') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjb07g82.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmptjb07g82.cpp:128:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmptjb07g82.cpp:137:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmptjb07g82.cpp:137:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n\
    \    \n    v.push_back(word);\n    \n    for (long i = 0; i < n; i++) {\n    \
    \    std::string word = \"\";\n        for (char c : s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                word\
    \ += c;\n            }\n        }\n        v.push_back(word);\n    }\n    \n \
    \   return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo10o6js3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpo10o6js3.cpp:27:19: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (char c : s)\
    \ {\n                   ^\n/tmp/tmpo10o6js3.cpp:37:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n         for (char c : s) {\n         \
    \              ^\n/tmp/tmpo10o6js3.cpp: In function 'int main()':\n/tmp/tmpo10o6js3.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo10o6js3.cpp:2:\n/tmp/tmpo10o6js3.cpp:49:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpo10o6js3.cpp:49:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpo10o6js3.cpp:49:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpo10o6js3.cpp:49:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo10o6js3.cpp:49:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo10o6js3.cpp:49:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    for(auto &i : s)\n    {\n        if(isalpha(i))\n        {\n \
    \           v.push_back(i);\n        }\n    }\n    \n    for(auto &i : v)\n  \
    \  {\n        if(n == 0)\n        {\n            break;\n        }\n        \n\
    \        for(auto &j : i)\n        {\n            if(isalpha(j))\n           \
    \ {\n                if(n == 1)\n                {\n                    break;\n\
    \                }\n                \n                if(n == 2)\n           \
    \     {\n                    v.push_back(i);\n                    break;\n   \
    \             }\n                \n                if(n == 3)\n              \
    \  {\n                    v.push_back(i);\n                    v.push_back(j);\n\
    \                    break;\n                }\n                \n           \
    \     if(n == 4)\n                {\n                    v.push_back(i);\n   \
    \                 v.push_back(j);\n                    v.push_back(j);\n     \
    \               break;\n                }\n                \n                if(n\
    \ == 5)\n                {\n                    v.push_back(i);\n            \
    \        v.push_back(j);\n                    v.push_back(j);\n              \
    \      v.push_back(j);\n                    break;\n                }\n      \
    \          \n                if(n == 6)\n                {\n                 \
    \   v.push_back(i);\n                    v.push_back(j);\n                   \
    \ v.push_back(j);\n                    v.push_back(j);\n                    v.push_back(j);\n\
    \                    break;\n                }\n                \n           \
    \     if(n == 7)\n                {\n                    v.push_back(i);\n   \
    \                 v.push_back(j);\n                    v.push_back(j);\n     \
    \               v.push_back(j);\n                    v.push_back(j);\n       \
    \             v.push_back(j);\n                    break;\n                }\n\
    \                \n                if(n == 8)\n                {\n           \
    \         v.push_back(i);\n                    v.push_back(j);\n             \
    \       v.push_back(j);\n                    v.push_back(j);\n               \
    \     v.push_back(j);\n                    v.push_back(j);\n                 \
    \   v.push_back(j);\n                    break;\n                }\n         \
    \       \n                if(n == 9)\n                {\n                    v.push_back(i);\n\
    \                    v.push_back(j);\n                    v.push_back(j);\n  \
    \                  v.push_back(j);\n                    v.push_back(j);\n    \
    \                v.push_back(j);\n                    v.push_back(j);\n      \
    \              v.push_back(j);\n                    break;\n                }\n\
    \                \n                if(n == 10)\n                {\n          \
    \          v.push_back(i);\n                    v.push_back(j);\n            \
    \        v.push_back(j);\n                    v.push_back(j);\n              \
    \      v.push_back(j);\n                    v.push_back(j);\n                \
    \    v.push_back(j);\n                    v.push_back(j);\n                  \
    \  v.push_back(j);\n                    break;\n                }\n          \
    \      \n                if(n == 11)\n                {\n                    v.push_back(i);\n\
    \                    v.push_back(j);\n                    v.push_back(j);\n  \
    \                  v.push_back(j);\n                    v.\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxf1k9pp6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            v.push_back(c);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0g5s710v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzqdm00i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    // code here\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgl_swa0v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'y') {\n            v.push_back(word);\n            word = \"\
    \";\n        }\n        else if (c == 'n') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 't' || c == 'h' ||\
    \ c == 'e' || c == 'l' || c == 'l' || c == 'o' || c == 'r') {\n            word\
    \ += c;\n        }\n        else if (c == 'd' || c == 'a' || c == 'm' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ if (c == 'p' || c == 'l' || c == 'a' || c == 't' || c == 'e' || c == 'r' ||\
    \ c == 's') {\n            word += c;\n        }\n        else if (c == 'c' ||\
    \ c == 'h' || c == 'a' || c == 'l' || c == 'l' || c == 'o' || c == 'u') {\n  \
    \          word += c;\n        }\n        else if (c == 'm' || c == 'a' || c ==\
    \ 'l' || c == 'l' || c == 'o' || c == 'u') {\n            word += c;\n       \
    \ }\n        else if (c == 'b' || c == 'l' || c == 'a' || c == 'm' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ if (c == 'f' || c == 'l' || c == 'a' || c == 'm' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            word += c;\n        }\n        else if (c == 'v' ||\
    \ c == 'e' || c == 'r' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n        else if (c == 'g' || c == 'l' || c == 'a' || c ==\
    \ 'm' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n       \
    \ }\n        else if (c == 'k' || c == 'l' || c == 'a' || c == 'm' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ if (c == 'j' || c == 'u' || c == 'n' || c == 'a' || c == 'm' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'q' || c == 'u' || c == 'n' || c == 'a' || c\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ep2s9uo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i\
    \ == 'o' || i == 'u' || i == 'y') {\n            v.push_back(i);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbtqkqt7d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s) {\n        if(isalpha(i)) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzw1xw3l6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Write your code here\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0din92h0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n\
    \    \n    v.push_back(word);\n    \n    for (long i = 0; i < n; i++) {\n    \
    \    std::string word = \"\";\n        for (char c : s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                word\
    \ += c;\n            }\n        }\n        v.push_back(word);\n    }\n    \n \
    \   return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo10o6js3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpo10o6js3.cpp:27:19: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (char c : s)\
    \ {\n                   ^\n/tmp/tmpo10o6js3.cpp:37:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n         for (char c : s) {\n         \
    \              ^\n/tmp/tmpo10o6js3.cpp: In function 'int main()':\n/tmp/tmpo10o6js3.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo10o6js3.cpp:2:\n/tmp/tmpo10o6js3.cpp:49:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpo10o6js3.cpp:49:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpo10o6js3.cpp:49:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpo10o6js3.cpp:49:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo10o6js3.cpp:49:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo10o6js3.cpp:49:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word;\n\
    \    \n    for (size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i,\
    \ 1);\n        \n        if (word.find_first_not_of(\"aeiou\") == std::string::npos)\
    \ {\n            v.push_back(word);\n        }\n    }\n    \n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7288p5zr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzqdm00i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    // Write your\
    \ code here\n    std::vector<std::string> v;\n    \n    for(auto &i : s)\n   \
    \ {\n        for(auto &j : i)\n        {\n            if(j == 'a' || j == 'e'\
    \ || j == 'i' || j == 'o' || j == 'u')\n            {\n                v.push_back(i);\n\
    \            }\n        }\n    }\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm64ph_72.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s) {\n        v.push_back(i);\n    }\n    sort(v.begin(),\
    \ v.end());\n    for(auto &i : v) {\n        if(i.size() == n) {\n           \
    \ v.erase(std::remove(v.begin(), v.end(), i), v.end());\n        }\n    }\n  \
    \  return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppks3pyl6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            v.push_back(c);\n        }\n    }\n\
    \    \n    for(auto &c: v) {\n        if(c == ' ') {\n            continue;\n\
    \        }\n        \n        for(auto &c: s) {\n            if(c == ' ') {\n\
    \                continue;\n            }\n            \n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                v.push_back(c);\n\
    \            }\n        }\n    }\n    \n    for(auto &c: v) {\n        if(c ==\
    \ ' ') {\n            continue;\n        }\n        \n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == ' ') {\n     \
    \       continue;\n        }\n        \n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            v.push_back(c);\n        }\n   \
    \ }\n    \n    for(auto &c: v) {\n        if(c == ' ') {\n            continue;\n\
    \        }\n        \n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            v.push_back(c);\n        }\n    }\n    \n    for(auto\
    \ &c: v) {\n        if(c == ' ') {\n            continue;\n        }\n       \
    \ \n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
    \           v.push_back(c);\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == ' ') {\n            continue;\n        }\n        \n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == ' ') {\n     \
    \       continue;\n        }\n        \n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            v.push_back(c);\n        }\n   \
    \ }\n    \n    for(auto &c: v) {\n        if(c == ' ') {\n            continue;\n\
    \        }\n        \n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            v.push_back(c);\n        }\n    }\n    \n    for(auto\
    \ &c: v) {\n        if(c == ' ') {\n            continue;\n        }\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpipq1z20q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    \n    long count = 0;\n\
    \    \n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n\
    \        }\n    }\n    \n    if(count == n) {\n        for(long i = 0; i < s.size();\
    \ i++) {\n            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u') {\n                v.push_back(s.substr(0, i));\n      \
    \      }\n        }\n    }\n    \n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ujymr3f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp686hhz8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n\
    \            v.push_back((std::string)s.substr(0, i));\n        }\n    }\n   \
    \ \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbvxwfy3b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'y') {\n            word += c;\n        }\n        else if (c\
    \ == 'h') {\n            word += c;\n        }\n        else if (c == 'l' || c\
    \ == 'l' || c == 'o' || c == 'r' || c == 's' || c == 't') {\n            word\
    \ += c;\n        }\n        else if (c == 'd') {\n            word += c;\n   \
    \     }\n        else if (c == 'n') {\n            word += c;\n        }\n   \
    \     else if (c == 'g') {\n            word += c;\n        }\n        else if\
    \ (c == 'p') {\n            word += c;\n        }\n        else if (c == 'f')\
    \ {\n            word += c;\n        }\n        else if (c == 'v') {\n       \
    \     word += c;\n        }\n        else if (c == 'c') {\n            word +=\
    \ c;\n        }\n        else if (c == 'm') {\n            word += c;\n      \
    \  }\n        else if (c == 'b') {\n            word += c;\n        }\n      \
    \  else if (c == 'k') {\n            word += c;\n        }\n        else if (c\
    \ == 'j') {\n            word += c;\n        }\n        else if (c == 'q') {\n\
    \            word += c;\n        }\n        else if (c == 'p') {\n           \
    \ word += c;\n        }\n        else if (c == 'f') {\n            word += c;\n\
    \        }\n        else if (c == 'v') {\n            word += c;\n        }\n\
    \        else if (c == 'c') {\n            word += c;\n        }\n        else\
    \ if (c == 'm') {\n            word += c;\n        }\n        else if (c == 'b')\
    \ {\n            word += c;\n        }\n        else if (c == 'k') {\n       \
    \     word += c;\n        }\n        else if (c == 'j') {\n            word +=\
    \ c;\n        }\n        else if (c == 'q') {\n            word += c;\n      \
    \  }\n        else if (c == 'p') {\n            word += c;\n        }\n      \
    \  else if (c == 'f') {\n            word += c;\n        }\n        else if (c\
    \ == 'v') {\n            word += c;\n        }\n        else if (c == 'c') {\n\
    \            word += c;\n        }\n        else if (c == 'm') {\n           \
    \ word += c;\n        }\n        else if (c == 'b') {\n            word += c;\n\
    \        }\n        else if (c == 'k') {\n            word += c;\n        }\n\
    \        else if (c == 'j') {\n            word += c;\n        }\n        else\
    \ if (c == 'q') {\n            word += c;\n        }\n        else if (c == 'p\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpht5pgq5c.cpp:130:23: warning: missing terminating ' character [enabled\
    \ by default]\n         else if (c == 'p\n                       ^\n/tmp/tmpht5pgq5c.cpp:130:9:\
    \ error: missing terminating ' character\n         else if (c == 'p\n        \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpht5pgq5c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       con"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    for(long i = 0; i < s.length(); i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n        }\n    }\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq8m2h90e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    // Your code\
    \ here\n    std::vector<std::string> v;\n    std::string word;\n    for(unsigned\
    \ int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(word);\n\
    \            word = \" \";\n        } else {\n            word += s[i];\n    \
    \    }\n    }\n    v.push_back(word);\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_vkm0mwo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'y') {\n            v.push_back(word);\n            word = \"\
    \";\n        }\n        else if (c == 'n') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 't') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 's') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'h') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'r') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'd') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'l') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'w') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'c') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'm') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'a') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'f') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'p') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'v') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'b') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'u') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'e') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'k') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'r') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'o') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'l') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'd') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'k') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 's') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == '\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmhmu3q2g.cpp:131:23: warning: missing terminating ' character [enabled\
    \ by default]\n         else if (c == '\n                       ^\n/tmp/tmpmhmu3q2g.cpp:131:9:\
    \ error: missing terminating ' character\n         else if (c == '\n         ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmhmu3q2g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzqdm00i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp686hhz8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp686hhz8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'y') {\n            v.push_back(word);\n            word = \"\
    \";\n        }\n        else if (c == 'n') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'd') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'l' || c == 'm' || c == 's' || c == 't' || c == 'h') {\n            word\
    \ += c;\n        }\n        else if (c == 'w') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'c') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'r' || c == 'p' || c == 'f') {\n            word += c;\n        }\n     \
    \   else if (c == 'b' || c == 'v' || c == 'n' || c == 'a' || c == 'd' || c ==\
    \ 'g' || c == 'j' || c == 'z') {\n            word += c;\n        }\n        else\
    \ if (c == 'k') {\n            v.push_back(word);\n            word = \"\";\n\
    \        }\n        else if (c == 'q') {\n            v.push_back(word);\n   \
    \         word = \"\";\n        }\n        else if (c == 'j') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'z') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'x') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'q') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'z') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'y') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'z') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'z') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'z') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'z') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'z') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 'z') {\n            v.push_back(word);\n         \
    \   word = \"\";\n        }\n        else if (c == 'z') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptjxb99th.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n\
    \    \n    v.push_back(word);\n    \n    for (long i = 0; i < n; i++) {\n    \
    \    std::string word = \"\";\n        for (char c : s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                word\
    \ += c;\n            }\n        }\n        \n        v.push_back(word);\n    }\n\
    \    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n  \
    \  assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptr46vviy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s) {\n        if(isalpha(i)) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzw1xw3l6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code goes here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39b8bflp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzqdm00i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp686hhz8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    // Write your\
    \ code here\n    std::vector<std::string> v;\n    for(auto &i : s)\n    {\n  \
    \      if(isalpha(i))\n        {\n            v.push_back(i);\n        }\n   \
    \ }\n    for(auto &i : v)\n    {\n        if(count(i.begin(), i.end(), n) == n)\n\
    \        {\n            v.erase(find(v.begin(), v.end(), i));\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplud0rs0a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Your code here\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi65vwplf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    // Write your\
    \ code here\n    std::vector<std::string> v;\n    for(auto &i : s)\n    {\n  \
    \      if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u')\n        {\n\
    \            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpntuil21v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    // Write your code here\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0din92h0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n     \
    \   }\n    }\n    \n    if(v.size() == 0) {\n        return v;\n    }\n    \n\
    \    for(auto &c: v) {\n        if(c == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back((std::string)\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqxd7cgm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'y') {\n            word += c;\n        }\n        else if (c\
    \ == 's') {\n            word += c;\n        }\n        else if (c == 'd') {\n\
    \            word += c;\n        }\n        else if (c == 'h') {\n           \
    \ word += c;\n        }\n        else if (c == 'l') {\n            word += c;\n\
    \        }\n        else if (c == 'm') {\n            word += c;\n        }\n\
    \        else if (c == 't') {\n            word += c;\n        }\n        else\
    \ if (c == 'w') {\n            word += c;\n        }\n        else if (c == 'r')\
    \ {\n            word += c;\n        }\n        else if (c == 'p') {\n       \
    \     word += c;\n        }\n        else if (c == 'f') {\n            word +=\
    \ c;\n        }\n        else if (c == 'v') {\n            word += c;\n      \
    \  }\n        else if (c == 'b') {\n            word += c;\n        }\n      \
    \  else if (c == 'n') {\n            word += c;\n        }\n        else if (c\
    \ == 'k') {\n            word += c;\n        }\n        else if (c == 'x') {\n\
    \            word += c;\n        }\n        else if (c == 'q') {\n           \
    \ word += c;\n        }\n        else if (c == 'j') {\n            word += c;\n\
    \        }\n        else if (c == 'z') {\n            word += c;\n        }\n\
    \        else if (c == 'x') {\n            word += c;\n        }\n        else\
    \ if (c == 'c') {\n            word += c;\n        }\n        else if (c == 'v')\
    \ {\n            word += c;\n        }\n        else if (c == 'k') {\n       \
    \     word += c;\n        }\n        else if (c == 'x') {\n            word +=\
    \ c;\n        }\n        else if (c == 'q') {\n            word += c;\n      \
    \  }\n        else if (c == 'j') {\n            word += c;\n        }\n      \
    \  else if (c == 'z') {\n            word += c;\n        }\n        else if (c\
    \ == 'x') {\n            word += c;\n        }\n        else if (c == 'c') {\n\
    \            word += c;\n        }\n        else if (c == 'v') {\n           \
    \ word += c;\n        }\n        else if (c == 'k') {\n            word += c;\n\
    \        }\n        else if (c == 'x') {\n            word += c;\n        }\n\
    \        else if (c == 'q') {\n            word += c;\n        }\n        else\
    \ if (c == 'j') {\n            word += c;\n        }\n        else if (c == 'z')\
    \ {\n            word += c;\n\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd67zggo4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzqdm00i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    if (s.size() == 0) {\n        return v;\n  \
    \  }\n    std::string temp;\n    long count = 0;\n    for (auto &c : s) {\n  \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       v.push_back(temp);\n            temp.clear();\n            count++;\n\
    \        }\n        temp += c;\n    }\n    if (count != n) {\n        v.push_back(temp);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdcmaltel.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgzqdm00i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'n') {\n            v.push_back(word);\n            word = \"\
    \";\n        }\n        else if (c == 't' || c == 'h' || c == 'e' || c == 'l'\
    \ || c == 'l' || c == 'o' || c == 'r') {\n            word += c;\n        }\n\
    \        else if (c == 'd' || c == 'a' || c == 'l' || c == 'l' || c == 'e' ||\
    \ c == 'h' || c == 't' || c == 's') {\n            word += c;\n        }\n   \
    \     else if (c == 'w' || c == 'o' || c == 'r' || c == 'd' || c == 'a' || c ==\
    \ 'l' || c == 'l' || c == 'e' || c == 'h' || c == 't' || c == 's') {\n       \
    \     word += c;\n        }\n        else if (c == 'b' || c == 'l' || c == 'a'\
    \ || c == 'r' || c == 'l' || c == 'e' || c == 'h' || c == 't' || c == 's') {\n\
    \            word += c;\n        }\n        else if (c == 'p' || c == 'a' || c\
    \ == 'l' || c == 'l' || c == 'e' || c == 'h' || c == 't' || c == 's') {\n    \
    \        word += c;\n        }\n        else if (c == 'v' || c == 'e' || c ==\
    \ 'r' || c == 'e' || c == 'd' || c == 'a' || c == 'l' || c == 'l' || c == 'e'\
    \ || c == 'h' || c == 't' || c == 's') {\n            word += c;\n        }\n\
    \        else if (c == 'c' || c == 'h' || c == 'e' || c == 'l' || c == 'l' ||\
    \ c == 'o' || c == 'r' || c == 'e' || c == 'd' || c == 'a' || c == 'l' || c ==\
    \ 'l' || c == 'e' || c == 'h' || c == 't' || c == 's') {\n            word +=\
    \ c;\n        }\n        else if (c == 'm' || c == 'a' || c == 'l' || c == 'l'\
    \ || c == 'e' || c == 'h' || c == 't' || c == 's') {\n            word += c;\n\
    \        }\n        else if (c == 'f' || c == 'l' || c == 'a' || c == 'r' || c\
    \ == 'l' || c == 'e' || c == 'h' || c == 't' || c == 's') {\n            word\
    \ += c;\n        }\n        else if (c\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5co5sunq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word;\n\
    \    \n    for (size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i,\
    \ 1);\n        if (word.find_first_of(\"aeiou\") == std::string::npos) {\n   \
    \         v.push_back(word);\n        }\n    }\n    \n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq1n7pon9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty())\n        return v;\n    \n    long start = 0;\n    long\
    \ end = s.size();\n    long mid = n / 2;\n    \n    while (start < end) {\n  \
    \      long mid = start + (end - start) / 2;\n        \n        if (mid > s.size())\n\
    \            mid = s.size();\n        \n        if (s[mid] >= 'a' && s[mid] <=\
    \ 'z')\n            v.push_back(s.substr(start, mid - start));\n        \n   \
    \     if (s[mid] >= 'A' && s[mid] <= 'Z')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] >= '0' && s[mid] <= '9')\n    \
    \        v.push_back(s.substr(start, mid - start));\n        \n        if (s[mid]\
    \ == '_')\n            v.push_back(s.substr(start, mid - start));\n        \n\
    \        if (s[mid] == '-')\n            v.push_back(s.substr(start, mid - start));\n\
    \        \n        if (s[mid] == '.')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '_')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '-')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '.')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '_')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '-')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '.')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '_')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '-')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '.')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '_')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '-')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '.')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '_')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '-')\n            v.push_back(s.substr(start,\
    \ mid - start));\n        \n        if (s[mid] == '.')\n\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1wy8ued.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            v.push_back(c);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0g5s710v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    // code here\n\
    \    std::vector<std::string> v;\n    for(auto &i : s) {\n        if(isalpha(i))\
    \ {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmlms7wh8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805191
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
