language: cpp
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.length(); i++) {\n        for(long j = 0; j <\
    \ n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'e') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'i')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'o') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'u')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'y') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'h')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'l') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'e')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'l') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 's')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 't') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'e')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'r') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'd')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'a') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'm')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'y') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 's')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 't') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'h')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'e') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'r')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n            else if(s[i] == 'd') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjb07g82.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmptjb07g82.cpp:128:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmptjb07g82.cpp:137:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmptjb07g82.cpp:137:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukr20gx3.cpp: In function 'int main()':\n/tmp/tmpukr20gx3.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpukr20gx3.cpp:2:\n/tmp/tmpukr20gx3.cpp:26:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpukr20gx3.cpp:26:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpukr20gx3.cpp:26:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpukr20gx3.cpp:26:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpukr20gx3.cpp:26:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpukr20gx3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n\
    \    \n    v.push_back(word);\n    \n    for (long i = 0; i < n; i++) {\n    \
    \    std::string word = \"\";\n        for (char c : s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                word\
    \ += c;\n            }\n        }\n        v.push_back(word);\n    }\n    \n \
    \   return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo10o6js3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpo10o6js3.cpp:27:19: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (char c : s)\
    \ {\n                   ^\n/tmp/tmpo10o6js3.cpp:37:23: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n         for (char c : s) {\n         \
    \              ^\n/tmp/tmpo10o6js3.cpp: In function 'int main()':\n/tmp/tmpo10o6js3.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo10o6js3.cpp:2:\n/tmp/tmpo10o6js3.cpp:49:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpo10o6js3.cpp:49:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpo10o6js3.cpp:49:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpo10o6js3.cpp:49:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo10o6js3.cpp:49:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo10o6js3.cpp:49:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a vector of all words from string s that contain exactly \n// n consonants,\
    \ in order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty vector.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgedwua9.cpp: In function 'int main()':\n/tmp/tmpbgedwua9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgedwua9.cpp:2:\n/tmp/tmpbgedwua9.cpp:28:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpbgedwua9.cpp:28:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpbgedwua9.cpp:28:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbgedwua9.cpp:28:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgedwua9.cpp:28:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgedwua9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
