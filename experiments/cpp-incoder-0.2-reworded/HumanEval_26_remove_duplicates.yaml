name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3,\
  \ (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
  \ (long)5})));\n}\n"
completions: ["    std::vector<long> result;\n    std::set<long> seen;\n    for (auto\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "  assert(!numbers.empty());\n\
    \  std::vector<long> result;\n  std::set<long> seen;\n  for (long i : numbers)\
    \ {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n     \
    \ seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long> result;\n\
    \    std::set<long> seen;\n    for (long num : numbers) {\n        if (seen.find(num)\
    \ == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            seen.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> output;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            output.push_back(i);\n        }\n\
    \    }\n    return output;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
