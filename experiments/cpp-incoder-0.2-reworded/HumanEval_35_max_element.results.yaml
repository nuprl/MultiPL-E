language: cpp
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (auto i : l) {\n        if (i > max_val) {\n            max_val = i;\n     \
    \   }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1nzherg.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq1nzherg.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (auto it =\
    \ l.begin(); it != l.end(); ++it) {\n        if (*it > max) {\n            max\
    \ = *it;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (auto\
    \ i : l) {\n        max_ele = std::max(max_ele, i);\n    }\n    return max_ele;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i : l) {\n        if (i > max_val) {\n            max_val = i;\n\
    \        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmpmhw60ww0: /tmp/tmpmhw60ww0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_value = l[0];\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    return max_value;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpddiudqf0: /tmp/tmpddiudqf0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n     \
    \       max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_value = -long_MAX;\n   \
    \ for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_value) {\n   \
    \         max_value = l[i];\n        }\n    }\n    return max_value;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8o2id1z.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb8o2id1z.cpp:9:23: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_value = -long_MAX;\n      |   \
    \                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\
    \ {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n     \
    \       max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\
    \ {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\
    \ {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = l[0];\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_element) {\n     \
    \       max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    long max_ele_pos\
    \ = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele)\
    \ {\n            max_ele = l[i];\n            max_ele_pos = i;\n        }\n  \
    \  }\n    return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (auto i : l) {\n        if (i > max_val)\n            max_val = i;\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphnj5d8zy.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphnj5d8zy.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\n            max_val\
    \ = l[i];\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return std::distance(l.begin(), it);\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpkc23rh6x: /tmp/tmpkc23rh6x.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660080652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (auto i : l) {\n        if (i > max_val) {\n            max_val = i;\n     \
    \   }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1nzherg.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq1nzherg.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i : l) {\n        if (i > max_val) {\n            max_val = i;\n\
    \        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmpmhw60ww0: /tmp/tmpmhw60ww0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\
    \ {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_value = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    return max_value;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080623
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080628
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_value = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    return max_value;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i : l) {\n        if (i > max_val)\n            max_val = i;\n\
    \    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmpz5gt_7w1: /tmp/tmpz5gt_7w1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660080652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (auto it =\
    \ l.begin(); it != l.end(); ++it) {\n        if (*it > max) {\n            max\
    \ = *it;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n     \
    \       max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n     \
    \       max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_value = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    return max_value;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\n            max_val\
    \ = l[i];\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_value = -long_MAX;\n   \
    \ for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_value) {\n   \
    \         max_value = l[i];\n        }\n    }\n    return max_value;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8o2id1z.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb8o2id1z.cpp:9:23: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_value = -long_MAX;\n      |   \
    \                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n     \
    \       max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\
    \ {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_ele = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele\
    \ = l[i];\n        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return std::distance(l.begin(), it);\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpkc23rh6x: /tmp/tmpkc23rh6x.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660080652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it > max_val) {\n\
    \            max_val = *it;\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9rnohi_.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk9rnohi_.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n         \
    \   max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc90anr64.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc90anr64.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660080650
