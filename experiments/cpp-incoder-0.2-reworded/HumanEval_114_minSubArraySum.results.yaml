language: cpp
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long curSum = 0;\n    for\
    \ (long i : nums) {\n        sum += i;\n        curSum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwxlvn5s.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmprwxlvn5s.cpp:14:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmprwxlvn5s.cpp:\
    \ In function 'int main()':\n/tmp/tmprwxlvn5s.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprwxlvn5s.cpp:2:\n/tmp/tmprwxlvn5s.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmprwxlvn5s.cpp:25:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmprwxlvn5s.cpp:25:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprwxlvn5s.cpp:25:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprwxlvn5s.cpp:25:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprwxlvn5s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9: "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnovz0m9z.cpp: In function 'int main()':\n/tmp/tmpnovz0m9z.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/tmp/tmpnovz0m9z.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnovz0m9z.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnovz0m9z.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   long i = 0;\n    while (i < n) {\n        sum += nums[i];\n        ans = min(ans,\
    \ sum);\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnwi0q5s0.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpnwi0q5s0.cpp:17:27: error: 'min' was not declared in this scope\n\
    \         ans = min(ans, sum);\n                           ^\n/tmp/tmpnwi0q5s0.cpp:17:27:\
    \ note: suggested alternative:\nIn file included from /usr/include/c++/4.8.2/algorithm:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpnwi0q5s0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algobase.h:239:5:\
    \ note:   'std::min'\n     min(const _Tp& __a, const _Tp& __b, _Compare __comp)\n\
    \     ^\n/tmp/tmpnwi0q5s0.cpp: In function 'int main()':\n/tmp/tmpnwi0q5s0.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnwi0q5s0.cpp:2:\n/tmp/tmpnwi0q5s0.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnwi0q5s0.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnwi0q5s0.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnwi0q5s0.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnwi0q5s0.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hn7_yb7.cpp: In function 'int main()':\n/tmp/tmp7hn7_yb7.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7hn7_yb7.cpp:2:\n/tmp/tmp7hn7_yb7.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp7hn7_yb7.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp7hn7_yb7.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7hn7_yb7.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp7hn7_yb7.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp7hn7_yb7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long curSum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < 0)\n            sum = 0;\n        curSum += sum;\n        if (curSum < ans)\n\
    \            ans = curSum;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6h5ejyn6.cpp: In function 'int main()':\n/tmp/tmp6h5ejyn6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6h5ejyn6.cpp:2:\n/tmp/tmp6h5ejyn6.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp6h5ejyn6.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp6h5ejyn6.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6h5ejyn6.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6h5ejyn6.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6h5ejyn6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv795aolo.cpp: In function 'int main()':\n/tmp/tmpv795aolo.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/tmp/tmpv795aolo.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv795aolo.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv795aolo.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnox17j_u.cpp: In function 'int main()':\n/tmp/tmpnox17j_u.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnox17j_u.cpp:2:\n/tmp/tmpnox17j_u.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnox17j_u.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnox17j_u.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnox17j_u.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnox17j_u.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnox17j_u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n  \
    \  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccqc96wd.cpp: In function 'int main()':\n/tmp/tmpccqc96wd.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpccqc96wd.cpp:2:\n/tmp/tmpccqc96wd.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpccqc96wd.cpp:27:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpccqc96wd.cpp:27:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpccqc96wd.cpp:27:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpccqc96wd.cpp:27:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpccqc96wd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minSumIndex = 0;\n    for (long i = 0; i < nums.size(); i++) {\n   \
    \     sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \            minSumIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm8pnpoef.cpp: In function 'int main()':\n/tmp/tmpm8pnpoef.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm8pnpoef.cpp:2:\n/tmp/tmpm8pnpoef.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpm8pnpoef.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpm8pnpoef.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm8pnpoef.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpm8pnpoef.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm8pnpoef.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long min = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglhekag9.cpp: In function 'int main()':\n/tmp/tmpglhekag9.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpglhekag9.cpp:2:\n/tmp/tmpglhekag9.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpglhekag9.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpglhekag9.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglhekag9.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpglhekag9.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpglhekag9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplagls5hz.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmplagls5hz.cpp:13:59: error: 'class std::vector<long int>' has\
    \ no member named 'substr'\n         ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n                                                           ^\n/tmp/tmplagls5hz.cpp:\
    \ In function 'int main()':\n/tmp/tmplagls5hz.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/tmp/tmplagls5hz.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplagls5hz.cpp:19:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplagls5hz.cpp:19:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIte"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans)\n            ans = sum;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3de4hf2.cpp: In function 'int main()':\n/tmp/tmpj3de4hf2.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj3de4hf2.cpp:2:\n/tmp/tmpj3de4hf2.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj3de4hf2.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj3de4hf2.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj3de4hf2.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj3de4hf2.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj3de4hf2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long sum = 0;\n    long min = INT_MAX;\n\
    \    long index = 0;\n    for(long i = 0; i < nums.size(); i++) {\n        if(nums[i]\
    \ < min) {\n            min = nums[i];\n            index = i;\n        }\n  \
    \  }\n    for(long i = index; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekndrxyn.cpp: In function 'int main()':\n/tmp/tmpekndrxyn.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekndrxyn.cpp:2:\n/tmp/tmpekndrxyn.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpekndrxyn.cpp:28:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpekndrxyn.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpekndrxyn.cpp:28:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpekndrxyn.cpp:28:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpekndrxyn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long minSum = nums[0];\n    long sum = 0;\n  \
    \  for(long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtdy8333.cpp: In function 'int main()':\n/tmp/tmpbtdy8333.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbtdy8333.cpp:2:\n/tmp/tmpbtdy8333.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbtdy8333.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbtdy8333.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbtdy8333.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbtdy8333.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbtdy8333.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans)\n            ans = sum;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh5q1788.cpp: In function 'int main()':\n/tmp/tmpeh5q1788.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/tmp/tmpeh5q1788.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeh5q1788.cpp:22:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeh5q1788.cpp:22:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = INT_MAX;\n  \
    \  long minIndex = -1;\n    for(long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if(sum < minSum) {\n            minSum = sum;\n       \
    \     minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvdk2j8lf: /tmp/tmpvdk2j8lf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto num : nums) {\n\
    \        sum += num;\n        if (sum < ans) {\n            ans = sum;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1hapnjtd: /tmp/tmp1hapnjtd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (auto &i : nums) {\n        sum += i;\n    }\n    for (auto &i : nums) {\n \
    \       ans = min(ans, sum - i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi40ii9m3.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi40ii9m3.cpp:18:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   18 |         ans = min(ans,\
    \ sum - i);\n      |               ^~~\n      |               std::min\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi40ii9m3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    long i = 0;\n    while (i\
    \ < nums.size()) {\n        sum += nums[i];\n        if (sum < ans) {\n      \
    \      ans = sum;\n        }\n        i++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwwyy30sa: /tmp/tmpwwyy30sa.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8ymxykvb: /tmp/tmp8ymxykvb.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkgbf5lrq: /tmp/tmpkgbf5lrq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4mb_25iv: /tmp/tmp4mb_25iv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpg4vzd511: /tmp/tmpg4vzd511.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       long curSum = nums[i];\n        for (long j = i; j < nums.size(); j++)\
    \ {\n            curSum += nums[j];\n            if (curSum < ans) {\n       \
    \         ans = curSum;\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm7_v5bsw: /tmp/tmpm7_v5bsw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplagls5hz.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmplagls5hz.cpp:13:59: error: 'class std::vector<long int>' has\
    \ no member named 'substr'\n         ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n                                                           ^\n/tmp/tmplagls5hz.cpp:\
    \ In function 'int main()':\n/tmp/tmplagls5hz.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/tmp/tmplagls5hz.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplagls5hz.cpp:19:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplagls5hz.cpp:19:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIte"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for(long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum > max)\n\
    \            max = sum;\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpo222ianj: /tmp/tmpo222ianj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8wanlmh3: /tmp/tmp8wanlmh3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7wmaws89: /tmp/tmp7wmaws89.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplagls5hz.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmplagls5hz.cpp:13:59: error: 'class std::vector<long int>' has\
    \ no member named 'substr'\n         ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n                                                           ^\n/tmp/tmplagls5hz.cpp:\
    \ In function 'int main()':\n/tmp/tmplagls5hz.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/tmp/tmplagls5hz.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplagls5hz.cpp:19:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplagls5hz.cpp:19:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIte"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (j != i) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp50hznhlz: /tmp/tmp50hznhlz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i)));\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_eg4j0b.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4_eg4j0b.cpp:13:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   13 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i)));\n\
    \      |                                                           ^~~~~~~~~\n\
    \      |                                                           vector\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minIndex = -1;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \            minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpieuy352o: /tmp/tmpieuy352o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    long sum = 0;\n    for\
    \ (auto i : nums) {\n        sum += i;\n        if (sum < ans) {\n           \
    \ ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe7azkpp1: /tmp/tmpe7azkpp1.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long minSum = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n            ans = i;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcszemhh3: /tmp/tmpcszemhh3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       long sum = nums[i];\n        for (long j = i; j < nums.size(); j++) {\n\
    \            sum += nums[j];\n            if (sum < ans) {\n                ans\
    \ = sum;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqswfba62: /tmp/tmpqswfba62.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long min = INT_MAX;\n    long sum = 0;\n\
    \    for(long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if(sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy9mh0y99: /tmp/tmpy9mh0y99.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9y0ilxwj: /tmp/tmp9y0ilxwj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkgbf5lrq: /tmp/tmpkgbf5lrq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n\
    \    long index = 0;\n    for (auto i : nums) {\n        if (i < 0) {\n      \
    \      sum += i;\n            min = std::min(min, sum);\n        } else {\n  \
    \          sum += i;\n            index = i;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_wublrti: /tmp/tmp_wublrti.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            if (i != j) {\n                sum += nums[j];\n       \
    \     }\n        }\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0i3fu2aq: /tmp/tmp0i3fu2aq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnjabwv5z: /tmp/tmpnjabwv5z.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805203
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph1blaeiu: /tmp/tmph1blaeiu.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    long sum = 0;\n    long\
    \ n = nums.size();\n    for(long i = 0; i < n; i++) {\n        sum += nums[i];\n\
    \        if(sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkav5y4vj: /tmp/tmpkav5y4vj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9y0ilxwj: /tmp/tmp9y0ilxwj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfm9lhuzp: /tmp/tmpfm9lhuzp.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnovz0m9z.cpp: In function 'int main()':\n/tmp/tmpnovz0m9z.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/tmp/tmpnovz0m9z.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnovz0m9z.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnovz0m9z.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (auto i : nums) {\n        sum += i;\n        if (sum < ans) {\n           \
    \ ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphi6czkkm: /tmp/tmphi6czkkm.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph8ughxqf: /tmp/tmph8ughxqf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (auto num : nums) {\n        ans = min(ans,\
    \ num + minSubArraySum(nums));\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeeii8l4v.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeeii8l4v.cpp:13:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   13 |         ans = min(ans,\
    \ num + minSubArraySum(nums));\n      |               ^~~\n      |           \
    \    std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeeii8l4v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       long curr = nums[i];\n        long min = std::min(ans, curr);\n      \
    \  ans = std::max(ans, curr + min);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf3p9zqyn: /tmp/tmpf3p9zqyn.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9y0ilxwj: /tmp/tmp9y0ilxwj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long minSum = INT_MAX;\n\
    \    for (auto i : nums) {\n        sum += i;\n        if (sum < minSum) {\n \
    \           minSum = sum;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc13sgrd_: /tmp/tmpc13sgrd_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = nums[0];\n    for (long i = 1; i\
    \ < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < ans) {\n \
    \           ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfb83hpko: /tmp/tmpfb83hpko.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnovz0m9z.cpp: In function 'int main()':\n/tmp/tmpnovz0m9z.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/tmp/tmpnovz0m9z.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnovz0m9z.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnovz0m9z.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for(long i = 0; i < nums.size(); i++) {\n        if(nums[i]\
    \ < min)\n            min = nums[i];\n        if(nums[i] > max)\n            max\
    \ = nums[i];\n    }\n    for(long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if(sum < min)\n            min = sum;\n        if(sum >\
    \ max)\n            max = sum;\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphn_snaz5: /tmp/tmphn_snaz5.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)100,
    (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long ans = INT_MAX;\n    long sum = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n\
    \    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long\
    \ ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww =\
    \ 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n\
    \    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n\
    \    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n\
    \    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n\
    \    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n\
    \    long zzz = 0;\n    long aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;\n\
    \    long dddd = 0;\n    long eeee = 0;\n    long ffff = 0;\n    long gggg = 0;\n\
    \    long hhhh = 0;\n    long iiii = 0;\n    long jjjj = 0;\n    long kkkk = 0;\n\
    \    long llll = 0;\n    long mmmm = 0;\n    long nnnn = 0;\n    long oooo = 0;\n\
    \    long pppp = 0;\n    long qqqq = 0;\n    long rrrr = 0;\n    long ssss = 0;\n\
    \    long tttt = 0;\n    long uuuu = 0;\n    long vvvv = 0;\n    long wwww = 0;\n\
    \    \n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgxc_qezn: /tmp/tmpgxc_qezn.cpp:110: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnovz0m9z.cpp: In function 'int main()':\n/tmp/tmpnovz0m9z.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/tmp/tmpnovz0m9z.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnovz0m9z.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnovz0m9z.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n  \
    \  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccqc96wd.cpp: In function 'int main()':\n/tmp/tmpccqc96wd.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpccqc96wd.cpp:2:\n/tmp/tmpccqc96wd.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpccqc96wd.cpp:27:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpccqc96wd.cpp:27:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpccqc96wd.cpp:27:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpccqc96wd.cpp:27:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpccqc96wd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   long start = 0;\n    long end = 0;\n    long mid = 0;\n    long sumOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddle = 0;\n    long sumOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddle = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle = 0;\n  \
    \  long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle = 0;\n   \
    \ long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle = 0;\n\
    \    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n    long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmd6tcha1.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmd6tcha1.cpp:29:10: error: redeclaration of \u2018long\
    \ int sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\u2019\
    \n   29 |     long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmd6tcha1.cpp:28:10: note: \u2018long int sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\u2019\
    \ previously declared here\n   28 |     long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmd6tcha1.cpp:30:10: error: redeclaration of \u2018long int sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\u2019\
    \n   30 |     long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmd6tcha1.cpp:28:10: note: \u2018long int sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\u2019\
    \ previously declared here\n   28 |     long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmd6tcha1.cpp:31:10: error: redeclaration of \u2018long int sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\u2019\
    \n   31 |     long sumOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddleOfMiddle\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < ans){\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqucq_0pg: /tmp/tmpqucq_0pg.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4mb_25iv: /tmp/tmp4mb_25iv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minIndex = -1;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \            minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmnoxyo5f: /tmp/tmpmnoxyo5f.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    long size = nums.size();\n\
    \    for (long i = 0; i < size; i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm3fzg92u: /tmp/tmpm3fzg92u.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnjabwv5z: /tmp/tmpnjabwv5z.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805203
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    long\
    \ cur = 0;\n    for (auto i : nums) {\n        sum += i;\n        cur += i;\n\
    \        if (sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsz3bfbwt: /tmp/tmpsz3bfbwt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for(auto\
    \ &i : nums) {\n        sum += i;\n        if(sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp94zukibd: /tmp/tmp94zukibd.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans)\n            ans = sum;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprc76j20c: /tmp/tmprc76j20c.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long ans = INT_MIN;\n    long sum = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n\
    \    long h = 0;\n    long i = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tl4p93e.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4tl4p93e.cpp:39:10: error: redeclaration of \u2018long\
    \ int i\u2019\n   39 |     long i = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:14:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   14 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:40:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   40 |     long j = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:15:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   15 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:41:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   41 |     long k = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:16:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   16 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:42:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   42 |     long l = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:17:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   17 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:43:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   43 |     long m = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:18:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   18 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:44:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   44 |     long n = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:19:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   19 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:45:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   45 |     long p = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:20:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   20 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:46:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   46 |     long q = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:21:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   21 |     long q =\
    \ 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:47:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   47 |     long r = 0;\n      |          ^\n/tmp/tmp4tl4p93e.cpp:22:10:\
    \ note: \u2018long int r\u2019 previously declared here\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i + 1, nums.size())));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5d1s0bxy.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5d1s0bxy.cpp:13:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   13 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i\
    \ + 1, nums.size())));\n      |                                              \
    \             ^~~~~~~~~\n      |                                             \
    \              vector\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i : nums) {\n        sum += i;\n        if (sum < ans) {\n           \
    \ ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxszs9bzi: /tmp/tmpxszs9bzi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto num : nums) {\n\
    \        sum += num;\n        if (sum < ans) {\n            ans = sum;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1hapnjtd: /tmp/tmp1hapnjtd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min) {\n            min = sum;\n        }\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1b9w8bbf: /tmp/tmp1b9w8bbf.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    for(long i = 1; i < nums.size();\
    \ i++) {\n        ans = min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpla2nh1di.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpla2nh1di.cpp:14:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpla2nh1di.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805205
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0tx_ku7d: /tmp/tmp0tx_ku7d.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoyxulqog: /tmp/tmpoyxulqog.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i : nums) {\n        sum += i;\n        if (sum < ans) {\n           \
    \ ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxszs9bzi: /tmp/tmpxszs9bzi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = nums[0];\n  \
    \  long minIndex = -1;\n    for (long i = 0; i < nums.size(); i++) {\n       \
    \ if (nums[i] < minSum) {\n            minSum = nums[i];\n            minIndex\
    \ = i;\n        }\n    }\n    sum = minSum;\n    for (long i = minIndex; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpczjvptv8: /tmp/tmpczjvptv8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minIndex = -1;\n    long minVal = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] < minVal) {\n\
    \            minVal = nums[i];\n            minIndex = i;\n        }\n    }\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] < minVal) {\n\
    \            sum += nums[minIndex];\n            minVal = nums[i];\n         \
    \   minIndex = i;\n        }\n    }\n    for (long i = 0; i < nums.size(); i++)\
    \ {\n        if (nums[i] != minVal) {\n            sum += nums[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5q0ycmac: /tmp/tmp5q0ycmac.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoyxulqog: /tmp/tmpoyxulqog.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8ymxykvb: /tmp/tmp8ymxykvb.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   long start = 0;\n    long end = n - 1;\n    while (start < end) {\n      \
    \  sum += nums[start];\n        ans = min(ans, sum);\n        start += 1;\n  \
    \      end -= 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwf5lv_o.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprwf5lv_o.cpp:18:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   18 |         ans = min(ans,\
    \ sum);\n      |               ^~~\n      |               std::min\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprwf5lv_o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long cur = 0;\n    for (long\
    \ i : nums) {\n        sum += i;\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n        cur = i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe6pv7pab: /tmp/tmpe6pv7pab.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long minSum = nums[0];\n    long sum = 0;\n  \
    \  for(long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtdy8333.cpp: In function 'int main()':\n/tmp/tmpbtdy8333.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbtdy8333.cpp:2:\n/tmp/tmpbtdy8333.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbtdy8333.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbtdy8333.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbtdy8333.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbtdy8333.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbtdy8333.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = INT_MAX;\n  \
    \  long minSumIndex = 0;\n    for(long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if(sum < minSum) {\n            minSum = sum;\n  \
    \          minSumIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_24j57oh: /tmp/tmp_24j57oh.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minIndex = -1;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \            minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcaxa4vgz: /tmp/tmpcaxa4vgz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4mb_25iv: /tmp/tmp4mb_25iv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(i + 1, nums.size()\
    \ - i)));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjwxhj8bi.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjwxhj8bi.cpp:13:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   13 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            sum += nums[j];\n            if (sum < ans) {\n        \
    \        ans = sum;\n            }\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpz3fg517q: /tmp/tmpz3fg517q.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1byve8ve: /tmp/tmp1byve8ve.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   long i = 0;\n    while (i < n) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppiexxy9v: /tmp/tmppiexxy9v.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            if (i != j) {\n                sum += nums[j];\n       \
    \     }\n        }\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0i3fu2aq: /tmp/tmp0i3fu2aq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9y0ilxwj: /tmp/tmp9y0ilxwj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = std::numeric_limits<long>::max();\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphqn936gt: /tmp/tmphqn936gt.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9y0ilxwj: /tmp/tmp9y0ilxwj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7hz2oto3: /tmp/tmp7hz2oto3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv795aolo.cpp: In function 'int main()':\n/tmp/tmpv795aolo.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/tmp/tmpv795aolo.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv795aolo.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv795aolo.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long min = INT_MAX;\n    for (auto i : nums)\
    \ {\n        min = std::min(min, i);\n    }\n    return min;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_kvy5gs_: /tmp/tmp_kvy5gs_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long min = INT_MAX;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            if (i != j) {\n                sum += nums[j];\n       \
    \     }\n        }\n        if (sum < min) {\n            min = sum;\n       \
    \ }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnho9btxk: /tmp/tmpnho9btxk.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            if (i != j) {\n                sum += nums[j];\n       \
    \     }\n        }\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpui5asair: /tmp/tmpui5asair.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7hz2oto3: /tmp/tmp7hz2oto3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long cur = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < ans)\
    \ {\n            ans = sum;\n            cur = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpx75gasw1: /tmp/tmpx75gasw1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptg4t0p03: /tmp/tmptg4t0p03.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoyxulqog: /tmp/tmpoyxulqog.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i + 1, nums.size())));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffo_rryu.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpffo_rryu.cpp:13:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   13 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i\
    \ + 1, nums.size())));\n      |                                              \
    \             ^~~~~~~~~\n      |                                             \
    \              vector\n"
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size();\
    \ j++) {\n            if (j != i) {\n                sum += nums[j];\n       \
    \     }\n        }\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpujch9awu: /tmp/tmpujch9awu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (j != i) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp50hznhlz: /tmp/tmp50hznhlz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n  \
    \  return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccqc96wd.cpp: In function 'int main()':\n/tmp/tmpccqc96wd.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpccqc96wd.cpp:2:\n/tmp/tmpccqc96wd.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpccqc96wd.cpp:27:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpccqc96wd.cpp:27:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpccqc96wd.cpp:27:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpccqc96wd.cpp:27:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpccqc96wd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoyxulqog: /tmp/tmpoyxulqog.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long minSum = nums[0];\n    for (long i = 1; i\
    \ < nums.size(); i++) {\n        minSum = std::min(minSum, nums[i]);\n    }\n\
    \    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphrxp07fz: /tmp/tmphrxp07fz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0tx_ku7d: /tmp/tmp0tx_ku7d.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i : nums) {\n        sum += i;\n        if (sum < ans) {\n           \
    \ ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxszs9bzi: /tmp/tmpxszs9bzi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9y0ilxwj: /tmp/tmp9y0ilxwj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   long i = 0;\n    while (i < n) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppiexxy9v: /tmp/tmppiexxy9v.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long min = INT_MAX;\n    long sum = 0;\n    long\
    \ count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min) {\n            min = sum;\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp0upqwj2: /tmp/tmpp0upqwj2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i + 1, nums.size())));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5d1s0bxy.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5d1s0bxy.cpp:13:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   13 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i\
    \ + 1, nums.size())));\n      |                                              \
    \             ^~~~~~~~~\n      |                                             \
    \              vector\n"
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long minSum = nums[0];\n    long sum = 0;\n  \
    \  long minSumIndex = 0;\n    for(long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if(sum < minSum) {\n            minSum = sum;\n  \
    \          minSumIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi932nuvx: /tmp/tmpi932nuvx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoyxulqog: /tmp/tmpoyxulqog.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    for(long i = 1; i < nums.size();\
    \ i++) {\n        ans = min(ans, nums[i] + minSubArraySum(nums.substr(0, i)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpheb6loi3.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpheb6loi3.cpp:14:54: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   14 |         ans = min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(0, i)));\n      |                     \
    \                                 ^~~~~~\n/tmp/tmpheb6loi3.cpp:14:15: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   14 |         ans = min(ans, nums[i] + minSubArraySum(nums.substr(0, i)));\n\
    \      |               ^~~\n      |               std::min\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpheb6loi3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnovz0m9z.cpp: In function 'int main()':\n/tmp/tmpnovz0m9z.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/tmp/tmpnovz0m9z.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnovz0m9z.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnovz0m9z.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long min = INT_MAX;\n    long sum = 0;\n    long\
    \ sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long\
    \ sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long\
    \ sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n\
    \    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17\
    \ = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long\
    \ sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n\
    \    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28\
    \ = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long\
    \ sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n\
    \    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39\
    \ = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long\
    \ sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n\
    \    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50\
    \ = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long\
    \ sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n\
    \    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61\
    \ = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long\
    \ sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n\
    \    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72\
    \ = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long\
    \ sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n\
    \    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum83\
    \ = 0;\n    long sum84 = 0;\n    \n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyfp494qd: /tmp/tmpyfp494qd.cpp:101: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp44nale0p: /tmp/tmp44nale0p.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for (auto i : nums) {\n        sum += i;\n        if (sum\
    \ < min) min = sum;\n        if (sum > max) max = sum;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5hux9val: /tmp/tmp5hux9val.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minSumIndex = 0;\n    long minSumIndex2 = 0;\n    long minSumIndex3\
    \ = 0;\n    long minSumIndex4 = 0;\n    long minSumIndex5 = 0;\n    long minSumIndex6\
    \ = 0;\n    long minSumIndex7 = 0;\n    long minSumIndex8 = 0;\n    long minSumIndex9\
    \ = 0;\n    long minSumIndex10 = 0;\n    long minSumIndex11 = 0;\n    long minSumIndex12\
    \ = 0;\n    long minSumIndex13 = 0;\n    long minSumIndex14 = 0;\n    long minSumIndex15\
    \ = 0;\n    long minSumIndex16 = 0;\n    long minSumIndex17 = 0;\n    long minSumIndex18\
    \ = 0;\n    long minSumIndex19 = 0;\n    long minSumIndex20 = 0;\n    long minSumIndex21\
    \ = 0;\n    long minSumIndex22 = 0;\n    long minSumIndex23 = 0;\n    long minSumIndex24\
    \ = 0;\n    long minSumIndex25 = 0;\n    long minSumIndex26 = 0;\n    long minSumIndex27\
    \ = 0;\n    long minSumIndex28 = 0;\n    long minSumIndex29 = 0;\n    long minSumIndex30\
    \ = 0;\n    long minSumIndex31 = 0;\n    long minSumIndex32 = 0;\n    long minSumIndex33\
    \ = 0;\n    long minSumIndex34 = 0;\n    long minSumIndex35 = 0;\n    long minSumIndex36\
    \ = 0;\n    long minSumIndex37 = 0;\n    long minSumIndex38 = 0;\n    long minSumIndex39\
    \ = 0;\n    long minSumIndex40 = 0;\n    long minSumIndex41 = 0;\n    long minSumIndex42\
    \ = 0;\n    long minSumIndex43 = 0;\n    long minSumIndex44 = 0;\n    long minSumIndex45\
    \ = 0;\n    long minSumIndex46 = 0;\n    long minSumIndex47 = 0;\n    long minSumIndex48\
    \ = 0;\n    long minSumIndex49 = 0;\n    long minSumIndex50 = 0;\n    long minSumIndex51\
    \ = 0;\n    long minSumIndex52 = 0;\n    long minSumIndex53 = 0;\n    long minSumIndex54\
    \ = 0;\n    long minSumIndex55 = 0;\n    long minSumIndex56 = 0;\n    long minSumIndex57\
    \ = 0;\n    long minSumIndex58 = 0;\n    long minSumIndex59 = 0;\n    long minSumIndex60\
    \ = 0;\n    long minSumIndex61 = 0;\n    long minSumIndex\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyx6envhb.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyx6envhb.cpp:76:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpyx6envhb.cpp:76:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long min = INT_MAX;\n    long sum = 0;\n    long\
    \ n = nums.size();\n    long k = 0;\n    long sumOfSubArray = 0;\n    long sumOfSubArray2\
    \ = 0;\n    long sumOfSubArray3 = 0;\n    long sumOfSubArray4 = 0;\n    long sumOfSubArray5\
    \ = 0;\n    long sumOfSubArray6 = 0;\n    long sumOfSubArray7 = 0;\n    long sumOfSubArray8\
    \ = 0;\n    long sumOfSubArray9 = 0;\n    long sumOfSubArray10 = 0;\n    long\
    \ sumOfSubArray11 = 0;\n    long sumOfSubArray12 = 0;\n    long sumOfSubArray13\
    \ = 0;\n    long sumOfSubArray14 = 0;\n    long sumOfSubArray15 = 0;\n    long\
    \ sumOfSubArray16 = 0;\n    long sumOfSubArray17 = 0;\n    long sumOfSubArray18\
    \ = 0;\n    long sumOfSubArray19 = 0;\n    long sumOfSubArray20 = 0;\n    long\
    \ sumOfSubArray21 = 0;\n    long sumOfSubArray22 = 0;\n    long sumOfSubArray23\
    \ = 0;\n    long sumOfSubArray24 = 0;\n    long sumOfSubArray25 = 0;\n    long\
    \ sumOfSubArray26 = 0;\n    long sumOfSubArray27 = 0;\n    long sumOfSubArray28\
    \ = 0;\n    long sumOfSubArray29 = 0;\n    long sumOfSubArray30 = 0;\n    long\
    \ sumOfSubArray31 = 0;\n    long sumOfSubArray32 = 0;\n    long sumOfSubArray33\
    \ = 0;\n    long sumOfSubArray34 = 0;\n    long sumOfSubArray35 = 0;\n    long\
    \ sumOfSubArray36 = 0;\n    long sumOfSubArray37 = 0;\n    long sumOfSubArray38\
    \ = 0;\n    long sumOfSubArray39 = 0;\n    long sumOfSubArray40 = 0;\n    long\
    \ sumOfSubArray41 = 0;\n    long sumOfSubArray42 = 0;\n    long sumOfSubArray43\
    \ = 0;\n    long sumOfSubArray44 = 0;\n    long sumOfSubArray45 = 0;\n    long\
    \ sumOfSubArray46 = 0;\n    long sumOfSubArray47 = 0;\n    long sumOfSubArray48\
    \ = 0;\n    long sumOfSubArray49 = 0;\n    long sumOfSubArray50 = 0;\n    long\
    \ sumOfSubArray51 = 0;\n    long sumOfSubArray52 = 0;\n    long sumOfSubArray53\
    \ = 0;\n    long sumOfSubArray54 = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoqsj__0e.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoqsj__0e.cpp:71:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmpoqsj__0e.cpp:71:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659805208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkgbf5lrq: /tmp/tmpkgbf5lrq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < ans)\n            ans = sum;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnfxssunl: /tmp/tmpnfxssunl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1byve8ve: /tmp/tmp1byve8ve.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv795aolo.cpp: In function 'int main()':\n/tmp/tmpv795aolo.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/tmp/tmpv795aolo.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv795aolo.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv795aolo.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for(long i = 1; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjacxjl_b: /tmp/tmpjacxjl_b.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1byve8ve: /tmp/tmp1byve8ve.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long minSum = INT_MIN;\n    long sum = 0;\n  \
    \  for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n       \
    \ if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu0s3dygf: /tmp/tmpu0s3dygf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqqfrwha.cpp: In function 'int main()':\n/tmp/tmpbqqfrwha.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/tmp/tmpbqqfrwha.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpbqqfrwha.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbqqfrwha.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbqqfrwha.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbqqfrwha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minIndex = -1;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \            minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcaxa4vgz: /tmp/tmpcaxa4vgz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuzu4u4s5: /tmp/tmpuzu4u4s5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9tjxe8xf: /tmp/tmp9tjxe8xf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < min) {\n            min = sum;\n        }\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsioh6297: /tmp/tmpsioh6297.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for(long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if(sum < min) {\n            min = sum;\n        }\n     \
    \   if(sum > max) {\n            max = sum;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpg6asd_6v: /tmp/tmpg6asd_6v.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnovz0m9z.cpp: In function 'int main()':\n/tmp/tmpnovz0m9z.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/tmp/tmpnovz0m9z.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpnovz0m9z.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnovz0m9z.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnovz0m9z.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnovz0m9z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long count = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqinwmbeu: /tmp/tmpqinwmbeu.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuzu4u4s5: /tmp/tmpuzu4u4s5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv795aolo.cpp: In function 'int main()':\n/tmp/tmpv795aolo.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/tmp/tmpv795aolo.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv795aolo.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv795aolo.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    long\
    \ n = nums.size();\n    for(long i = 1; i < n; i++) {\n        sum += nums[i];\n\
    \        if(sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph1u59b7i: /tmp/tmph1u59b7i.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    long sum = 0;\n    for(long\
    \ i : nums) {\n        sum += i;\n        if(sum < ans) {\n            ans = sum;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0nwaoh5w: /tmp/tmp0nwaoh5w.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n    \
    \        if (i != j) {\n                sum += nums[j];\n            }\n     \
    \   }\n        if (sum < ans) {\n            ans = sum;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfm9lhuzp: /tmp/tmpfm9lhuzp.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c98ze39.cpp: In function 'int main()':\n/tmp/tmp8c98ze39.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/tmp/tmp8c98ze39.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8c98ze39.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8c98ze39.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8c98ze39.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8c98ze39.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans)\n            ans = sum;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh5q1788.cpp: In function 'int main()':\n/tmp/tmpeh5q1788.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/tmp/tmpeh5q1788.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeh5q1788.cpp:22:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeh5q1788.cpp:22:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < min) {\n            min = sum;\n        }\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdz5e4mhu: /tmp/tmpdz5e4mhu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       ans = min(ans, nums[i] + minSubArraySum(nums.substr(i + 1, nums.size()\
    \ - i)));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1ntpyf4.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe1ntpyf4.cpp:13:54: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   13 |         ans = min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                   ^~~~~~\n/tmp/tmpe1ntpyf4.cpp:13:15:\
    \ error: \u2018min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019\
    ?\n   13 |         ans = min(ans, nums[i] + minSubArraySum(nums.substr(i + 1,\
    \ nums.size() - i)));\n      |               ^~~\n      |               std::min\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe1ntpyf4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplagls5hz.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmplagls5hz.cpp:13:59: error: 'class std::vector<long int>' has\
    \ no member named 'substr'\n         ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n                                                           ^\n/tmp/tmplagls5hz.cpp:\
    \ In function 'int main()':\n/tmp/tmplagls5hz.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/tmp/tmplagls5hz.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplagls5hz.cpp:19:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplagls5hz.cpp:19:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIte"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptg4t0p03: /tmp/tmptg4t0p03.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i : nums) {\n        sum += i;\n        if (sum < ans) {\n           \
    \ ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxszs9bzi: /tmp/tmpxszs9bzi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805204
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    long\
    \ n = nums.size();\n    for(long i = 0; i < n; i++) {\n        sum += nums[i];\n\
    \        if(sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2g0d3evh: /tmp/tmp2g0d3evh.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto i : nums) {\n \
    \       sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1byve8ve: /tmp/tmp1byve8ve.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplagls5hz.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmplagls5hz.cpp:13:59: error: 'class std::vector<long int>' has\
    \ no member named 'substr'\n         ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n                                                           ^\n/tmp/tmplagls5hz.cpp:\
    \ In function 'int main()':\n/tmp/tmplagls5hz.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/tmp/tmplagls5hz.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplagls5hz.cpp:19:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplagls5hz.cpp:19:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIte"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9tjxe8xf: /tmp/tmp9tjxe8xf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long minSumIndex = 0;\n    for (long i = 0; i < nums.size(); i++) {\n   \
    \     sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \            minSumIndex = i;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm8pnpoef.cpp: In function 'int main()':\n/tmp/tmpm8pnpoef.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm8pnpoef.cpp:2:\n/tmp/tmpm8pnpoef.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpm8pnpoef.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpm8pnpoef.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm8pnpoef.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpm8pnpoef.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpm8pnpoef.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans)\n            ans = sum;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh5q1788.cpp: In function 'int main()':\n/tmp/tmpeh5q1788.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/tmp/tmpeh5q1788.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeh5q1788.cpp:22:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeh5q1788.cpp:22:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   for (long i = 0; i < n; i++) {\n        sum += nums[i];\n        if (sum <\
    \ ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9eg8hm65: /tmp/tmp9eg8hm65.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long\
    \ oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss =\
    \ 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n\
    \    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long Aa = 0;\n    long\
    \ Bb = 0;\n    long Cc = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff =\
    \ 0;\n    long Gg = 0;\n    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n\
    \    long Kk = 0;\n    long Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long\
    \ Oo = 0;\n    long Pp = 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss =\
    \ 0;\n    long Tt = 0;\n    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n\
    \    long Xx = 0;\n    long Yy = 0;\n\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn4jbazxu: /tmp/tmpn4jbazxu.cpp:113: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmptg4t0p03: /tmp/tmptg4t0p03.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805206
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv795aolo.cpp: In function 'int main()':\n/tmp/tmpv795aolo.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/tmp/tmpv795aolo.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpv795aolo.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv795aolo.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv795aolo.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv795aolo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    for (auto num : nums) {\n\
    \        sum += num;\n        if (sum < ans) {\n            ans = sum;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1hapnjtd: /tmp/tmp1hapnjtd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805201
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = INT_MAX;\n    long sum = 0;\n    long\
    \ n = nums.size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n1 = 0;\n    long n2 = 0;\n    long n3 = 0;\n\
    \    long n4 = 0;\n    long n5 = 0;\n    long n6 = 0;\n    long n7 = 0;\n    long\
    \ n8 = 0;\n    long n9 = 0;\n    long n10 = 0;\n    long n11 = 0;\n    long n12\
    \ = 0;\n    long n13 = 0;\n    long n14 = 0;\n    long n15 = 0;\n    long n16\
    \ = 0;\n    long n17 = 0;\n    long n18 = 0;\n    long n19 = 0;\n    long n20\
    \ = 0;\n    long n21 = 0;\n    long n22 = 0;\n    long n23 = 0;\n    long n24\
    \ = 0;\n    long n25 = 0;\n    long n26 = 0;\n    long n27 = 0;\n    long n28\
    \ = 0;\n    long n29 = 0;\n    long n30 = 0;\n    long n31 = 0;\n    long n32\
    \ = 0;\n    long n33 = 0;\n    long n34 = 0;\n    long n35 = 0;\n    long n36\
    \ = 0;\n    long n37 = 0;\n    long n38 = 0;\n    long n39 = 0;\n    long n40\
    \ = 0;\n    long n41 = 0;\n    long n42 = 0;\n    long n43 = 0;\n    long n44\
    \ = 0;\n    long n45 = 0;\n    long n46 = 0;\n    long n47 = 0;\n    long n48\
    \ = 0;\n    long n49 = 0;\n    long n50 = 0;\n    long n51 = 0;\n    long n52\
    \ = 0;\n    long n53 = 0;\n    long n54 = 0;\n    long n55 = 0;\n    long n56\
    \ = 0;\n    long n57 = 0;\n    long n58 = 0;\n    long n59 = 0;\n    long n60\
    \ = 0;\n    long n61 = 0;\n    long n62 = 0;\n    long n63 = 0;\n    long n64\
    \ = 0;\n    long n65 = 0;\n    long n66 = 0;\n    long n67 = 0;\n    long n68\
    \ = 0;\n    long n69 = 0;\n    long n70 = 0;\n    long n71 = 0;\n    long n72\
    \ = 0;\n    long n73 = 0;\n    long n74 = 0;\n    long n75 = 0;\n    long n76\
    \ = 0;\n    long n77 = 0;\n    long n78 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7898cod7: /tmp/tmp7898cod7.cpp:102: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       ans = min(ans, nums[i] + minSubArraySum(nums.subvector(i + 1, nums.size())));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpicxloeqe.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpicxloeqe.cpp:13:54: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   13 |         ans = min(ans, nums[i] + minSubArraySum(nums.subvector(i +\
    \ 1, nums.size())));\n      |                                                \
    \      ^~~~~~~~~\n      |                                                    \
    \  vector\n/tmp/tmpicxloeqe.cpp:13:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   13 |         ans = min(ans,\
    \ nums[i] + minSubArraySum(nums.subvector(i + 1, nums.size())));\n      |    \
    \           ^~~\n      |               std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpicxloeqe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long sum = 0;\n    long min = INT_MAX;\n    long\
    \ max = INT_MIN;\n    for (auto i : nums) {\n        sum += i;\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpg68g1gt3: /tmp/tmpg68g1gt3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805210
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Write your code here\n    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7wmaws89: /tmp/tmp7wmaws89.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    long i = 0;\n    while (i\
    \ < nums.size()) {\n        sum += nums[i];\n        if (sum < ans) {\n      \
    \      ans = sum;\n        }\n        i++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwwyy30sa: /tmp/tmpwwyy30sa.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n \
    \   long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < n) {\n     \
    \   sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n      \
    \  }\n        i++;\n    }\n    while (j < n) {\n        sum += nums[j];\n    \
    \    if (sum < ans) {\n            ans = sum;\n        }\n        j++;\n    }\n\
    \    while (k < n) {\n        sum += nums[k];\n        if (sum < ans) {\n    \
    \        ans = sum;\n        }\n        k++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpik0izxdk: /tmp/tmpik0izxdk.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805210
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    long n = nums.size();\n \
    \   for (int i = 1; i < n; i++) {\n        sum += nums[i];\n        if (sum <\
    \ ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4jtn5fis: /tmp/tmp4jtn5fis.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans)\n            ans = sum;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh5q1788.cpp: In function 'int main()':\n/tmp/tmpeh5q1788.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/tmp/tmpeh5q1788.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpeh5q1788.cpp:22:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeh5q1788.cpp:22:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeh5q1788.cpp:22:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeh5q1788.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long ans = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n \
    \       ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0, i + 1)));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplagls5hz.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmplagls5hz.cpp:13:59: error: 'class std::vector<long int>' has\
    \ no member named 'substr'\n         ans = std::min(ans, nums[i] + minSubArraySum(nums.substr(0,\
    \ i + 1)));\n                                                           ^\n/tmp/tmplagls5hz.cpp:\
    \ In function 'int main()':\n/tmp/tmplagls5hz.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = minSubArraySum;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/tmp/tmplagls5hz.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmplagls5hz.cpp:19:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplagls5hz.cpp:19:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplagls5hz.cpp:19:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplagls5hz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIte"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = INT_MAX;\n    long sum = 0;\n    for (long i : nums) {\n \
    \       sum += i;\n        if (sum < min) {\n            min = sum;\n        }\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdz5e4mhu: /tmp/tmpdz5e4mhu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805209
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    // Your code here\n    long ans = nums[0];\n    long sum = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < ans)\
    \ {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4mb_25iv: /tmp/tmp4mb_25iv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805202
