name: HumanEval_162_string_to_md5
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return\
  \ its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\
  // >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \nstd::optional<std::string> string_to_md5(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
  Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\
  \")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n"
completions: ["    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n\
    \    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest(digest);\n    return md5_digest;", "  \
    \  if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    char hex[33];\n    sprintf(hex, \"%08x\", digest);\n\
    \    return std::string(hex);", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_str;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_string(digest, sizeof(digest));\n\
    \    return md5_string;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    char hex_digest[33];\n    snprintf(hex_digest, sizeof(hex_digest), \"%08x\"\
    , digest);\n    return std::string(hex_digest);", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char md[MD5_DIGEST_LENGTH];\n    MD5_CTX md5;\n\
    \    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(md,\
    \ &md5);\n    std::string md5_str(reinterpret_cast<char*>(md), MD5_DIGEST_LENGTH);\n\
    \    return md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(), digest);\n\
    \    std::string md5(digest, sizeof(digest));\n    return md5;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    char hex[33];\n    for (unsigned int i = 0; i < 16; i++) {\n \
    \       sprintf(&hex[i*2], \"%02x\", digest[i]);\n    }\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.data(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char md[MD5_SIZE];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), text.size());\n    MD5_Final(md, &ctx);\n    std::string md5 =\
    \ std::string(md);\n    return md5;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_string(digest);\n    return md5_string;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_string(digest);\n    return md5_string;", "  \
    \  if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(),\
    \ text.size());\n    MD5_Final(digest, &ctx);\n    char hex[33];\n    std::string\
    \ result;\n    for (int i = 0; i < 16; i++) {\n        sprintf(&hex[i * 2], \"\
    %02x\", digest[i]);\n    }\n    result.resize(2 * 16);\n    result[0] = '$';\n\
    \    result[1] = '1';\n    result[2 * 16] = '$';\n    result[2 * 16 + 1] = '2';\n\
    \    result[2 * 16 + 2] = '$';\n    result[2 * 16 + 3] = '3';\n    result[2 *\
    \ 16 + 4] = '$';\n    result[2 * 16 + 5] = '4';\n    result[2 * 16 + 6] = '$';\n\
    \    result[2 * 16 + 7] = '5';\n    result[2 * 16 + 8] = '$';\n    result[2 *\
    \ 16 + 9] = '6';\n    result[2 * 16 + 10] = '$';\n    result[2 * 16 + 11] = '7';\n\
    \    result[2 * 16 + 12] = '$';\n    result[2 * 16 + 13] = '8';\n    result[2\
    \ * 16 + 14] = '$';\n    result[2 * 16 + 15] = '9';\n    return result;", "  \
    \  if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(),\
    \ text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = base64_encode(digest);\n    return md5;", " \
    \   if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n  \
    \  MD5((unsigned char*)text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(),\
    \ text.size());\n    MD5_Final(digest, &ctx);\n    std::string md5_digest(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_digest;", "    if (text.empty()) {\n\
    \        return std::nullopt;\n    }\n    unsigned char digest[16];\n    MD5(text.c_str(),\
    \ text.size(), digest);\n    std::string md5_str(reinterpret_cast<char const *>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.data(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_str;", "    if (text.empty()) {\n   \
    \     return std::nullopt;\n    }\n    unsigned char digest[16];\n    MD5(text.c_str(),\
    \ text.size(), digest);\n    char hex[33];\n    snprintf(hex, sizeof(hex), \"\
    %08x\", digest);\n    return std::string(hex);", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5\
    \ = std::to_string(digest);\n    return md5;", "    if (text.empty()) {\n    \
    \    return std::nullopt;\n    }\n    std::string md5sum;\n    md5sum.reserve(16);\n\
    \    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\\
    0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('\\0');\n    md5sum.push_back('",
  "    if (text.empty()) return std::nullopt;\n    unsigned char md[MD5_DIGEST_LENGTH];\n\
    \    MD5(text.c_str(), text.size(), md);\n    std::string md5 = std::to_string(md[0])\
    \ + std::to_string(md[1]) + std::to_string(md[2]) + std::to_string(md[3]) + std::to_string(md[4])\
    \ + std::to_string(md[5]) + std::to_string(md[6]) + std::to_string(md[7]) + std::to_string(md[8]);\n\
    \    return md5;", "    if (text.empty()) {\n        return std::nullopt;\n  \
    \  }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n \
    \   MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) return std::nullopt;\n    unsigned char\
    \ digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char md[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), md);\n    char hex[MD5_DIGEST_LENGTH * 2];\n    for (size_t i =\
    \ 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(&hex[i * 2], \"%02x\", md[i]);\n\
    \    }\n    return std::string(hex);", "    if (text.empty()) {\n        return\
    \ std::nullopt;\n    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n\
    \    md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char md[MD5_DIGEST_LENGTH];\n    MD5((text.c_str()), text.size(), md);\n   \
    \ char hex[MD5_DIGEST_LENGTH * 2 + 1];\n    for (size_t i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        sprintf(&hex[i * 2], \"%02x\", md[i]);\n    }\n    return std::string(hex);",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    char hex[33];\n\
    \    for (unsigned int i = 0; i < 16; i++) {\n        sprintf(&hex[i * 2], \"\
    %02x\", digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_string(digest);\n    return md5_string;", "  \
    \  if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char md[MD5_DIGEST_LENGTH];\n    MD5((text.c_str()), text.size(),\
    \ md);\n    char hex[MD5_DIGEST_LENGTH * 2];\n    for (size_t i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        sprintf(&hex[i * 2], \"%02x\", md[i]);\n    }\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_string(digest, sizeof(digest));\n\
    \    return md5_string;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5 = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n  \
    \  return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;", "    if\
    \ (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char digest[16];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), digest);\n    char hex[33];\n\
    \    for (unsigned int i = 0; i < 16; i++) {\n        sprintf(&hex[i * 2], \"\
    %02x\", digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    std::string md5_digest(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_digest;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) {\n        return std::nullopt;\n  \
    \  }\n    unsigned char md[MD5_DIGEST_LENGTH];\n    MD5((text.c_str()), text.size(),\
    \ md);\n    char hex[MD5_DIGEST_LENGTH * 2 + 1];\n    for (size_t i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        sprintf(&hex[i * 2], \"%02x\", md[i]);\n    }\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) return std::nullopt;\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5\
    \ = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5((unsigned char*)text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) return std::nullopt;\n    unsigned char\
    \ digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(),\
    \ text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n    std::string md5\
    \ = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) {\n\
    \        return std::nullopt;\n    }\n    unsigned char digest[16];\n    md5(text.c_str(),\
    \ text.size(), digest);\n    std::string md5_digest(digest);\n    return md5_digest;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char const *>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) {\n        return std::nullopt;\n  \
    \  }\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n \
    \   MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char const\
    \ *>(digest), 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) {\n        return std::nullopt;\n  \
    \  }\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n    }\n \
    \   unsigned char md[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), md);\n    char hex[MD5_DIGEST_LENGTH * 2 + 1];\n    for (size_t\
    \ i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        sprintf(&hex[i * 2], \"%02x\"\
    , md[i]);\n    }\n    return std::string(hex);", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_digest(digest);\n    return md5_digest;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5((unsigned char*)text.c_str(), text.size(), digest);\n    std::string md5\
    \ = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) {\n\
    \        return std::nullopt;\n    }\n    unsigned char digest[16];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), digest);\n    char hex[33];\n    for (unsigned\
    \ int i = 0; i < 16; i++) {\n        sprintf(&hex[i * 2], \"%02x\", digest[i]);\n\
    \    }\n    return std::string(hex);", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ digest);\n    char hex[33];\n    for (unsigned int i = 0; i < 16; i++) {\n \
    \       sprintf(&hex[i*2], \"%02x\", digest[i]);\n    }\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_string(digest,\
    \ digest + 16);\n    return md5_string;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ md[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), md);\n\
    \    char hex[MD5_DIGEST_LENGTH * 2];\n    for (size_t i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n        sprintf(&hex[i * 2], \"%02x\", md[i]);\n    }\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_str;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ digest);\n    char hex[33];\n    snprintf(hex, sizeof(hex), \"%08x\", digest[0]);\n\
    \    return std::string(hex);", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_digest(digest, digest + 16);\n    return md5_digest;", " \
    \   if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n  \
    \  MD5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_digest(digest, digest + 16);\n    return md5_digest;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n    std::string md5_digest(digest,\
    \ digest + 16);\n    return md5_digest;", "    if (text.empty()) {\n        return\
    \ std::nullopt;\n    }\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest(digest);\n    return md5_digest;", "  \
    \  if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ md[MD5_SUM_LENGTH];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(md, &md5);\n    std::string md5_str(reinterpret_cast<char*>(md),\
    \ MD5_SUM_LENGTH);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_string(digest, digest + 16);\n    return md5_string;", " \
    \   if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n  \
    \  MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    char hex[33];\n    sprintf(hex, \"%08x\", digest);\n\
    \    return std::string(hex);", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), digest);\n    std::string\
    \ md5(digest, digest + 16);\n    return md5;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_string(digest,\
    \ sizeof(digest));\n    return md5_string;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(), digest);\n \
    \   char hex[33];\n    snprintf(hex, sizeof(hex), \"%08x\", digest[0]);\n    return\
    \ std::string(hex);", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char md[MD5_DIGEST_LENGTH];\n    MD5((text.c_str()), text.size(), md);\n   \
    \ char hex[MD5_DIGEST_LENGTH * 2 + 1];\n    hex[0] = '\\0';\n    for (size_t i\
    \ = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        sprintf(&hex[i * 2], \"%02x\", md[i]);\n\
    \    }\n    return std::string(hex);", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ digest);\n    std::string md5_string(digest, sizeof(digest));\n    return md5_string;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest,\
    \ digest + 16);\n    return md5_digest;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ digest);\n    char hex[33];\n    snprintf(hex, sizeof(hex), \"%08x\", digest);\n\
    \    return std::string(hex);", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(),\
    \ text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    char hex[33];\n    sprintf(hex, \"%08x\", digest);\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char const *>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = base64_encode(digest);\n\
    \    return md5;", "    if (text.empty()) return std::nullopt;\n    unsigned char\
    \ digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.data(),\
    \ text.size());\n    MD5_Final(digest, &ctx);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) return std::nullopt;\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5(digest,\
    \ digest + 16);\n    return md5;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    char hex[33];\n    for (unsigned int i = 0; i < 16; i++) {\n        sprintf(&hex[i\
    \ * 2], \"%02x\", digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.data(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    std::string md5_digest;\n    MD5(reinterpret_cast<unsigned char*>(digest),\
    \ 16, &md5_digest);\n    return md5_digest;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_str;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n\
    \    return md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_digest(digest);\n    return md5_digest;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), digest);\n    char hex[33];\n    for (unsigned int i = 0; i < 16;\
    \ i++) {\n        sprintf(&hex[i*2], \"%02x\", digest[i]);\n    }\n    return\
    \ std::string(hex);", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_digest;\n    for (int i = 0; i < 16; i++) {\n        md5_digest\
    \ += std::to_string(digest[i]);\n    }\n    return md5_digest;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest;\n    md5(digest, sizeof(digest), md5_digest);\n\
    \    return md5_digest;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    char hex[33];\n    sprintf(hex, \"%08x\", digest);\n    return std::string(hex);",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    std::string md5_digest(digest, digest + 16);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_digest(digest, digest + 16);\n    return md5_digest;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5_digest(digest);\n    return md5_digest;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest(digest, digest + 16);\n    return md5_digest;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    char hex[33];\n\
    \    for (size_t i = 0; i < 16; i++) {\n        sprintf(&hex[i * 2], \"%02x\"\
    , digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1])\
    \ + std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_str;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest(digest);\n    return md5_digest;", "  \
    \  if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5((unsigned char*)text.c_str(), text.size(), digest);\n    std::string md5_string(digest,\
    \ digest + 16);\n    return md5_string;", "    if (text.empty()) {\n        return\
    \ std::nullopt;\n    }\n    unsigned char digest[16];\n    md5((unsigned char*)text.c_str(),\
    \ text.size(), digest);\n    std::string md5_digest(digest);\n    return md5_digest;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5 = std::to_string(digest[0])\
    \ + std::to_string(digest[1]) + std::to_string(digest[2]) + std::to_string(digest[3])\
    \ + std::to_string(digest[4]) + std::to_string(digest[5]) + std::to_string(digest[6])\
    \ + std::to_string(digest[7]) + std::to_string(digest[8]) + std::to_string(digest[9])\
    \ + std::to_string(digest[10]) + std::to_string(digest[11]) + std::to_string(digest[12])\
    \ + std::to_string(digest[13]) + std::to_string(digest[14]) + std::to_string(digest[15]);\n\
    \    return md5;", "    if (text.empty()) {\n        return std::nullopt;\n  \
    \  }\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_digest(digest);\n    return md5_digest;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char md[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), md);\n    char hex[MD5_DIGEST_LENGTH * 2];\n\
    \    for (size_t i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(&hex[i\
    \ * 2], \"%02x\", md[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest(digest);\n    return md5_digest;", "  \
    \  if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n    std::string md5\
    \ = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    std::string md5_digest(reinterpret_cast<char const *>(digest), 16);\n   \
    \ return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n    char hex[33];\n\
    \    snprintf(hex, sizeof(hex), \"%08x\", digest);\n    return std::string(hex);",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    char hex[33];\n\
    \    for (size_t i = 0; i < 16; i++) {\n        sprintf(&hex[i * 2], \"%02x\"\
    , digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    char hex[33];\n    snprintf(hex, sizeof(hex), \"%08x\", digest);\n\
    \    return std::string(hex);", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.data(), text.size());\n    MD5_Final(digest, &ctx);\n    std::string md5\
    \ = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n\
    \    return md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char const *>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(),\
    \ text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_digest(digest,\
    \ digest + 16);\n    return md5_digest;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n\
    \    MD5(text.c_str(), text.size(), digest);\n    std::string md5 = base64_encode(digest);\n\
    \    return md5;", "    if (text.empty()) return std::nullopt;\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5_string(digest,\
    \ digest + 16);\n    return md5_string;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    char hex[33];\n    for (size_t i = 0; i < 16; i++) {\n        sprintf(&hex[i\
    \ * 2], \"%02x\", digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ {\n        return std::nullopt;\n    }\n    unsigned char digest[16];\n    md5(text.c_str(),\
    \ text.size(), digest);\n    std::string md5_digest(digest);\n    return md5_digest;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ md5[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ md5);\n    char hex[MD5_DIGEST_LENGTH * 2 + 1];\n    for (size_t i = 0; i <\
    \ MD5_DIGEST_LENGTH; ++i) {\n        sprintf(&hex[i * 2], \"%02x\", md5[i]);\n\
    \    }\n    return std::string(hex);", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5 = std::to_string(digest[0]) + std::to_string(digest[1]) +\
    \ std::to_string(digest[2]) + std::to_string(digest[3]) + std::to_string(digest[4])\
    \ + std::to_string(digest[5]) + std::to_string(digest[6]) + std::to_string(digest[7])\
    \ + std::to_string(digest[8]) + std::to_string(digest[9]) + std::to_string(digest[10])\
    \ + std::to_string(digest[11]) + std::to_string(digest[12]) + std::to_string(digest[13])\
    \ + std::to_string(digest[14]) + std::to_string(digest[15]);\n    return md5;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char md[MD5_SIZE];\n \
    \   MD5(text.c_str(), text.size(), md);\n    char hex[MD5_SIZE * 2 + 1];\n   \
    \ for (size_t i = 0; i < MD5_SIZE; i++) {\n        sprintf(&hex[i * 2], \"%02x\"\
    , md[i]);\n    }\n    return std::string(hex);", "    if (text.empty()) {\n  \
    \      return std::nullopt;\n    }\n    unsigned char digest[16];\n    MD5_CTX\
    \ ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    std::string md5_digest;\n    for (int i = 0;\
    \ i < 16; i++) {\n        md5_digest += std::to_string(digest[i] & 0xff);\n  \
    \  }\n    return md5_digest;", "    if (text.empty()) return std::nullopt;\n \
    \   unsigned char digest[16];\n    md5(text.c_str(), text.size(), digest);\n \
    \   std::string md5_digest(digest);\n    return md5_digest;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;", "    if\
    \ (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char digest[16];\n\
    \    MD5(text.c_str(), text.size(), digest);\n    std::string md5 = base64_encode(digest,\
    \ sizeof(digest));\n    return md5;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char\
    \ const *>(digest), 16);\n    return md5_str;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_string(digest, digest + 16);\n    return md5_string;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_string(digest);\n\
    \    return md5_string;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_digest(digest);\n    return md5_digest;", "    if (text.empty()) return\
    \ std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n  \
    \  return md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(), digest);\n\
    \    char hex[33];\n    sprintf(hex, \"%08x\", digest);\n    return std::string(hex);",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5\
    \ = std::to_string(digest[0]) + std::to_string(digest[1]) + std::to_string(digest[2])\
    \ + std::to_string(digest[3]) + std::to_string(digest[4]) + std::to_string(digest[5])\
    \ + std::to_string(digest[6]) + std::to_string(digest[7]) + std::to_string(digest[8])\
    \ + std::to_string(digest[9]) + std::to_string(digest[10]) + std::to_string(digest[11])\
    \ + std::to_string(digest[12]) + std::to_string(digest[13]) + std::to_string(digest[14])\
    \ + std::to_string(digest[15]);\n    return md5;", "    if (text.empty()) {\n\
    \        return std::nullopt;\n    }\n    unsigned char digest[16];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), digest);\n    char hex[33];\n    snprintf(hex,\
    \ sizeof(hex), \"%08x\", digest[0]);\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n\
    \    md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n\
    \    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n\
    \    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;", "    if\
    \ (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char digest[16];\n\
    \    md5(text.c_str(), text.size(), digest);\n    std::string md5_digest(digest);\n\
    \    return md5_digest;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5,\
    \ text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5 = base64_encode(digest);\n    return md5;", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n\
    \    return md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char md[MD5_SIZE];\n    MD5(text.c_str(), text.size(), md);\n    char hex[MD5_SIZE\
    \ * 2 + 1];\n    for (size_t i = 0; i < MD5_SIZE; i++) {\n        sprintf(&hex[i\
    \ * 2], \"%02x\", md[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    md5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_str(reinterpret_cast<char*>(digest), 16);\n  \
    \  return md5_str;", "    if (text.empty()) return std::nullopt;\n    unsigned\
    \ char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string\
    \ md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;", "    if\
    \ (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(),\
    \ text.size(), digest);\n    std::string md5_digest(digest);\n    return md5_digest;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    MD5(text.c_str(), text.size(), digest);\n    std::string md5_string(digest,\
    \ digest + 16);\n    return md5_string;", "    if (text.empty()) return std::nullopt;\n\
    \    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    char hex[33];\n    for (size_t i = 0; i < 16; i++) {\n        sprintf(&hex[i\
    \ * 2], \"%02x\", digest[i]);\n    }\n    return std::string(hex);", "    if (text.empty())\
    \ return std::nullopt;\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(),\
    \ digest);\n    std::string md5_digest(digest, digest + 16);\n    return md5_digest;",
  "    if (text.empty()) return std::nullopt;\n    unsigned char digest[16];\n   \
    \ MD5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n  \
    \  std::string md5_str(reinterpret_cast<char*>(digest), 16);\n    return md5_str;",
  "    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char\
    \ digest[16];\n    md5(text.c_str(), text.size(), digest);\n    std::string md5_str(reinterpret_cast<char*>(digest),\
    \ 16);\n    return md5_str;", "    if (text.empty()) return std::nullopt;\n  \
    \  unsigned char digest[16];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ digest);\n    char hex[33];\n    snprintf(hex, sizeof(hex), \"%08x\", digest[0]);\n\
    \    return std::string(hex);", "    if (text.empty()) {\n        return std::nullopt;\n\
    \    }\n    unsigned char digest[16];\n    MD5(text.c_str(), text.size(), digest);\n\
    \    std::string md5_str(reinterpret_cast<char const *>(digest), 16);\n    return\
    \ md5_str;"]
stop_tokens:
- "\n}"
