language: cpp
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    long long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \    }\n    if (sum % 3 != 0) {\n        return false;\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        sum += l[i];\n        if (sum % 3 != 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1ylx1t1.cpp: In function 'int main()':\n/tmp/tmpy1ylx1t1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy1ylx1t1.cpp:2:\n/tmp/tmpy1ylx1t1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpy1ylx1t1.cpp:35:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpy1ylx1t1.cpp:35:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpy1ylx1t1.cpp:35:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy1ylx1t1.cpp:35:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy1ylx1t1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy1ylx1t1.cpp:2:\n/tmp/tmpy1ylx1t1."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    long long count = 0;\n    for (long long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] == 0) {\n            count++;\n        }\n    }\n    if\
    \ (count == 3) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83ures6g.cpp: In function 'int main()':\n/tmp/tmp83ures6g.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp83ures6g.cpp:2:\n/tmp/tmp83ures6g.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp83ures6g.cpp:34:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp83ures6g.cpp:34:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp83ures6g.cpp:34:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp83ures6g.cpp:34:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp83ures6g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp83ures6g.cpp:2:\n/tmp/tmp83ures6g."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long int\
    \ sum = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if\
    \ (sum % 3 == 0) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1blixqkw.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp1blixqkw.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp1blixqkw.cpp: In function 'int main()':\n/tmp/tmp1blixqkw.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1blixqkw.cpp:2:\n/tmp/tmp1blixqkw.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp1blixqkw.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp1blixqkw.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1blixqkw.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1blixqkw.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1blixqkw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpomekfnwn.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpomekfnwn.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpomekfnwn.cpp: In function 'int main()':\n/tmp/tmpomekfnwn.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpomekfnwn.cpp:2:\n/tmp/tmpomekfnwn.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpomekfnwn.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpomekfnwn.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpomekfnwn.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpomekfnwn.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpomekfnwn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deducti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 3\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0fu81mb.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpw0fu81mb.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpw0fu81mb.cpp: In function 'int main()':\n/tmp/tmpw0fu81mb.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw0fu81mb.cpp:2:\n/tmp/tmpw0fu81mb.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpw0fu81mb.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpw0fu81mb.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpw0fu81mb.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpw0fu81mb.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw0fu81mb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deducti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long int\
    \ sum = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    long\
    \ long int count = 0;\n    for (long long int i : l) {\n        if (i == sum)\
    \ {\n            count++;\n        }\n    }\n    return count == 3;\n}\nint main()\
    \ {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8h8zri5t.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp8h8zri5t.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp8h8zri5t.cpp:22:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp8h8zri5t.cpp: In function 'int main()':\n/tmp/tmp8h8zri5t.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8h8zri5t.cpp:2:\n/tmp/tmp8h8zri5t.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp8h8zri5t.cpp:31:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp8h8zri5t.cpp:31:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp8h8zri5t.cpp:31:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8h8zri5t.cpp:31:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8h8zri5t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_ty"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 3\
    \ != 0) {\n        return false;\n    }\n    long long count = 0;\n    for (long\
    \ long i : l) {\n        if (i == 0) {\n            count++;\n        }\n    }\n\
    \    if (count == 3) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolj52lcg.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpolj52lcg.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpolj52lcg.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : l) {\n                        ^\n/tmp/tmpolj52lcg.cpp:\
    \ In function 'int main()':\n/tmp/tmpolj52lcg.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = triples_sum_to_zero;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpolj52lcg.cpp:2:\n/tmp/tmpolj52lcg.cpp:37:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpolj52lcg.cpp:37:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpolj52lcg.cpp:37:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpolj52lcg.cpp:37:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpolj52lcg.cpp:37:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpolj52lcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long int\
    \ sum = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if\
    \ (sum == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7zbu24lm.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp7zbu24lm.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp7zbu24lm.cpp: In function 'int main()':\n/tmp/tmp7zbu24lm.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7zbu24lm.cpp:2:\n/tmp/tmp7zbu24lm.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp7zbu24lm.cpp:27:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp7zbu24lm.cpp:27:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp7zbu24lm.cpp:27:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7zbu24lm.cpp:27:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7zbu24lm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    long long count = 0;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        sum += l[i];\n        if (sum < 0)\
    \ {\n            sum = 0;\n        }\n        if (sum == 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvr1yirj7.cpp: In function 'int main()':\n/tmp/tmpvr1yirj7.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvr1yirj7.cpp:2:\n/tmp/tmpvr1yirj7.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpvr1yirj7.cpp:36:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpvr1yirj7.cpp:36:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpvr1yirj7.cpp:36:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvr1yirj7.cpp:36:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvr1yirj7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvr1yirj7.cpp:2:\n/tmp/tmpvr1yirj7."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 3\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6vg9y471.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp6vg9y471.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmp6vg9y471.cpp: In function 'int main()':\n/tmp/tmp6vg9y471.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6vg9y471.cpp:2:\n/tmp/tmp6vg9y471.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp6vg9y471.cpp:29:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp6vg9y471.cpp:29:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp6vg9y471.cpp:29:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6vg9y471.cpp:29:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6vg9y471.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deducti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long int\
    \ sum = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if\
    \ (sum == 0)\n        return false;\n    long long int a = 0, b = 0, c = 0;\n\
    \    for (long long int i : l) {\n        if (i == 0)\n            continue;\n\
    \        if (i == 1)\n            return true;\n        if (i == 2)\n        \
    \    return false;\n        if (i == 3)\n            return false;\n        if\
    \ (i == 4)\n            return false;\n        if (i == 5)\n            return\
    \ false;\n        if (i == 6)\n            return false;\n        if (i == 7)\n\
    \            return false;\n        if (i == 8)\n            return false;\n \
    \       if (i == 9)\n            return false;\n        if (i == 10)\n       \
    \     return false;\n        if (i == 11)\n            return false;\n       \
    \ if (i == 12)\n            return false;\n        if (i == 13)\n            return\
    \ false;\n        if (i == 14)\n            return false;\n        if (i == 15)\n\
    \            return false;\n        if (i == 16)\n            return false;\n\
    \        if (i == 17)\n            return false;\n        if (i == 18)\n     \
    \       return false;\n        if (i == 19)\n            return false;\n     \
    \   if (i == 20)\n            return false;\n        if (i == 21)\n          \
    \  return false;\n        if (i == 22)\n            return false;\n        if\
    \ (i == 23)\n            return false;\n        if (i == 24)\n            return\
    \ false;\n        if (i == 25)\n            return false;\n        if (i == 26)\n\
    \            return false;\n        if (i == 27)\n            return false;\n\
    \        if (i == 28)\n            return false;\n        if (i == 29)\n     \
    \       return false;\n        if (i == 30)\n            return false;\n     \
    \   if (i == 31)\n            return false;\n        if (i == 32)\n          \
    \  return false;\n        if (i == 33)\n            return false;\n        if\
    \ (i == 34)\n            return false;\n        if (i == 35)\n            return\
    \ false;\n        if (i == 36)\n            return false;\n        if (i == 37)\n\
    \            return false;\n        if (i == 38)\n            return false;\n\
    \        if (i == 39)\n            return false;\n        if (i == 40)\n     \
    \       return false;\n        if (i == 41)\n            return false;\n     \
    \   if (i == 42)\n            return false;\n        if (i == 44)\n          \
    \  return false;\n        if (i == 45)\n            return false;\n        if\
    \ (i == 46)\n            return false;\n        if (i == 47)\n            return\
    \ false;\n        if (i == 48)\n            return false;\n        if (i == 49)\n\
    \            return false;\n        if (i == 50)\n            return false;\n\
    \        if (i == 51)\n            return false;\n        if (i == 52)\n     \
    \       return false;\n        if (i == 53)\n            return false;\n     \
    \   if (i == 54)\n            return false;\n        if (i == 55)\n          \
    \  return false;\n        if (i == 56)\n            return false;\n        if\
    \ (i == 57)\n            return false;\n        if (i == 58)\n            return\
    \ false;\n        if (i == 59)\n            return false;\n        if (i == 60)\n\
    \            return false;\n        if (i == 61)\n            return false;\n\
    \        if (i == 62)\n            return \n}\nint main() {\n    auto candidate\
    \ = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt30xgwgl.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpt30xgwgl.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpt30xgwgl.cpp:24:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpt30xgwgl.cpp:149:1: error: expected primary-expression before\
    \ '}' token\n }\n ^\n/tmp/tmpt30xgwgl.cpp:149:1: error: expected ';' before '}'\
    \ token\n/tmp/tmpt30xgwgl.cpp:150:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmpt30xgwgl.cpp:161:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 3\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0fu81mb.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpw0fu81mb.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpw0fu81mb.cpp: In function 'int main()':\n/tmp/tmpw0fu81mb.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw0fu81mb.cpp:2:\n/tmp/tmpw0fu81mb.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpw0fu81mb.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpw0fu81mb.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpw0fu81mb.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpw0fu81mb.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw0fu81mb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deducti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 3\
    \ != 0) {\n        return false;\n    }\n    long long count = 0;\n    for (long\
    \ long i : l) {\n        count += i;\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwiii95gq.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpwiii95gq.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpwiii95gq.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : l) {\n                        ^\n/tmp/tmpwiii95gq.cpp:\
    \ In function 'int main()':\n/tmp/tmpwiii95gq.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = triples_sum_to_zero;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpwiii95gq.cpp:2:\n/tmp/tmpwiii95gq.cpp:35:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpwiii95gq.cpp:35:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpwiii95gq.cpp:35:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwiii95gq.cpp:35:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwiii95gq.cpp:35:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwiii95gq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long int\
    \ sum = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if\
    \ (sum % 3 == 0) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1blixqkw.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp1blixqkw.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp1blixqkw.cpp: In function 'int main()':\n/tmp/tmp1blixqkw.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1blixqkw.cpp:2:\n/tmp/tmp1blixqkw.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp1blixqkw.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp1blixqkw.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1blixqkw.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1blixqkw.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1blixqkw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    if (sum == 0) return false;\n    long long ans = 0;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        long long j = i + 1;\n        while\
    \ (j < l.size() && l[j] == l[i] + l[j]) {\n            ans += 1;\n           \
    \ j++;\n        }\n    }\n    return ans == 3;\n}\nint main() {\n    auto candidate\
    \ = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6o9va8ks.cpp: In function 'int main()':\n/tmp/tmp6o9va8ks.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6o9va8ks.cpp:2:\n/tmp/tmp6o9va8ks.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp6o9va8ks.cpp:34:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp6o9va8ks.cpp:34:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp6o9va8ks.cpp:34:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6o9va8ks.cpp:34:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6o9va8ks.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6o9va8ks.cpp:2:\n/tmp/tmp6o9va8ks."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    // Your code\
    \ here\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum % 3 != 0) {\n        return false;\n \
    \   }\n    long long count = 0;\n    for (long i = 0; i < l.size(); i++) {\n \
    \       sum += l[i];\n        if (sum % 3 == 0) {\n            count++;\n    \
    \    }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfl7s9zqn.cpp: In function 'int main()':\n/tmp/tmpfl7s9zqn.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfl7s9zqn.cpp:2:\n/tmp/tmpfl7s9zqn.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpfl7s9zqn.cpp:39:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpfl7s9zqn.cpp:39:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpfl7s9zqn.cpp:39:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfl7s9zqn.cpp:39:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfl7s9zqn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfl7s9zqn.cpp:2:\n/tmp/tmpfl7s9zqn."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long int\
    \ sum = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if\
    \ (sum % 3 != 0) {\n        return false;\n    }\n    long long int count = 0;\n\
    \    for (long long int i : l) {\n        if (i == 0) {\n            count++;\n\
    \        }\n        if (count == 3) {\n            return true;\n        }\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = triples_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_l21jmho.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp_l21jmho.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp_l21jmho.cpp:25:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp_l21jmho.cpp: In function 'int main()':\n/tmp/tmp_l21jmho.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_l21jmho.cpp:2:\n/tmp/tmp_l21jmho.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp_l21jmho.cpp:37:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp_l21jmho.cpp:37:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp_l21jmho.cpp:37:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_l21jmho.cpp:37:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_l21jmho.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_ty"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum ==\
    \ 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg12wftch.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpg12wftch.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpg12wftch.cpp: In function 'int main()':\n/tmp/tmpg12wftch.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg12wftch.cpp:2:\n/tmp/tmpg12wftch.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpg12wftch.cpp:27:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpg12wftch.cpp:27:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpg12wftch.cpp:27:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg12wftch.cpp:27:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg12wftch.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deducti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 3\
    \ != 0) {\n        return false;\n    }\n    long long count = 0;\n    for (long\
    \ long i : l) {\n        count += i;\n        if (count == sum) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3jl5zje.cpp: In function 'bool triples_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpy3jl5zje.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpy3jl5zje.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : l) {\n                        ^\n/tmp/tmpy3jl5zje.cpp:\
    \ In function 'int main()':\n/tmp/tmpy3jl5zje.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = triples_sum_to_zero;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpy3jl5zje.cpp:2:\n/tmp/tmpy3jl5zje.cpp:35:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpy3jl5zje.cpp:35:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpy3jl5zje.cpp:35:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpy3jl5zje.cpp:35:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy3jl5zje.cpp:35:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy3jl5zje.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are three distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    long long sum\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    if (sum == 0) return false;\n    long long count = 0;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        sum += l[i];\n        if (sum == 0)\
    \ count++;\n    }\n    if (count == 3) return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_arryk4.cpp: In function 'int main()':\n/tmp/tmp8_arryk4.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = triples_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8_arryk4.cpp:2:\n/tmp/tmp8_arryk4.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp8_arryk4.cpp:32:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp8_arryk4.cpp:32:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp8_arryk4.cpp:32:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8_arryk4.cpp:32:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8_arryk4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8_arryk4.cpp:2:\n/tmp/tmp8_arryk4."
  stdout: ''
