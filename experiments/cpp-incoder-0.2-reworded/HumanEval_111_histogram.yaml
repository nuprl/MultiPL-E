name: HumanEval_111_histogram
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
  \ a space separated lowercase letters, return a map\n// of the letter with the most\
  \ repetition and containing the corresponding count.\n// If several letters have\
  \ the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b\
  \ c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
  // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
  b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
  a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
  b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
  \ histogram(std::string test) {\n"
tests: "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
  a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1},\
  \ {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"\
  b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
  \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
  }\n"
completions: ["  std::map<std::string,long> histogram;\n  std::string word;\n  long\
    \ count = 0;\n  for (auto c : test) {\n    if (c == ' ') {\n      word = word;\n\
    \      count = 0;\n    } else {\n      word = word + c;\n      count++;\n    }\n\
    \  }\n  histogram[word] = count;\n  return histogram;", "    std::map<std::string,long>\
    \ m;\n    std::string word;\n    long freq = 0;\n    for (auto c : test) {\n \
    \       word = c;\n        freq++;\n        if (m.find(word) == m.end()) {\n \
    \           m[word] = freq;\n        } else {\n            m[word] += freq;\n\
    \        }\n    }\n    return m;", "    std::vector<std::pair<std::string,long>\
    \ > v;\n    std::string temp;\n    std::map<std::string,long> m;\n    for(auto\
    \ &c : test) {\n        temp = c;\n        v.push_back(std::make_pair(temp,1));\n\
    \    }\n    for(auto &c : v) {\n        m[c.first] += c.second;\n    }\n    return\
    \ m;", "    std::map<std::string,long> m;\n    std::string word;\n    long count\
    \ = 0;\n    for(auto c : test) {\n        word = c;\n        ++count;\n      \
    \  auto it = m.find(word);\n        if(it == m.end()) {\n            m.insert({word,count});\n\
    \        } else {\n            it->second += count;\n        }\n    }\n    return\
    \ m;", "    std::map<std::string,long> m;\n    std::string temp;\n    size_t max\
    \ = 0;\n    size_t maxCount = 0;\n    size_t count = 0;\n    for (size_t i = 0;\
    \ i < test.size(); i++) {\n        temp = test[i];\n        if (m.find(temp) ==\
    \ m.end()) {\n            m[temp] = 1;\n        } else {\n            m[temp]++;\n\
    \        }\n    }\n    for (auto itr : m) {\n        if (itr.second > maxCount)\
    \ {\n            max = itr.second;\n            maxCount = count;\n        }\n\
    \        count++;\n    }\n    if (maxCount == 0) {\n        return std::map<std::string,long>();\n\
    \    }\n    return m;", "    std::map<std::string,long> m;\n    size_t max = 0;\n\
    \    for(auto &c : test) {\n        auto it = m.find(c);\n        if(it != m.end())\
    \ {\n            it->second++;\n        } else {\n            m[c] = 1;\n    \
    \    }\n        if(it->second > max) {\n            max = it->second;\n      \
    \  }\n    }\n    return m;", "    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::istringstream iss(test);\n    while (std::getline(iss, token,\
    \ ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;", "    std::map<std::string,long> m;\n    std::string temp;\n   \
    \ size_t maxCount = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n     \
    \   temp = test[i];\n        if (m.find(temp) == m.end()) {\n            m[temp]\
    \ = 1;\n        } else {\n            m[temp]++;\n        }\n        if (m[temp]\
    \ > maxCount) {\n            maxCount = m[temp];\n        }\n    }\n    return\
    \ m;", "    std::map<std::string,long> histogram;\n    std::string word;\n   \
    \ long count = 0;\n    for(auto &c : test) {\n        word = c;\n        histogram[word]\
    \ += 1;\n        count += 1;\n    }\n    return histogram;", "    std::vector<std::string>\
    \ tokens;\n    std::string token;\n    std::istringstream iss(test);\n    while\
    \ (std::getline(iss, token, ' ')) {\n        tokens.push_back(token);\n    }\n\
    \    std::map<std::string,long> m;\n    for (auto &token : tokens) {\n       \
    \ auto it = m.find(token);\n        if (it == m.end()) {\n            it = m[token]\
    \ = 1;\n        } else {\n            ++it->second;\n        }\n    }\n    return\
    \ m;", "    std::map<std::string,long> m;\n    std::string temp;\n    long freq\
    \ = 0;\n    for (auto &c : test) {\n        if (m.find(c) == m.end()) {\n    \
    \        m[c] = 1;\n        } else {\n            m[c] += 1;\n        }\n    }\n\
    \    for (auto &c : m) {\n        if (freq > m[c]) {\n            freq = m[c];\n\
    \            temp = c;\n        }\n    }\n    return std::map<std::string,long>({{temp,\
    \ freq}});", "    std::map<std::string,long> histogram;\n    std::string letter;\n\
    \    long count = 0;\n    for(auto &c : test) {\n        letter = c;\n       \
    \ ++count;\n        histogram.insert({letter, count});\n    }\n    return histogram;",
  "    std::map<std::string,long> m;\n    std::string temp;\n    size_t max = 0;\n\
    \    size_t maxCount = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n  \
    \      temp = test[i];\n        if (m.find(temp) == m.end()) {\n            m[temp]\
    \ = 1;\n        } else {\n            m[temp]++;\n        }\n        if (m[temp]\
    \ > max) {\n            max = m[temp];\n            maxCount = 1;\n        } else\
    \ if (m[temp] == max) {\n            maxCount++;\n        }\n    }\n    return\
    \ m;", "    std::map<std::string,long> m;\n    std::string temp;\n    size_t cnt\
    \ = 0;\n    for (size_t i = 0; i < test.size(); i++) {\n        temp = test.substr(i,1);\n\
    \        if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n        } else\
    \ {\n            m[temp] += 1;\n        }\n    }\n    for (auto itr : m) {\n \
    \       if (cnt < itr.second) {\n            cnt = itr.second;\n        }\n  \
    \  }\n    return m;", "    std::map<std::string,long> m;\n    std::string temp;\n\
    \    for (auto c : test) {\n        if (m.find(c) == m.end()) {\n            m[c]\
    \ = 1;\n        } else {\n            m[c] += 1;\n        }\n    }\n    for (auto\
    \ c : m) {\n        if (m[c] > 1) {\n            temp = c;\n        }\n    }\n\
    \    if (temp != \"\") {\n        m.insert({temp, m[temp]});\n    }\n    return\
    \ m;", "    std::map<std::string,long> m;\n    std::string word;\n    long count\
    \ = 0;\n    for(auto &c : test) {\n        word = c;\n        auto it = m.find(word);\n\
    \        if(it != m.end()) {\n            count += it->second;\n        } else\
    \ {\n            count = 1;\n            m.insert({word, count});\n        }\n\
    \    }\n    return m;", "  std::map<std::string,long> histogram;\n  std::string\
    \ temp;\n  long max = 0;\n  long count = 0;\n  for (auto &c : test) {\n    temp\
    \ = c;\n    histogram[temp]++;\n    if (histogram[temp] > max) {\n      max =\
    \ histogram[temp];\n    }\n  }\n  for (auto &c : histogram) {\n    if (c.second\
    \ > count) {\n      count = c.second;\n    }\n  }\n  return histogram;", "   \
    \ std::map<std::string,long> m;\n    std::string temp;\n    for (auto &c : test)\
    \ {\n        if (m.find(c) == m.end()) {\n            m[c] = 1;\n        } else\
    \ {\n            m[c] += 1;\n        }\n    }\n    return m;", "    std::map<std::string,long>\
    \ histogram;\n    std::string temp;\n    long count = 0;\n    for (auto &c : test)\
    \ {\n        temp = c;\n        ++count;\n        histogram[temp] += 1;\n    }\n\
    \    return histogram;", "    std::map<std::string,long> m;\n    std::string temp;\n\
    \    size_t count = 0;\n    for (auto &c : test) {\n        temp = c;\n      \
    \  ++count;\n        if (m.find(temp) == m.end()) {\n            m[temp] = 1;\n\
    \        } else {\n            m[temp] += 1;\n        }\n    }\n    for (auto\
    \ &c : m) {\n        if (c.second > count) {\n            count = c.second;\n\
    \        }\n    }\n    return m;"]
stop_tokens:
- "\n}"
