language: sh
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=( $1 )\n    local max=$(( ${#arr[@]} - 1 ))\n    local i\n\
    \    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]} -gt ${arr[$max]}\
    \ ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n maxval=$5\n  local -n val=$6\n  local -n maxidxval=$7\n  local -n\
    \ idxval=$8\n  local -n maxidxvalval=$9\n  local -n idxvalval=${10}\n  local -n\
    \ maxidxvalvalval=${11}\n  local -n idxvalvalval=${12}\n  local -n maxidxvalvalval=${13}\n\
    \  local -n idxvalvalvalval=${14}\n  local -n maxidxvalvalvalval=${15}\n  local\
    \ -n idxvalvalvalval=${16}\n  local -n maxidxvalvalvalval=${17}\n  local -n idxvalvalvalval=${18}\n\
    \  local -n maxidxvalvalvalval=${19}\n  local -n idxvalvalvalval=${20}\n  local\
    \ -n maxidxvalvalvalval=${21}\n  local -n idxvalvalvalval=${22}\n  local -n maxidxvalvalvalval=${23}\n\
    \  local -n idxvalvalvalval=${24}\n  local -n maxidxvalvalvalval=${25}\n  local\
    \ -n idxvalvalvalval=${26}\n  local -n maxidxvalvalvalval=${27}\n  local -n idxvalvalvalval=${28}\n\
    \  local -n maxidxvalvalvalval=${29}\n  local -n idxvalvalvalval=${30}\n  local\
    \ -n maxidxvalvalvalval=${31}\n  local -n idxvalvalvalval=${32}\n  local -n maxidxvalvalvalval=${33}\n\
    \  local -n idxvalvalvalval=${34}\n  local -n maxidxvalvalvalval=${35}\n  local\
    \ -n idxvalvalvalval=${36}\n  local -n maxidxvalvalvalval=${37}\n  local -n idxvalvalvalval=${38}\n\
    \  local -n maxidxvalvalvalval=${39}\n  local -n idxvalvalvalval=${40}\n  local\
    \ -n maxidxvalvalvalval=${41}\n  local -n idx\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbff21di7.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpbff21di7.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpbff21di7.sh: line 41: local: '
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n last=$3\n  local -n maxidx=$4\n\
    \  local -n idx=$5\n  local -n maxval=$6\n  local -n val=$7\n  local -n idx2=$8\n\
    \  local -n idx3=$9\n\n  local -n maxidx2=$10\n  local -n maxidx3=$11\n\n  local\
    \ -n maxval2=$12\n  local -n maxval3=$13\n\n  local -n maxidx3=$14\n  local -n\
    \ maxidx4=$15\n\n  local -n maxval3=$16\n  local -n maxval4=$17\n\n  local -n\
    \ maxidx4=$18\n  local -n maxidx5=$19\n\n  local -n maxval4=$20\n  local -n maxval5=$21\n\
    \n  local -n maxidx5=$22\n  local -n maxidx6=$23\n\n  local -n maxval5=$24\n \
    \ local -n maxval6=$25\n\n  local -n maxidx6=$26\n  local -n maxidx7=$27\n\n \
    \ local -n maxval6=$28\n  local -n maxval7=$29\n\n  local -n maxidx7=$30\n  local\
    \ -n maxidx8=$31\n\n  local -n maxval7=$32\n  local -n maxval8=$33\n\n  local\
    \ -n maxidx8=$34\n  local -n maxidx9=$35\n\n  local -n maxval8=$36\n  local -n\
    \ maxval9=$37\n\n  local -n maxidx9=$38\n  local -n maxidx10=$39\n\n  local -n\
    \ maxval9=$40\n  local -n maxval10=$41\n\n  local -n maxidx10=$42\n  local -n\
    \ maxidx11=$43\n\n  local -n maxval10=$44\n  local -n maxval11=$45\n\n  local\
    \ -n maxidx11=$46\n  local -n maxidx12=$47\n\n  local -n maxval11=$48\n  local\
    \ -n maxval12=$49\n\n  local -n maxidx12=$50\n  local -n maxidx13=$51\n\n  local\
    \ -n maxval12=$52\n  local -n maxval\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz_wbgbok.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpz_wbgbok.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpz_wbgbok.sh: line 20: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 21: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 23: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 24: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 26: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 27: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpz_wbgbok.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpz_wbgbok.sh: line 36: local: `1'': invalid variable name for name reference

    /tmp/tmpz_wbgbok.sh: line 38: local: `2'': invalid variable name for name reference

    /tmp/tmpz_wbgbok.sh: line 39: local: `3'': invalid variable name for name reference

    /tmp/tmpz_wbgbok.sh: line 41: local: `4'': invalid variable name for name reference

    /tmp/tmpz_wbgbok.sh: line 42: local: `5'': invalid variable name for name reference

    /tmp/tmpz_wbgbok.sh: line 4'
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$((${#arr[@]} - 1))\n  local -i i\n  for\
    \ i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$i - 1]} ]]; then\n \
    \     max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp79rys32g.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ local -a candidates\n  local -a candidate\n  local -i maxidx\n  local -a candidates\n\
    \  local -a candidate\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n\
    \  local -i i\n  local -a candidates\n  local -a candidate\n  local -n arr=$1\n\
    \  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n  local -a candidates\n \
    \ local -a candidate\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n\
    \  local -i i\n  local -a candidates\n  local -a candidate\n  local -n arr=$1\n\
    \  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n  local -a candidates\n \
    \ local -a candidate\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n\
    \  local -i i\n  local -a candidates\n  local -a candidate\n  local -n arr=$1\n\
    \  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n  local -a candidates\n \
    \ local -a candidate\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n\
    \  local -i i\n  local -a candidates\n  local -a candidate\n  local -n arr=$1\n\
    \  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n  local -a candidates\n \
    \ local -a candidate\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n\
    \  local -i i\n  local -a candidates\n  local -a candidate\n  local -n arr=$1\n\
    \  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n  local -a candidates\n \
    \ local -a candidate\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n\
    \  local -i i\n  local \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsjh4bj_q.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpsjh4bj_q.sh: line 18: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 23: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 28: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 33: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 38: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 43: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 48: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 53: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 58: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 63: local: `1 2 4 3 5'': invalid variable name for name
    reference

    /tmp/tmpsjh4bj_q.sh: line 68: local: `1 2 4 3 5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=(\"$@\")\n    local max=$(( ${#arr[@]} - 1 ))\n    local i\n\
    \    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]} -gt ${arr[$(( i\
    \ - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n    echo \"$max\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$((${#arr[@]} - 1))\n  local -i i\n  for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]} -gt ${arr[$max]} ]]; then\n\
    \      max=$i\n    fi\n  done\n  echo \"${max}\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphpi3o0uj.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034462
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  local -n maxi=$((${#max[@]} - 1))\n  local\
    \ -n maxj=$((${#max[@]} - 1))\n  local -n maxval=$((${#max[@]} - 1))\n  local\
    \ -n maxidx=$((${#max[@]} - 1))\n  local -n maxval2=$((${#max[@]} - 1))\n  local\
    \ -n maxidx2=$((${#max[@]} - 1))\n  local -n maxval3=$((${#max[@]} - 1))\n  local\
    \ -n maxidx3=$((${#max[@]} - 1))\n  local -n maxval4=$((${#max[@]} - 1))\n  local\
    \ -n maxidx4=$((${#max[@]} - 1))\n  local -n maxval5=$((${#max[@]} - 1))\n  local\
    \ -n maxidx5=$((${#max[@]} - 1))\n  local -n maxval6=$((${#max[@]} - 1))\n  local\
    \ -n maxidx6=$((${#max[@]} - 1))\n  local -n maxval7=$((${#max[@]} - 1))\n  local\
    \ -n maxidx7=$((${#max[@]} - 1))\n  local -n maxval8=$((${#max[@]} - 1))\n  local\
    \ -n maxidx8=$((${#max[@]} - 1))\n  local -n maxval9=$((${#max[@]} - 1))\n  local\
    \ -n maxidx9=$((${#max[@]} - 1))\n  local -n maxval10=$((${#max[@]} - 1))\n  local\
    \ -n maxidx10=$((${#max[@]} - 1))\n  local -n maxval11=$((${#max[@]} - 1))\n \
    \ local -n maxidx11=$((${#max[@]} - 1))\n  local -n maxval12=$((${#max[@]} - 1))\n\
    \  local -n maxidx12=$((${#max[@]} - 1))\n  local -n maxval13=$((${#max[@]} -\
    \ 1))\n  local -n maxidx13=$((${#\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_hesz4mw.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp_hesz4mw.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxi=$(( ${#max[@]} - 1 ))\n \
    \ local -n maxj=$(( ${#max[@]} - 1 ))\n  local -n maxval=$(( ${#max[@]} - 1 ))\n\
    \  local -n maxvali=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalj=$(( ${#maxval[@]}\
    \ - 1 ))\n  local -n maxvalk=$(( ${#maxval[@]} - 1 ))\n  local -n maxvall=$((\
    \ ${#maxval[@]} - 1 ))\n  local -n maxvalm=$(( ${#maxval[@]} - 1 ))\n  local -n\
    \ maxvaln=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalo=$(( ${#maxval[@]} - 1 ))\n\
    \  local -n maxvalp=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalq=$(( ${#maxval[@]}\
    \ - 1 ))\n  local -n maxvalr=$(( ${#maxval[@]} - 1 ))\n  local -n maxvals=$((\
    \ ${#maxval[@]} - 1 ))\n  local -n maxvalt=$(( ${#maxval[@]} - 1 ))\n  local -n\
    \ maxvalu=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalv=$(( ${#maxval[@]} - 1 ))\n\
    \  local -n maxvalw=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalx=$(( ${#maxval[@]}\
    \ - 1 ))\n  local -n maxvaly=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalz=$((\
    \ ${#maxval[@]} - 1 ))\n  local -n maxvalA=$(( ${#maxval[@]} - 1 ))\n  local -n\
    \ maxvalB=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalC=$\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_633_qam.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp_633_qam.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp_633_qam.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 14: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 15: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 19: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 20: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 21: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 22: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 23: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 24: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 25: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 26: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 27: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 28: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 29: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 30: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 31: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 32: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 33: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 34: local: `-1'': in'
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n \
    \   fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4dhiq2sm.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=($1)\n  local max=$((${#arr[@]} - 1))\n  local i\n  for i in\
    \ $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$((i - 1))]} ]]; then\n  \
    \    max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n max=$2\n    local -n i=$((${#arr[@]} -\
    \ 1))\n    local -n j=$((${#arr[@]} - 1))\n    while (( ${#arr[@]} > 0 )); do\n\
    \        if (( ${arr[$i]} <= ${arr[$j]} )) ; then\n            (( max[$i] <= max[$j]\
    \ )) && arr[$i]=$max[$i]\n            (( max[$j] <= max[$i] )) && arr[$j]=$max[$j]\n\
    \            (( max[$i] <= max[$j] )) && arr[$i]=$max[$i]\n            (( max[$j]\
    \ <= max[$i] )) && arr[$j]=$max[$j]\n            (( max[$i] <= max[$j] )) && arr[$i]=$max[$i]\n\
    \            (( max[$j] <= max[$i] )) && arr[$j]=$max[$j]\n            (( max[$i]\
    \ <= max[$j] )) && arr[$i]=$max[$i]\n            (( max[$j] <= max[$i] )) && arr[$j]=$max[$j]\n\
    \            (( max[$i] <= max[$j] )) && arr[$i]=$max[$i]\n            (( max[$j]\
    \ <= max[$i] )) && arr[$j]=$max[$j]\n            (( max[$i] <= max[$j] )) && arr[$i]=$max[$i]\n\
    \            (( max[$j] <= max[$i] )) && arr[$j]=$max[$j]\n            (( max[$i]\
    \ <= max[$j] )) && arr[$i]=$max[$i]\n            (( max[$j] <= max[$i] )) && arr[$j]=$max[$j]\n\
    \            (( max[$i] <= max[$j] )) && arr[$i]=$max[$i]\n            (( max[$j]\
    \ <= max[$i] )) && arr[$j]=$max[$j]\n            (( max[$i] <= max[$j] )) && arr[$i]=$max[$i]\n\
    \            (( max[$j] <= max[$i] )) && arr[$j]=$max[$j]\n            (( max[$i]\
    \ <= max[$j] )) && arr[$i]=$max[$i]\n            (( max[$j] <= max[$i] )) && arr[$j]\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpds160oty.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpds160oty.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local index=0\n    local max=$((${#array[@]} - 1))\n\
    \    local element\n    while (( index < max )); do\n        element=${array[$index]};\n\
    \        if (( element <= ${array[$(( index + 1 ))]} )); then\n            index=$(expr\
    \ $index + 1);\n        else\n            index=$(expr $index);\n        fi\n\
    \    done\n    return $index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n max=$2\n    local -n maxIndex=$3\n    local\
    \ -n i=$4\n    local -n j=$5\n\n    # Loop through all elements in the array\n\
    \    for ((i=0;i<${#arr[@]};++i)); do\n        # Check if the current element\
    \ is greater than or equal to the\n        # element immediately preceding it\n\
    \        if [[ ${arr[$i]} -gt ${arr[$j-1]} ]]; then\n            # If it is greater,\
    \ then update the max index\n            if [[ $maxIndex -gt $i ]]; then\n   \
    \             maxIndex=$i\n            fi\n        fi\n        # Check if the\
    \ current element is greater than the max index\n        if [[ $i -gt $maxIndex\
    \ ]]; then\n            # If the current element is greater than the max index,\
    \ then\n            # update the max index\n            maxIndex=$i\n        fi\n\
    \        # Check if the current element is equal to the max index\n        if\
    \ [[ $i -eq $maxIndex ]]; then\n            # If the current element is the max\
    \ index, then return it\n            echo $maxIndex\n            break\n     \
    \   fi\n        # Increment j to point to the next element\n        j=$((i+1))\n\
    \    done\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_sar19jq.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp_sar19jq.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp_sar19jq.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp_sar19jq.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp_sar19jq.sh: line 14: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n val=$2\n    local -n max=$3\n    local\
    \ -n idx=$4\n    local -n maxidx=$5\n\n    local -n maxval=$6\n    local -n maxidxval=$7\n\
    \n    local -n idxval=$8\n    local -n idxval2=$9\n\n    local -n idxval3=$10\n\
    \    local -n idxval4=$11\n\n    local -n idxval5=$12\n    local -n idxval6=$13\n\
    \n    local -n idxval7=$14\n    local -n idxval8=$15\n\n    local -n idxval9=$16\n\
    \    local -n idxval10=$17\n\n    local -n idxval11=$18\n    local -n idxval12=$19\n\
    \n    local -n idxval13=$20\n    local -n idxval14=$21\n\n    local -n idxval15=$22\n\
    \    local -n idxval16=$23\n\n    local -n idxval17=$24\n    local -n idxval18=$25\n\
    \n    local -n idxval19=$26\n    local -n idxval20=$27\n\n    local -n idxval21=$28\n\
    \    local -n idxval22=$29\n\n    local -n idxval23=$30\n    local -n idxval24=$31\n\
    \n    local -n idxval25=$32\n    local -n idxval26=$33\n\n    local -n idxval27=$34\n\
    \    local -n idxval28=$35\n\n    local -n idxval29=$36\n    local -n idxval30=$37\n\
    \n    local -n idxval31=$38\n    local -n idxval32=$39\n\n    local -n idxval33=$40\n\
    \    local -n idxval34=$41\n\n    local -n idxval35=$42\n    local -n idxval36=$43\n\
    \n    local -n idxval37=$44\n    local -n idxval38=$45\n\n    local -n idxval39=$46\n\
    \    local -n idxval40=$47\n\n    local -n idxval41=$48\n    local -n idxval42=$49\n\
    \n    local -n idxval43=$50\n    local -n idxval44=$51\n\n    local -n idxval45=$52\n\
    \    local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpajd2gnir.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpajd2gnir.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpajd2gnir.sh: line 22: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 23: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 31: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 32: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 34: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 35: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpajd2gnir.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmpajd2gnir.sh: line 38: local: `1'': invalid variable name for name reference

    /tmp/tmpajd2gnir.sh: line 40: local: `2'': invalid variable name for name reference

    /tmp/tmpajd2gnir.sh: line 41: local: `3'': invalid variable name for name reference

    /tmp/tmpajd2gnir.sh: line 43: local: `4'': invalid variable name for name reference

    /tmp/tmpajd2gnir.sh: line 44: local: `5'': invalid variable name for name reference

    /tmp/tmpajd2gnir.sh: line 4'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while (( index < max )); do\n    local element=${array[index]}\n    local prev=${array[index-1]}\n\
    \    if [[ ${element} -gt ${prev} ]]; then\n      index=$(( index + 1 ))\n   \
    \ else\n      break\n    fi\n  done\n  echo \"${index}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=0\n    local maxIndex=0\n\
    \    local element\n    for element in $array; do\n        if [ \"$element\" -gt\
    \ \"$max\" ]; then\n            max=$(expr \"$element\" \"$max\")\n          \
    \  maxIndex=$index\n        fi\n        index=$((index+1))\n    done\n    if [\
    \ \"$max\" -gt \"$maxIndex\" ]; then\n        echo \"$maxIndex\"\n    else\n \
    \       echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\n/tmp/tmpp89lxhxj.sh:\
    \ line 16: [: : integer expression expected\n/tmp/tmpp89lxhxj.sh: line 16: [:\
    \ : integer expression expected\n/tmp/tmpp89lxhxj.sh: line 16: [: : integer expression\
    \ expected\n/tmp/tmpp89lxhxj.sh: line 16: [: : integer expression expected\n/tmp/tmpp89lxhxj.sh:\
    \ line 22: [: : integer expression expected\n"
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=(\"$@\")\n  local max=$((${#arr[@]}-1))\n  local maxIndex=0\n\
    \  local maxVal=${arr[$max]}\n  local i\n  for ((i=$max;i>0;i--)); do\n    if\
    \ [[ ${arr[$i]} -gt $maxVal ]]; then\n      maxVal=${arr[$i]}\n      maxIndex=$i\n\
    \    fi\n  done\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local maxi\n  local\
    \ maxj\n  local maxval\n  local maxvali\n  local maxvalj\n  local maxvalk\n  local\
    \ maxvall\n  local maxvalm\n  local maxvaln\n  local maxvalo\n  local maxvalp\n\
    \  local maxvalq\n  local maxvalr\n  local maxvals\n  local maxvalt\n  local maxvalu\n\
    \  local maxvalv\n  local maxvalw\n  local maxvalx\n  local maxvaly\n  local maxvalz\n\
    \  local maxvala\n  local maxvalb\n  local maxvalc\n  local maxvald\n  local maxvale\n\
    \  local maxvalf\n  local maxvalg\n  local maxvalh\n  local maxvali\n  local maxvalj\n\
    \  local maxvalk\n  local maxvall\n  local maxvalm\n  local maxvaln\n  local maxvalo\n\
    \  local maxvalp\n  local maxvalq\n  local maxvalr\n  local maxvals\n  local maxvalt\n\
    \  local maxvalu\n  local maxvalv\n  local maxvalw\n  local maxvalx\n  local maxvaly\n\
    \  local maxvalz\n  local maxvala\n  local maxvalb\n  local maxvalc\n  local maxvald\n\
    \  local maxvale\n  local maxvalf\n  local maxvalg\n  local maxvalh\n  local maxvali\n\
    \  local maxvalj\n  local maxvalk\n  local maxvall\n  local maxvalm\n  local maxvaln\n\
    \  local maxvalo\n  local maxvalp\n  local maxvalq\n  local maxvalr\n  local maxvals\n\
    \  local maxvalt\n  local maxvalu\n  local maxvalv\n  local maxvalw\n  local maxvalx\n\
    \  local maxvaly\n  local maxvalz\n  local maxvala\n  local maxvalb\n  local maxvalc\n\
    \  local maxvald\n  local maxvale\n  local maxvalf\n  local maxvalg\n  local maxvalh\n\
    \  local maxvali\n  local max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local maxIndex=$3\n    local i\n\
    \    local j\n    local maxVal\n    local maxIndexVal\n    local maxIndexValIndex\n\
    \    local maxIndexValIndex2\n    local maxIndexValIndex3\n    local maxIndexValIndex4\n\
    \    local maxIndexValIndex5\n    local maxIndexValIndex6\n    local maxIndexValIndex7\n\
    \    local maxIndexValIndex8\n    local maxIndexValIndex9\n    local maxIndexValIndex10\n\
    \    local maxIndexValIndex11\n    local maxIndexValIndex12\n    local maxIndexValIndex13\n\
    \    local maxIndexValIndex14\n    local maxIndexValIndex15\n    local maxIndexValIndex16\n\
    \    local maxIndexValIndex17\n    local maxIndexValIndex18\n    local maxIndexValIndex19\n\
    \    local maxIndexValIndex20\n    local maxIndexValIndex21\n    local maxIndexValIndex22\n\
    \    local maxIndexValIndex23\n    local maxIndexValIndex24\n    local maxIndexValIndex25\n\
    \    local maxIndexValIndex26\n    local maxIndexValIndex27\n    local maxIndexValIndex28\n\
    \    local maxIndexValIndex29\n    local maxIndexValIndex30\n    local maxIndexValIndex31\n\
    \    local maxIndexValIndex32\n    local maxIndexValIndex33\n    local maxIndexValIndex34\n\
    \    local maxIndexValIndex35\n    local maxIndexValIndex36\n    local maxIndexValIndex37\n\
    \    local maxIndexValIndex38\n    local maxIndexValIndex39\n    local maxIndexValIndex40\n\
    \    local maxIndexValIndex41\n    local maxIndexValIndex42\n    local maxIndexValIndex43\n\
    \    local maxIndexValIndex44\n    local maxIndexValIndex45\n    local maxIndexValIndex46\n\
    \    local maxIndexValIndex47\n    local maxIndexValIndex48\n    local maxIndexValIndex49\n\
    \    local maxIndexValIndex50\n    local maxIndexValIndex51\n    local maxIndexValIndex52\n\
    \    local maxIndexValIndex53\n    local maxIndexValIndex54\n    local maxIndexValIndex55\n\
    \    local maxIndexValIndex56\n    local maxIndexValIndex57\n    local maxIndexValIndex58\n\
    \    local maxIndexValIndex59\n    local max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local k\n\
    \    local len\n    local maxIndex\n    local maxVal\n    local val\n    local\
    \ val2\n    local val3\n    local val4\n    local val5\n    local val6\n    local\
    \ val7\n    local val8\n    local val9\n    local val10\n    local val11\n   \
    \ local val12\n    local val13\n    local val14\n    local val15\n    local val16\n\
    \    local val17\n    local val18\n    local val19\n    local val20\n    local\
    \ val21\n    local val22\n    local val23\n    local val24\n    local val25\n\
    \    local val26\n    local val27\n    local val28\n    local val29\n    local\
    \ val30\n    local val31\n    local val32\n    local val33\n    local val34\n\
    \    local val35\n    local val36\n    local val37\n    local val38\n    local\
    \ val39\n    local val40\n    local val41\n    local val42\n    local val43\n\
    \    local val44\n    local val45\n    local val46\n    local val47\n    local\
    \ val48\n    local val49\n    local val50\n    local val51\n    local val52\n\
    \    local val53\n    local val54\n    local val55\n    local val56\n    local\
    \ val57\n    local val58\n    local val59\n    local val60\n    local val61\n\
    \    local val62\n    local val63\n    local val64\n    local val65\n    local\
    \ val66\n    local val67\n    local val68\n    local val69\n    local val70\n\
    \    local val71\n    local val72\n    local val73\n    local val74\n    local\
    \ val75\n    local val76\n    local val77\n    local val78\n    local val79\n\
    \    local val80\n    local val81\n    local val82\n    local val83\n    local\
    \ val84\n    local val85\n    local val86\n    local val87\n    local val88\n\
    \    local val89\n    local val90\n    local val91\n    local val92\n    local\
    \ val93\n    local val94\n    local val95\n\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  local element\n  while (( index < ${#array} )); do\n    element=\"${array[index]}\"\
    \n    if [[ ${element} -gt ${max} ]]; then\n      max=${element}\n      maxIndex=${index}\n\
    \    fi\n    (( index++ ))\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6qh6830n.sh: line 17: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n maxval=$4\n\
    \  local -n idx=$5\n  local -n val=$6\n  local -n maxidx2=$7\n  local -n maxval2=$8\n\
    \  local -n idx2=$9\n  local -n val2=$10\n  local -n maxidx3=$11\n  local -n maxval3=$12\n\
    \  local -n idx3=$13\n  local -n val3=$14\n  local -n maxidx4=$15\n  local -n\
    \ maxval4=$16\n  local -n idx4=$17\n  local -n val4=$18\n  local -n maxidx5=$19\n\
    \  local -n maxval5=$20\n  local -n idx5=$21\n  local -n val5=$22\n  local -n\
    \ maxidx6=$23\n  local -n maxval6=$24\n  local -n idx6=$25\n  local -n val6=$26\n\
    \  local -n maxidx7=$27\n  local -n maxval7=$28\n  local -n idx7=$29\n  local\
    \ -n val7=$30\n  local -n maxidx8=$31\n  local -n maxval8=$32\n  local -n idx8=$33\n\
    \  local -n val8=$34\n  local -n maxidx9=$35\n  local -n maxval9=$36\n  local\
    \ -n idx9=$37\n  local -n val9=$38\n  local -n maxidx10=$39\n  local -n maxval10=$40\n\
    \  local -n idx10=$41\n  local -n val10=$42\n  local -n maxidx11=$43\n  local\
    \ -n maxval11=$44\n  local -n idx11=$45\n  local -n val11=$46\n  local -n maxidx12=$47\n\
    \  local -n maxval12=$48\n  local -n idx12=$49\n  local -n val12=$50\n  local\
    \ -n maxidx13=$51\n  local -n maxval13=$52\n  local -n idx13=$53\n  local -n val13=$54\n\
    \  local -n maxidx\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6oupv0_f.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp6oupv0_f.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp6oupv0_f.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp6oupv0_f.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp6oupv0_f.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp6oupv0_f.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmp6oupv0_f.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmp6oupv0_f.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmp6oupv0_f.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmp6oupv0_f.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=0\n  local maxIndex=0\n  local\
    \ value\n  local i\n  for i in $array; do\n    value=$i\n    if [ \"$i\" -gt \"\
    $max\" ]; then\n      max=$i\n      maxIndex=$index\n    fi\n    ((index++))\n\
    \  done\n  if [ \"$maxIndex\" -eq \"$index\" ]; then\n    return -1\n  else\n\
    \    return $maxIndex\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local len=${#arr[@]}\n\
    \  local maxlen=${#max}\n  local maxidx\n  local maxval\n  local maxidx2\n  local\
    \ maxval2\n  local maxidx3\n  local maxval3\n  local maxidx4\n  local maxval4\n\
    \  local maxidx5\n  local maxval5\n  local maxidx6\n  local maxval6\n  local maxidx7\n\
    \  local maxval7\n  local maxidx8\n  local maxval8\n  local maxidx9\n  local maxval9\n\
    \  local maxidx10\n  local maxval10\n  local maxidx11\n  local maxval11\n  local\
    \ maxidx12\n  local maxval12\n  local maxidx13\n  local maxval13\n  local maxidx14\n\
    \  local maxval14\n  local maxidx15\n  local maxval15\n  local maxidx16\n  local\
    \ maxval16\n  local maxidx17\n  local maxval17\n  local maxidx18\n  local maxval18\n\
    \  local maxidx19\n  local maxval19\n  local maxidx20\n  local maxval20\n  local\
    \ maxidx21\n  local maxval21\n  local maxidx22\n  local maxval22\n  local maxidx23\n\
    \  local maxval23\n  local maxidx24\n  local maxval24\n  local maxidx25\n  local\
    \ maxval25\n  local maxidx26\n  local maxval26\n  local maxidx27\n  local maxval27\n\
    \  local maxidx28\n  local maxval28\n  local maxidx29\n  local maxval29\n  local\
    \ maxidx30\n  local maxval30\n  local maxidx31\n  local maxval31\n  local maxidx32\n\
    \  local maxval32\n  local maxidx33\n  local maxval33\n  local maxidx34\n  local\
    \ maxval34\n  local maxidx35\n  local maxval35\n  local maxidx36\n  local maxval36\n\
    \  local maxidx37\n  local maxval37\n  local maxidx38\n  local maxval38\n  local\
    \ maxidx39\n  local maxval39\n  local maxidx40\n  local \n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    local val=${arr[$i]}\n\
    \    if [[ ${arr[$j]} -gt $val ]]; then\n      max=$j\n    fi\n  done\n  echo\
    \ $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2hjgty5n.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$(( ${#array[@]}\
    \ - 1 ))\n    local element\n    while (( index < max )); do\n        element=\"\
    ${array[index]}\"\n        if [[ ${array[index]} == ${array[index-1]} ]]; then\n\
    \            (( index++ ))\n            continue\n        fi\n        (( index++\
    \ ))\n        break\n    done\n    if (( index == max )); then\n        echo -1\n\
    \    else\n        echo ${index}\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array[@]} - 1))\n\
    \  while (( index < max )); do\n    local val=${array[$index]};\n    local prev=${array[$((\
    \ index - 1 ))]};\n    if (( val > prev )); then\n      index=$(expr $index +\
    \ 1)\n    else\n      index=$(( index + 1 ))\n    fi\n  done\n  echo $index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n val=$2\n  local -n max=$3\n  local -n idx=$4\n\
    \  local -n len=$5\n  local -n maxidx=$6\n  local -n maxlen=$7\n  local -n maxval=$8\n\
    \  local -n maxidx2=$9\n  local -n maxlen2=$10\n  local -n maxval2=$11\n  local\
    \ -n maxidx3=$12\n  local -n maxlen3=$13\n  local -n maxval3=$14\n  local -n maxidx4=$15\n\
    \  local -n maxlen4=$16\n  local -n maxval4=$17\n  local -n maxidx5=$18\n  local\
    \ -n maxlen5=$19\n  local -n maxval5=$20\n  local -n maxidx6=$21\n  local -n maxlen6=$22\n\
    \  local -n maxval6=$23\n  local -n maxidx7=$24\n  local -n maxlen7=$25\n  local\
    \ -n maxval7=$26\n  local -n maxidx8=$27\n  local -n maxlen8=$28\n  local -n maxval8=$29\n\
    \  local -n maxidx9=$30\n  local -n maxlen9=$31\n  local -n maxval9=$32\n  local\
    \ -n maxidx10=$33\n  local -n maxlen10=$34\n  local -n maxval10=$35\n  local -n\
    \ maxidx11=$36\n  local -n maxlen11=$37\n  local -n maxval11=$38\n  local -n maxidx12=$39\n\
    \  local -n maxlen12=$40\n  local -n maxval12=$41\n  local -n maxidx13=$42\n \
    \ local -n maxlen13=$43\n  local -n maxval13=$44\n  local -n maxidx14=$45\n  local\
    \ -n maxlen14=$46\n  local -n maxval14=$47\n  local -n maxidx15=$48\n  local -n\
    \ maxlen15=$49\n  local -n maxval15=$50\n  local -n maxidx16=$51\n  local -n maxlen16=$52\n\
    \  local -n max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr3bhmbtn.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpr3bhmbtn.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpr3bhmbtn.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpr3bhmbtn.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpr3bhmbtn.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpr3bhmbtn.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpr3bhmbtn.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpr3bhmbtn.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpr3bhmbtn.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpr3bhmbtn.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n elem=$2\n  local -n max=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n i=$6\n  local -n j=$7\n  local -n len=$8\n\n  ((\
    \ len > 0 )) || return -1\n  (( len == 0 )) || return 0\n\n  (( idx >= 0 )) ||\
    \ return -1\n\n  (( arr[idx] == val )) || return -1\n\n  (( arr[idx] > val ))\
    \ || return -1\n\n  (( arr[idx] < val )) || return -1\n\n  (( arr[idx] == val\
    \ )) || return -1\n\n  (( arr[idx] > val )) || return -1\n\n  (( arr[idx] < val\
    \ )) || return -1\n\n  (( arr[idx] == val )) || return -1\n\n  (( arr[idx] > val\
    \ )) || return -1\n\n  (( arr[idx] < val )) || return -1\n\n  (( arr[idx] == val\
    \ )) || return -1\n\n  (( arr[idx] > val )) || return -1\n\n  (( arr[idx] < val\
    \ )) || return -1\n\n  (( arr[idx] == val )) || return -1\n\n  (( arr[idx] > val\
    \ )) || return -1\n\n  (( arr[idx] < val )) || return -1\n\n  (( arr[idx] == val\
    \ )) || return -1\n\n  (( arr[idx] > val )) || return -1\n\n  (( arr[idx] < val\
    \ )) || return -1\n\n  (( arr[idx] == val )) || return -1\n\n  (( arr[idx] > val\
    \ )) || return -1\n\n  (( arr[idx] < val )) || return -1\n\n  (( arr[idx] == val\
    \ )) || return -1\n\n  (( arr[idx] > val )) || return -1\n\n  (( arr[idx] < val\
    \ )) || return -1\n\n  (( arr[idx] == val )) || return -1\n\n  (( arr[idx] > val\
    \ )) || return -1\n\n  (( arr[idx] < val )) || return -1\n\n  (( arr[idx] == val\
    \ )) || return -1\n\n  (( arr[idx] > val )) || return -1\n\n  (( arr[idx] < val\
    \ )) || return -1\n\n  (( arr[idx] == val )) || return -1\n\n  (( arr[idx] > val\
    \ )) || return -1\n\n  (( arr[idx] < val )) || return -1\n\n  (( arr[idx] == val\
    \ )) || return -1\n\n  (( arr[idx] > val \n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp62nvm6w2.sh: line 92: unexpected EOF while looking for matching
    `)''

    /tmp/tmp62nvm6w2.sh: line 109: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    if [[ ${arr[$i]} -gt ${arr[$((i + 1))]} ]]; then\n      max=$i\n\
    \    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpem4s75ps.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n i\n  local -n j\n  local -n len\n  local -n maxlen\n\
    \  local -n maxidx\n  local -n maxval\n  local -n maxprev\n  local -n maxi\n \
    \ local -n maxj\n  local -n maxlen\n  local -n maxidx\n  local -n maxval\n  local\
    \ -n maxprev\n  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n\
    \ maxidx\n  local -n maxval\n  local -n maxprev\n  local -n maxi\n  local -n maxj\n\
    \  local -n maxlen\n  local -n maxidx\n  local -n maxval\n  local -n maxprev\n\
    \  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n maxidx\n  local\
    \ -n maxval\n  local -n maxprev\n  local -n maxi\n  local -n maxj\n  local -n\
    \ maxlen\n  local -n maxidx\n  local -n maxval\n  local -n maxprev\n  local -n\
    \ maxi\n  local -n maxj\n  local -n maxlen\n  local -n maxidx\n  local -n maxval\n\
    \  local -n maxprev\n  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local\
    \ -n maxidx\n  local -n maxval\n  local -n maxprev\n  local -n maxi\n  local -n\
    \ maxj\n  local -n maxlen\n  local -n maxidx\n  local -n maxval\n  local -n maxprev\n\
    \  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n maxidx\n  local\
    \ -n maxval\n  local -n maxprev\n  local -n maxi\n  local -n maxj\n  local -n\
    \ maxlen\n  local -n maxidx\n  local -n maxval\n  local -n maxprev\n  local -n\
    \ maxi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc7seioyz.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpc7seioyz.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpc7seioyz.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpc7seioyz.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpc7seioyz.sh: line 14: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local index=0\n  local maxIndex=0\n  local\
    \ currentIndex=0\n  local currentMax=0\n  local currentMaxIndex=0\n  local currentMaxValue=0\n\
    \  local currentMaxValueIndex=0\n  local currentMaxValueValue=0\n  local currentMaxValueValueIndex=0\n\
    \  local currentMaxValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    \  local currentMaxValueValueValueValue=0\n  local currentMaxValueValueValueIndex=0\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]; then\n      max=$j\n    fi\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfxlu1hrb.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=0\n    local maxIndex=0\n\
    \    local element\n    for element in $array; do\n        if [ \"$element\" -gt\
    \ \"$max\" ]; then\n            max=$(expr \"$element\" \"$max\")\n          \
    \  maxIndex=$index\n        fi\n        index=$(expr \"$index\" + 1)\n    done\n\
    \    if [ \"$maxIndex\" -eq \"$index\" ]; then\n        echo \"$maxIndex\"\n \
    \   else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\n/tmp/tmppspnutex.sh:\
    \ line 16: [: : integer expression expected\n/tmp/tmppspnutex.sh: line 16: [:\
    \ : integer expression expected\n/tmp/tmppspnutex.sh: line 16: [: : integer expression\
    \ expected\n/tmp/tmppspnutex.sh: line 16: [: : integer expression expected\n"
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array[@]}\
    \ - 1))\n    for (( index=0; index<${#array[@]}; index++ )); do\n        if [[\
    \ ${array[$index]} -gt ${array[$max]} ]]; then\n            max=index\n      \
    \  fi\n    done\n    if [[ ${max} -eq 0 ]]; then\n        echo -1\n    else\n\
    \        echo ${max}\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw51rqz7_.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array}-1))\n\
    \    local maxIndex=0\n    local current=$((${#array}-1))\n    while (( ${current}\
    \ > 0 )); do\n        if [[ ${array[$current]} -gt ${array[$max]} ]]; then\n \
    \           max=${current}\n            maxIndex=$index\n        fi\n        current=$((${current}-1))\n\
    \    done\n    echo $maxIndex\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n\n\
    \  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]; then\n      max=$j\n    fi\n  done\n\n  if [[ $max -eq 0 ]]; then\n\
    \    return -1\n  fi\n\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxcngetsa.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n  local -n maxprev=$8\n\
    \  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local -n maxmaxprev=$11\n\
    \  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n\
    \  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxval=$16\n  local -n maxmaxmaxprev=$17\n\
    \  local -n maxmaxmaxmaxidx=$18\n  local -n maxmaxmaxval=$19\n  local -n maxmaxmaxprev=$20\n\
    \  local -n maxmaxmaxmaxidx=$21\n  local -n maxmaxmaxval=$22\n  local -n maxmaxmaxprev=$23\n\
    \  local -n maxmaxmaxmaxidx=$24\n  local -n maxmaxmaxval=$25\n  local -n maxmaxmaxprev=$26\n\
    \  local -n maxmaxmaxmaxidx=$27\n  local -n maxmaxmaxval=$28\n  local -n maxmaxmaxprev=$29\n\
    \  local -n maxmaxmaxmaxidx=$30\n  local -n maxmaxmaxval=$31\n  local -n maxmaxmaxprev=$32\n\
    \  local -n maxmaxmaxmaxidx=$33\n  local -n maxmaxmaxval=$34\n  local -n maxmaxmaxprev=$35\n\
    \  local -n maxmaxmaxmaxidx=$36\n  local -n maxmaxmaxval=$37\n  local -n maxmaxmaxprev=$38\n\
    \  local -n maxmaxmaxmaxidx=$39\n  local -n maxmaxmaxval=$40\n  local -n maxmaxmaxprev=$41\n\
    \  local -n maxmaxmaxmaxidx=$42\n  local -n maxmaxmaxval=$43\n  local -n maxmaxmaxprev=$44\n\
    \  local -n maxmaxmaxmaxidx=$45\n  local -n maxmaxmaxval=$46\n  local -n maxmaxmaxprev=$47\n\
    \  local -n maxmaxmaxmax\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiin6jphu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiin6jphu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$(( i - 1 ))]} ]];\
    \ then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpob2w8llg.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  local value\n  while (( index < max )); do\n    value=${array[$index]}\n  \
    \  index=$(expr index + 1)\n    if [[ $value -gt $array[$index - 1] ]]; then\n\
    \      max=$index\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph3jghrst.sh: line 17: syntax error in conditional expression

    /tmp/tmph3jghrst.sh: line 17: syntax error near `-''

    /tmp/tmph3jghrst.sh: line 17: `    if [[ $value -gt $array[$index - 1] ]]; then''

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array[@]} - 1))\n\
    \  while (( index < max )); do\n    local value=${array[$index]}\n    local next=$((\
    \ index + 1 ))\n    if [[ ${array[$next]} -gt $value ]]; then\n      index=$next\n\
    \    else\n      break\n    fi\n  done\n  echo $index\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n i=$(( ${#arr[@]} - 1 ))\n  local -n j=$(( ${#arr[@]} - 1 ))\n  local\
    \ -n k=$(( ${#arr[@]} - 1 ))\n  local -n maxidx=$(( ${#arr[@]} - 1 ))\n  local\
    \ -n maxval=$(( ${#arr[@]} - 1 ))\n  local -n maxidx2=$(( ${#arr[@]} - 1 ))\n\
    \  local -n maxval2=$(( ${#arr[@]} - 1 ))\n  local -n maxidx3=$(( ${#arr[@]} -\
    \ 1 ))\n  local -n maxval3=$(( ${#arr[@]} - 1 ))\n  local -n maxidx4=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval4=$(( ${#arr[@]} - 1 ))\n  local -n maxidx5=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval5=$(( ${#arr[@]} - 1 ))\n  local -n maxidx6=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval6=$(( ${#arr[@]} - 1 ))\n  local -n maxidx7=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval7=$(( ${#arr[@]} - 1 ))\n  local -n maxidx8=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval8=$(( ${#arr[@]} - 1 ))\n  local -n maxidx9=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval9=$(( ${#arr[@]} - 1 ))\n  local -n maxidx10=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval10=$(( ${#arr[@]} - 1 ))\n  local -n maxidx11=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval11=$(( ${#arr[@]} - 1 ))\n  local -n maxidx12=$(( ${#arr\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpndl40k2x.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmpndl40k2x.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local i=$(( ${#arr} - 1 ))\n  while [[ ${arr[i]} -gt ${arr[i-1]}\
    \ ]]; do\n    (( i++ ))\n  done\n  echo $i\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}-1))\
    \ )\n  do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n    fi\n\
    \  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_6eczq_h.sh: line 15: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n  local -n\
    \ idxval=$8\n  local -n valval=$9\n\n  local -n maxidxvalidx=$10\n  local -n maxidxvalval=$11\n\
    \  local -n maxidxvalvalidx=$12\n  local -n maxidxvalvalval=$13\n  local -n maxidxvalvalvalidx=$14\n\
    \  local -n maxidxvalvalvalval=$15\n\n  local -n maxidxvalvalvalvalidx=$16\n \
    \ local -n maxidxvalvalvalvalval=$17\n  local -n maxidxvalvalvalvalidx=$18\n \
    \ local -n maxidxvalvalvalvalval=$19\n  local -n maxidxvalvalvalvalidx=$20\n \
    \ local -n maxidxvalvalvalvalval=$21\n  local -n maxidxvalvalvalvalidx=$22\n \
    \ local -n maxidxvalvalvalvalval=$23\n  local -n maxidxvalvalvalvalidx=$24\n \
    \ local -n maxidxvalvalvalvalval=$25\n  local -n maxidxvalvalvalvalidx=$26\n \
    \ local -n maxidxvalvalvalvalval=$27\n  local -n maxidxvalvalvalvalidx=$28\n \
    \ local -n maxidxvalvalvalvalval=$29\n  local -n maxidxvalvalvalvalidx=$30\n \
    \ local -n maxidxvalvalvalvalval=$31\n  local -n maxidxvalvalvalvalidx=$32\n \
    \ local -n maxidxvalvalvalvalval=$33\n  local -n maxidxvalvalvalvalidx=$34\n \
    \ local -n maxidxvalvalvalvalval=$35\n  local -n maxidxvalvalvalvalidx=$36\n \
    \ local -n maxidxvalvalvalvalval=$37\n  local -n maxidxvalvalvalvalidx=$38\n \
    \ local -n maxidxvalvalvalvalval=$39\n  local -n maxidxvalvalvalvalidx=$40\n \
    \ local -n maxidxvalvalvalvalval=$\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp21fbmhg4.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp21fbmhg4.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp21fbmhg4.sh: line 20: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 21: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 22: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 23: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 24: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 25: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 27: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 28: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 29: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 30: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp21fbmhg4.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp21fbmhg4.sh: line 32: local: `1'': invalid variable name for name reference

    /tmp/tmp21fbmhg4.sh: line 33: local: `2'': invalid variable name for name reference

    /tmp/tmp21fbmhg4.sh: line 34: local: `3'': invalid variable name for name reference

    /tmp/tmp21fbmhg4.sh: line 35: local: `4'': invalid variable name for name reference

    /tmp/tmp21fbmhg4.sh: line 36: local: `5'': invalid variable name for name reference

    /tmp/tmp21fbmhg4.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=0\n  local maxIndex=0\n  local\
    \ element\n  while (( index < ${#array[@]} )); do\n    element=${array[$index]}\
    \ \n    if (( element > max )); then\n      max=${element}\n      maxIndex=${index}\n\
    \    fi\n    (( index++ ))\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4ukjl6te.sh: line 17: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n elem=$2\n  local -n prev=$3\n  local -n max=$4\n\
    \  local -n i\n  local -n j\n  local -n len\n  local -n maxlen\n  local -n maxidx\n\
    \  local -n maxval\n  local -n maxidx2\n  local -n maxval2\n  local -n maxidx3\n\
    \  local -n maxval3\n  local -n maxidx4\n  local -n maxval4\n  local -n maxidx5\n\
    \  local -n maxval5\n  local -n maxidx6\n  local -n maxval6\n  local -n maxidx7\n\
    \  local -n maxval7\n  local -n maxidx8\n  local -n maxval8\n  local -n maxidx9\n\
    \  local -n maxval9\n  local -n maxidx10\n  local -n maxval10\n  local -n maxidx11\n\
    \  local -n maxval11\n  local -n maxidx12\n  local -n maxval12\n  local -n maxidx13\n\
    \  local -n maxval13\n  local -n maxidx14\n  local -n maxval14\n  local -n maxidx15\n\
    \  local -n maxval15\n  local -n maxidx16\n  local -n maxval16\n  local -n maxidx17\n\
    \  local -n maxval17\n  local -n maxidx18\n  local -n maxval18\n  local -n maxidx19\n\
    \  local -n maxval19\n  local -n maxidx20\n  local -n maxval20\n  local -n maxidx21\n\
    \  local -n maxval21\n  local -n maxidx22\n  local -n maxval22\n  local -n maxidx23\n\
    \  local -n maxval23\n  local -n maxidx24\n  local -n maxval24\n  local -n maxidx25\n\
    \  local -n maxval25\n  local -n maxidx26\n  local -n maxval26\n  local -n maxidx27\n\
    \  local -n maxval27\n  local -n maxidx28\n  local -n maxval28\n  local -n maxidx29\n\
    \  \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\")\
    \ = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbtk9oobi.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpbtk9oobi.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpbtk9oobi.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpbtk9oobi.sh: line 13: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in ${!arr[@]}; do\n    if [[ ${arr[$i]} -gt ${arr[$(( i + 1 ))]} ]]; then\n\
    \      max=$i\n    fi\n  done\n  echo \"${max}\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprfz6jr2t.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxi=$(( ${#max[@]} - 1 ))\n \
    \ local -n maxj=$(( ${#max[@]} - 1 ))\n\n  while (( i < ${#arr[@]} )) ; do\n \
    \   local -n el=${arr[i]}\n    local -n elm=${max[el]}\n    if (( elm <= el ))\
    \ ; then\n      max[el]=${arr[i]}\n      i=$(( i + 1 ))\n    else\n      j=$((\
    \ j - 1 ))\n    fi\n  done\n\n  while (( j < ${#max[@]} )) ; do\n    local -n\
    \ el=${max[j]}\n    local -n elm=${arr[j]}\n    if (( elm <= el )) ; then\n  \
    \    max[el]=${arr[j]}\n      j=$(( j + 1 ))\n    else\n      i=$(( i + 1 ))\n\
    \    fi\n  done\n\n  echo $(( ${#max[@]} - 1 ))\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1s_fizcy.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp1s_fizcy.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp1s_fizcy.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmp1s_fizcy.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmp1s_fizcy.sh: line 14: local: `-1'': invalid variable name for name reference

    /tmp/tmp1s_fizcy.sh: line 15: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n\n  local -n i\n  local -n j\n  local -n len\n\n  local -n\
    \ maxidx\n  local -n maxval\n\n  local -n maxidx2\n  local -n maxval2\n\n  local\
    \ -n maxidx3\n  local -n maxval3\n\n  local -n maxidx4\n  local -n maxval4\n\n\
    \  local -n maxidx5\n  local -n maxval5\n\n  local -n maxidx6\n  local -n maxval6\n\
    \n  local -n maxidx7\n  local -n maxval7\n\n  local -n maxidx8\n  local -n maxval8\n\
    \n  local -n maxidx9\n  local -n maxval9\n\n  local -n maxidx10\n  local -n maxval10\n\
    \n  local -n maxidx11\n  local -n maxval11\n\n  local -n maxidx12\n  local -n\
    \ maxval12\n\n  local -n maxidx13\n  local -n maxval13\n\n  local -n maxidx14\n\
    \  local -n maxval14\n\n  local -n maxidx15\n  local -n maxval15\n\n  local -n\
    \ maxidx16\n  local -n maxval16\n\n  local -n maxidx17\n  local -n maxval17\n\n\
    \  local -n maxidx18\n  local -n maxval18\n\n  local -n maxidx19\n  local -n maxval19\n\
    \n  local -n maxidx20\n  local -n maxval20\n\n  local -n maxidx21\n  local -n\
    \ maxval21\n\n  local -n maxidx22\n  local -n maxval22\n\n  local -n maxidx23\n\
    \  local -n maxval23\n\n  local -n maxidx24\n  local -n maxval24\n\n  local -n\
    \ maxidx25\n  local -n maxval25\n\n  local -n maxidx26\n  local -n maxval26\n\n\
    \  local -n maxidx27\n  local -n maxval27\n\n  local -n maxidx28\n  local -n maxval28\n\
    \n  local -n maxidx29\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpieuttiqj.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpieuttiqj.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpieuttiqj.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpieuttiqj.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpieuttiqj.sh: line 14: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local k\n\
    \    local len\n\n    len=${#arr[@]}\n    for (( i=0; i<len; i++ )); do\n    \
    \    j=$((i+1))\n        k=$((j-1))\n        if [[ $arr[$i] -gt $arr[$j] ]]; then\n\
    \            if [[ $arr[$i] -gt $max ]]; then\n                max=$arr[$i]\n\
    \            fi\n            if [[ $arr[$j] -gt $max ]]; then\n              \
    \  max=$arr[$j]\n            fi\n        fi\n    done\n    echo \"$max\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7936w5u_.sh: line 21: [[: 1 2 4 3 5[0]: syntax error in expression
    (error token is "2 4 3 5[0]")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n idx2=$6\n  local -n val2=$7\n  local -n idx3=$8\n\
    \  local -n val3=$9\n  local -n idx4=$10\n  local -n val4=$11\n  local -n idx5=$12\n\
    \  local -n val5=$13\n  local -n idx6=$14\n  local -n val6=$15\n  local -n idx7=$16\n\
    \  local -n val7=$17\n  local -n idx8=$18\n  local -n val8=$19\n  local -n idx9=$20\n\
    \  local -n val9=$21\n  local -n idx10=$22\n  local -n val10=$23\n  local -n idx11=$24\n\
    \  local -n val11=$25\n  local -n idx12=$26\n  local -n val12=$27\n  local -n\
    \ idx13=$28\n  local -n val13=$29\n  local -n idx14=$30\n  local -n val14=$31\n\
    \  local -n idx15=$32\n  local -n val15=$33\n  local -n idx16=$34\n  local -n\
    \ val16=$35\n  local -n idx17=$36\n  local -n val17=$37\n  local -n idx18=$38\n\
    \  local -n val18=$39\n  local -n idx19=$40\n  local -n val19=$41\n  local -n\
    \ idx20=$42\n  local -n val20=$43\n  local -n idx21=$44\n  local -n val21=$45\n\
    \  local -n idx22=$46\n  local -n val22=$47\n  local -n idx23=$48\n  local -n\
    \ val23=$49\n  local -n idx24=$50\n  local -n val24=$51\n  local -n idx25=$52\n\
    \  local -n val25=$53\n  local -n idx26=$54\n  local -n val26=$55\n  local -n\
    \ idx27=$56\n  local -n val27=$57\n  local -\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9w6edk6t.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp9w6edk6t.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while (( index < max )); do\n    local value=${array[$index]}\n    local prev=${array[$((\
    \ index - 1 ))]}\n    if (( prev > value )); then\n      max=$index\n    fi\n\
    \    (( index++ ))\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local maxIndex\n\
    \    local maxVal\n    local val\n    local maxIndexVal\n    local maxIndexValIndex\n\
    \    local maxValIndex\n    local maxValIndexIndex\n    local maxValIndexVal\n\
    \    local maxValIndexValIndex\n    local maxValIndexValIndexIndex\n    local\
    \ maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n   \
    \ local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndexIndex\n    local maxValIndexValIndexIndexIndex\n\
    \    local maxValIndexValIndexIndex\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \n  local -n maxidx=$5\n  local -n maxval=$6\n\n  local -n idx=$7\n  local -n\
    \ val=$8\n\n  local -n idx=$9\n  local -n val=$10\n\n  local -n idx=$11\n  local\
    \ -n val=$12\n\n  local -n idx=$13\n  local -n val=$14\n\n  local -n idx=$15\n\
    \  local -n val=$16\n\n  local -n idx=$17\n  local -n val=$18\n\n  local -n idx=$19\n\
    \  local -n val=$20\n\n  local -n idx=$21\n  local -n val=$22\n\n  local -n idx=$23\n\
    \  local -n val=$24\n\n  local -n idx=$25\n  local -n val=$26\n\n  local -n idx=$27\n\
    \  local -n val=$28\n\n  local -n idx=$29\n  local -n val=$30\n\n  local -n idx=$31\n\
    \  local -n val=$32\n\n  local -n idx=$33\n  local -n val=$34\n\n  local -n idx=$35\n\
    \  local -n val=$36\n\n  local -n idx=$37\n  local -n val=$38\n\n  local -n idx=$39\n\
    \  local -n val=$40\n\n  local -n idx=$41\n  local -n val=$42\n\n  local -n idx=$43\n\
    \  local -n val=$44\n\n  local -n idx=$45\n  local -n val=$46\n\n  local -n idx=$47\n\
    \  local -n val=$48\n\n  local -n idx=$49\n  local -n val=$50\n\n  local -n idx=$51\n\
    \  local -n val=$52\n\n  local -n idx=$53\n  local -n val=$54\n\n  local -n idx=$55\n\
    \  local -n val=$56\n\n  local -n idx=$57\n  local -n val=$58\n\n  local -n idx=$59\n\
    \  local -n val=$60\n\n  local -n idx=$61\n  local -n val=$62\n\n  local -n idx=$63\n\
    \  local -n val=$\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu5q56ra4.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpu5q56ra4.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpu5q56ra4.sh: line 22: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 30: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 31: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 33: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 34: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 36: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpu5q56ra4.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmpu5q56ra4.sh: line 39: local: `1'': invalid variable name for name reference

    /tmp/tmpu5q56ra4.sh: line 40: local: `2'': invalid variable name for name reference

    /tmp/tmpu5q56ra4.sh: line 42: local: `3'': invalid variable name for name reference

    /tmp/tmpu5q56ra4.sh: line 43: local: `4'': invalid variable name for name reference

    /tmp/tmpu5q56ra4.sh: line 45: local: `5'': invalid variable name for name reference

    /tmp/tmpu5q56ra4.sh: line 4'
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n maxval=$4\n\
    \  local -n idx=$5\n  local -n val=$6\n\n  [[ -z \"$max\" ]] && return 1\n  [[\
    \ -z \"$maxidx\" ]] && maxidx=0\n  [[ -z \"$maxval\" ]] && maxval=$max\n\n  local\
    \ -n i=$(( ${#arr[@]} - 1 ))\n  while (( ${i} >= 0 )) ; do\n    [[ -z \"${arr[$i]}\"\
    \ ]] && return 1\n    [[ \"${arr[$i]}\" -gt \"$maxval\" ]] && return 1\n    [[\
    \ \"${arr[$i]}\" -eq \"$maxval\" ]] && maxidx=$i\n    [[ \"${arr[$i]}\" -lt \"\
    $maxval\" ]] && maxval=\"${arr[$i]}\"\n    (( ${i} -= 1 ))\n  done\n  [[ -z \"\
    ${arr[$i]}\" ]] && return 1\n  [[ \"${arr[$i]}\" -gt \"$maxval\" ]] && return\
    \ 1\n  [[ \"${arr[$i]}\" -eq \"$maxval\" ]] && maxidx=$i\n  [[ \"${arr[$i]}\"\
    \ -lt \"$maxval\" ]] && maxval=\"${arr[$i]}\"\n  (( ${i} -= 1 ))\n\n  (( ${maxidx}\
    \ < ${idx} )) && return 1\n  (( ${maxidx} < ${i} )) && maxidx=$i\n  (( ${maxval}\
    \ < ${val} )) && maxval=\"${arr[$i]}\"\n  (( ${i} -= 1 ))\n  (( ${i} < 0 )) &&\
    \ return 1\n  (( ${i} < 0 )) && maxidx=$i\n  (( ${i} < 0 )) && maxval=\"${arr[$i]}\"\
    \n  (( ${i} < 0 )) && maxidx=$i\n  (( ${i} < 0 )) && maxval=\"${arr[$i]}\"\n \
    \ (( ${i} < 0 )) && maxidx=$i\n  (( ${i} < 0 )) && maxval=\"${arr[$i]}\"\n  ((\
    \ ${i} < 0 )) && maxidx=$i\n  (( ${i} < 0 )) && maxval=\"${arr[$i]}\"\n  (( ${i}\
    \ < 0 )) && maxidx=$i\n  (( \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm_etrvvt.sh: line 49: unexpected EOF while looking for matching
    `)''

    /tmp/tmpm_etrvvt.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=(\"$@\")\n  local max=$(( ${#arr[@]} - 1 ))\n  local i\n  for\
    \ i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$(( $i - 1 ))]} ]]; then\n\
    \      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgtsgfgbw.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local index=0\n    local max=0\n    local maxIndex=0\n\
    \    for (( i=0; i<${#array[@]}; i++ )); do\n        if [[ ${array[$i]} -gt ${array[$maxIndex]}\
    \ ]]; then\n            max=${array[$i]}\n            maxIndex=$i\n        fi\n\
    \    done\n    if [[ ${maxIndex} -gt 0 ]]; then\n        echo \"${maxIndex}\"\n\
    \    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsxmtbdf0.sh: line 15: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=($1)\n    local max=$((${#arr[@]} - 1))\n    local i\n    for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n        if (( ${arr[$i]} <= ${arr[$max]} ))\
    \ ; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxIndex=$3\n  local -n\
    \ maxVal=$4\n  local -n i\n  local -n j\n  local -n val\n  local -n valIndex\n\
    \  local -n valVal\n  local -n valPrev\n  local -n valPrevIndex\n  local -n valPrevVal\n\
    \  local -n valPrevPrev\n  local -n valPrevPrevIndex\n  local -n valPrevPrevVal\n\
    \  local -n valPrevPrevPrev\n  local -n valPrevPrevPrevIndex\n  local -n valPrevPrevPrevVal\n\
    \  local -n valPrevPrevPrevPrev\n  local -n valPrevPrevPrevPrevIndex\n  local\
    \ -n valPrevPrevPrevPrevVal\n  local -n valPrevPrevPrevPrevPrev\n  local -n valPrevPrevPrevPrevPrevIndex\n\
    \  local -n valPrevPrevPrevPrevPrevVal\n  local -n valPrevPrevPrevPrevPrevPrev\n\
    \  local -n valPrevPrevPrevPrevPrevIndex\n  local -n valPrevPrevPrevPrevPrevVal\n\
    \  local -n valPrevPrevPrevPrevPrevPrev\n  local -n valPrevPrevPrevPrevPrevIndex\n\
    \  local -n valPrevPrevPrevPrevPrevVal\n  local -n valPrevPrevPrevPrevPrevPrev\n\
    \  local -n valPrevPrevPrevPrevPrevPrevIndex\n  local -n valPrevPrevPrevPrevPrevPrevVal\n\
    \  local -n valPrevPrevPrevPrevPrevPrevPrev\n  local -n valPrevPrevPrevPrevPrevPrevIndex\n\
    \  local -n valPrevPrevPrevPrevPrevPrevVal\n  local -n valPrevPrevPrevPrevPrevPrevPrev\n\
    \  local -n valPrevPrevPrevPrevPrevPrevPrevIndex\n  local -n valPrevPrevPrevPrevPrevPrevPrevVal\n\
    \  local -n valPrevPrevPrevPrevPrevPrevPrevPrev\n  local -n valPrevPrevPrevPrevPrevPrevPrevIndex\n\
    \  local -n valPrevPrevPrevPrevPrevPrevPrevVal\n  local -n valPrevPrevPrevPrevPrevPrevPrevPrev\n\
    \  local -n valPrevPrevPrevPrevPrevPrevPrevIndex\n  local -n valPrevPrevPrevPrevPrevPrevPrevVal\n\
    \  local -n valPrevPrevPrevPrevPrevPrevPrevPrev\n  local -n valPrevPrevPrevPrevPrevPrevPrevPrev\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi6uyrpwr.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpi6uyrpwr.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpi6uyrpwr.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpi6uyrpwr.sh: line 13: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array}-1))\n\
    \    local element\n    while (( index < max )); do\n        element=\"${array[index]}\"\
    \n        if (( element > ${array[index-1]} )); then\n            (( index = index\
    \ + 1 ))\n        else\n            (( max = max ))\n        fi\n    done\n  \
    \  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=17 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660034468
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxIndex=$(( ${#arr[@]} - 1 ))\n\
    \  while (( ${#arr[@]} > 0 )); do\n    (( ${#arr[@]} > 1 )) && arr=( \"${arr[@]:0:i}\"\
    \ \"${arr[@]:i}\" )\n    (( ${#arr[@]} > 2 )) && arr=( \"${arr[@]:0:j}\" \"${arr[@]:j}\"\
    \ )\n    (( ${#arr[@]} > 3 )) && arr=( \"${arr[@]:0:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ )\n    (( ${#arr[@]} > 4 )) && arr=( \"${arr[@]:0:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" )\n    (( ${#arr[@]} > 5 )) && arr=( \"${arr[@]:0:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" )\n   \
    \ (( ${#arr[@]} > 6 )) && arr=( \"${arr[@]:0:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ )\n    (( ${#arr[@]} > 7 )) && arr=( \"${arr[@]:0:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" )\n    (( ${#arr[@]} > 8 )) &&\
    \ arr=( \"${arr[@]:0:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\"\
    \ \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" \"${arr[@]:maxIndex}\" )\n   \
    \ ((\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbsvofxfa.sh: line 24: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbsvofxfa.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n    local -i\
    \ i\n\n    for (( i = 1 ; i < ${#arr[@]} ; ++i )); do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i-1]} ]]; then\n            max=i\n        fi\n    done\n\n    if\
    \ [[ ${max} -eq ${#arr[@]} ]]; then\n        echo -1\n    else\n        echo ${max}\n\
    \    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpimdb_gcl.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  local element\n  while (( index < ${#array} )); do\n    element=\"${array[index]}\"\
    \n    if [[ ${element} -gt ${max} ]]; then\n      max=${element}\n      maxIndex=${index}\n\
    \    fi\n    (( index++ ))\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6qh6830n.sh: line 17: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n max=$2\n    local -n i=$(( ${#arr[@]} -\
    \ 1 ))\n    local -n j=$(( ${#arr[@]} - 1 ))\n    local -n maxIndex=$(( ${#arr[@]}\
    \ - 1 ))\n    while (( ${#arr[@]} > 0 )); do\n        if (( ${arr[i]} <= ${arr[j]}\
    \ && ${arr[i]} <= ${max} )) ; then\n            (( maxIndex = i ))\n         \
    \   (( i = j - 1 ))\n            (( j = i - 1 ))\n        elif (( ${arr[i]} >\
    \ ${arr[j]} && ${arr[i]} > ${max} )) ; then\n            (( maxIndex = i ))\n\
    \            (( i = j - 1 ))\n        elif (( ${arr[i]} > ${arr[j]} && ${arr[i]}\
    \ <= ${max} )) ; then\n            (( maxIndex = j ))\n            (( j = i -\
    \ 1 ))\n        fi\n    done\n    echo ${maxIndex}\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpub9abjhk.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpub9abjhk.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpub9abjhk.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmpub9abjhk.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmpub9abjhk.sh: line 14: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    [[ -z ${arr[$i]} ]]\
    \ || [[ -z ${arr[$j]} ]] || [[ \"$i\" -gt \"$j\" ]] || return 0\n  done\n  return\
    \ 1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\")\
    \ = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu1kg9i3_.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=$((${#array[@]}-1))\n  while\
    \ (( ${index} <= ${max} )); do\n    local value=${array[$index]};\n    local previous=${array[$index-1]};\n\
    \    if [[ ${value} -gt ${previous} ]]; then\n      index=$(expr ${index} + 1)\n\
    \    else\n      index=$(expr ${index} + 1)\n      break\n    fi\n  done\n  if\
    \ (( ${index} > ${max} )); then\n    index=-1\n  fi\n  echo ${index}\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7falgaxi.sh: line 15: array: bad array subscript

    /tmp/tmp7falgaxi.sh: line 16: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n maxidx=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n  local\
    \ -n maxidxval2=$8\n  local -n maxidxval3=$9\n  local -n maxidxval4=${10}\n  local\
    \ -n maxidxval5=${11}\n  local -n maxidxval6=${12}\n  local -n maxidxval7=${13}\n\
    \  local -n maxidxval8=${14}\n  local -n maxidxval9=${15}\n  local -n maxidxval10=${16}\n\
    \  local -n maxidxval11=${17}\n  local -n maxidxval12=${18}\n  local -n maxidxval13=${19}\n\
    \  local -n maxidxval14=${20}\n  local -n maxidxval15=${21}\n  local -n maxidxval16=${22}\n\
    \  local -n maxidxval17=${23}\n  local -n maxidxval18=${24}\n  local -n maxidxval19=${25}\n\
    \  local -n maxidxval20=${26}\n  local -n maxidxval21=${27}\n  local -n maxidxval22=${28}\n\
    \  local -n maxidxval23=${29}\n  local -n maxidxval24=${30}\n  local -n maxidxval25=${31}\n\
    \  local -n maxidxval26=${32}\n  local -n maxidxval27=${33}\n  local -n maxidxval28=${34}\n\
    \  local -n maxidxval29=${35}\n  local -n maxidxval30=${36}\n  local -n maxidxval31=${37}\n\
    \  local -n maxidxval32=${38}\n  local -n maxidxval33=${39}\n  local -n maxidxval34=${40}\n\
    \  local -n maxidxval35=${41}\n  local -n maxidxval36=${42}\n  local -n maxidxval37=${43}\n\
    \  local -n maxidxval38=${44}\n  local -n maxidxval39=${45\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptqh69o49.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n\n  local -n i=$(( ${#arr[@]} - 1 ))\n  while (( ${i} >=\
    \ 0 )); do\n    local -n val=${arr[$i]}\n    if (( val > max )); then\n      max=${val}\n\
    \      idx=${i}\n    fi\n    (( ${i} -= 1 ))\n  done\n  echo \"$idx\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptcamelyz.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmptcamelyz.sh: line 11: local: `'': not a valid identifier

    /tmp/tmptcamelyz.sh: line 12: local: `'': not a valid identifier

    /tmp/tmptcamelyz.sh: line 13: local: `'': not a valid identifier

    /tmp/tmptcamelyz.sh: line 14: local: `'': not a valid identifier

    /tmp/tmptcamelyz.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmptcamelyz.sh: line 17: ((: >= 0 : syntax error: operand expected (error
    token is ">= 0 ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array[@]}\
    \ - 1))\n    for (( index=0; index<${#array[@]}; index++ )); do\n        if [[\
    \ ${array[$index]} -gt ${array[$max]} ]]; then\n            max=$index\n     \
    \   fi\n    done\n    echo \"${max}\"\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3pg26s26.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n validx=$6\n  local -n valprev=$7\n  local -n valprevidx=$8\n\
    \  local -n valprevprev=$9\n  local -n valprevprevidx=$10\n  local -n valprevprevprev=$11\n\
    \  local -n valprevprevprevidx=$12\n  local -n valprevprevprevprev=$13\n  local\
    \ -n valprevprevprevprevidx=$14\n  local -n valprevprevprevprevprev=$15\n  local\
    \ -n valprevprevprevprevprevidx=$16\n  local -n valprevprevprevprevprevprev=$17\n\
    \  local -n valprevprevprevprevprevprevidx=$18\n  local -n valprevprevprevprevprevprevprev=$19\n\
    \  local -n valprevprevprevprevprevprevprevidx=$20\n  local -n valprevprevprevprevprevprevprevprev=$21\n\
    \  local -n valprevprevprevprevprevprevprevprevidx=$22\n  local -n valprevprevprevprevprevprevprevprevprev=$23\n\
    \  local -n valprevprevprevprevprevprevprevprevprevidx=$24\n  local -n valprevprevprevprevprevprevprevprevprevprev=$25\n\
    \  local -n valprevprevprevprevprevprevprevprevprevprevidx=$26\n  local -n valprevprevprevprevprevprevprevprevprevprevprevprev=$27\n\
    \  local -n valprevprevprevprevprevprevprevprevprevprevprevidx=$28\n  local -n\
    \ valprevprevprevprevprevprevprevprevprevprevprevprev=$29\n  local -n valprevprevprevprevprevprevprevprevprevprevprevprevidx=$30\n\
    \  local -n valprevprevprevprevprevprevprevprevprevprevprevprevprevprev=$31\n\
    \  local -n valprevprevprevprevprevprevprevprevprevprevprevprevprevprevidx=$32\n\
    \  local -n valprevprevprevprevprevprevprevprevprevprevprevprevprevprevprev=$33\n\
    \  local -n valprevprevprevprevprevprevprevprevprevprevprevprevprevprevidx=$34\n\
    \  local -n valprevprevprevprevprev\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuj24y2gf.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpuj24y2gf.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpuj24y2gf.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpuj24y2gf.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpuj24y2gf.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpuj24y2gf.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpuj24y2gf.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpuj24y2gf.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpuj24y2gf.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpuj24y2gf.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    if [[ ${arr[$i]} -gt ${arr[$((i + 1))]} ]]; then\n      max=$i\n\
    \    fi\n  done\n  if [[ ${max} -eq ${#arr[@]} ]]; then\n    return -1\n  else\n\
    \    return $max\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9d4rhzd2.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxIndex=$3\n  local -n\
    \ maxVal=$4\n  local -n val=$5\n  local -n index=$6\n  local -n i=$7\n  local\
    \ -n j=$8\n  local -n k=$9\n\n  (( index > maxIndex )) && return 0\n  (( index\
    \ == maxIndex )) && return 0\n  (( val > maxVal )) && return 0\n  (( val == maxVal\
    \ )) && return 0\n  (( index == maxIndex )) && return 0\n  (( index > maxIndex\
    \ )) && return 0\n  (( index == maxIndex )) && return 0\n  (( val > maxVal ))\
    \ && return 0\n  (( val == maxVal )) && return 0\n  (( index == maxIndex )) &&\
    \ return 0\n  (( index > maxIndex )) && return 0\n  (( index == maxIndex )) &&\
    \ return 0\n  (( val > maxVal )) && return 0\n  (( val == maxVal )) && return\
    \ 0\n  (( index == maxIndex )) && return 0\n  (( index > maxIndex )) && return\
    \ 0\n  (( index == maxIndex )) && return 0\n  (( val > maxVal )) && return 0\n\
    \  (( val == maxVal )) && return 0\n  (( index == maxIndex )) && return 0\n  ((\
    \ index > maxIndex )) && return 0\n  (( index == maxIndex )) && return 0\n  ((\
    \ val > maxVal )) && return 0\n  (( val == maxVal )) && return 0\n  (( index ==\
    \ maxIndex )) && return 0\n  (( index > maxIndex )) && return 0\n  (( index ==\
    \ maxIndex )) && return 0\n  (( val > maxVal )) && return 0\n  (( val == maxVal\
    \ )) && return 0\n  (( index == maxIndex )) && return 0\n  (( index > maxIndex\
    \ )) && return 0\n  (( index == maxIndex )) && return 0\n  (( val > maxVal ))\
    \ && return 0\n  (( val == maxVal )) && return 0\n  (( index == maxIndex )) &&\
    \ return 0\n  (( index > maxIndex )) && return 0\n  (( index == max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi312rscm.sh: line 56: unexpected EOF while looking for matching
    `)''

    /tmp/tmpi312rscm.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local index=0\n    local max=$(( ${#array[@]} - 1\
    \ ))\n    for (( i=1; i<${#array[@]}; i++ )); do\n        if [[ ${array[$i]} -gt\
    \ ${array[$index-1]} ]]; then\n            index=i\n        fi\n    done\n   \
    \ if [[ ${array[$index]} -gt ${max} ]]; then\n        max=${array[$index]}\n \
    \   fi\n    return ${max}\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8okja5kj.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local index=0\n    local max=0\n    local maxIndex=0\n\
    \    for (( i=0; i<${#array[@]}; i++ )); do\n        if [[ ${array[$i]} -gt ${array[$maxIndex]}\
    \ ]]; then\n            index=${i}\n            max=${array[$i]}\n           \
    \ maxIndex=${i}\n        elif [[ ${array[$i]} -eq ${array[$maxIndex]} ]]; then\n\
    \            index=${i}\n        fi\n    done\n    echo \"${maxIndex}\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe3grslwe.sh: line 15: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpe3grslwe.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  local element\n  while (( index < max )); do\n    element=${array[$index]}\
    \ # Get the current element\n    local next=$(( index + 1 )) # Get the next element\n\
    \    if (( element <= ${array[$next]} )); then\n      index=$next\n    else\n\
    \      break\n    fi\n  done\n  echo $index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n maxidx=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n  local\
    \ -n maxidxval2=$8\n  local -n maxval2=$9\n  local -n maxidxval3=$10\n  local\
    \ -n maxval3=$11\n  local -n maxidxval4=$12\n  local -n maxval4=$13\n  local -n\
    \ maxidxval5=$14\n  local -n maxval5=$15\n  local -n maxidxval6=$16\n  local -n\
    \ maxval6=$17\n  local -n maxidxval7=$18\n  local -n maxval7=$19\n  local -n maxidxval8=$20\n\
    \  local -n maxval8=$21\n  local -n maxidxval9=$22\n  local -n maxval9=$23\n \
    \ local -n maxidxval10=$24\n  local -n maxval10=$25\n  local -n maxidxval11=$26\n\
    \  local -n maxval11=$27\n  local -n maxidxval12=$28\n  local -n maxval12=$29\n\
    \  local -n maxidxval13=$30\n  local -n maxval13=$31\n  local -n maxidxval14=$32\n\
    \  local -n maxval14=$33\n  local -n maxidxval15=$34\n  local -n maxval15=$35\n\
    \  local -n maxidxval16=$36\n  local -n maxval16=$37\n  local -n maxidxval17=$38\n\
    \  local -n maxval17=$39\n  local -n maxidxval18=$40\n  local -n maxval18=$41\n\
    \  local -n maxidxval19=$42\n  local -n maxval19=$43\n  local -n maxidxval20=$44\n\
    \  local -n maxval20=$45\n  local -n maxidxval21=$46\n  local -n maxval21=$47\n\
    \  local -n maxidxval22=$48\n  local -n maxval22=$49\n  local -n maxidxval23=$50\n\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7duvgury.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp7duvgury.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local maxi\n  local\
    \ maxj\n  local maxval\n  local maxvali\n  local maxvalj\n  local maxvalk\n  local\
    \ maxvall\n  local maxvalm\n  local maxvaln\n  local maxvalo\n  local maxvalp\n\
    \  local maxvalq\n  local maxvalr\n  local maxvals\n  local maxvalt\n  local maxvalu\n\
    \  local maxvalv\n  local maxvalw\n  local maxvalx\n  local maxvaly\n  local maxvalz\n\
    \  local maxvalaa\n  local maxvalab\n  local maxvalac\n  local maxvalad\n  local\
    \ maxvalae\n  local maxvalaf\n  local maxvalag\n  local maxvalah\n  local maxvalai\n\
    \  local maxvalaj\n  local maxvalak\n  local maxvalal\n  local maxvalam\n  local\
    \ maxvalan\n  local maxvalao\n  local maxvalap\n  local maxvalaq\n  local maxvalar\n\
    \  local maxvalas\n  local maxvalat\n  local maxvalau\n  local maxvalav\n  local\
    \ maxvalaw\n  local maxvalax\n  local maxvalay\n  local maxvalaz\n  local maxvalba\n\
    \  local maxvalbb\n  local maxvalbc\n  local maxvalbd\n  local maxvalbe\n  local\
    \ maxvalbf\n  local maxvalbg\n  local maxvalbh\n  local maxvalbi\n  local maxvalbj\n\
    \  local maxvalbk\n  local maxvalbl\n  local maxvalbm\n  local maxvalbn\n  local\
    \ maxvalbo\n  local maxvalbp\n  local maxvalbq\n  local maxvalbr\n  local maxvalbs\n\
    \  local maxvalbt\n  local maxvalbu\n  local maxvalbv\n  local maxvalbw\n  local\
    \ maxvalbx\n  local maxvalby\n  local maxvalbz\n  local maxvalca\n  local maxvalcb\n\
    \  local maxvalcc\n  local maxvalcd\n  local maxvalce\n  local maxvalcf\n  local\
    \ maxvalcg\n  local maxvalch\n  local maxvalci\n  \n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=(\"${@}\")\n    local max=$((${#arr[@]}-1))\n    local maxIndex=0\n\
    \    local index=0\n    while (( ${index} <= ${max} )); do\n        if (( ${arr[$index]}\
    \ <= ${arr[$maxIndex]} )); then\n            (( maxIndex=$index ))\n        fi\n\
    \        (( index++ ))\n    done\n    if (( ${maxIndex} > 0 )); then\n       \
    \ echo ${maxIndex}\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps6pq9joe.sh: line 15: ((: 1 2 4 3 5 <= 1 2 4 3 5 : syntax error
    in expression (error token is "2 4 3 5 <= 1 2 4 3 5 ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n elem=$2\n  local -i max=$(( ${#arr[@]} - 1\
    \ ))\n  local -i i\n  for i in $(seq 0 $max); do\n    local -n elem=$i\n    local\
    \ -n arr=$1\n    if [[ ${arr[$i]} -gt $elem ]]; then\n      max=$i\n    fi\n \
    \ done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2gej_qne.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp2gej_qne.sh: line 11: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n    local -i\
    \ i\n    local -n elem=$2\n    local -i j\n    local -n val=$3\n    local -i k\n\
    \    local -n val2=$4\n    local -i j2\n    local -n val3=$5\n    local -i k3\n\
    \    local -n val4=$6\n    local -i j4\n    local -n val5=$7\n    local -i k5\n\
    \    local -n val6=$8\n    local -i j6\n    local -n val7=$9\n    local -i k7\n\
    \    local -n val8=$10\n    local -i j8\n    local -n val9=$11\n    local -i k8\n\
    \    local -n val10=$12\n    local -i j10\n    local -n val11=$13\n    local -i\
    \ k11\n    local -n val12=$14\n    local -i j12\n    local -n val13=$15\n    local\
    \ -i k13\n    local -n val14=$16\n    local -i j14\n    local -n val15=$17\n \
    \   local -i k15\n    local -n val16=$18\n    local -i j16\n    local -n val17=$19\n\
    \    local -i k17\n    local -n val18=$20\n    local -i j18\n    local -n val19=$21\n\
    \    local -i k19\n    local -n val20=$22\n    local -i j20\n    local -n val21=$23\n\
    \    local -i k21\n    local -n val22=$24\n    local -i j22\n    local -n val23=$25\n\
    \    local -i k23\n    local -n val24=$26\n    local -i j24\n    local -n val25=$27\n\
    \    local -i k25\n    local -n val26=$28\n    local -i j26\n    local -n val27=$29\n\
    \    local -i k27\n    local -n val28=$30\n    local -i j28\n    local -n val29=$31\n\
    \    local -i k29\n    local -n val30=$32\n    local -i j30\n    local -n val31=$33\n\
    \    local -i k31\n    local -n val32=$34\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppfddnhv9.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmppfddnhv9.sh: line 13: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 15: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 17: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 19: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 21: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 23: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 25: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 27: local: `'': not a valid identifier

    /tmp/tmppfddnhv9.sh: line 29: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 31: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 33: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 35: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 37: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 39: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 41: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 43: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 45: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 47: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmppfddnhv9.sh: line 49: local: `0'': invalid variable name for name reference

    /tmp/tmppfddnhv9.sh: line 51: local: `1'': invalid variable name for name reference

    /tmp/tmppfddnhv9.sh: line 53: local: `2'': invalid variable name for name reference

    /tmp/tmppfddnhv9.sh: line 55: local: `3'': invalid variable name for name reference

    /tmp/tmppfddnhv9.sh: line 57: local: `4'': invalid variable name for name reference

    /tmp/tmppfddnhv9.sh: line 59: local: `5'': invalid variable name for name reference

    /tmp/tmppfddnhv9.sh: line 6'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n maxidx=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n  local\
    \ -n maxidxval2=$8\n  local -n maxval2=$9\n  local -n maxidxval3=$10\n  local\
    \ -n maxval3=$11\n  local -n maxidxval4=$12\n  local -n maxval4=$13\n  local -n\
    \ maxidxval5=$14\n  local -n maxval5=$15\n  local -n maxidxval6=$16\n  local -n\
    \ maxval6=$17\n  local -n maxidxval7=$18\n  local -n maxval7=$19\n  local -n maxidxval8=$20\n\
    \  local -n maxval8=$21\n  local -n maxidxval9=$22\n  local -n maxval9=$23\n \
    \ local -n maxidxval10=$24\n  local -n maxval10=$25\n  local -n maxidxval11=$26\n\
    \  local -n maxval11=$27\n  local -n maxidxval12=$28\n  local -n maxval12=$29\n\
    \  local -n maxidxval13=$30\n  local -n maxval13=$31\n  local -n maxidxval14=$32\n\
    \  local -n maxval14=$33\n  local -n maxidxval15=$34\n  local -n maxval15=$35\n\
    \  local -n maxidxval16=$36\n  local -n maxval16=$37\n  local -n maxidxval17=$38\n\
    \  local -n maxval17=$39\n  local -n maxidxval18=$40\n  local -n maxval18=$41\n\
    \  local -n maxidxval19=$42\n  local -n maxval19=$43\n  local -n maxidxval20=$44\n\
    \  local -n maxval20=$45\n  local -n maxidxval21=$46\n  local -n maxval21=$47\n\
    \  local -n maxidxval22=$48\n  local -n maxval22=$49\n  local -n maxidxval23=$50\n\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7duvgury.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp7duvgury.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp7duvgury.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp7duvgury.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmp7duvgury.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while (( index < max )); do\n    local element=${array[index]}\n    local previous=${array[index-1]}\n\
    \    if [[ ${element} -gt ${previous} ]]; then\n      index=$(( index + 1 ))\n\
    \    else\n      break\n    fi\n  done\n  echo \"${index}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=($1)\n  local max=$((${#arr[@]}-1))\n  local i\n  for ((i=0;i<$max;i++));\
    \ do\n    if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n      max=$i\n    fi\n  done\n\
    \  if (( max < 0 )); then\n    return -1\n  fi\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$(( ${#array[@]}\
    \ - 1 ))\n    local element\n    while (( index < max )); do\n        element=\"\
    ${array[index]}\"\n        if [[ ${element} -gt ${array[index-1]} ]]; then\n \
    \           index=$(expr ${index} + 1)\n        else\n            index=$(expr\
    \ ${index} + 1)\n        fi\n    done\n    echo \"${index}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  local element\n  while (( index < max )); do\n    element=\"${array[index]}\"\
    \n    if [[ ${element} -gt ${array[index-1]} ]]; then\n      index=$(( index +\
    \ 1 ))\n    else\n      break\n    fi\n  done\n  echo \"$index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local maxIndex\n\
    \  local maxIndexIndex\n  local maxIndexValue\n  local maxIndexValueIndex\n  local\
    \ maxIndexValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n\
    \  local maxIndexValueValueValue\n  local maxIndexValueValueIndex\n  local maxIndexValueValueValue\n\
    \  local maxIndexValueValueIndex\n  local maxIndexValue\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local index=0\n  local max=$((${#arr[@]} - 1))\n  local\
    \ maxIndex=$((${#arr[@]} - 1))\n  while (( ${index} <= ${maxIndex} )) ; do\n \
    \   if (( ${arr[$index]} <= ${arr[$maxIndex]} )) ; then\n      maxIndex=$index\n\
    \    fi\n    (( index++ ))\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppt51a6rx.sh: line 15: ((: 1 2 4 3 5 <= 1 2 4 3 5 : syntax error
    in expression (error token is "2 4 3 5 <= 1 2 4 3 5 ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n  local -n maxprev=$8\n\
    \  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local -n maxmaxprev=$11\n\
    \  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n\
    \  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxval=$16\n  local -n maxmaxmaxprev=$17\n\
    \  local -n maxmaxmaxmaxidx=$18\n  local -n maxmaxmaxval=$19\n  local -n maxmaxmaxprev=$20\n\
    \  local -n maxmaxmaxmaxidx=$21\n  local -n maxmaxmaxval=$22\n  local -n maxmaxmaxprev=$23\n\
    \  local -n maxmaxmaxmaxidx=$24\n  local -n maxmaxmaxval=$25\n  local -n maxmaxmaxprev=$26\n\
    \  local -n maxmaxmaxmaxidx=$27\n  local -n maxmaxmaxval=$28\n  local -n maxmaxmaxprev=$29\n\
    \  local -n maxmaxmaxmaxidx=$30\n  local -n maxmaxmaxval=$31\n  local -n maxmaxmaxprev=$32\n\
    \  local -n maxmaxmaxmaxidx=$33\n  local -n maxmaxmaxval=$34\n  local -n maxmaxmaxprev=$35\n\
    \  local -n maxmaxmaxmaxidx=$36\n  local -n maxmaxmaxval=$37\n  local -n maxmaxmaxprev=$38\n\
    \  local -n maxmaxmaxmaxidx=$39\n  local -n maxmaxmaxval=$40\n  local -n maxmaxmaxprev=$41\n\
    \  local -n maxmaxmaxmaxidx=$42\n  local -n maxmaxmaxval=$43\n  local -n maxmaxmaxprev=$44\n\
    \  local -n maxmaxmaxmaxidx=$45\n  local -n maxmaxmaxval=$46\n  local -n maxmaxmaxprev=$47\n\
    \  local -n maxmaxmaxmax\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiin6jphu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiin6jphu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j\n    for j in $(seq 0 $max); do\n  \
    \    if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n        (( max-- ))\n        break\n\
    \      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv9i95qc8.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local val=${arr[$i]}\n    local j=$(( i + 1\
    \ ))\n    local k=$(( i + 2 ))\n    if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n\
    \      arr[$i]=${arr[$j]}\n      arr[$j]=$val\n      arr[$k]=$val\n      i=$j\n\
    \    elif [[ ${arr[$i]} -gt ${arr[$k]} ]]; then\n      arr[$i]=${arr[$k]}\n  \
    \    arr[$k]=$val\n      i=$k\n    else\n      i=$j\n    fi\n  done\n  echo $max\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9azgghyq.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n max=$2\n    local -n maxIndex=$3\n    local\
    \ -n maxVal=$4\n\n    local -n i=$(( ${#arr[@]} - 1 ))\n    local -n j=$(( ${#arr[@]}\
    \ - 1 ))\n    local -n k=$(( ${#arr[@]} - 1 ))\n\n    while (( ${#arr[@]} > 0\
    \ )); do\n        if (( ${arr[i]} <= ${arr[j]} && ${arr[i]} <= ${arr[k]} && ${arr[j]}\
    \ <= ${arr[k]} )); then\n            if (( ${arr[i]} > ${arr[j]} && ${arr[i]}\
    \ > ${arr[k]} )); then\n                maxIndex=$i\n                maxVal=${arr[i]}\n\
    \            else\n                maxIndex=$j\n                maxVal=${arr[j]}\n\
    \            fi\n        fi\n        (( i = i - 1 ))\n        (( j = j - 1 ))\n\
    \        (( k = k - 1 ))\n    done\n\n    if (( ${#maxVal} > 0 )); then\n    \
    \    echo \"${maxIndex} ${maxVal}\"\n    else\n        echo \"-1\"\n    fi\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyek9iihl.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpyek9iihl.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpyek9iihl.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpyek9iihl.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpyek9iihl.sh: line 15: local: `-1'': invalid variable name for name reference

    /tmp/tmpyek9iihl.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmpyek9iihl.sh: line 17: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n i=$6\n  local -n j=$7\n\n  (( idx == ${#arr[@]}\
    \ )) && return -1\n\n  (( val < prev )) && return -1\n\n  (( val > prev )) &&\
    \ return -1\n\n  (( idx == 0 )) && return 0\n\n  (( val == prev )) && return 0\n\
    \n  (( val > prev )) && return -1\n\n  (( idx == ${#arr[@]} - 1 )) && return -1\n\
    \n  (( val < arr[idx-1] )) && return -1\n\n  (( val > arr[idx-1] )) && return\
    \ -1\n\n  (( idx == 0 )) && return 0\n\n  (( val == arr[idx-1] )) && return 0\n\
    \n  (( val > arr[idx-1] )) && return -1\n\n  (( idx == ${#arr[@]} - 1 )) && return\
    \ -1\n\n  (( val < arr[idx-1] )) && return -1\n\n  (( val > arr[idx-1] )) && return\
    \ -1\n\n  (( idx == 0 )) && return 0\n\n  (( val == arr[idx-1] )) && return 0\n\
    \n  (( val > arr[idx-1] )) && return -1\n\n  (( idx == ${#arr[@]} - 1 )) && return\
    \ -1\n\n  (( val < arr[idx-1] )) && return -1\n\n  (( val > arr[idx-1] )) && return\
    \ -1\n\n  (( idx == 0 )) && return 0\n\n  (( val == arr[idx-1] )) && return 0\n\
    \n  (( val > arr[idx-1] )) && return -1\n\n  (( idx == ${#arr[@]} - 1 )) && return\
    \ -1\n\n  (( val < arr[idx-1] )) && return -1\n\n  (( val > arr[idx-1] )) && return\
    \ -1\n\n  (( idx == 0 )) && return 0\n\n  (( val == arr[idx-1] )) && return 0\n\
    \n  (( val > arr[idx-1] )) && return -1\n\n  (( idx == ${#arr[@]} - 1 )) && return\
    \ -1\n\n  (( val < arr[idx-1] )) && return -1\n\n  (( val > arr[idx-1] )) && return\
    \ -1\n\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnxqbbjwc.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpnxqbbjwc.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpnxqbbjwc.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpnxqbbjwc.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpnxqbbjwc.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpnxqbbjwc.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpnxqbbjwc.sh: line 16: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$(( ${#array[@]}\
    \ - 1 ))\n    for (( index=0; index<${#array[@]}; index++ )); do\n        if [[\
    \ ${array[$index]} -gt ${array[$(( index + 1 ))]} ]]; then\n            max=$(expr\
    \ ${index} - 1)\n        fi\n    done\n    echo \"${max}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa0yy5w8p.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n val=$2\n  local -n max=$3\n  local -n i\n \
    \ local -n j\n  local -n len=${#arr[@]}\n  local -n maxlen=${#max}\n  local -n\
    \ maxidx\n  local -n maxval\n  local -n maxidx2\n  local -n maxval2\n  local -n\
    \ maxidx3\n  local -n maxval3\n  local -n maxidx4\n  local -n maxval4\n  local\
    \ -n maxidx5\n  local -n maxval5\n  local -n maxidx6\n  local -n maxval6\n  local\
    \ -n maxidx7\n  local -n maxval7\n  local -n maxidx8\n  local -n maxval8\n  local\
    \ -n maxidx9\n  local -n maxval9\n  local -n maxidx10\n  local -n maxval10\n \
    \ local -n maxidx11\n  local -n maxval11\n  local -n maxidx12\n  local -n maxval12\n\
    \  local -n maxidx13\n  local -n maxval13\n  local -n maxidx14\n  local -n maxval14\n\
    \  local -n maxidx15\n  local -n maxval15\n  local -n maxidx16\n  local -n maxval16\n\
    \  local -n maxidx17\n  local -n maxval17\n  local -n maxidx18\n  local -n maxval18\n\
    \  local -n maxidx19\n  local -n maxval19\n  local -n maxidx20\n  local -n maxval20\n\
    \  local -n maxidx21\n  local -n maxval21\n  local -n maxidx22\n  local -n maxval22\n\
    \  local -n maxidx23\n  local -n maxval23\n  local -n maxidx24\n  local -n maxval24\n\
    \  local -n maxidx25\n  local -n maxval25\n  local -n maxidx26\n  local -n maxval26\n\
    \  local -n maxidx27\n  local -n maxval27\n  local -n maxidx28\n  local -n maxval28\n\
    \  local -n maxidx29\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0o4xurvu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp0o4xurvu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp0o4xurvu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp0o4xurvu.sh: line 15: local: `0'': invalid variable name for name reference

    /tmp/tmp0o4xurvu.sh: line 16: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n  while\
    \ (( index < max )); do\n    local element=${array[$index]};\n    local next=${array[$((index+1))]};\n\
    \    if (( element > next )); then\n      max=$((index+1));\n    else\n      index=$((index+1));\n\
    \    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp73jcr6yo.sh: line 16: ((: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=$((${#array}-1))\n  local\
    \ maxIndex=0\n  while [ $index -lt $max ]; do\n    if [[ ${array[$index]} -gt\
    \ ${array[$maxIndex]} ]]; then\n      maxIndex=$index\n    fi\n    index=$((index+1))\n\
    \  done\n  if [[ $maxIndex -eq 0 ]]; then\n    return -1\n  else\n    return $maxIndex\n\
    \  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpowzoxzh1.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local maxIndex\n\
    \    local maxVal\n    local val\n    local i\n    local j\n    local val\n  \
    \  local val\n    local i\n    local j\n    local val\n    local i\n    local\
    \ j\n    local val\n    local i\n    local j\n    local val\n    local i\n   \
    \ local j\n    local val\n    local i\n    local j\n    local val\n    local i\n\
    \    local j\n    local val\n    local i\n    local j\n    local val\n    local\
    \ i\n    local j\n    local val\n    local i\n    local j\n    local val\n   \
    \ local i\n    local j\n    local val\n    local i\n    local j\n    local val\n\
    \    local i\n    local j\n    local val\n    local i\n    local j\n    local\
    \ val\n    local i\n    local j\n    local val\n    local i\n    local j\n   \
    \ local val\n    local i\n    local j\n    local val\n    local i\n    local j\n\
    \    local val\n    local i\n    local j\n    local val\n    local i\n    local\
    \ j\n    local val\n    local i\n    local j\n    local val\n    local i\n   \
    \ local j\n    local val\n    local i\n    local j\n    local val\n    local i\n\
    \    local j\n    local val\n    local i\n    local j\n    local val\n    local\
    \ i\n    local j\n    local val\n    local i\n    local j\n    local val\n   \
    \ local i\n    local j\n    local val\n    local i\n    local j\n    local val\n\
    \    local i\n    local j\n    local val\n    local i\n    local j\n    local\
    \ val\n    local i\n    local j\n    local val\n    local i\n    local j\n   \
    \ local val\n    local i\n    local j\n    local val\n    local i\n    local j\n\
    \    local val\n    local i\n    local j\n    local val\n    local i\n    local\
    \ j\n    local val\n    local i\n    local j\n    local val\n    local i\n   \
    \ local j\n    local val\n    local i\n    local \n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[$i]} -gt\
    \ ${arr[$j]} ]]; then\n      max=$j\n    fi\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp77l0g4w4.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array}-1))\n\
    \    local element\n    while (( index < max )); do\n        element=\"${array[index]}\"\
    \n        if (( element <= ${array[index-1]} )); then\n            (( index++\
    \ ))\n        else\n            (( max-- ))\n        fi\n    done\n    if (( index\
    \ == 0 )); then\n        echo \"-1\"\n    else\n        echo \"$index\"\n    fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpwdiptsnr.sh: line 16: array: bad array subscript

    /tmp/tmpwdiptsnr.sh: line 16: ((: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=$((${#array[@]} - 1))\n  while\
    \ (( index < max )); do\n    local element=${array[index]}\n    local next=${array[index\
    \ + 1]}\n    if [[ ${element} -gt ${next} ]]; then\n      index=$((index+1))\n\
    \    else\n      break\n    fi\n  done\n  echo $index\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n    local -i\
    \ i\n    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]} -gt ${arr[$((\
    \ i - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n    echo $max\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk4qpm5w5.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxi=$(( ${#max[@]} - 1 ))\n \
    \ local -n maxj=$(( ${#max[@]} - 1 ))\n  local -n maxval=$(( ${#max[@]} - 1 ))\n\
    \  local -n maxvali=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalj=$(( ${#maxval[@]}\
    \ - 1 ))\n  local -n maxvalk=$(( ${#maxval[@]} - 1 ))\n  local -n maxvall=$((\
    \ ${#maxval[@]} - 1 ))\n  local -n maxvalm=$(( ${#maxval[@]} - 1 ))\n  local -n\
    \ maxvaln=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalo=$(( ${#maxval[@]} - 1 ))\n\
    \  local -n maxvalp=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalq=$(( ${#maxval[@]}\
    \ - 1 ))\n  local -n maxvalr=$(( ${#maxval[@]} - 1 ))\n  local -n maxvals=$((\
    \ ${#maxval[@]} - 1 ))\n  local -n maxvalt=$(( ${#maxval[@]} - 1 ))\n  local -n\
    \ maxvalu=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalv=$(( ${#maxval[@]} - 1 ))\n\
    \  local -n maxvalw=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalx=$(( ${#maxval[@]}\
    \ - 1 ))\n  local -n maxvaly=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalz=$((\
    \ ${#maxval[@]} - 1 ))\n  local -n maxvalA=$(( ${#maxval[@]} - 1 ))\n  local -n\
    \ maxvalB=$(( ${#maxval[@]} - 1 ))\n  local -n maxvalC=$\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_633_qam.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp_633_qam.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp_633_qam.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 14: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 15: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 19: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 20: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 21: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 22: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 23: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 24: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 25: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 26: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 27: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 28: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 29: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 30: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 31: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 32: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 33: local: `-1'': invalid variable name for name reference

    /tmp/tmp_633_qam.sh: line 34: local: `-1'': in'
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  while (( ${i} > 0 )); do\n    local -n val=${arr[i]}\n\
    \    local -n max=${val}\n    local -n j=$(( ${j} - 1 ))\n    while (( ${j} >\
    \ 0 )); do\n      local -n val=${arr[j]}\n      if (( ${val} > ${max} )); then\n\
    \        max=${val}\n      fi\n      j=$(( ${j} - 1 ))\n    done\n    arr[i]=${max}\n\
    \    i=$(( ${i} - 1 ))\n  done\n  echo ${arr[@]}\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5k8nj8gu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp5k8nj8gu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp5k8nj8gu.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmp5k8nj8gu.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmp5k8nj8gu.sh: line 14: ((: > 0 : syntax error: operand expected (error
    token is "> 0 ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=(\"${@}\")\n  local max=$((${#arr[@]}-1))\n  local i\n  for i\
    \ in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$((i+1))]} ]]; then\n \
    \     max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyaqozelx.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while (( index < max )); do\n    local val=${array[$index]};\n    local prev=${array[$((\
    \ index - 1 ))]}\n    if (( val > prev )); then\n      max=$(( index + 1 ))\n\
    \    else\n      index=$(( index + 1 ))\n    fi\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$(( $i - 1 ))]} ]];\
    \ then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4fh1iabu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=$((${#arr[@]} - 1))\n \
    \ while (( ${#arr[@]} > 0 )); do\n    if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n\
    \      maxIndex=$i\n      (( i = i - 1 ))\n    else\n      maxIndex=$j\n     \
    \ (( j = j - 1 ))\n    fi\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp765y_g6l.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp765y_g6l.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp765y_g6l.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmp765y_g6l.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmp765y_g6l.sh: line 14: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n  while\
    \ (( index < max )); do\n    local element=${array:$index:1}\n    if [[ \"$element\"\
    \ -gt \"$element\" ]]; then\n      max=$index\n    fi\n    (( index++ ))\n  done\n\
    \  if (( index == max )); then\n    return -1\n  else\n    return $max\n  fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=(\"$@\")\n  local max=$(( ${#arr[@]} - 1 ))\n  local i\n  for\
    \ (( i=1; i<=$max; i++ )); do\n    if [[ ${arr[$i]} -gt ${arr[$(( i - 1 ))]} ]];\
    \ then\n      max=$i\n    fi\n  done\n  if (( max < 0 )); then\n    echo -1\n\
    \  else\n    echo $max\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxIndex=$3\n  local -n\
    \ index=$4\n  local -n element=$5\n  local -n maxElement=$6\n  local -n maxIndexElement=$7\n\
    \  local -n maxIndexElementIndex=$8\n  local -n maxIndexElementIndexIndex=$9\n\
    \  local -n maxIndexElementIndexIndexIndex=$10\n  local -n maxIndexElementIndexIndexIndex=$11\n\
    \  local -n maxIndexElementIndexIndexIndex=$12\n  local -n maxIndexElementIndexIndexIndex=$13\n\
    \  local -n maxIndexElementIndexIndexIndex=$14\n  local -n maxIndexElementIndexIndexIndex=$15\n\
    \  local -n maxIndexElementIndexIndexIndex=$16\n  local -n maxIndexElementIndexIndexIndex=$17\n\
    \  local -n maxIndexElementIndexIndexIndex=$18\n  local -n maxIndexElementIndexIndexIndex=$19\n\
    \  local -n maxIndexElementIndexIndexIndex=$20\n  local -n maxIndexElementIndexIndexIndex=$21\n\
    \  local -n maxIndexElementIndexIndexIndex=$22\n  local -n maxIndexElementIndexIndexIndex=$23\n\
    \  local -n maxIndexElementIndexIndexIndex=$24\n  local -n maxIndexElementIndexIndexIndex=$25\n\
    \  local -n maxIndexElementIndexIndexIndex=$26\n  local -n maxIndexElementIndexIndexIndex=$27\n\
    \  local -n maxIndexElementIndexIndexIndex=$28\n  local -n maxIndexElementIndexIndexIndex=$29\n\
    \  local -n maxIndexElementIndexIndexIndex=$30\n  local -n maxIndexElementIndexIndexIndex=$31\n\
    \  local -n maxIndexElementIndexIndexIndex=$32\n  local -n maxIndexElementIndexIndexIndex=$33\n\
    \  local -n maxIndexElementIndexIndexIndex=$34\n  local -n maxIndexElementIndexIndexIndex=$35\n\
    \  local -n maxIndexElementIndexIndexIndex=$36\n  local -n maxIndexElementIndexIndexIndex=$37\n\
    \  local -n maxIndexElementIndexIndexIndex=$38\n  local -n maxIndexElementIndexIndexIndex=$39\n\
    \  local -n maxIndexElementIndexIndexIndex=$40\n  local -n maxIndexElementIndexIndexIndex=$41\n\
    \  local -n maxIndexElementIndexIndexIndex=$42\n\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuxolhklb.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpuxolhklb.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpuxolhklb.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpuxolhklb.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpuxolhklb.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpuxolhklb.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpuxolhklb.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpuxolhklb.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpuxolhklb.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpuxolhklb.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local len=${#arr[@]}\n\
    \    local maxlen=${#max}\n    local maxidx\n    local maxval\n    local val\n\
    \    local idx\n    local val2\n    local idx2\n    local val3\n    local idx3\n\
    \    local val4\n    local idx4\n    local val5\n    local idx5\n    local val6\n\
    \    local idx6\n    local val7\n    local idx7\n    local val8\n    local idx8\n\
    \    local val9\n    local idx9\n    local val10\n    local idx10\n    local val11\n\
    \    local idx11\n    local val12\n    local idx12\n    local val13\n    local\
    \ idx13\n    local val14\n    local idx14\n    local val15\n    local idx15\n\
    \    local val16\n    local idx16\n    local val17\n    local idx17\n    local\
    \ val18\n    local idx18\n    local val19\n    local idx19\n    local val20\n\
    \    local idx20\n    local val21\n    local idx21\n    local val22\n    local\
    \ idx22\n    local val23\n    local idx23\n    local val24\n    local idx24\n\
    \    local val25\n    local idx25\n    local val26\n    local idx26\n    local\
    \ val27\n    local idx27\n    local val28\n    local idx28\n    local val29\n\
    \    local idx29\n    local val30\n    local idx30\n    local val31\n    local\
    \ idx31\n    local val32\n    local idx32\n    local val33\n    local idx33\n\
    \    local val34\n    local idx34\n    local val35\n    local idx35\n    local\
    \ val36\n    local idx36\n    local val37\n    local idx37\n    local val38\n\
    \    local idx38\n    local val39\n    local idx39\n    local val40\n    local\
    \ idx40\n    local val41\n    local idx41\n    local val42\n    local idx42\n\
    \    local val43\n    local idx43\n    local val44\n    local idx44\n    local\
    \ val45\n    local idx45\n    local val46\n    local idx46\n    local val47\n\
    \    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array[@]}\
    \ - 1))\n    for (( index = 0; index < max; index++ )); do\n        if [[ ${array[$index]}\
    \ -gt ${array[$((index-1))]} ]]; then\n            local max=$index\n        fi\n\
    \    done\n    echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j\n    for j in $(seq 0 $(( i + 1 )));\
    \ do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n        max=$(expr $i +\
    \ 1)\n        break\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptjcwimx9.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n  local -n\
    \ maxidxval2=$8\n  local -n maxidxval3=$9\n  local -n maxidxval4=$10\n  local\
    \ -n maxidxval5=$11\n  local -n maxidxval6=$12\n  local -n maxidxval7=$13\n  local\
    \ -n maxidxval8=$14\n  local -n maxidxval9=$15\n  local -n maxidxval10=$16\n \
    \ local -n maxidxval11=$17\n  local -n maxidxval12=$18\n  local -n maxidxval13=$19\n\
    \  local -n maxidxval14=$20\n  local -n maxidxval15=$21\n  local -n maxidxval16=$22\n\
    \  local -n maxidxval17=$23\n  local -n maxidxval18=$24\n  local -n maxidxval19=$25\n\
    \  local -n maxidxval20=$26\n  local -n maxidxval21=$27\n  local -n maxidxval22=$28\n\
    \  local -n maxidxval23=$29\n  local -n maxidxval24=$30\n  local -n maxidxval25=$31\n\
    \  local -n maxidxval26=$32\n  local -n maxidxval27=$33\n  local -n maxidxval28=$34\n\
    \  local -n maxidxval29=$35\n  local -n maxidxval30=$36\n  local -n maxidxval31=$37\n\
    \  local -n maxidxval32=$38\n  local -n maxidxval33=$39\n  local -n maxidxval34=$40\n\
    \  local -n maxidxval35=$41\n  local -n maxidxval36=$42\n  local -n maxidxval37=$43\n\
    \  local -n maxidxval38=$44\n  local -n maxidxval39=$45\n  local -n maxidxval40=$46\n\
    \  local -n maxidxval41=$47\n  local -n maxidxval42=$48\n  \n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmuhlrwt.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpbmuhlrwt.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=(\"$@\")\n    local max=$(( ${#arr[@]} - 1 ))\n    local i\n\
    \    for (( i=1; i<max; i++ )); do\n        if [[ ${arr[$i]} -gt ${arr[$(( i -\
    \ 1 ))]} ]]; then\n            max=i\n        fi\n    done\n    echo \"$max\"\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n  local -n maxprev=$8\n\
    \  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local -n maxmaxprev=$11\n\
    \  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n\
    \  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxval=$16\n  local -n maxmaxmaxprev=$17\n\
    \  local -n maxmaxmaxmaxidx=$18\n  local -n maxmaxmaxval=$19\n  local -n maxmaxmaxprev=$20\n\
    \  local -n maxmaxmaxmaxidx=$21\n  local -n maxmaxmaxval=$22\n  local -n maxmaxmaxprev=$23\n\
    \  local -n maxmaxmaxmaxidx=$24\n  local -n maxmaxmaxval=$25\n  local -n maxmaxmaxprev=$26\n\
    \  local -n maxmaxmaxmaxidx=$27\n  local -n maxmaxmaxval=$28\n  local -n maxmaxmaxprev=$29\n\
    \  local -n maxmaxmaxmaxidx=$30\n  local -n maxmaxmaxval=$31\n  local -n maxmaxmaxprev=$32\n\
    \  local -n maxmaxmaxmaxidx=$33\n  local -n maxmaxmaxval=$34\n  local -n maxmaxmaxprev=$35\n\
    \  local -n maxmaxmaxmaxidx=$36\n  local -n maxmaxmaxval=$37\n  local -n maxmaxmaxprev=$38\n\
    \  local -n maxmaxmaxmaxidx=$39\n  local -n maxmaxmaxval=$40\n  local -n maxmaxmaxprev=$41\n\
    \  local -n maxmaxmaxmaxidx=$42\n  local -n maxmaxmaxval=$43\n  local -n maxmaxmaxprev=$44\n\
    \  local -n maxmaxmaxmaxidx=$45\n  local -n maxmaxmaxval=$46\n  local -n maxmaxmaxprev=$47\n\
    \  local -n maxmaxmaxmax\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiin6jphu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiin6jphu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local max=$2\n    local maxIndex=$3\n    local currentIndex=0\n\
    \    local currentValue=$array[0]\n    local maxValue=$array[0]\n    local maxIndexValue=$array[0]\n\
    \    local i=0 j=0\n    while [ $i -lt ${#array[@]} ]; do\n        if [ $currentValue\
    \ -gt $maxValue ]; then\n            currentIndex=$i\n            currentValue=$array[$i]\n\
    \        fi\n        if [ $currentValue -le $max ]; then\n            currentValue=$array[$i]\n\
    \            currentIndex=$i\n        fi\n        if [ $currentValue -eq $max\
    \ ]; then\n            if [ $i -eq $maxIndex ]; then\n                maxIndex=$j\n\
    \                maxValue=$array[$j]\n                maxIndexValue=$array[$j]\n\
    \            fi\n            currentIndex=$i\n            currentValue=$array[$i]\n\
    \        fi\n        i=$((i+1))\n        j=$((j+1))\n    done\n    return $maxIndex\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd3ke1_r_.sh: line 19: [: too many arguments

    /tmp/tmpd3ke1_r_.sh: line 23: [: too many arguments

    /tmp/tmpd3ke1_r_.sh: line 27: [: too many arguments

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n validx=$6\n  local -n maxval=$7\n  local -n maxvalidx=$8\n\
    \  local -n maxidxval=$9\n  local -n maxidxvalidx=$10\n  local -n maxidxvalval=$11\n\
    \  local -n maxidxvalvalidx=$12\n  local -n maxidxvalvalval=$13\n  local -n maxidxvalvalvalidx=$14\n\
    \  local -n maxidxvalvalvalval=$15\n  local -n maxidxvalvalvalvalidx=$16\n  local\
    \ -n maxidxvalvalvalvalval=$17\n  local -n maxidxvalvalvalvalidx=$18\n  local\
    \ -n maxidxvalvalvalvalval=$19\n  local -n maxidxvalvalvalvalidx=$20\n  local\
    \ -n maxidxvalvalvalvalval=$21\n  local -n maxidxvalvalvalvalidx=$22\n  local\
    \ -n maxidxvalvalvalvalval=$23\n  local -n maxidxvalvalvalvalidx=$24\n  local\
    \ -n maxidxvalvalvalvalval=$25\n  local -n maxidxvalvalvalvalidx=$26\n  local\
    \ -n maxidxvalvalvalvalval=$27\n  local -n maxidxvalvalvalvalidx=$28\n  local\
    \ -n maxidxvalvalvalvalval=$29\n  local -n maxidxvalvalvalvalidx=$30\n  local\
    \ -n maxidxvalvalvalvalval=$31\n  local -n maxidxvalvalvalvalidx=$32\n  local\
    \ -n maxidxvalvalvalvalval=$33\n  local -n maxidxvalvalvalvalidx=$34\n  local\
    \ -n maxidxvalvalvalvalval=$35\n  local -n maxidxvalvalvalvalidx=$36\n  local\
    \ -n maxidxvalvalvalvalval=$37\n  local -n maxidxvalvalvalvalidx=$38\n  local\
    \ -n maxidxvalvalvalvalval=$39\n  local -n maxidxvalvalvalvalidx=$40\n  local\
    \ -n maxidxvalvalvalvalval\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo07i3asw.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpo07i3asw.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpo07i3asw.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpo07i3asw.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpo07i3asw.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpo07i3asw.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpo07i3asw.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpo07i3asw.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpo07i3asw.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpo07i3asw.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local maxIndex\n\
    \    local maxVal\n    local val\n    local val2\n    local val3\n    local val4\n\
    \    local val5\n    local val6\n    local val7\n    local val8\n    local val9\n\
    \    local val10\n    local val11\n    local val12\n    local val13\n    local\
    \ val14\n    local val15\n    local val16\n    local val17\n    local val18\n\
    \    local val19\n    local val20\n    local val21\n    local val22\n    local\
    \ val23\n    local val24\n    local val25\n    local val26\n    local val27\n\
    \    local val28\n    local val29\n    local val30\n    local val31\n    local\
    \ val32\n    local val33\n    local val34\n    local val35\n    local val36\n\
    \    local val37\n    local val38\n    local val39\n    local val40\n    local\
    \ val41\n    local val42\n    local val43\n    local val44\n    local val45\n\
    \    local val46\n    local val47\n    local val48\n    local val49\n    local\
    \ val50\n    local val51\n    local val52\n    local val53\n    local val54\n\
    \    local val55\n    local val56\n    local val57\n    local val58\n    local\
    \ val59\n    local val60\n    local val61\n    local val62\n    local val63\n\
    \    local val64\n    local val65\n    local val66\n    local val67\n    local\
    \ val68\n    local val69\n    local val70\n    local val71\n    local val72\n\
    \    local val73\n    local val74\n    local val75\n    local val76\n    local\
    \ val77\n    local val78\n    local val79\n    local val80\n    local val81\n\
    \    local val82\n    local val83\n    local val84\n    local val85\n    local\
    \ val86\n    local val87\n    local val88\n    local val89\n    local val90\n\
    \    local val91\n    local val92\n    local val93\n    local val94\n    local\
    \ val95\n    local val96\n    local val\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while [ $index -lt $max ]; do\n    local value=${array[$index]};\n    local\
    \ previous=${array[$index - 1]};\n    if [ $value -gt $previous ]; then\n    \
    \  index=$(( index + 1 ));\n    else\n      index=$(( index + 2 ));\n      continue;\n\
    \    fi\n  done\n  echo $index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxi=$(( ${#max[@]} - 1 ))\n \
    \ local -n maxj=$(( ${#max[@]} - 1 ))\n  local -n maxval=$(( ${#max[@]} - 1 ))\n\
    \  local -n maxval2=$(( ${#max[@]} - 1 ))\n  local -n maxval3=$(( ${#max[@]} -\
    \ 1 ))\n  local -n maxval4=$(( ${#max[@]} - 1 ))\n  local -n maxval5=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval6=$(( ${#max[@]} - 1 ))\n  local -n maxval7=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval8=$(( ${#max[@]} - 1 ))\n  local -n maxval9=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval10=$(( ${#max[@]} - 1 ))\n  local -n maxval11=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval12=$(( ${#max[@]} - 1 ))\n  local -n maxval13=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval14=$(( ${#max[@]} - 1 ))\n  local -n maxval15=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval16=$(( ${#max[@]} - 1 ))\n  local -n maxval17=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval18=$(( ${#max[@]} - 1 ))\n  local -n maxval19=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval20=$(( ${#max[@]} - 1 ))\n  local -n maxval21=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxval22=$(( ${#max[@]} - 1 ))\n  local -n maxval23=$((\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpss0yo96l.sh: line 38: unexpected EOF while looking for matching
    `)''

    /tmp/tmpss0yo96l.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  local element\n  while IFS= read -r element; do\n    if [ \"$element\" -gt\
    \ \"$max\" ]; then\n      max=$element\n      maxIndex=$index\n    fi\n    ((index++))\n\
    \  done < <(echo \"$array\")\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpas9hodd_.sh: line 16: [: 1 2 4 3 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n  local -n maxprev=$8\n\
    \  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local -n maxmaxprev=$11\n\
    \  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n\
    \  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxval=$16\n  local -n maxmaxmaxprev=$17\n\
    \  local -n maxmaxmaxmaxidx=$18\n  local -n maxmaxmaxval=$19\n  local -n maxmaxmaxprev=$20\n\
    \  local -n maxmaxmaxmaxidx=$21\n  local -n maxmaxmaxval=$22\n  local -n maxmaxmaxprev=$23\n\
    \  local -n maxmaxmaxmaxidx=$24\n  local -n maxmaxmaxval=$25\n  local -n maxmaxmaxprev=$26\n\
    \  local -n maxmaxmaxmaxidx=$27\n  local -n maxmaxmaxval=$28\n  local -n maxmaxmaxprev=$29\n\
    \  local -n maxmaxmaxmaxidx=$30\n  local -n maxmaxmaxval=$31\n  local -n maxmaxmaxprev=$32\n\
    \  local -n maxmaxmaxmaxidx=$33\n  local -n maxmaxmaxval=$34\n  local -n maxmaxmaxprev=$35\n\
    \  local -n maxmaxmaxmaxidx=$36\n  local -n maxmaxmaxval=$37\n  local -n maxmaxmaxprev=$38\n\
    \  local -n maxmaxmaxmaxidx=$39\n  local -n maxmaxmaxval=$40\n  local -n maxmaxmaxprev=$41\n\
    \  local -n maxmaxmaxmaxidx=$42\n  local -n maxmaxmaxval=$43\n  local -n maxmaxmaxprev=$44\n\
    \  local -n maxmaxmaxmaxidx=$45\n  local -n maxmaxmaxval=$46\n  local -n maxmaxmaxprev=$47\n\
    \  local -n maxmaxmaxmax\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiin6jphu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiin6jphu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n idx2=$6\n  local -n val2=$7\n  local -n idx3=$8\n\
    \  local -n val3=$9\n\n  local -n maxidx2=$10\n  local -n maxidx3=$11\n  local\
    \ -n maxval2=$12\n  local -n maxval3=$13\n  local -n maxidx4=$14\n  local -n maxval4=$15\n\
    \n  local -n maxidx5=$16\n  local -n maxval5=$17\n\n  local -n maxidx6=$18\n \
    \ local -n maxval6=$19\n\n  local -n maxidx7=$20\n  local -n maxval7=$21\n\n \
    \ local -n maxidx8=$22\n  local -n maxval8=$23\n\n  local -n maxidx9=$24\n  local\
    \ -n maxval9=$25\n\n  local -n maxidx10=$26\n  local -n maxval10=$27\n\n  local\
    \ -n maxidx11=$28\n  local -n maxval11=$29\n\n  local -n maxidx12=$30\n  local\
    \ -n maxval12=$31\n\n  local -n maxidx13=$32\n  local -n maxval13=$33\n\n  local\
    \ -n maxidx14=$34\n  local -n maxval14=$35\n\n  local -n maxidx15=$36\n  local\
    \ -n maxval15=$37\n\n  local -n maxidx16=$38\n  local -n maxval16=$39\n\n  local\
    \ -n maxidx17=$40\n  local -n maxval17=$41\n\n  local -n maxidx18=$42\n  local\
    \ -n maxval18=$43\n\n  local -n maxidx19=$44\n  local -n maxval19=$45\n\n  local\
    \ -n maxidx20=$46\n  local -n maxval20=$47\n\n  local -n maxidx21=$48\n  local\
    \ -n maxval21=$49\n\n  local -n maxidx22=$50\n  local -n maxval22=$51\n\n  local\
    \ -n maxidx23=$52\n  local -n max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgqj21802.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpgqj21802.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpgqj21802.sh: line 20: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 21: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 22: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 23: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 24: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 25: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 27: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 28: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 30: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 31: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpgqj21802.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpgqj21802.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpgqj21802.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmpgqj21802.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmpgqj21802.sh: line 39: local: `4'': invalid variable name for name reference

    /tmp/tmpgqj21802.sh: line 40: local: `5'': invalid variable name for name reference

    /tmp/tmpgqj21802.sh: line 4'
  stdout: ''
  timestamp: 1660034463
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while [ $(( index <= max )) -ge 0 ]; do\n    if [[ ${array[$index]} -gt ${array[$((\
    \ $index - 1 ))]} ]]; then\n      max=$index\n    fi\n    (( index++ ))\n  done\n\
    \  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660034468
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=(\"$@\")\n    local max=$(( ${#arr[@]} - 1 ))\n    local i\n\
    \    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]} -gt ${arr[$(( i\
    \ - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n    echo \"$max\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034462
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex\n  local -n maxVal\n  local\
    \ -n maxValIndex\n  local -n maxValIndex2\n  local -n maxValIndex3\n  local -n\
    \ maxValIndex4\n  local -n maxValIndex5\n  local -n maxValIndex6\n  local -n maxValIndex7\n\
    \  local -n maxValIndex8\n  local -n maxValIndex9\n  local -n maxValIndex10\n\
    \  local -n maxValIndex11\n  local -n maxValIndex12\n  local -n maxValIndex13\n\
    \  local -n maxValIndex14\n  local -n maxValIndex15\n  local -n maxValIndex16\n\
    \  local -n maxValIndex17\n  local -n maxValIndex18\n  local -n maxValIndex19\n\
    \  local -n maxValIndex20\n  local -n maxValIndex21\n  local -n maxValIndex22\n\
    \  local -n maxValIndex23\n  local -n maxValIndex24\n  local -n maxValIndex25\n\
    \  local -n maxValIndex26\n  local -n maxValIndex27\n  local -n maxValIndex28\n\
    \  local -n maxValIndex29\n  local -n maxValIndex30\n  local -n maxValIndex31\n\
    \  local -n maxValIndex32\n  local -n maxValIndex33\n  local -n maxValIndex34\n\
    \  local -n maxValIndex35\n  local -n maxValIndex36\n  local -n maxValIndex37\n\
    \  local -n maxValIndex38\n  local -n maxValIndex39\n  local -n maxValIndex40\n\
    \  local -n maxValIndex41\n  local -n maxValIndex42\n  local -n maxValIndex43\n\
    \  local -n maxValIndex44\n  local -n maxValIndex45\n  local -n maxValIndex46\n\
    \  local -n maxValIndex47\n  local -n maxValIndex48\n  local -n maxValIndex49\n\
    \  local -n maxValIndex50\n  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfdap0tnh.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpfdap0tnh.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpfdap0tnh.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmpfdap0tnh.sh: line 13: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n idx2=$6\n  local -n val2=$7\n  local -n idx3=$8\n\
    \  local -n val3=$9\n  local -n idx4=$10\n  local -n val4=$11\n  local -n idx5=$12\n\
    \  local -n val5=$13\n  local -n idx6=$14\n  local -n val6=$15\n  local -n idx7=$16\n\
    \  local -n val7=$17\n  local -n idx8=$18\n  local -n val8=$19\n  local -n idx9=$20\n\
    \  local -n val9=$21\n  local -n idx10=$22\n  local -n val10=$23\n  local -n idx11=$24\n\
    \  local -n val11=$25\n  local -n idx12=$26\n  local -n val12=$27\n  local -n\
    \ idx13=$28\n  local -n val13=$29\n  local -n idx14=$30\n  local -n val14=$31\n\
    \  local -n idx15=$32\n  local -n val15=$33\n  local -n idx16=$34\n  local -n\
    \ val16=$35\n  local -n idx17=$36\n  local -n val17=$37\n  local -n idx18=$38\n\
    \  local -n val18=$39\n  local -n idx19=$40\n  local -n val19=$41\n  local -n\
    \ idx20=$42\n  local -n val20=$43\n  local -n idx21=$44\n  local -n val21=$45\n\
    \  local -n idx22=$46\n  local -n val22=$47\n  local -n idx23=$48\n  local -n\
    \ val23=$49\n  local -n idx24=$50\n  local -n val24=$51\n  local -n idx25=$52\n\
    \  local -n val25=$53\n  local -n idx26=$54\n  local -n val26=$55\n  local -n\
    \ idx27=$56\n  local -n val27=$57\n  local -\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9w6edk6t.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp9w6edk6t.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp9w6edk6t.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp9w6edk6t.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmp9w6edk6t.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array[@]} - 1))\n\
    \  while (( index < max )); do\n    local current=${array[$index]}\n    local\
    \ previous=${array[$(( index - 1 ))]}\n    if (( current <= previous )); then\n\
    \      index=$(( index + 1 ))\n    else\n      break\n    fi\n  done\n  echo $index\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -i max=$((${#arr[@]} - 1))\n    local -i i\n\
    \    for ((i=1; i<=$max; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i-1]} ]];\
    \ then\n            max=i\n        fi\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0xj8iwvc.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n max=$2\n    local -n i\n    local -n j\n\
    \    local -n maxi\n    local -n maxj\n    local -n max\n    local -n maxlen\n\
    \    local -n maxlen1\n    local -n maxlen2\n    local -n maxlen3\n    local -n\
    \ maxlen4\n    local -n maxlen5\n    local -n maxlen6\n    local -n maxlen7\n\
    \    local -n maxlen8\n    local -n maxlen9\n    local -n maxlen10\n    local\
    \ -n maxlen11\n    local -n maxlen12\n    local -n maxlen13\n    local -n maxlen14\n\
    \    local -n maxlen15\n    local -n maxlen16\n    local -n maxlen17\n    local\
    \ -n maxlen18\n    local -n maxlen19\n    local -n maxlen20\n    local -n maxlen21\n\
    \    local -n maxlen22\n    local -n maxlen23\n    local -n maxlen24\n    local\
    \ -n maxlen25\n    local -n maxlen26\n    local -n maxlen27\n    local -n maxlen28\n\
    \    local -n maxlen29\n    local -n maxlen30\n    local -n maxlen31\n    local\
    \ -n maxlen32\n    local -n maxlen33\n    local -n maxlen34\n    local -n maxlen35\n\
    \    local -n maxlen36\n    local -n maxlen37\n    local -n maxlen38\n    local\
    \ -n maxlen39\n    local -n maxlen40\n    local -n maxlen41\n    local -n maxlen42\n\
    \    local -n maxlen43\n    local -n maxlen44\n    local -n maxlen45\n    local\
    \ -n maxlen46\n    local -n maxlen47\n    local -n maxlen48\n    local -n maxlen49\n\
    \    local -n maxlen50\n    local -n maxlen51\n    local -n maxlen52\n    local\
    \ -n maxlen53\n    local -n maxlen54\n    local -n maxlen55\n    local -n maxlen56\n\
    \    local -n maxlen57\n    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsh651cyz.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpsh651cyz.sh: line 11: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n i=$(( $idx + 1 ))\n  local -n j=$(( $idx + 2 ))\n  local -n k=$((\
    \ $idx + 3 ))\n  local -n maxidx=$(( $idx + 4 ))\n  local -n maxval=$(( $idx +\
    \ 5 ))\n  local -n maxidx2=$(( $idx + 6 ))\n  local -n maxval2=$(( $idx + 7 ))\n\
    \  local -n maxidx3=$(( $idx + 8 ))\n  local -n maxval3=$(( $idx + 9 ))\n  local\
    \ -n maxidx4=$(( $idx + 10 ))\n  local -n maxval4=$(( $idx + 11 ))\n  local -n\
    \ maxidx5=$(( $idx + 12 ))\n  local -n maxval5=$(( $idx + 13 ))\n  local -n maxidx6=$((\
    \ $idx + 14 ))\n  local -n maxval6=$(( $idx + 15 ))\n  local -n maxidx7=$(( $idx\
    \ + 16 ))\n  local -n maxval7=$(( $idx + 17 ))\n  local -n maxidx8=$(( $idx +\
    \ 18 ))\n  local -n maxval8=$(( $idx + 19 ))\n  local -n maxidx9=$(( $idx + 20\
    \ ))\n  local -n maxval9=$(( $idx + 21 ))\n  local -n maxidx10=$(( $idx + 22 ))\n\
    \  local -n maxval10=$(( $idx + 23 ))\n  local -n maxidx11=$(( $idx + 24 ))\n\
    \  local -n maxval11=$(( $idx + 25 ))\n  local -n maxidx12=$(( $idx + 26 ))\n\
    \  local -n maxval12=$(( $idx + 27 ))\n  local -n maxidx13=$(( $idx + 28 ))\n\
    \  local -n maxval13=$(( $idx + 29 ))\n  local -n maxidx14=$(( $idx + 30 ))\n\
    \  local -n maxval14=$(( $idx + 31 ))\n  local -n maxidx15=$(( $idx + 32 ))\n\
    \  local -n maxval15=$(( $idx + 33 ))\n  local -n maxidx16=$(( $idx + 34 ))\n\
    \  local -n maxval16=$(( $idx + \n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp35l179jh.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmp35l179jh.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local max=$2\n    local index=$3\n    local value\n\
    \n    for (( index; index > 0; index-- )); do\n        value=${array[$index]}\n\
    \        if (( value <= max )); then\n            max=value\n        fi\n    done\n\
    \n    return $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array[@]} - 1))\n\
    \  while (( index < max )); do\n    local element=${array[index]}\n    local next=${array[index\
    \ + 1]}\n    if (( element <= next )); then\n      index=$((index + 1))\n    else\n\
    \      break\n    fi\n  done\n  echo \"$index\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n  local -n\
    \ maxidxval2=$8\n  local -n maxidxval3=$9\n  local -n maxidxval4=$10\n  local\
    \ -n maxidxval5=$11\n  local -n maxidxval6=$12\n  local -n maxidxval7=$13\n  local\
    \ -n maxidxval8=$14\n  local -n maxidxval9=$15\n  local -n maxidxval10=$16\n \
    \ local -n maxidxval11=$17\n  local -n maxidxval12=$18\n  local -n maxidxval13=$19\n\
    \  local -n maxidxval14=$20\n  local -n maxidxval15=$21\n  local -n maxidxval16=$22\n\
    \  local -n maxidxval17=$23\n  local -n maxidxval18=$24\n  local -n maxidxval19=$25\n\
    \  local -n maxidxval20=$26\n  local -n maxidxval21=$27\n  local -n maxidxval22=$28\n\
    \  local -n maxidxval23=$29\n  local -n maxidxval24=$30\n  local -n maxidxval25=$31\n\
    \  local -n maxidxval26=$32\n  local -n maxidxval27=$33\n  local -n maxidxval28=$34\n\
    \  local -n maxidxval29=$35\n  local -n maxidxval30=$36\n  local -n maxidxval31=$37\n\
    \  local -n maxidxval32=$38\n  local -n maxidxval33=$39\n  local -n maxidxval34=$40\n\
    \  local -n maxidxval35=$41\n  local -n maxidxval36=$42\n  local -n maxidxval37=$43\n\
    \  local -n maxidxval38=$44\n  local -n maxidxval39=$45\n  local -n maxidxval40=$46\n\
    \  local -n maxidxval41=$47\n  local -n maxidxval42=$48\n  \n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmuhlrwt.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpbmuhlrwt.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpbmuhlrwt.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpbmuhlrwt.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpbmuhlrwt.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local k\n  local\
    \ len=${#arr[@]}\n  local maxlen=${#max}\n  local maxidx\n  local maxval\n  local\
    \ maxidx2\n  local maxval2\n  local maxidx3\n  local maxval3\n  local maxidx4\n\
    \  local maxval4\n  local maxidx5\n  local maxval5\n  local maxidx6\n  local maxval6\n\
    \  local maxidx7\n  local maxval7\n  local maxidx8\n  local maxval8\n  local maxidx9\n\
    \  local maxval9\n  local maxidx10\n  local maxval10\n  local maxidx11\n  local\
    \ maxval11\n  local maxidx12\n  local maxval12\n  local maxidx13\n  local maxval13\n\
    \  local maxidx14\n  local maxval14\n  local maxidx15\n  local maxval15\n  local\
    \ maxidx16\n  local maxval16\n  local maxidx17\n  local maxval17\n  local maxidx18\n\
    \  local maxval18\n  local maxidx19\n  local maxval19\n  local maxidx20\n  local\
    \ maxval20\n  local maxidx21\n  local maxval21\n  local maxidx22\n  local maxval22\n\
    \  local maxidx23\n  local maxval23\n  local maxidx24\n  local maxval24\n  local\
    \ maxidx25\n  local maxval25\n  local maxidx26\n  local maxval26\n  local maxidx27\n\
    \  local maxval27\n  local maxidx28\n  local maxval28\n  local maxidx29\n  local\
    \ maxval29\n  local maxidx30\n  local maxval30\n  local maxidx31\n  local maxval31\n\
    \  local maxidx32\n  local maxval32\n  local maxidx33\n  local maxval33\n  local\
    \ maxidx34\n  local maxval34\n  local maxidx35\n  local maxval35\n  local maxidx36\n\
    \  local maxval36\n  local maxidx37\n  local maxval37\n  local maxidx38\n  local\
    \ maxval38\n  local maxidx39\n  local maxval39\n  local maxidx\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  local element\n\n  for element in $array; do\n    if [ \"$element\" -gt \"\
    $max\" ]; then\n      max=$element\n      maxIndex=$index\n    fi\n    ((index++))\n\
    \  done\n\n  if [ \"$max\" -gt \"$maxIndex\" ]; then\n    return -1\n  else\n\
    \    return $maxIndex\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  local element\n  while (( index < max )); do\n    element=${array[$index]}\
    \ \n    local next_element=${array[$(( index + 1 ))]}\n    if (( element >= next_element\
    \ )); then\n      index=$(( index + 1 ))\n    else\n      break\n    fi\n  done\n\
    \  echo $index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$3\n  local -n j=$4\n\
    \  local -n maxi=$5\n  local -n maxj=$6\n  local -n maxmax=$7\n  local -n maxmaxi=$8\n\
    \  local -n maxmaxj=$9\n  local -n maxmaxmax=$10\n  local -n maxmaxmaxi=$11\n\
    \  local -n maxmaxmaxj=$12\n  local -n maxmaxmaxmax=$13\n  local -n maxmaxmaxmaxi=$14\n\
    \  local -n maxmaxmaxmaxj=$15\n  local -n maxmaxmaxmaxmax=$16\n  local -n maxmaxmaxmaxmaxi=$17\n\
    \  local -n maxmaxmaxmaxmaxj=$18\n  local -n maxmaxmaxmaxmaxmax=$19\n  local -n\
    \ maxmaxmaxmaxmaxmaxi=$20\n  local -n maxmaxmaxmaxmaxmaxj=$21\n  local -n maxmaxmaxmaxmaxmaxmax=$22\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxi=$23\n  local -n maxmaxmaxmaxmaxmaxmaxj=$24\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmax=$25\n  local -n maxmaxmaxmaxmaxmaxmaxmaxi=$26\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmaxj=$27\n  local -n maxmaxmaxmaxmaxmaxmaxmaxmax=$28\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxi=$29\n  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxj=$30\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmax=$31\n  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxi=$32\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxj=$33\n  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax=$34\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxi=$35\n  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxj=$36\n\
    \  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax=$37\n  local -n maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxi=$\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiqglb8h9.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiqglb8h9.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiqglb8h9.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiqglb8h9.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiqglb8h9.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiqglb8h9.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiqglb8h9.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiqglb8h9.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiqglb8h9.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiqglb8h9.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n    local -i\
    \ i\n    local -a candidates\n    candidates=( ${arr[@]:0:max} )\n    for (( i=1;\
    \ i<max; i++ )); do\n        if [[ ${arr[i]} -gt ${candidates[$i]} ]]; then\n\
    \            candidates[$i]=${arr[i]}\n        fi\n    done\n    local -i max=$((\
    \ ${#candidates[@]} - 1 ))\n    if [[ ${#candidates[@]} -eq 0 ]]; then\n     \
    \   echo -1\n    else\n        echo ${max}\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkkgnrh0t.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=(\"$@\")\n  local max=$((${#arr[@]}-1))\n  local i\n  for i in\
    \ $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$((i+1))]} ]]; then\n    \
    \  max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnjvmutjs.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local maxi\n  local\
    \ maxj\n  local maxval\n  local val\n  local imax\n  local jmax\n  local valmax\n\
    \  local imaxj\n  local jmaxi\n  local jmaxj\n  local imaxval\n  local jmaxval\n\
    \  local imaxvalj\n  local jmaxvali\n  local jmaxvalj\n  local imaxvaljmax\n \
    \ local jmaxvalimax\n  local jmaxvaljmax\n  local imaxvaljmaxj\n  local jmaxvalimaxj\n\
    \  local jmaxvaljmaxi\n  local imaxvaljmaxjmax\n  local jmaxvalimaxjmax\n  local\
    \ jmaxvaljmaximax\n  local imaxvaljmaxjmaxi\n  local jmaxvalimaxjmaxi\n  local\
    \ jmaxvaljmaximaxj\n  local imaxvaljmaxjmaximax\n  local jmaxvalimaxjmaximax\n\
    \  local jmaxvaljmaximaxjmax\n  local imaxvaljmaxjmaximaxj\n  local jmaxvalimaxjmaximaxj\n\
    \  local jmaxvaljmaximaxjmaxi\n  local imaxvaljmaxjmaximaxjmax\n  local jmaxvalimaxjmaximaxjmax\n\
    \  local jmaxvaljmaximaxjmaximax\n  local imaxvaljmaxjmaximaxjmaxi\n  local jmaxvalimaxjmaximaxjmaxi\n\
    \  local jmaxvaljmaximaxjmaximaxj\n  local imaxvaljmaxjmaximaxjmaximax\n  local\
    \ jmaxvalimaxjmaximaxjmaximaxj\n  local jmaxvaljmaximaxjmaximaxjmaximax\n  local\
    \ imaxvaljmaxjmaximaxjmaximaxjmaximax\n  local jmaxvalimaxjmaximaxjmaximaxjmaximaxj\n\
    \  local jmaxvaljmaximaxjmaximaxjmaximaxjmaximaxj\n  local imaxvaljmaxjmaximaxjmaximaxj\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$#\" ] && [ \"$max\" -gt\
    \ 0 ]; do\n    local element=\"$array[$index]\"\n    if [ \"$element\" -gt \"\
    $max\" ]; then\n      max=\"$element\"\n      maxIndex=\"$index\"\n    fi\n  \
    \  index=$((index+1))\n  done\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n max=$2\n    local -n idx=$3\n    local\
    \ -n val=$4\n\n    local -n i=$(( ${#arr[@]} - 1 ))\n    local -n j=$(( ${#arr[@]}\
    \ - 1 ))\n    local -n k=$(( ${#arr[@]} - 1 ))\n\n    while (( i <= j )); do\n\
    \        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n            (( i = i + 1 ))\n\
    \        else\n            (( j = j - 1 ))\n        fi\n    done\n\n    while\
    \ (( k >= 0 )); do\n        if [[ ${arr[k]} -gt ${arr[j]} ]]; then\n         \
    \   (( k = k - 1 ))\n        else\n            (( j = j - 1 ))\n        fi\n \
    \   done\n\n    local -n maxIdx=$(( ${i} - 1 ))\n    local -n maxVal=${arr[$maxIdx]}\n\
    \n    if (( ${#arr[@]} > 1 )); then\n        if [[ ${arr[$maxIdx]} -gt ${max}\
    \ ]]; then\n            maxIdx=$(( ${i} - 1 ))\n            maxVal=${arr[$maxIdx]}\n\
    \        fi\n    fi\n\n    local -n maxIdx=$(( ${i} - 1 ))\n    local -n maxVal=${arr[$maxIdx]}\n\
    \n    if (( ${#arr[@]} > 1 )); then\n        if [[ ${arr[$maxIdx]} -gt ${max}\
    \ ]]; then\n            maxIdx=$(( ${i} - 1 ))\n            maxVal=${arr[$maxIdx]}\n\
    \        fi\n    fi\n\n    local -n maxIdx=$(( ${i} - 1 ))\n    local -n maxVal=${arr[$maxIdx]}\n\
    \n    if (( ${#arr[@]} > 1 )); then\n        if [[ ${arr[$maxIdx]} -gt ${max}\
    \ ]]; then\n            maxIdx=$(( ${i} - 1 ))\n            maxVal=${arr[$maxIdx]}\n\
    \        fi\n    fi\n\n    local -n maxIdx=$(( ${i} - 1 ))\n    local -n maxVal=${arr[$maxIdx]}\n\
    \n    if (( ${#arr[@]} > 1 )); then\n        if [[ ${arr[$maxIdx]} -gt ${max}\
    \ ]]; then\n            maxIdx=$(( ${i} - 1 ))\n            maxVal=${arr[$maxIdx]}\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4h29icb7.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmp4h29icb7.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n val=$2\n  local -n max=$3\n  local -n i=$((${#arr[@]}\
    \ - 1))\n  local -n j=$((${#arr[@]} - 1))\n  local -n found\n  local -n maxidx\n\
    \n  while (( i < ${#arr[@]} )); do\n    found=false\n    for (( j=0; j<i; j++\
    \ )); do\n      if [[ ${arr[$j]} -le ${val} ]]; then\n        found=true\n   \
    \     break\n      fi\n    done\n    if [[ ${found} == false ]]; then\n      maxidx=$i\n\
    \      break\n    fi\n    (( i++ ))\n  done\n  echo ${maxidx}\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm2xo5sa2.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpm2xo5sa2.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpm2xo5sa2.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpm2xo5sa2.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmpm2xo5sa2.sh: line 14: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$#\" ] && [ \"$max\" -gt\
    \ \"$index\" ]; then\n    local current=$(( index + 1 ))\n    local currentMax=$((\
    \ current + 1 ))\n    local currentMaxIndex=$(( currentMax + 1 ))\n    local currentMaxValue=$(\
    \ echo \"$array\" | sed -n \"$currentMax,$currentMaxIndexp\" )\n    if [ \"$currentMaxValue\"\
    \ == \"$max\" ]; then\n      max=$currentMaxValue\n      maxIndex=$currentMaxIndex\n\
    \    fi\n    index=$current\n  done\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprymxskqs.sh: line 14: syntax error near unexpected token `then''

    /tmp/tmprymxskqs.sh: line 14: `  while [ "$index" -lt "$#" ] && [ "$max" -lt "$#"
    ] && [ "$max" -gt "$index" ]; then''

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n \
    \   fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4dhiq2sm.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=0\n    local maxIndex=0\n\
    \    local element\n    for element in $array; do\n        if [ \"$element\" -gt\
    \ \"$max\" ]; then\n            max=$(expr \"$element\" \"$max\")\n          \
    \  maxIndex=$index\n        fi\n        ((index++))\n    done\n    if [ \"$max\"\
    \ -gt \"$maxIndex\" ]; then\n        echo \"$maxIndex\"\n    else\n        echo\
    \ \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\n/tmp/tmpa7osec8_.sh:\
    \ line 16: [: : integer expression expected\n/tmp/tmpa7osec8_.sh: line 16: [:\
    \ : integer expression expected\n/tmp/tmpa7osec8_.sh: line 16: [: : integer expression\
    \ expected\n/tmp/tmpa7osec8_.sh: line 16: [: : integer expression expected\n/tmp/tmpa7osec8_.sh:\
    \ line 22: [: : integer expression expected\n"
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  local element\n  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$#\" ];\
    \ do\n    element=\"${array[$index]}\"\n    if [ \"$element\" -gt \"$max\" ];\
    \ then\n      max=\"$element\"\n      maxIndex=\"$index\"\n    fi\n    ((index++))\n\
    \  done\n  if [ \"$max\" -gt \"$#\" ]; then\n    echo \"$maxIndex\"\n  else\n\
    \    echo \"-1\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbicediyl.sh: line 17: [: 1 2 4 3 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local maxIndex=$3\n  local index\n  local\
    \ i\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n\
    \      maxIndex=$index\n    fi\n    index=$((index+1))\n  done\n  echo $maxIndex\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphujmiy6r.sh: line 16: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in ${arr[@]}; do\n   \
    \ if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$(( ${#array} -\
    \ 1 ))\n    local value\n    while (( index < max )); do\n        value=${array:$index:1}\n\
    \        if (( ${#value} > 0 )); then\n            (( index++ ))\n        else\n\
    \            (( index-- ))\n        fi\n    done\n    if (( index == 0 )); then\n\
    \        echo \"-1\"\n    else\n        echo \"$index\"\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  local element\n  while IFS= read -r element; do\n    if [[ \"$element\" -gt\
    \ \"$max\" ]]; then\n      max=\"$element\"\n      maxIndex=\"$index\"\n    fi\n\
    \    ((index++))\n  done\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660034468
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local -i i\n \
    \ for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]; then\n      max=$j\n    fi\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfxlu1hrb.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n maxval=$4\n\
    \  local -n idx=$5\n  local -n val=$6\n\n  local -n maxidx=$(( ${maxidx} + 1 ))\n\
    \  local -n maxval=$(( ${maxval} + 1 ))\n\n  while (( ${idx} <= ${#arr[@]} ));\
    \ do\n    local -n val=${arr[idx]}\n    if (( ${val} <= ${maxval} )); then\n \
    \     maxidx=${idx}\n      maxval=${val}\n    fi\n    (( idx = idx + 1 ))\n  done\n\
    \n  echo \"${maxidx}\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp865qekzp.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp865qekzp.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp865qekzp.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp865qekzp.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp865qekzp.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp865qekzp.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp865qekzp.sh: line 17: local: `1'': invalid variable name for name reference

    /tmp/tmp865qekzp.sh: line 18: local: `1'': invalid variable name for name reference

    /tmp/tmp865qekzp.sh: line 20: ((: <= 0 : syntax error: operand expected (error
    token is "<= 0 ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n idx=$4\n\
    \  local -n val=$5\n  local -n validx=$6\n  local -n idx2=$7\n  local -n val2=$8\n\
    \  local -n idx3=$9\n  local -n val3=${10}\n  local -n idx4=${11}\n  local -n\
    \ val4=${12}\n  local -n idx5=${13}\n  local -n val5=${14}\n  local -n idx6=${15}\n\
    \  local -n val6=${16}\n  local -n idx7=${17}\n  local -n val7=${18}\n  local\
    \ -n idx8=${19}\n  local -n val8=${20}\n  local -n idx9=${21}\n  local -n val9=${22}\n\
    \  local -n idx10=${23}\n  local -n val10=${24}\n  local -n idx11=${25}\n  local\
    \ -n val11=${26}\n  local -n idx12=${27}\n  local -n val12=${28}\n  local -n idx13=${29}\n\
    \  local -n val13=${30}\n  local -n idx14=${31}\n  local -n val14=${32}\n  local\
    \ -n idx15=${33}\n  local -n val15=${34}\n  local -n idx16=${35}\n  local -n val16=${36}\n\
    \  local -n idx17=${37}\n  local -n val17=${38}\n  local -n idx18=${39}\n  local\
    \ -n val18=${40}\n  local -n idx19=${41}\n  local -n val19=${42}\n  local -n idx20=${43}\n\
    \  local -n val20=${44}\n  local -n idx21=${45}\n  local -n val21=${46}\n  local\
    \ -n idx22=${47}\n  local -n val22=${48}\n  local -n idx23=${49}\n  local -n val23=${50}\n\
    \  local -n idx24=${51}\n  local -n val24=${52}\n  local -n idx\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu_9e9ud5.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpu_9e9ud5.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpu_9e9ud5.sh: line 41: local: '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$(( ${#array[@]}\
    \ - 1 ))\n    for (( index=0; index<${#array[@]}; index++ )); do\n        if [[\
    \ ${array[$index]} -gt ${array[$(( index + 1 ))]} ]]; then\n            max=$(expr\
    \ ${max} + 1)\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7q8qh8r2.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  while [ $index -lt ${#array} ]; do\n    if [[ ${array[$index]} -gt ${array[$maxIndex]}\
    \ ]]; then\n      maxIndex=$index\n      max=$array[$index]\n    fi\n    index=$((index+1))\n\
    \  done\n  if [[ ${maxIndex} -eq 0 ]]; then\n    return -1\n  else\n    return\
    \ $maxIndex\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpoamit4_6.sh: line 15: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxi=$(( ${#max[@]} - 1 ))\n \
    \ local -n maxj=$(( ${#max[@]} - 1 ))\n  local -n maxval=$(( ${#max[@]} - 1 ))\n\
    \  while (( ${#arr[@]} > 0 )); do\n    local -n val=${arr[i]}\n    local -n val2=${arr[j]}\n\
    \    if (( val > val2 )); then\n      max[i]=${arr[i]}\n      max[j]=${arr[j]}\n\
    \      max[i]=${max[i]}\n      max[j]=${max[j]}\n      (( i++ ))\n      (( j--\
    \ ))\n    elif (( val < val2 )); then\n      max[i]=${arr[j]}\n      max[j]=${arr[i]}\n\
    \      max[i]=${max[i]}\n      max[j]=${max[j]}\n      (( j-- ))\n    else\n \
    \     (( i++ ))\n      (( j-- ))\n    fi\n  done\n  (( ${#max[@]} > 0 ))\n  ((\
    \ ${#max[@]} > maxi ))\n  (( ${#max[@]} > maxj ))\n  (( ${#max[@]} > maxval ))\n\
    \  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n  ((\
    \ ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]}\
    \ > 0 ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0\
    \ ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} > 0 ))\n\
    \  (( ${#max[@]} > 0 ))\n  (( ${#max[@]} \n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfi_jvyaa.sh: line 56: unexpected EOF while looking for matching
    `)''

    /tmp/tmpfi_jvyaa.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local k\n  local\
    \ len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local tmp\n\
    \  local maxidx2\n  local maxval2\n  local idx\n  local val2\n  local maxidx2\n\
    \  local maxval2\n  local idx2\n  local val2\n  local maxidx2\n  local maxval2\n\
    \  local idx3\n  local val3\n  local maxidx3\n  local maxval3\n  local idx4\n\
    \  local val4\n  local maxidx4\n  local maxval4\n  local idx5\n  local val5\n\
    \  local maxidx5\n  local maxval5\n  local idx6\n  local val6\n  local maxidx6\n\
    \  local maxval6\n  local idx7\n  local val7\n  local maxidx7\n  local maxval7\n\
    \  local idx8\n  local val8\n  local maxidx8\n  local maxval8\n  local idx9\n\
    \  local val9\n  local maxidx9\n  local maxval9\n  local idx10\n  local val10\n\
    \  local maxidx10\n  local maxval10\n  local idx11\n  local val11\n  local maxidx11\n\
    \  local maxval11\n  local idx12\n  local val12\n  local maxidx12\n  local maxval12\n\
    \  local idx13\n  local val13\n  local maxidx13\n  local maxval13\n  local idx14\n\
    \  local val14\n  local maxidx14\n  local maxval14\n  local idx15\n  local val15\n\
    \  local maxidx15\n  local maxval15\n  local idx16\n  local val16\n  local maxidx16\n\
    \  local maxval16\n  local idx17\n  local val17\n  local maxidx17\n  local maxval17\n\
    \  local idx18\n  local val18\n  local maxidx18\n  local maxval18\n  local idx19\n\
    \  local val19\n  local maxidx19\n  local maxval19\n  local idx20\n  local val20\n\
    \  local maxidx20\n  local maxval20\n  local idx21\n  local val21\n\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}-1))\
    \ ); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n    fi\n\
    \  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpehh5ocel.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while [ $index -lt $max ]; do\n    local element=${array[$index]};\n    local\
    \ next=${array[$(( index + 1 ))]};\n    if [ \"$element\" -gt \"$next\" ]; then\n\
    \      index=$(( index + 1 ));\n    else\n      return $index;\n    fi\n  done\n\
    \  return -1;\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxIndex=$3\n  local -n\
    \ index=$4\n  local -n element=$5\n  local -n i=$6\n  local -n j=$7\n  local -n\
    \ elements=$8\n\n  (( index == ${#arr[@]} )) && return -1\n  (( index == 0 ))\
    \ && return 0\n\n  while (( i < ${#arr[@]} )) ; do\n    (( i == 0 )) && return\
    \ 0\n    (( arr[i] <= element )) && return 0\n    (( arr[i] > element )) && return\
    \ -1\n    (( arr[i] == element )) && return 0\n    (( arr[i] > max )) && return\
    \ -1\n    (( arr[i] > maxIndex )) && return -1\n    (( arr[i] > index )) && return\
    \ -1\n    (( arr[i] > elements )) && return -1\n    (( arr[i] > j )) && return\
    \ -1\n    (( arr[i] > i )) && return -1\n    (( arr[i] > elements )) && return\
    \ -1\n    (( arr[i] > j )) && return -1\n    (( arr[i] > i )) && return -1\n \
    \   (( arr[i] > elements )) && return -1\n    (( arr[i] > j )) && return -1\n\
    \    (( arr[i] > i )) && return -1\n    (( arr[i] > elements )) && return -1\n\
    \    (( arr[i] > j )) && return -1\n    (( arr[i] > i )) && return -1\n    ((\
    \ arr[i] > elements )) && return -1\n    (( arr[i] > j )) && return -1\n    ((\
    \ arr[i] > i )) && return -1\n    (( arr[i] > elements )) && return -1\n    ((\
    \ arr[i] > j )) && return -1\n    (( arr[i] > i )) && return -1\n    (( arr[i]\
    \ > elements )) && return -1\n    (( arr[i] > j )) && return -1\n    (( arr[i]\
    \ > i )) && return -1\n    (( arr[i] > elements )) && return -1\n    (( arr[i]\
    \ > j )) && return -1\n    (( arr[i] > i )) && return -1\n    (( arr[i] > elements\
    \ )) && return -1\n    (( arr[i] > j )) && return -1\n    (( arr[i] > i )) &&\
    \ return -1\n    (( arr[i] > elements )) && return -1\n    (( arr[i] > j )) &&\
    \ return -1\n    (( arr[i] > i )) && return -1\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp44qtxsfs.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmp44qtxsfs.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array}-1))\n\
    \    local value\n    while (( index < max )); do\n        value=${array:$index:1}\n\
    \        if (( value <= ${array:$((index-1)):1} )); then\n            index=$(expr\
    \ $index + 1)\n        else\n            index=-1\n        fi\n    done\n    return\
    \ $index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=23 encoding='utf-8'>
  timestamp: 1660034468
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  while (( ${#arr[@]} > 0 )); do\n    local\
    \ -n val=${arr[i]}\n    local -n val2=${arr[j]}\n    if (( val2 <= val )); then\n\
    \      arr[i]=${arr[j]}\n      arr[j]=${arr[i]}\n      (( i++, j-- ))\n    else\n\
    \      (( i-- ))\n    fi\n  done\n  echo ${max}\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3r1xjp02.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp3r1xjp02.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp3r1xjp02.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmp3r1xjp02.sh: line 13: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array[@]}\
    \ - 1))\n    for (( i=1; i<${#array[@]}; i++ )); do\n        if [[ ${array[$i]}\
    \ -gt ${array[$index]}  ]]; then\n            index=i\n        fi\n    done\n\
    \    if [[ ${array[$index]} -eq ${array[$max]} ]]; then\n        echo \"$max\"\
    \n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphvxuo3jl.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n  local -n maxprev=$8\n\
    \  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local -n maxmaxprev=$11\n\
    \  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n\
    \  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxval=$16\n  local -n maxmaxmaxprev=$17\n\
    \  local -n maxmaxmaxmaxidx=$18\n  local -n maxmaxmaxval=$19\n  local -n maxmaxmaxprev=$20\n\
    \  local -n maxmaxmaxmaxidx=$21\n  local -n maxmaxmaxval=$22\n  local -n maxmaxmaxprev=$23\n\
    \  local -n maxmaxmaxmaxidx=$24\n  local -n maxmaxmaxval=$25\n  local -n maxmaxmaxprev=$26\n\
    \  local -n maxmaxmaxmaxidx=$27\n  local -n maxmaxmaxval=$28\n  local -n maxmaxmaxprev=$29\n\
    \  local -n maxmaxmaxmaxidx=$30\n  local -n maxmaxmaxval=$31\n  local -n maxmaxmaxprev=$32\n\
    \  local -n maxmaxmaxmaxidx=$33\n  local -n maxmaxmaxval=$34\n  local -n maxmaxmaxprev=$35\n\
    \  local -n maxmaxmaxmaxidx=$36\n  local -n maxmaxmaxval=$37\n  local -n maxmaxmaxprev=$38\n\
    \  local -n maxmaxmaxmaxidx=$39\n  local -n maxmaxmaxval=$40\n  local -n maxmaxmaxprev=$41\n\
    \  local -n maxmaxmaxmaxidx=$42\n  local -n maxmaxmaxval=$43\n  local -n maxmaxmaxprev=$44\n\
    \  local -n maxmaxmaxmaxidx=$45\n  local -n maxmaxmaxval=$46\n  local -n maxmaxmaxprev=$47\n\
    \  local -n maxmaxmaxmax\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiin6jphu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiin6jphu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array[@]} - 1))\n\
    \  while (( index < max )); do\n    local element=${array[index]}\n    local next=${array[index\
    \ + 1]}\n    if (( element > next )); then\n      max=$index\n    fi\n    (( index\
    \ += 1 ))\n  done\n  (( max > 0 )) && return $max\n  return -1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n i\n  local -n j\n  local -n len=${#arr[@]}\n  local -n maxlen=${#max[@]}\n\
    \  local -n maxidx=${#idx[@]}\n  local -n maxval=${#val[@]}\n  local -n maxidx2\n\
    \  local -n maxval2\n  local -n maxidx3\n  local -n maxval3\n  local -n maxidx4\n\
    \  local -n maxval4\n  local -n maxidx5\n  local -n maxval5\n  local -n maxidx6\n\
    \  local -n maxval6\n  local -n maxidx7\n  local -n maxval7\n  local -n maxidx8\n\
    \  local -n maxval8\n  local -n maxidx9\n  local -n maxval9\n  local -n maxidx10\n\
    \  local -n maxval10\n  local -n maxidx11\n  local -n maxval11\n  local -n maxidx12\n\
    \  local -n maxval12\n  local -n maxidx13\n  local -n maxval13\n  local -n maxidx14\n\
    \  local -n maxval14\n  local -n maxidx15\n  local -n maxval15\n  local -n maxidx16\n\
    \  local -n maxval16\n  local -n maxidx17\n  local -n maxval17\n  local -n maxidx18\n\
    \  local -n maxval18\n  local -n maxidx19\n  local -n maxval19\n  local -n maxidx20\n\
    \  local -n maxval20\n  local -n maxidx21\n  local -n maxval21\n  local -n maxidx22\n\
    \  local -n maxval22\n  local -n maxidx23\n  local -n maxval23\n  local -n maxidx24\n\
    \  local -n maxval24\n  local -n maxidx25\n  local -n maxval25\n  local -n maxidx26\n\
    \  local -n maxval26\n  local -n maxidx27\n  local -n maxval27\n  local -n max\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg_qvyhkt.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpg_qvyhkt.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpg_qvyhkt.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpg_qvyhkt.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpg_qvyhkt.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmpg_qvyhkt.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpg_qvyhkt.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmpg_qvyhkt.sh: line 19: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n  local -n maxprev=$8\n\
    \  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local -n maxmaxprev=$11\n\
    \  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n\
    \  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxval=$16\n  local -n maxmaxmaxprev=$17\n\
    \  local -n maxmaxmaxmaxidx=$18\n  local -n maxmaxmaxval=$19\n  local -n maxmaxmaxprev=$20\n\
    \  local -n maxmaxmaxmaxidx=$21\n  local -n maxmaxmaxval=$22\n  local -n maxmaxmaxprev=$23\n\
    \  local -n maxmaxmaxmaxidx=$24\n  local -n maxmaxmaxval=$25\n  local -n maxmaxmaxprev=$26\n\
    \  local -n maxmaxmaxmaxidx=$27\n  local -n maxmaxmaxval=$28\n  local -n maxmaxmaxprev=$29\n\
    \  local -n maxmaxmaxmaxidx=$30\n  local -n maxmaxmaxval=$31\n  local -n maxmaxmaxprev=$32\n\
    \  local -n maxmaxmaxmaxidx=$33\n  local -n maxmaxmaxval=$34\n  local -n maxmaxmaxprev=$35\n\
    \  local -n maxmaxmaxmaxidx=$36\n  local -n maxmaxmaxval=$37\n  local -n maxmaxmaxprev=$38\n\
    \  local -n maxmaxmaxmaxidx=$39\n  local -n maxmaxmaxval=$40\n  local -n maxmaxmaxprev=$41\n\
    \  local -n maxmaxmaxmaxidx=$42\n  local -n maxmaxmaxval=$43\n  local -n maxmaxmaxprev=$44\n\
    \  local -n maxmaxmaxmaxidx=$45\n  local -n maxmaxmaxval=$46\n  local -n maxmaxmaxprev=$47\n\
    \  local -n maxmaxmaxmax\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiin6jphu.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpiin6jphu.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpiin6jphu.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpiin6jphu.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmpiin6jphu.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]} - 1 ))\n\
    \  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxi=$(( ${#max[@]} - 1 ))\n \
    \ local -n maxj=$(( ${#max[@]} - 1 ))\n  while (( i < ${#arr[@]} )) ; do\n   \
    \ if (( ${arr[i]} <= ${max[i]} )) ; then\n      (( i++ ))\n    else\n      ((\
    \ j-- ))\n      (( max[i]=${arr[i]} ))\n      (( max[j]=${arr[j]} ))\n      ((\
    \ maxi=$(( ${#max[@]} - 1 )) ))\n      (( maxj=$(( ${#max[@]} - 1 )) ))\n    fi\n\
    \  done\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n  (( ${#max[@]} > ${#arr[@]}\
    \ )) && return -1\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n  (( ${#max[@]}\
    \ > ${#arr[@]} )) && return -1\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n\
    \  (( ${#max[@]} > ${#arr[@]} )) && return -1\n  (( ${#max[@]} > ${#arr[@]} ))\
    \ && return -1\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n  (( ${#max[@]}\
    \ > ${#arr[@]} )) && return -1\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n\
    \  (( ${#max[@]} > ${#arr[@]} )) && return -1\n  (( ${#max[@]} > ${#arr[@]} ))\
    \ && return -1\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n  (( ${#max[@]}\
    \ > ${#arr[@]} )) && return -1\n  (( ${#max[@]} > ${#arr[@]} )) && return -1\n\
    \  (( ${#\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpacakg0ji.sh: line 42: unexpected EOF while looking for matching
    `)''

    /tmp/tmpacakg0ji.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n val=$2\n  local -n max=$3\n  local -n i=$((${#arr[@]}\
    \ - 1))\n  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=$((${#arr[@]} -\
    \ 1))\n  local -n maxVal=${arr[$maxIndex]}\n  while (( i < j )); do\n    if [[\
    \ ${arr[$i]} -gt ${maxVal} ]]; then\n      maxIndex=$i\n      maxVal=${arr[$i]}\n\
    \    fi\n    (( i++ ))\n  done\n  if (( maxIndex == $((${#arr[@]} - 1)) )) ; then\n\
    \    return -1\n  fi\n  (( maxIndex-- ))\n  while (( i < j )); do\n    if [[ ${arr[$i]}\
    \ -eq ${maxVal} ]]; then\n      (( maxIndex-- ))\n      maxVal=${arr[$i]}\n  \
    \  fi\n    (( i++ ))\n  done\n  echo $maxIndex\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa6shrdxb.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpa6shrdxb.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpa6shrdxb.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpa6shrdxb.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmpa6shrdxb.sh: line 14: local: `-1'': invalid variable name for name reference

    /tmp/tmpa6shrdxb.sh: line 15: local: `-1'': invalid variable name for name reference

    /tmp/tmpa6shrdxb.sh: line 16: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  local element\n  while (( index < max )); do\n    element=\"${array[index]}\"\
    \n    local next=$(( index + 1 ))\n    while (( next < max )); do\n      if [[\
    \ \"${array[$next]}\" -gt \"${element}\" ]]; then\n        element=\"${array[$next]}\"\
    \n      else\n        break\n      fi\n      next=$(( next + 1 ))\n    done\n\
    \    if [[ -n \"${element}\" ]]; then\n      index=$(( index + 1 ))\n      max=$((\
    \ ${#array[@]} - 1 ))\n      break\n    fi\n  done\n  echo \"${index}\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array[@]}\
    \ - 1))\n    while (( index < max )); do\n        if [[ ${array[$index]} -gt ${array[$((\
    \ index + 1 ))]} ]]; then\n            (( index = index + 1 ))\n        else\n\
    \            (( max = max ))\n        fi\n    done\n    return $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n    local maxIndex\n\
    \    local maxVal\n    local val\n    local val2\n    local val3\n    local val4\n\
    \    local val5\n    local val6\n    local val7\n    local val8\n    local val9\n\
    \    local val10\n    local val11\n    local val12\n    local val13\n    local\
    \ val14\n    local val15\n    local val16\n    local val17\n    local val18\n\
    \    local val19\n    local val20\n    local val21\n    local val22\n    local\
    \ val23\n    local val24\n    local val25\n    local val26\n    local val27\n\
    \    local val28\n    local val29\n    local val30\n    local val31\n    local\
    \ val32\n    local val33\n    local val34\n    local val35\n    local val36\n\
    \    local val37\n    local val38\n    local val39\n    local val40\n    local\
    \ val41\n    local val42\n    local val43\n    local val44\n    local val45\n\
    \    local val46\n    local val47\n    local val48\n    local val49\n    local\
    \ val50\n    local val51\n    local val52\n    local val53\n    local val54\n\
    \    local val55\n    local val56\n    local val57\n    local val58\n    local\
    \ val59\n    local val60\n    local val61\n    local val62\n    local val63\n\
    \    local val64\n    local val65\n    local val66\n    local val67\n    local\
    \ val68\n    local val69\n    local val70\n    local val71\n    local val72\n\
    \    local val73\n    local val74\n    local val75\n    local val76\n    local\
    \ val77\n    local val78\n    local val79\n    local val80\n    local val81\n\
    \    local val82\n    local val83\n    local val84\n    local val85\n    local\
    \ val86\n    local val87\n    local val88\n    local val89\n    local val90\n\
    \    local val91\n    local val92\n    local val93\n    local val94\n    local\
    \ val95\n    local val96\n    local val\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=-1\n  while (( ${i} > 0\
    \ )); do\n    local -n key=${arr[i]}\n    if (( ${key} <= ${max} )); then\n  \
    \    maxIndex=$i\n      break\n    fi\n    (( i-- ))\n  done\n  while (( ${j}\
    \ > 0 )); do\n    local -n key=${arr[j]}\n    if (( ${key} <= ${max} )); then\n\
    \      maxIndex=$j\n      break\n    fi\n    (( j-- ))\n  done\n  (( ${maxIndex}\
    \ < 0 )) && return -1\n  (( ${maxIndex} > ${#arr[@]} - 1 )) && return -1\n  ((\
    \ ${maxIndex} != ${i} )) && return -1\n  (( ${maxIndex} != ${j} )) && return -1\n\
    \  (( ${maxIndex} != ${maxIndex} )) && return -1\n  (( ${maxIndex} != ${maxIndex}\
    \ )) && return -1\n  return ${maxIndex}\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvhwcy1n5.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpvhwcy1n5.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpvhwcy1n5.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmpvhwcy1n5.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmpvhwcy1n5.sh: line 14: local: `-1'': invalid variable name for name reference

    /tmp/tmpvhwcy1n5.sh: line 15: ((: > 0 : syntax error: operand expected (error
    token is "> 0 ")

    /tmp/tmpvhwcy1n5.sh: line 23: ((: > 0 : syntax error: operand expected (error
    token is "> 0 ")

    /tmp/tmpvhwcy1n5.sh: line 31: ((: < 0 : syntax error: operand expected (error
    token is "< 0 ")

    /tmp/tmpvhwcy1n5.sh: line 32: ((: > 0 - 1 : syntax error: operand expected (error
    token is "> 0 - 1 ")

    /tmp/tmpvhwcy1n5.sh: line 33: ((: !=  : syntax error: operand expected (error
    token is "!=  ")

    /tmp/tmpvhwcy1n5.sh: line 34: ((: !=  : syntax error: operand expected (error
    token is "!=  ")

    /tmp/tmpvhwcy1n5.sh: line 35: ((: !=  : syntax error: operand expected (error
    token is "!=  ")

    /tmp/tmpvhwcy1n5.sh: line 36: ((: !=  : syntax error: operand expected (error
    token is "!=  ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  while (( ${#arr[@]} > 0 )); do\n    local\
    \ -n val=${arr[i]}\n    local -n prev=${arr[j]}\n    if (( val > prev )); then\n\
    \      arr[i]=${val}\n      arr[j]=${prev}\n      (( i++ ))\n      (( j-- ))\n\
    \    else\n      (( j-- ))\n    fi\n  done\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\"\
    \ )\n  local -n max=${arr[i]}\n  (( i++ ))\n  (( j-- ))\n  (( ${#arr[@]} > 0 ));\
    \ arr=( \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]}\
    \ > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n\
    \  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=(\
    \ \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]}\
    \ > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n\
    \  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=(\
    \ \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]}\
    \ > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n\
    \  (( ${#arr[@]} > 0 )); arr=( \"${arr[@]}\" )\n  (( ${#arr[@]\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2hdb1iga.sh: line 45: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2hdb1iga.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array[@]}\
    \ - 1))\n    local maxIndex=0\n    local element\n    for element in \"${array[@]}\"\
    ; do\n        if [[ $element -gt $max ]]; then\n            index=$(expr $index\
    \ + 1)\n        fi\n        if [[ $element -le $max ]]; then\n            index=$(expr\
    \ $index - 1)\n        fi\n        if [[ $element -eq $max ]]; then\n        \
    \    if [[ $maxIndex -eq 0 ]]; then\n                maxIndex=$index\n       \
    \     else\n                if [[ $maxIndex -ne $index ]]; then\n            \
    \        maxIndex=$index\n                fi\n            fi\n        fi\n   \
    \ done\n    echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj1za8njt.sh: line 16: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpj1za8njt.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpj1za8njt.sh: line 22: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -n val=$2\n    local -n max=$3\n    local\
    \ -n i=$((${#arr[@]} - 1))\n    local -n j=$((${#arr[@]} - 1))\n    while (( i\
    \ < j )); do\n        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n            (( max\
    \ = i ))\n        else\n            (( max = j ))\n        fi\n        (( i =\
    \ i + 1 ))\n        (( j = j - 1 ))\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph3gnvlza.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmph3gnvlza.sh: line 11: local: `'': not a valid identifier

    /tmp/tmph3gnvlza.sh: line 12: local: `'': not a valid identifier

    /tmp/tmph3gnvlza.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmph3gnvlza.sh: line 14: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=$1\n    local index=0\n    local max=$2\n    local element\n\
    \    local value\n    local count\n    local i\n    for element in ${array[@]};\
    \ do\n        value=$element\n        count=0\n        for (( i=1; i<${#array[@]};\
    \ i++ )); do\n            if [[ ${array[i]} -le $value ]]; then\n            \
    \    value=${array[i]}\n                count=$i\n            fi\n        done\n\
    \        if [[ $count -gt $max ]]; then\n            max=${count}\n        fi\n\
    \    done\n    echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n maxval=$4\n\
    \  local -n idx=$5\n  local -n val=$6\n  local -n maxidxval=$7\n  local -n maxidxvalidx=$8\n\
    \  local -n maxidxvalval=$9\n  local -n maxidxvalvalidx=$10\n  local -n maxidxvalvalval=$11\n\
    \  local -n maxidxvalvalvalidx=$12\n  local -n maxidxvalvalvalval=$13\n  local\
    \ -n maxidxvalvalvalvalidx=$14\n  local -n maxidxvalvalvalvalval=$15\n  local\
    \ -n maxidxvalvalvalvalvalidx=$16\n  local -n maxidxvalvalvalvalvalval=$17\n \
    \ local -n maxidxvalvalvalvalvalvalidx=$18\n  local -n maxidxvalvalvalvalvalvalval=$19\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$20\n  local -n maxidxvalvalvalvalvalvalval=$21\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$22\n  local -n maxidxvalvalvalvalvalvalval=$23\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$24\n  local -n maxidxvalvalvalvalvalvalval=$25\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$26\n  local -n maxidxvalvalvalvalvalvalval=$27\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$28\n  local -n maxidxvalvalvalvalvalvalval=$29\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$30\n  local -n maxidxvalvalvalvalvalvalval=$31\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$32\n  local -n maxidxvalvalvalvalvalvalval=$33\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$34\n  local -n maxidxvalvalvalvalvalvalval=$35\n\
    \  local -n maxidxvalvalvalvalvalvalidx=$36\n  local -n maxidxvalvalvalvalvalvalval=$37\n\
    \  local \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3rjqp4wd.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp3rjqp4wd.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp3rjqp4wd.sh: line 19: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 20: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 21: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 22: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 23: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 24: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 25: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 26: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 27: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 28: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp3rjqp4wd.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp3rjqp4wd.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp3rjqp4wd.sh: line 31: local: `2'': invalid variable name for name reference

    /tmp/tmp3rjqp4wd.sh: line 32: local: `3'': invalid variable name for name reference

    /tmp/tmp3rjqp4wd.sh: line 33: local: `4'': invalid variable name for name reference

    /tmp/tmp3rjqp4wd.sh: line 34: local: `5'': invalid variable name for name reference

    /tmp/tmp3rjqp4wd.sh: line 3'
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local maxIndex=0\n\
    \  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$#\" ] && [ \"$max\" -gt\
    \ \"$index\" ]; then\n    local current=$array[$index]\n    local previous=$array[$maxIndex]\n\
    \    if [ \"$current\" -gt \"$previous\" ]; then\n      max=$current\n      maxIndex=$index\n\
    \    fi\n    index=$((index+1))\n  done\n  echo \"$maxIndex\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd5qxbbn6.sh: line 14: syntax error near unexpected token `then''

    /tmp/tmpd5qxbbn6.sh: line 14: `  while [ "$index" -lt "$#" ] && [ "$max" -lt "$#"
    ] && [ "$max" -gt "$index" ]; then''

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=$1\n  local index=0\n  local max=0\n  local maxIndex=0\n  local\
    \ value\n  while (( index < ${#array} )); do\n    value=${array:$index:1}\n  \
    \  if (( ${value} <= ${array:$maxIndex:1} )); then\n      max=${value}\n     \
    \ maxIndex=$index\n    fi\n    (( index++ ))\n  done\n  echo \"$maxIndex\"\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmperhg5_oq.sh: line 17: ((: <= 1 : syntax error: operand expected
    (error token is "<= 1 ")

    /tmp/tmperhg5_oq.sh: line 17: ((: <= 1 : syntax error: operand expected (error
    token is "<= 1 ")

    /tmp/tmperhg5_oq.sh: line 17: ((: <= 1 : syntax error: operand expected (error
    token is "<= 1 ")

    /tmp/tmperhg5_oq.sh: line 17: ((: <= 1 : syntax error: operand expected (error
    token is "<= 1 ")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=$((${#arr[@]} - 1))\n \
    \ while (( ${#arr[@]} > 0 )); do\n    local -n val=${arr[i]}\n    if (( val >\
    \ max )); then\n      max=${val}\n      maxIndex=$i\n    fi\n    (( i++ ))\n \
    \   (( j-- ))\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprn9bcivv.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmprn9bcivv.sh: line 11: local: `'': not a valid identifier

    /tmp/tmprn9bcivv.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmprn9bcivv.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmprn9bcivv.sh: line 14: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]} - 1))\n\
    \  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=$((${#arr[@]} - 1))\n \
    \ while (( i < ${#arr[@]} )); do\n    local -n val=${arr[i]}\n    if (( val >\
    \ max )); then\n      max=${val}\n      maxIndex=$i\n    fi\n    (( i++ ))\n \
    \ done\n  while (( j < ${#arr[@]} )); do\n    local -n val=${arr[j]}\n    if ((\
    \ val > max )); then\n      max=${val}\n      maxIndex=$j\n    fi\n    (( j--\
    \ ))\n  done\n  echo $maxIndex\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl1vnurdg.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpl1vnurdg.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpl1vnurdg.sh: line 12: local: `-1'': invalid variable name for name reference

    /tmp/tmpl1vnurdg.sh: line 13: local: `-1'': invalid variable name for name reference

    /tmp/tmpl1vnurdg.sh: line 14: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n    local -i\
    \ i\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        if [[ ${arr[$i]} -gt ${arr[$max]}\
    \ ]]; then\n            max=i\n        fi\n    done\n    if [[ ${max} -eq ${#arr[@]}\
    \ ]]; then\n        echo -1\n    else\n        echo ${max}\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpukubw5qe.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n \
    \   fi\n  done\n  if [[ ${max} -le 0 ]]; then\n    return -1\n  else\n    return\
    \ $((${#arr[@]} - 1))\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpepe0ha9p.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array[@]} - 1 ))\n\
    \  while (( index < max )); do\n    local element=${array[index]}\n    local next=${array[index+1]}\n\
    \    if (( element <= next )); then\n      index=$(( index + 1 ))\n    else\n\
    \      break\n    fi\n  done\n  echo $index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n maxval=$4\n\
    \  local -n idx=$5\n\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local\
    \ -n idx\n  local -n val\n  local -n idx\n  local -n val\n  local -n idx\n  local\
    \ \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmputs_bb4f.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmputs_bb4f.sh: line 11: local: `'': not a valid identifier

    /tmp/tmputs_bb4f.sh: line 12: local: `'': not a valid identifier

    /tmp/tmputs_bb4f.sh: line 13: local: `'': not a valid identifier

    /tmp/tmputs_bb4f.sh: line 14: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local k\n  local\
    \ len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local val2\n\
    \  local val3\n  local val4\n  local val5\n  local val6\n  local val7\n  local\
    \ val8\n  local val9\n  local val10\n  local val11\n  local val12\n  local val13\n\
    \  local val14\n  local val15\n  local val16\n  local val17\n  local val18\n \
    \ local val19\n  local val20\n  local val21\n  local val22\n  local val23\n  local\
    \ val24\n  local val25\n  local val26\n  local val27\n  local val28\n  local val29\n\
    \  local val30\n  local val31\n  local val32\n  local val33\n  local val34\n \
    \ local val35\n  local val36\n  local val37\n  local val38\n  local val39\n  local\
    \ val40\n  local val41\n  local val42\n  local val43\n  local val44\n  local val45\n\
    \  local val46\n  local val47\n  local val48\n  local val49\n  local val50\n \
    \ local val51\n  local val52\n  local val53\n  local val54\n  local val55\n  local\
    \ val56\n  local val57\n  local val58\n  local val59\n  local val60\n  local val61\n\
    \  local val62\n  local val63\n  local val64\n  local val65\n  local val66\n \
    \ local val67\n  local val68\n  local val69\n  local val70\n  local val71\n  local\
    \ val72\n  local val73\n  local val74\n  local val75\n  local val76\n  local val77\n\
    \  local val78\n  local val79\n  local val80\n  local val81\n  local val82\n \
    \ local val83\n  local val84\n  local val85\n  local val86\n  local val87\n  local\
    \ val88\n  local val89\n  local val90\n  local val91\n  local val92\n  local val93\n\
    \  local val94\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local -n val=$4\n\
    \  local -n prev=$5\n  local -n i\n  local -n j\n  local -n len\n\n  len=${#arr[@]}\n\
    \  idx=${#max[@]}\n  prev=${#max[@]}\n\n  for i in $(seq 0 $((len-1)) ); do\n\
    \    local -n val=${arr[i]}\n    local -n idx=${max[i]}\n    local -n prev=${max[i-1]}\n\
    \n    if [ $val -gt $prev ]; then\n      max[i]=$val\n      idx=$i\n    fi\n \
    \ done\n\n  if [ $idx -eq $prev ]; then\n    return -1\n  fi\n\n  max[$idx]=$val\n\
    \  idx=$((idx+1))\n\n  for i in $(seq 0 $((len-1)) ); do\n    local -n val=${arr[i]}\n\
    \    local -n idx=${max[i]}\n    local -n prev=${max[i-1]}\n\n    if [ $val -gt\
    \ $prev ]; then\n      max[i]=$val\n      idx=$i\n    fi\n  done\n\n  if [ $idx\
    \ -eq $prev ]; then\n    return -1\n  fi\n\n  max[$idx]=$val\n  idx=$((idx+1))\n\
    \n  for i in $(seq 0 $((len-1)) ); do\n    local -n val=${arr[i]}\n    local -n\
    \ idx=${max[i]}\n    local -n prev=${max[i-1]}\n\n    if [ $val -gt $prev ]; then\n\
    \      max[i]=$val\n      idx=$i\n    fi\n  done\n\n  if [ $idx -eq $prev ]; then\n\
    \    return -1\n  fi\n\n  max[$idx]=$val\n  idx=$((idx+1))\n\n  for i in $(seq\
    \ 0 $((len-1)) ); do\n    local -n val=${arr[i]}\n    local -n idx=${max[i]}\n\
    \    local -n prev=${max[i-1]}\n\n    if [ $val -gt $prev ]; then\n      max[i]=$val\n\
    \      idx=$i\n    fi\n  done\n\n  if [ $idx -eq $prev ]; then\n    return -1\n\
    \  fi\n\n  max[$idx]=$val\n  idx=$((idx+1))\n\n  for i in $(seq 0 $((len-1)) );\
    \ do\n    local -n val=${arr[i]}\n    local -n idx=${max\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpts1po2qc.sh: line 114: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local array=\"$1\"\n    local index=0\n    local max=$(( ${#array[@]}\
    \ - 1 ))\n    for (( index=0; index<${#array[@]}; index++ )); do\n        if [[\
    \ ${array[$index]} -gt ${array[$max]} ]]; then\n            max=index\n      \
    \  fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuhr9n48v.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n  local -n maxval=$4\n\
    \  local -n idx=$5\n  local -n val=$6\n  local -n idx2=$7\n  local -n val2=$8\n\
    \  local -n idx3=$9\n  local -n val3=${10}\n  local -n idx4=${11}\n  local -n\
    \ val4=${12}\n  local -n idx5=${13}\n  local -n val5=${14}\n  local -n idx6=${15}\n\
    \  local -n val6=${16}\n  local -n idx7=${17}\n  local -n val7=${18}\n  local\
    \ -n idx8=${19}\n  local -n val8=${20}\n  local -n idx9=${21}\n  local -n val9=${22}\n\
    \  local -n idx10=${23}\n  local -n val10=${24}\n  local -n idx11=${25}\n  local\
    \ -n val11=${26}\n  local -n idx12=${27}\n  local -n val12=${28}\n  local -n idx13=${29}\n\
    \  local -n val13=${30}\n  local -n idx14=${31}\n  local -n val14=${32}\n  local\
    \ -n idx15=${33}\n  local -n val15=${34}\n  local -n idx16=${35}\n  local -n val16=${36}\n\
    \  local -n idx17=${37}\n  local -n val17=${38}\n  local -n idx18=${39}\n  local\
    \ -n val18=${40}\n  local -n idx19=${41}\n  local -n val19=${42}\n  local -n idx20=${43}\n\
    \  local -n val20=${44}\n  local -n idx21=${45}\n  local -n val21=${46}\n  local\
    \ -n idx22=${47}\n  local -n val22=${48}\n  local -n idx23=${49}\n  local -n val23=${50}\n\
    \  local -n idx24=${51}\n  local -n val24=${52}\n  local -n idx\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpieu_7shz.sh: line 10: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpieu_7shz.sh: line 11: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpieu_7shz.sh: line 41: local: '
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=(\"$@\")\n    local max=$((${#arr[@]}-1))\n    local maxIndex=$((${#arr[@]}-1))\n\
    \    local i\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        if [[ ${arr[$i]}\
    \ -gt ${arr[$maxIndex]} ]]; then\n            maxIndex=$i\n        fi\n    done\n\
    \    if [[ ${maxIndex} -eq ${#arr[@]} ]]; then\n        echo -1\n    else\n  \
    \      echo ${maxIndex}\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array[@]} - 1))\n\
    \  while (( index < max )); do\n    local element=${array[index]}\n    local next=${array[index\
    \ + 1]}\n    if [[ ${element} -gt ${next} ]]; then\n      index=$(( index + 1\
    \ ))\n    else\n      break\n    fi\n  done\n  echo \"${index}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n    local arr=$1\n    local max=$2\n    local index=0\n    local maxIndex=0\n\
    \    local currentIndex=0\n    local currentMax=0\n    local currentMaxIndex=0\n\
    \    local currentMaxValue=0\n    local currentMaxValueIndex=0\n    local currentMaxValueIndex2=0\n\
    \    local currentMaxValueIndex3=0\n    local currentMaxValueIndex4=0\n    local\
    \ currentMaxValueIndex5=0\n    local currentMaxValueIndex6=0\n    local currentMaxValueIndex7=0\n\
    \    local currentMaxValueIndex8=0\n    local currentMaxValueIndex9=0\n    local\
    \ currentMaxValueIndex10=0\n    local currentMaxValueIndex11=0\n    local currentMaxValueIndex12=0\n\
    \    local currentMaxValueIndex13=0\n    local currentMaxValueIndex14=0\n    local\
    \ currentMaxValueIndex15=0\n    local currentMaxValueIndex16=0\n    local currentMaxValueIndex17=0\n\
    \    local currentMaxValueIndex18=0\n    local currentMaxValueIndex19=0\n    local\
    \ currentMaxValueIndex20=0\n    local currentMaxValueIndex21=0\n    local currentMaxValueIndex22=0\n\
    \    local currentMaxValueIndex23=0\n    local currentMaxValueIndex24=0\n    local\
    \ currentMaxValueIndex25=0\n    local currentMaxValueIndex26=0\n    local currentMaxValueIndex27=0\n\
    \    local currentMaxValueIndex28=0\n    local currentMaxValueIndex29=0\n    local\
    \ currentMaxValueIndex30=0\n    local currentMaxValueIndex31=0\n    local currentMaxValueIndex32=0\n\
    \    local currentMaxValueIndex33=0\n    local currentMaxValueIndex34=0\n    local\
    \ currentMaxValueIndex35=0\n    local currentMaxValueIndex36=0\n    local currentMaxValueIndex37=0\n\
    \    local currentMaxValueIndex38=0\n    local currentMaxValueIndex39=0\n    local\
    \ currentMaxValueIndex40=0\n    local currentMaxValueIndex41=0\n    local currentMaxValueIndex42=0\n\
    \    local currentMaxValueIndex43=0\n    local currentMaxValueIndex44=0\n    local\
    \ currentMaxValueIndex45=0\n    local currentMaxValueIndex46=0\n    local currentMaxValueIndex47=0\n\
    \    local currentMaxValueIndex48=0\n    local currentMaxValueIndex49=0\n    local\
    \ currentMaxValueIndex50=0\n    local currentMaxValueIndex51=0\n    local currentMaxValue\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660034463
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n#\n# $1 is a space-separated list\ncan_arrange()\
    \ {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=$i\n    fi\n \
    \ done\n  if [[ ${max} -eq ${#arr[@]} ]]; then\n    return -1\n  else\n    return\
    \ $max\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpavc0e4hk.sh: line 14: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660034463
