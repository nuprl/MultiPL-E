language: sh
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_groups=()\n\
    \    local paren_group_count=0\n    local paren_group_level=0\n    local paren_group_start=0\n\
    \    local paren_group_end=0\n    local paren_group_length=0\n    local paren_group_chars=()\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_indexes_count=0\n  \
    \  local paren_group_char_indexes_start=0\n    local paren_group_char_indexes_end=0\n\
    \    local paren_group_char_indexes_length=0\n    local paren_group_char_indexes_chars=()\n\
    \    local paren_group_char_indexes_char_count=0\n    local paren_group_char_indexes_char_index=0\n\
    \    local paren_group_char_indexes_char_indexes=()\n    local paren_group_char_indexes_char_indexes_count=0\n\
    \    local paren_group_char_indexes_char_indexes_start=0\n    local paren_group_char_indexes_char_indexes_end=0\n\
    \    local paren_group_char_indexes_char_indexes_length=0\n    local paren_group_char_indexes_char_indexes_chars=()\n\
    \    local paren_group_char_indexes_char_indexes_char_count=0\n    local paren_group_char_indexes_char_indexes_char_index=0\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes=()\n    local paren_group_char_indexes_char_indexes_char_indexes_count=0\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes_start=0\n    local\
    \ paren_group_char_indexes_char_indexes_char_indexes_end=0\n    local paren_group_char_indexes_char_indexes_char_indexes_length=0\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes_chars=()\n    local\
    \ paren_group_char_indexes_char_indexes_char_indexes_char_count=0\n    local paren_group_char_indexes_char_indexes_char_indexes_char_index=0\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes_char_indexes=()\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes_char_indexes_count=0\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes_char_indexes_start=0\n\
    \    local paren_group_char_indexes_char_indexes_char_indexes_char_indexes_end\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_index2=0\n  \
    \  local paren_level_str_index3=0\n    local paren_level_str_index4=0\n    local\
    \ paren_level_str_index5=0\n    local paren_level_str_index6=0\n    local paren_level_str_index7=0\n\
    \    local paren_level_str_index8=0\n    local paren_level_str_index9=0\n    local\
    \ paren_level_str_index10=0\n    local paren_level_str_index11=0\n    local paren_level_str_index12=0\n\
    \    local paren_level_str_index13=0\n    local paren_level_str_index14=0\n  \
    \  local paren_level_str_index15=0\n    local paren_level_str_index16=0\n    local\
    \ paren_level_str_index17=0\n    local paren_level_str_index18=0\n    local paren_level_str_index19=0\n\
    \    local paren_level_str_index20=0\n    local paren_level_str_index21=0\n  \
    \  local paren_level_str_index22=0\n    local paren_level_str_index23=0\n    local\
    \ paren_level_str_index24=0\n    local paren_level_str_index25=0\n    local paren_level_str_index26=0\n\
    \    local paren_level_str_index27=0\n    local paren_level_str_index28=0\n  \
    \  local paren_level_str_index29=0\n    local paren_level_str_index30=0\n    local\
    \ paren_level_str_index31=0\n    local paren_level_str_index32=0\n    local paren_level_str_index33=0\n\
    \    local paren_level_str_index34=0\n    local paren_level_str_index35=0\n  \
    \  local paren_level_str_index36=0\n    local paren_level_str_index37=0\n    local\
    \ paren_level_str_index38=0\n    local paren_level_str_index39=0\n    local paren_level_str_index40=0\n\
    \    local paren_level_str_index41=0\n    local paren_level_str_index42=0\n  \
    \  local paren_level_str_index43=0\n    local paren_level_str_index44=0\n    local\
    \ paren_level_str_index45=0\n    local paren_level_str_index46=0\n    local paren_level_str_index47=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local max_level_group=\"\"\n    local max_level_group_count=0\n    local\
    \ max_level_group_length=0\n    local max_level_group_length_count=0\n    local\
    \ max_level_group_length_group=\"\"\n    local max_level_group_length_group_count=0\n\
    \    local max_level_group_length_group_length=0\n    local max_level_group_length_group_length_count=0\n\
    \    local max_level_group_length_group_length_group=\"\"\n    local max_level_group_length_group_length_group_count=0\n\
    \    local max_level_group_length_group_length_group_length=0\n    local max_level_group_length_group_length_group_length_count=0\n\
    \    local max_level_group_length_group_length_group_length_group=\"\"\n    local\
    \ max_level_group_length_group_length_group_length_group_count=0\n    local max_level_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group=\"\"\n    local\
    \ max_level_group_length_group_length_group_length_group_length_count=0\n    local\
    \ max_level_group_length_group_length_group_length_group_length_group=\"\"\n \
    \   local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_group_length_group_length_group_length=0\n\
    \    local max_level_group_length_group_length_group_length_group_length_group=\"\
    \"\n    local max_level_group_length_group_length_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_len=0\n\
    \    local paren_group_str=\"\"\n    local paren_group_str_count=0\n    local\
    \ paren_group_str_len=0\n    local paren_group_str_char=\"\"\n    local paren_group_str_char_count=0\n\
    \    local paren_group_str_char_len=0\n    local paren_group_str_char_index=0\n\
    \    local paren_group_str_char_index2=0\n    local paren_group_str_char_index3=0\n\
    \    local paren_group_str_char_index4=0\n    local paren_group_str_char_index5=0\n\
    \    local paren_group_str_char_index6=0\n    local paren_group_str_char_index7=0\n\
    \    local paren_group_str_char_index8=0\n    local paren_group_str_char_index9=0\n\
    \    local paren_group_str_char_index10=0\n    local paren_group_str_char_index11=0\n\
    \    local paren_group_str_char_index12=0\n    local paren_group_str_char_index13=0\n\
    \    local paren_group_str_char_index14=0\n    local paren_group_str_char_index15=0\n\
    \    local paren_group_str_char_index16=0\n    local paren_group_str_char_index17=0\n\
    \    local paren_group_str_char_index18=0\n    local paren_group_str_char_index19=0\n\
    \    local paren_group_str_char_index20=0\n    local paren_group_str_char_index21=0\n\
    \    local paren_group_str_char_index22=0\n    local paren_group_str_char_index23=0\n\
    \    local paren_group_str_char_index24=0\n    local paren_group_str_char_index25=0\n\
    \    local paren_group_str_char_index26=0\n    local paren_group_str_char_index27=0\n\
    \    local paren_group_str_char_index28=0\n    local paren_group_str_char_index29=0\n\
    \    local paren_group_str_char_index30=0\n    local paren_group_str_char_index31=0\n\
    \    local paren_group_str_char_index32=0\n    local paren_group_str_char_index33=0\n\
    \    local paren_group_str_char_index34=0\n    local paren_group_str_char_index35=0\n\
    \    local paren_group_str_char_index36=0\n    local paren_group_str_char_index37=0\n\
    \    local paren_group_str_char_index38=0\n    local paren_group_str_char_index39=0\n\
    \    local paren_group_str_char\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_levels=()\n    local parens_levels_str=\"\
    \"\n    local parens_levels_strs=()\n    local parens_levels_strs_str=\"\"\n \
    \   local parens_levels_strs_strs=()\n    local parens_levels_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs=()\n    local parens_levels_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs=()\n    local parens_levels_strs_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs_strs=()\n    local parens_levels_strs_strs_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs_strs_strs=()\n    local parens_levels_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs_strs_strs_strs=()\n    local parens_levels_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs=()\n    local\
    \ parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\"\n    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\"\
    \n    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local parens_levels_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local parens_level\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=\"\"\n  local paren_group_count=0\n\
    \  local paren_group_length=0\n  local paren_group_char=\"\"\n  local paren_group_char_count=0\n\
    \  local paren_group_char_length=0\n  local paren_group_char_index=0\n  local\
    \ paren_group_char_count2=0\n  local paren_group_char_index2=0\n  local paren_group_char_count3=0\n\
    \  local paren_group_char_index3=0\n  local paren_group_char_count4=0\n  local\
    \ paren_group_char_index4=0\n  local paren_group_char_count5=0\n  local paren_group_char_index5=0\n\
    \  local paren_group_char_count6=0\n  local paren_group_char_index6=0\n  local\
    \ paren_group_char_count7=0\n  local paren_group_char_index7=0\n  local paren_group_char_count8=0\n\
    \  local paren_group_char_index8=0\n  local paren_group_char_count9=0\n  local\
    \ paren_group_char_index9=0\n  local paren_group_char_count10=0\n  local paren_group_char_index10=0\n\
    \  local paren_group_char_count11=0\n  local paren_group_char_index11=0\n  local\
    \ paren_group_char_count12=0\n  local paren_group_char_index12=0\n  local paren_group_char_count13=0\n\
    \  local paren_group_char_index13=0\n  local paren_group_char_count14=0\n  local\
    \ paren_group_char_index14=0\n  local paren_group_char_count15=0\n  local paren_group_char_index15=0\n\
    \  local paren_group_char_count16=0\n  local paren_group_char_index16=0\n  local\
    \ paren_group_char_count17=0\n  local paren_group_char_index17=0\n  local paren_group_char_count18=0\n\
    \  local paren_group_char_index18=0\n  local paren_group_char_count19=0\n  local\
    \ paren_group_char_index19=0\n  local paren_group_char_count20=0\n  local paren_group_char_index20=0\n\
    \  local paren_group_char_count21=0\n  local paren_group_char_index21=0\n  local\
    \ paren_group_char_count22=0\n  local paren_group_char_index22=0\n  local paren_group_char_count23=0\n\
    \  local paren_group_char_index23=0\n  local paren_group_char_count\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_level_count=0\n\
    \  local paren_level_char=\n  local paren_level_char_index=\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_indexes=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local depth=0\n    local parens=0\n    local last=\n\
    \    local lastDepth=0\n    local lastParens=0\n    local lastLast=0\n    local\
    \ lastLastDepth=0\n    local lastLastParens=0\n    local lastLastLast=0\n    local\
    \ lastLastLastDepth=0\n    local lastLastLastParens=0\n    local lastLastLastLast=0\n\
    \    local lastLastLastLastDepth=0\n    local lastLastLastLastParens=0\n    local\
    \ lastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local lastLastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n\
    \    local lastLastLastLastLastParens=0\n    local lastLastLastLastLastLast=0\n\
    \    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local lastLastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n\
    \    local lastLastLastLastLastParens=0\n    local lastLastLastLastLastLast=0\n\
    \    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local lastLastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n\
    \    local lastLastLastLastLastParens=0\n    local lastLastLastLastLastLast=0\n\
    \    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local lastLastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n\
    \    local lastLastLastLastLastParens=0\n    local lastLastLastLastLastLast=0\n\
    \    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local lastLastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n\
    \    local lastLastLastLastLastParens=0\n    local lastLastLastLastLastLast=0\n\
    \    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local lastLastLastLastLastLast=0\n    local lastLastLastLastLastDepth=0\n\
    \    local lastLastLastLastLastParens=0\n    local lastLastLastLastLastLast=0\n\
    \    local lastLastLastLastLastDepth=0\n    local lastLastLastLastLastParens=0\n\
    \    local last\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_index=0\n  local paren_group_index=0\n  local paren_group_count=0\n\
    \  local paren_group_level=0\n  local paren_group_level_index=0\n  local paren_group_level_count=0\n\
    \  local paren_group_level_max=0\n  local paren_group_level_max_index=0\n  local\
    \ paren_group_level_max_count=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_count_index=0\n  local paren_group_level_max_count_index=0\n\
    \  local paren_group_level_max_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_group\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_count2\n    local paren_group_count3\n    local paren_group_count4\n\
    \    local paren_group_count5\n    local paren_group_count6\n    local paren_group_count7\n\
    \    local paren_group_count8\n    local paren_group_count9\n    local paren_group_count10\n\
    \    local paren_group_count11\n    local paren_group_count12\n    local paren_group_count13\n\
    \    local paren_group_count14\n    local paren_group_count15\n    local paren_group_count16\n\
    \    local paren_group_count17\n    local paren_group_count18\n    local paren_group_count19\n\
    \    local paren_group_count20\n    local paren_group_count21\n    local paren_group_count22\n\
    \    local paren_group_count23\n    local paren_group_count24\n    local paren_group_count25\n\
    \    local paren_group_count26\n    local paren_group_count27\n    local paren_group_count28\n\
    \    local paren_group_count29\n    local paren_group_count30\n    local paren_group_count31\n\
    \    local paren_group_count32\n    local paren_group_count33\n    local paren_group_count34\n\
    \    local paren_group_count35\n    local paren_group_count36\n    local paren_group_count37\n\
    \    local paren_group_count38\n    local paren_group_count39\n    local paren_group_count40\n\
    \    local paren_group_count41\n    local paren_group_count42\n    local paren_group_count43\n\
    \    local paren_group_count44\n    local paren_group_count45\n    local paren_group_count46\n\
    \    local paren_group_count47\n    local paren_group_count48\n    local paren_group_count49\n\
    \    local paren_group_count50\n    local paren_group_count51\n    local paren_group_count52\n\
    \    local paren_group_count53\n    local paren_group_count54\n    local paren_group_count55\n\
    \    local paren_group_count56\n    local paren_group_count57\n    local paren_group_count58\n\
    \    local paren_group_count59\n    local paren_group_count60\n    \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_count2\n    local paren_group_count3\n\
    \    local paren_group_count4\n    local paren_group_count5\n    local paren_group_count6\n\
    \    local paren_group_count7\n    local paren_group_count8\n    local paren_group_count9\n\
    \    local paren_group_count10\n    local paren_group_count11\n    local paren_group_count12\n\
    \    local paren_group_count13\n    local paren_group_count14\n    local paren_group_count15\n\
    \    local paren_group_count16\n    local paren_group_count17\n    local paren_group_count18\n\
    \    local paren_group_count19\n    local paren_group_count20\n    local paren_group_count21\n\
    \    local paren_group_count22\n    local paren_group_count23\n    local paren_group_count24\n\
    \    local paren_group_count25\n    local paren_group_count26\n    local paren_group_count27\n\
    \    local paren_group_count28\n    local paren_group_count29\n    local paren_group_count30\n\
    \    local paren_group_count31\n    local paren_group_count32\n    local paren_group_count33\n\
    \    local paren_group_count34\n    local paren_group_count35\n    local paren_group_count36\n\
    \    local paren_group_count37\n    local paren_group_count38\n    local paren_group_count39\n\
    \    local paren_group_count40\n    local paren_group_count41\n    local paren_group_count42\n\
    \    local paren_group_count43\n    local paren_group_count44\n    local paren_group_count45\n\
    \    local paren_group_count46\n    local paren_group_count47\n    local paren_group_count48\n\
    \    local paren_group_count49\n    local paren_group_count50\n    local paren_group_count51\n\
    \    local paren_group_count52\n    local paren_group_count53\n    local paren_group_count54\n\
    \    local paren_group_count55\n    local paren_group_count56\n    local paren_group_count57\n\
    \    local paren_group_count58\n    local paren_group_count59\n    local \n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local level=0\n  local parens=0\n  local parens_str=\"\"\
    \n  local parens_level=0\n  local parens_str_count=0\n  local parens_level_count=0\n\
    \  local parens_str_count2=0\n  local parens_level_count2=0\n  local parens_str_count3=0\n\
    \  local parens_level_count3=0\n  local parens_str_count4=0\n  local parens_level_count4=0\n\
    \  local parens_str_count5=0\n  local parens_level_count5=0\n  local parens_str_count6=0\n\
    \  local parens_level_count6=0\n  local parens_str_count7=0\n  local parens_level_count7=0\n\
    \  local parens_str_count8=0\n  local parens_level_count8=0\n  local parens_str_count9=0\n\
    \  local parens_level_count9=0\n  local parens_str_count10=0\n  local parens_level_count10=0\n\
    \  local parens_str_count11=0\n  local parens_level_count11=0\n  local parens_str_count12=0\n\
    \  local parens_level_count12=0\n  local parens_str_count13=0\n  local parens_level_count13=0\n\
    \  local parens_str_count14=0\n  local parens_level_count14=0\n  local parens_str_count15=0\n\
    \  local parens_level_count15=0\n  local parens_str_count16=0\n  local parens_level_count16=0\n\
    \  local parens_str_count17=0\n  local parens_level_count17=0\n  local parens_str_count18=0\n\
    \  local parens_level_count18=0\n  local parens_str_count19=0\n  local parens_level_count19=0\n\
    \  local parens_str_count20=0\n  local parens_level_count20=0\n  local parens_str_count21=0\n\
    \  local parens_level_count21=0\n  local parens_str_count22=0\n  local parens_level_count22=0\n\
    \  local parens_str_count23=0\n  local parens_level_count23=0\n  local parens_str_count24=0\n\
    \  local parens_level_count24=0\n  local parens_str_count25=0\n  local parens_level_count25=0\n\
    \  local parens_str_count26=0\n  local parens_level_count26=0\n  local parens_str_count27=0\n\
    \  local parens_level_count\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local level=0\n    local level_count=0\n    local paren_level=0\n    local\
    \ paren_level_count=0\n    local paren_level_char=\n    local paren_level_char_count=0\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_chars=\n    local paren_level_char_counts=\n\
    \    local paren_level_chars=\n    local paren_level_char_counts=\n    local paren_level_chars=\n\
    \    local paren_level_char_counts=\n    local paren_level_char\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n   \
    \ local paren_level_str_count=0\n    local paren_level_str_count_index=0\n   \
    \ local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    local paren_level_str_count_index=0\n\
    \    local paren_level_str_count_index=0\n    \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_string=$1\n    local parens_string2=\"\
    \"\n    local parens_string3=\"\"\n    local parens_string4=\"\"\n    local parens_string5=\"\
    \"\n    local parens_string6=\"\"\n    local parens_string7=\"\"\n    local parens_string8=\"\
    \"\n    local parens_string9=\"\"\n    local parens_string10=\"\"\n    local parens_string11=\"\
    \"\n    local parens_string12=\"\"\n    local parens_string13=\"\"\n    local\
    \ parens_string14=\"\"\n    local parens_string15=\"\"\n    local parens_string16=\"\
    \"\n    local parens_string17=\"\"\n    local parens_string18=\"\"\n    local\
    \ parens_string19=\"\"\n    local parens_string20=\"\"\n    local parens_string21=\"\
    \"\n    local parens_string22=\"\"\n    local parens_string23=\"\"\n    local\
    \ parens_string24=\"\"\n    local parens_string25=\"\"\n    local parens_string26=\"\
    \"\n    local parens_string27=\"\"\n    local parens_string28=\"\"\n    local\
    \ parens_string29=\"\"\n    local parens_string30=\"\"\n    local parens_string31=\"\
    \"\n    local parens_string32=\"\"\n    local parens_string33=\"\"\n    local\
    \ parens_string34=\"\"\n    local parens_string35=\"\"\n    local parens_string36=\"\
    \"\n    local parens_string37=\"\"\n    local parens_string38=\"\"\n    local\
    \ parens_string39=\"\"\n    local parens_string40=\"\"\n    local parens_string41=\"\
    \"\n    local parens_string42=\"\"\n    local parens_string43=\"\"\n    local\
    \ parens_string44=\"\"\n    local parens_string45=\"\"\n    local parens_string46=\"\
    \"\n    local parens_string47=\"\"\n    local parens_string48=\"\"\n    local\
    \ parens_string49=\"\"\n    local parens_string50=\"\"\n    local parens_string51=\"\
    \"\n    local parens_string52=\"\"\n    local parens_string53=\"\"\n    local\
    \ parens_string54=\"\"\n    local parens_string55=\"\"\n    local parens_string56=\"\
    \"\n    local parens_string57=\"\"\n    local parens_string58=\"\"\n    local\
    \ parens_string59=\"\"\n    local parens_string60=\"\"\n    local parens_string61=\"\
    \"\n    local parens_string62=\"\"\n    local parens_string63=\"\"\n    \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_group_index=0\n\
    \  local paren_group_count=0\n  local paren_group_char\n  local paren_group_char_index=0\n\
    \  local paren_group_char_count=0\n  local paren_group_char_reversed\n  local\
    \ paren_group_char_reversed_index=0\n  local paren_group_char_reversed_count=0\n\
    \  local paren_group_char_reversed_reversed\n  local paren_group_char_reversed_reversed_index=0\n\
    \  local paren_group_char_reversed_reversed_count=0\n  local paren_group_char_reversed_reversed_reversed\n\
    \  local paren_group_char_reversed_reversed_reversed_index=0\n  local paren_group_char_reversed_reversed_reversed_count=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed\n  local paren_group_char_reversed_reversed_reversed_reversed_index=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_count=0\n  local\
    \ paren_group_char_reversed_reversed_reversed_reversed_reversed\n  local paren_group_char_reversed_reversed_reversed_reversed_reversed_index=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_count=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_index=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_count=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_reversed_count=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index=0\n\
    \  local paren_group_char_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local depth=0\n    local parens=0\n    local i\n\
    \    local j\n    local len\n    local max\n    local group\n    local group_depth\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_count\n  \
    \  local paren_group_count2\n    local paren_group_count3\n    local paren_group_count4\n\
    \    local paren_group_count5\n    local paren_group_count6\n    local paren_group_count7\n\
    \    local paren_group_count8\n    local paren_group_count9\n    local paren_group_count10\n\
    \    local paren_group_count11\n    local paren_group_count12\n    local paren_group_count13\n\
    \    local paren_group_count14\n    local paren_group_count15\n    local paren_group_count16\n\
    \    local paren_group_count17\n    local paren_group_count18\n    local paren_group_count19\n\
    \    local paren_group_count20\n    local paren_group_count21\n    local paren_group_count22\n\
    \    local paren_group_count23\n    local paren_group_count24\n    local paren_group_count25\n\
    \    local paren_group_count26\n    local paren_group_count27\n    local paren_group_count28\n\
    \    local paren_group_count29\n    local paren_group_count30\n    local paren_group_count31\n\
    \    local paren_group_count32\n    local paren_group_count33\n    local paren_group_count34\n\
    \    local paren_group_count35\n    local paren_group_count36\n    local paren_group_count37\n\
    \    local paren_group_count38\n    local paren_group_count39\n    local paren_group_count40\n\
    \    local paren_group_count41\n    local paren_group_count42\n    local paren_group_count43\n\
    \    local paren_group_count44\n    local paren_group_count45\n    local paren_group_count46\n\
    \    local paren_group_count47\n    local paren_group_count48\n    local paren_group_count49\n\
    \    local paren_group_count50\n    local paren_group_count51\n    local paren_group_count52\n\
    \    local paren_group_count53\n    local paren_group_count54\n    local paren_group_count55\n\
    \    local paren_group_count56\n    local paren_group_count57\n    local paren_group_count58\n\
    \    local paren_group_count59\n    local paren_group_count60\n    \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local parens=0\n    local opens=0\n\
    \    local closes=0\n    local depths=()\n    local depths_str=''\n    local depths_str_depths=()\n\
    \    local depths_str_depths_str=''\n    local depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str=''\n    local depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str=''\n    local depths_str_depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str=''\n    local\
    \ depths_str_depths_str_depths_str_depths_str_depths_str_depths=()\n    local\
    \ depths_str_depths_str_depths_str_depths_str_depths_str_depths_str=''\n    local\
    \ depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str=''\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str=''\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str=''\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str=''\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths=()\n\
    \    local depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str_depths_str=''\n\
    \    local depths_str_depths_str_depths_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local level=0\n    local level_group=\"\
    \"\n    local level_group_len=0\n    local i\n    local j\n    local len\n   \
    \ local paren_group_len\n    local paren_group\n    local paren_group_len\n  \
    \  local paren_group\n    local paren_group_len\n    local paren_group\n    local\
    \ paren_group_len\n    local paren_group\n    local paren_group_len\n    local\
    \ paren_group\n    local paren_group_len\n    local paren_group\n    local paren_group_len\n\
    \    local paren_group\n    local paren_group_len\n    local paren_group\n   \
    \ local paren_group_len\n    local paren_group\n    local paren_group_len\n  \
    \  local paren_group\n    local paren_group_len\n    local paren_group\n    local\
    \ paren_group_len\n    local paren_group\n    local paren_group_len\n    local\
    \ paren_group\n    local paren_group_len\n    local paren_group\n    local paren_group_len\n\
    \    local paren_group\n    local paren_group_len\n    local paren_group\n   \
    \ local paren_group_len\n    local paren_group\n    local paren_group_len\n  \
    \  local paren_group\n    local paren_group_len\n    local paren_group\n    local\
    \ paren_group_len\n    local paren_group\n    local paren_group_len\n    local\
    \ paren_group\n    local paren_group_len\n    local paren_group\n    local paren_group_len\n\
    \    local paren_group\n    local paren_group_len\n    local paren_group\n   \
    \ local paren_group_len\n    local paren_group\n    local paren_group_len\n  \
    \  local paren_group\n    local paren_group_len\n    local paren_group\n    local\
    \ paren_group_len\n    local paren_group\n    local paren_group_len\n    local\
    \ paren_group\n    local paren_group_len\n    local paren_group\n    local paren_group_len\n\
    \    local paren_group\n    local paren_group_len\n    local paren_group\n   \
    \ local paren_group_len\n    local paren_group\n    local paren_group_len\n  \
    \  local paren_group\n    local paren_group_len\n    local paren_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=\"$1\"\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str_count=0\n\
    \    local paren_level_str_count2=0\n    local paren_level_str_count3=0\n    local\
    \ paren_level_str_count4=0\n    local paren_level_str_count5=0\n    local paren_level_str_count6=0\n\
    \    local paren_level_str_count7=0\n    local paren_level_str_count8=0\n    local\
    \ paren_level_str_count9=0\n    local paren_level_str_count10=0\n    local paren_level_str_count11=0\n\
    \    local paren_level_str_count12=0\n    local paren_level_str_count13=0\n  \
    \  local paren_level_str_count14=0\n    local paren_level_str_count15=0\n    local\
    \ paren_level_str_count16=0\n    local paren_level_str_count17=0\n    local paren_level_str_count18=0\n\
    \    local paren_level_str_count19=0\n    local paren_level_str_count20=0\n  \
    \  local paren_level_str_count21=0\n    local paren_level_str_count22=0\n    local\
    \ paren_level_str_count23=0\n    local paren_level_str_count24=0\n    local paren_level_str_count25=0\n\
    \    local paren_level_str_count26=0\n    local paren_level_str_count27=0\n  \
    \  local paren_level_str_count28=0\n    local paren_level_str_count29=0\n    local\
    \ paren_level_str_count30=0\n    local paren_level_str_count31=0\n    local paren_level_str_count32=0\n\
    \    local paren_level_str_count33=0\n    local paren_level_str_count34=0\n  \
    \  local paren_level_str_count35=0\n    local paren_level_str_count36=0\n    local\
    \ paren_level_str_count37=0\n    local paren_level_str_count38=0\n    local paren_level_str_count39=0\n\
    \    local paren_level_str_count40=0\n    local paren_level_str_count41=0\n  \
    \  local paren_level_str_count42=0\n    local paren_level_str_count43=0\n    local\
    \ paren_level_str_count44=0\n    local paren_level_str_count45=0\n    local paren_level_str_count46=0\n\
    \    local paren_level_str_count47=0\n    local paren_level_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_group=0\n  local parens_group_count=0\n\
    \  local parens_group_str=\"\"\n  local parens_group_str_count=0\n  local parens_group_str_reverse=0\n\
    \  local parens_group_str_length=0\n  local parens_group_str_length_reverse=0\n\
    \  local parens_group_str_length_reverse_count=0\n  local parens_group_str_length_reverse_count2=0\n\
    \  local parens_group_str_length_reverse_count3=0\n  local parens_group_str_length_reverse_count4=0\n\
    \  local parens_group_str_length_reverse_count5=0\n  local parens_group_str_length_reverse_count6=0\n\
    \  local parens_group_str_length_reverse_count7=0\n  local parens_group_str_length_reverse_count8=0\n\
    \  local parens_group_str_length_reverse_count9=0\n  local parens_group_str_length_reverse_count10=0\n\
    \  local parens_group_str_length_reverse_count11=0\n  local parens_group_str_length_reverse_count12=0\n\
    \  local parens_group_str_length_reverse_count13=0\n  local parens_group_str_length_reverse_count14=0\n\
    \  local parens_group_str_length_reverse_count15=0\n  local parens_group_str_length_reverse_count16=0\n\
    \  local parens_group_str_length_reverse_count17=0\n  local parens_group_str_length_reverse_count18=0\n\
    \  local parens_group_str_length_reverse_count19=0\n  local parens_group_str_length_reverse_count20=0\n\
    \  local parens_group_str_length_reverse_count21=0\n  local parens_group_str_length_reverse_count22=0\n\
    \  local parens_group_str_length_reverse_count23=0\n  local parens_group_str_length_reverse_count24=0\n\
    \  local parens_group_str_length_reverse_count25=0\n  local parens_group_str_length_reverse_count26=0\n\
    \  local parens_group_str_length_reverse_count27=0\n  local parens_group_str_length_reverse_count28=0\n\
    \  local parens_group_str_length_reverse_count29=0\n  local parens_group_str_length_reverse_count30=0\n\
    \  local parens_group_str_length_reverse_count31=0\n  local parens_group_str_length_reverse_count32=0\n\
    \  local parens_group_str_length_reverse_count33=0\n  local parens_group_str_length_reverse_count34=0\n\
    \  local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_groups=$1\n  local parens_group=''\n\
    \  local parens_group_level=0\n  local parens_group_count=0\n  local parens_group_counts=()\n\
    \  local parens_group_counts_max=0\n  local parens_group_counts_max_index=0\n\
    \  local parens_group_counts_max_indexs=()\n  local parens_group_counts_min=0\n\
    \  local parens_group_counts_min_index=0\n  local parens_group_counts_min_indexs=()\n\
    \  local parens_group_counts_sum=0\n  local parens_group_counts_sum_index=0\n\
    \  local parens_group_counts_sum_indexs=()\n  local parens_group_counts_avg=0\n\
    \  local parens_group_counts_avg_index=0\n  local parens_group_counts_avg_indexs=()\n\
    \  local parens_group_counts_sum=0\n  local parens_group_counts_sum_index=0\n\
    \  local parens_group_counts_sum_indexs=()\n  local parens_group_counts_avg=0\n\
    \  local parens_group_counts_avg_index=0\n  local parens_group_counts_avg_indexs=()\n\
    \  local parens_group_counts_sum=0\n  local parens_group_counts_sum_index=0\n\
    \  local parens_group_counts_sum_indexs=()\n  local parens_group_counts_avg=0\n\
    \  local parens_group_counts_avg_index=0\n  local parens_group_counts_avg_indexs=()\n\
    \  local parens_group_counts_sum=0\n  local parens_group_counts_sum_index=0\n\
    \  local parens_group_counts_sum_indexs=()\n  local parens_group_counts_avg=0\n\
    \  local parens_group_counts_avg_index=0\n  local parens_group_counts_avg_indexs=()\n\
    \  local parens_group_counts_sum=0\n  local parens_group_counts_sum_index=0\n\
    \  local parens_group_counts_sum_indexs=()\n  local parens_group_counts_avg=0\n\
    \  local parens_group_counts_avg_index=0\n  local parens_group_counts_avg_indexs=()\n\
    \  local parens_group_counts_sum=0\n  local parens_group_counts_sum_index=0\n\
    \  local parens_group_counts_sum_indexs=()\n  local parens_group_counts_avg=0\n\
    \  local parens_group_counts_avg_index=0\n  local parens_group_counts_avg_indexs=()\n\
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_index=0\n    local paren_char\n    local\
    \ paren_char_index=0\n    local paren_char_index2=0\n    local paren_char_index3=0\n\
    \    local paren_char_index4=0\n    local paren_char_index5=0\n    local paren_char_index6=0\n\
    \    local paren_char_index7=0\n    local paren_char_index8=0\n    local paren_char_index9=0\n\
    \    local paren_char_index10=0\n    local paren_char_index11=0\n    local paren_char_index12=0\n\
    \    local paren_char_index13=0\n    local paren_char_index14=0\n    local paren_char_index15=0\n\
    \    local paren_char_index16=0\n    local paren_char_index17=0\n    local paren_char_index18=0\n\
    \    local paren_char_index19=0\n    local paren_char_index20=0\n    local paren_char_index21=0\n\
    \    local paren_char_index22=0\n    local paren_char_index23=0\n    local paren_char_index24=0\n\
    \    local paren_char_index25=0\n    local paren_char_index26=0\n    local paren_char_index27=0\n\
    \    local paren_char_index28=0\n    local paren_char_index29=0\n    local paren_char_index30=0\n\
    \    local paren_char_index31=0\n    local paren_char_index32=0\n    local paren_char_index33=0\n\
    \    local paren_char_index34=0\n    local paren_char_index35=0\n    local paren_char_index36=0\n\
    \    local paren_char_index37=0\n    local paren_char_index38=0\n    local paren_char_index39=0\n\
    \    local paren_char_index40=0\n    local paren_char_index41=0\n    local paren_char_index42=0\n\
    \    local paren_char_index43=0\n    local paren_char_index44=0\n    local paren_char_index45=0\n\
    \    local paren_char_index46=0\n    local paren_char_index47=0\n    local paren_char_index48=0\n\
    \    local paren_char_index49=0\n    local paren_char_index50=0\n    local paren_char_index51=0\n\
    \    local paren_char_index52=0\n    local paren_char\n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_max=0\n    local paren_group_max_count=0\n    local paren_group_max_depth=0\n\
    \    local paren_group_max_depth_count=0\n    local paren_group_max_depth_count2=0\n\
    \    local paren_group_max_depth_count3=0\n    local paren_group_max_depth_count4=0\n\
    \    local paren_group_max_depth_count5=0\n    local paren_group_max_depth_count6=0\n\
    \    local paren_group_max_depth_count7=0\n    local paren_group_max_depth_count8=0\n\
    \    local paren_group_max_depth_count9=0\n    local paren_group_max_depth_count10=0\n\
    \    local paren_group_max_depth_count11=0\n    local paren_group_max_depth_count12=0\n\
    \    local paren_group_max_depth_count13=0\n    local paren_group_max_depth_count14=0\n\
    \    local paren_group_max_depth_count15=0\n    local paren_group_max_depth_count16=0\n\
    \    local paren_group_max_depth_count17=0\n    local paren_group_max_depth_count18=0\n\
    \    local paren_group_max_depth_count19=0\n    local paren_group_max_depth_count20=0\n\
    \    local paren_group_max_depth_count21=0\n    local paren_group_max_depth_count22=0\n\
    \    local paren_group_max_depth_count23=0\n    local paren_group_max_depth_count24=0\n\
    \    local paren_group_max_depth_count25=0\n    local paren_group_max_depth_count26=0\n\
    \    local paren_group_max_depth_count27=0\n    local paren_group_max_depth_count28=0\n\
    \    local paren_group_max_depth_count29=0\n    local paren_group_max_depth_count30=0\n\
    \    local paren_group_max_depth_count31=0\n    local paren_group_max_depth_count32=0\n\
    \    local paren_group_max_depth_count33=0\n    local paren_group_max_depth_count34=0\n\
    \    local paren_group_max_depth_count35=0\n    local paren_group_max_depth_count36=0\n\
    \    local paren_group_max_depth_count37=0\n    local paren_group_max_depth_count38=0\n\
    \    local paren_group_max_depth_count39=0\n    local paren_group_max_depth_count40=0\n\
    \    local paren_group_max_depth_count41=0\n    local paren_group_max_depth_count42=0\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_groups=()\n    local paren_group=''\n\
    \    local paren_group_depth=0\n    local paren_group_count=0\n    local paren_group_count2=0\n\
    \    local paren_group_count3=0\n    local paren_group_count4=0\n    local paren_group_count5=0\n\
    \    local paren_group_count6=0\n    local paren_group_count7=0\n    local paren_group_count8=0\n\
    \    local paren_group_count9=0\n    local paren_group_count10=0\n    local paren_group_count11=0\n\
    \    local paren_group_count12=0\n    local paren_group_count13=0\n    local paren_group_count14=0\n\
    \    local paren_group_count15=0\n    local paren_group_count16=0\n    local paren_group_count17=0\n\
    \    local paren_group_count18=0\n    local paren_group_count19=0\n    local paren_group_count20=0\n\
    \    local paren_group_count21=0\n    local paren_group_count22=0\n    local paren_group_count23=0\n\
    \    local paren_group_count24=0\n    local paren_group_count25=0\n    local paren_group_count26=0\n\
    \    local paren_group_count27=0\n    local paren_group_count28=0\n    local paren_group_count29=0\n\
    \    local paren_group_count30=0\n    local paren_group_count31=0\n    local paren_group_count32=0\n\
    \    local paren_group_count33=0\n    local paren_group_count34=0\n    local paren_group_count35=0\n\
    \    local paren_group_count36=0\n    local paren_group_count37=0\n    local paren_group_count38=0\n\
    \    local paren_group_count39=0\n    local paren_group_count40=0\n    local paren_group_count41=0\n\
    \    local paren_group_count42=0\n    local paren_group_count43=0\n    local paren_group_count44=0\n\
    \    local paren_group_count45=0\n    local paren_group_count46=0\n    local paren_group_count47=0\n\
    \    local paren_group_count48=0\n    local paren_group_count49=0\n    local paren_group_count50=0\n\
    \    local paren_group_count51=0\n    local paren_group_count52=0\n    local paren_group_count53=0\n\
    \    local paren_group_count\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_level\n    local paren_group_level_index\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_string=$1\n    local parens_string2=\"\
    \"\n    local parens_string3=\"\"\n    local parens_string4=\"\"\n    local parens_string5=\"\
    \"\n    local parens_string6=\"\"\n    local parens_string7=\"\"\n    local parens_string8=\"\
    \"\n    local parens_string9=\"\"\n    local parens_string10=\"\"\n    local parens_string11=\"\
    \"\n    local parens_string12=\"\"\n    local parens_string13=\"\"\n    local\
    \ parens_string14=\"\"\n    local parens_string15=\"\"\n    local parens_string16=\"\
    \"\n    local parens_string17=\"\"\n    local parens_string18=\"\"\n    local\
    \ parens_string19=\"\"\n    local parens_string20=\"\"\n    local parens_string21=\"\
    \"\n    local parens_string22=\"\"\n    local parens_string23=\"\"\n    local\
    \ parens_string24=\"\"\n    local parens_string25=\"\"\n    local parens_string26=\"\
    \"\n    local parens_string27=\"\"\n    local parens_string28=\"\"\n    local\
    \ parens_string29=\"\"\n    local parens_string30=\"\"\n    local parens_string31=\"\
    \"\n    local parens_string32=\"\"\n    local parens_string33=\"\"\n    local\
    \ parens_string34=\"\"\n    local parens_string35=\"\"\n    local parens_string36=\"\
    \"\n    local parens_string37=\"\"\n    local parens_string38=\"\"\n    local\
    \ parens_string39=\"\"\n    local parens_string40=\"\"\n    local parens_string41=\"\
    \"\n    local parens_string42=\"\"\n    local parens_string43=\"\"\n    local\
    \ parens_string44=\"\"\n    local parens_string45=\"\"\n    local parens_string46=\"\
    \"\n    local parens_string47=\"\"\n    local parens_string48=\"\"\n    local\
    \ parens_string49=\"\"\n    local parens_string50=\"\"\n    local parens_string51=\"\
    \"\n    local parens_string52=\"\"\n    local parens_string53=\"\"\n    local\
    \ parens_string54=\"\"\n    local parens_string55=\"\"\n    local parens_string56=\"\
    \"\n    local parens_string57=\"\"\n    local parens_string58=\"\"\n    local\
    \ parens_string59=\"\"\n    local parens_string60=\"\"\n    local parens_string61=\"\
    \"\n    local parens_string62=\"\"\n    local parens_string63=\"\"\n    \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local paren_group_len=0\n    local paren_group_start=0\n\
    \    local paren_group_end=0\n    local paren_group_count=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_prev=\"\"\n\
    \    local paren_group_char_next=\"\"\n    local paren_group_char_prev2=\"\"\n\
    \    local paren_group_char_next2=\"\"\n    local paren_group_char_prev3=\"\"\n\
    \    local paren_group_char_next3=\"\"\n    local paren_group_char_prev4=\"\"\n\
    \    local paren_group_char_next4=\"\"\n    local paren_group_char_prev5=\"\"\n\
    \    local paren_group_char_next5=\"\"\n    local paren_group_char_prev6=\"\"\n\
    \    local paren_group_char_next6=\"\"\n    local paren_group_char_prev7=\"\"\n\
    \    local paren_group_char_next7=\"\"\n    local paren_group_char_prev8=\"\"\n\
    \    local paren_group_char_next8=\"\"\n    local paren_group_char_prev9=\"\"\n\
    \    local paren_group_char_next9=\"\"\n    local paren_group_char_prev10=\"\"\
    \n    local paren_group_char_next10=\"\"\n    local paren_group_char_prev11=\"\
    \"\n    local paren_group_char_next11=\"\"\n    local paren_group_char_prev12=\"\
    \"\n    local paren_group_char_next12=\"\"\n    local paren_group_char_prev13=\"\
    \"\n    local paren_group_char_next13=\"\"\n    local paren_group_char_prev14=\"\
    \"\n    local paren_group_char_next14=\"\"\n    local paren_group_char_prev15=\"\
    \"\n    local paren_group_char_next15=\"\"\n    local paren_group_char_prev16=\"\
    \"\n    local paren_group_char_next16=\"\"\n    local paren_group_char_prev17=\"\
    \"\n    local paren_group_char_next17=\"\"\n    local paren_group_char_prev18=\"\
    \"\n    local paren_group_char_next18=\"\"\n    local paren_group_char_prev19=\"\
    \"\n    local paren_group_char_next19=\"\"\n    local paren_group_char_prev20=\"\
    \"\n    local paren_group_char_next20=\"\"\n    local paren_group_char_prev21=\"\
    \"\n    local paren_group_char_next21=\"\"\n    local paren_group_char_prev22=\"\
    \"\n    local paren_group_char_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_level_count\n    local paren_group_level_count_count\n  \
    \  local paren_group_level_count_count_count\n    local paren_group_level_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count\n    local paren_group_level_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count\n    local\
    \ paren_group_level_count_count_count_count_count_count_count_count\n    local\
    \ paren_group_level_count_count_count_count_count_count_count_count_count\n  \
    \  local paren_group_level_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local paren_group_level_count_count_count_count_count_count_count_count_count_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local level=0\n    local level_group=\"\
    \"\n    local level_group_len=0\n    local i=0\n    local j=0\n    local paren_group=\"\
    \"\n    local paren_group_len=0\n    local paren_group_len2=0\n    local paren_group_len3=0\n\
    \    local paren_group_len4=0\n    local paren_group_len5=0\n    local paren_group_len6=0\n\
    \    local paren_group_len7=0\n    local paren_group_len8=0\n    local paren_group_len9=0\n\
    \    local paren_group_len10=0\n    local paren_group_len11=0\n    local paren_group_len12=0\n\
    \    local paren_group_len13=0\n    local paren_group_len14=0\n    local paren_group_len15=0\n\
    \    local paren_group_len16=0\n    local paren_group_len17=0\n    local paren_group_len18=0\n\
    \    local paren_group_len19=0\n    local paren_group_len20=0\n    local paren_group_len21=0\n\
    \    local paren_group_len22=0\n    local paren_group_len23=0\n    local paren_group_len24=0\n\
    \    local paren_group_len25=0\n    local paren_group_len26=0\n    local paren_group_len27=0\n\
    \    local paren_group_len28=0\n    local paren_group_len29=0\n    local paren_group_len30=0\n\
    \    local paren_group_len31=0\n    local paren_group_len32=0\n    local paren_group_len33=0\n\
    \    local paren_group_len34=0\n    local paren_group_len35=0\n    local paren_group_len36=0\n\
    \    local paren_group_len37=0\n    local paren_group_len38=0\n    local paren_group_len39=0\n\
    \    local paren_group_len40=0\n    local paren_group_len41=0\n    local paren_group_len42=0\n\
    \    local paren_group_len43=0\n    local paren_group_len44=0\n    local paren_group_len45=0\n\
    \    local paren_group_len46=0\n    local paren_group_len47=0\n    local paren_group_len48=0\n\
    \    local paren_group_len49=0\n    local paren_group_len50=0\n\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local parens=0\n    local i\n  \
    \  local j\n    local len\n    local max\n    local count\n    local group\n \
    \   local group_depth\n    local group_len\n    local group_max\n    local group_count\n\
    \    local group_parens\n    local group_i\n    local group_j\n    local group_len\n\
    \    local group_max\n    local group_count\n    local group_parens\n    local\
    \ group_i\n    local group_j\n    local group_len\n    local group_max\n    local\
    \ group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_count\n    local group_parens\n\
    \    local group_i\n    local group_j\n    local group_len\n    local group_max\n\
    \    local group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_count\n    local group_parens\n\
    \    local group_i\n    local group_j\n    local group_len\n    local group_max\n\
    \    local group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_count\n    local group_parens\n\
    \    local group_i\n    local group_j\n    local group_len\n    local group_max\n\
    \    local group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_count\n    local group_parens\n\
    \    local group_i\n    local group_j\n    local group_len\n    local group_max\n\
    \    local group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_count\n    local group_parens\n\
    \    local group_i\n    local group_j\n    local group_len\n    local group_max\n\
    \    local group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    local group_len\n    local group_max\n    local group_count\n    local group_parens\n\
    \    local group_i\n    local group_j\n    local group_len\n    local group_max\n\
    \    local group_count\n    local group_parens\n    local group_i\n    local group_j\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local level=0\n    local parens=0\n    local i\n\
    \    local j\n    local parens_str\n    local parens_str_reversed\n    local parens_str_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed\n    local parens_str_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed\n    local\
    \ parens_str_reversed_reversed_reversed_reversed_reversed_reversed\n    local\
    \ parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local parens_str_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_string=$1\n    local parens_string2=$2\n\
    \    local parens_string3=$3\n    local parens_string4=$4\n    local parens_string5=$5\n\
    \    local parens_string6=$6\n    local parens_string7=$7\n    local parens_string8=$8\n\
    \    local parens_string9=$9\n    local parens_string10=${10}\n    local parens_string11=${11}\n\
    \    local parens_string12=${12}\n    local parens_string13=${13}\n    local parens_string14=${14}\n\
    \    local parens_string15=${15}\n    local parens_string16=${16}\n    local parens_string17=${17}\n\
    \    local parens_string18=${18}\n    local parens_string19=${19}\n    local parens_string20=${20}\n\
    \    local parens_string21=${21}\n    local parens_string22=${22}\n    local parens_string23=${23}\n\
    \    local parens_string24=${24}\n    local parens_string25=${25}\n    local parens_string26=${26}\n\
    \    local parens_string27=${27}\n    local parens_string28=${28}\n    local parens_string29=${29}\n\
    \    local parens_string30=${30}\n    local parens_string31=${31}\n    local parens_string32=${32}\n\
    \    local parens_string33=${33}\n    local parens_string34=${34}\n    local parens_string35=${35}\n\
    \    local parens_string36=${36}\n    local parens_string37=${37}\n    local parens_string38=${38}\n\
    \    local parens_string39=${39}\n    local parens_string40=${40}\n    local parens_string41=${41}\n\
    \    local parens_string42=${42}\n    local parens_string43=${43}\n    local parens_string44=${44}\n\
    \    local parens_string45=${45}\n    local parens_string46=${46}\n    local parens_string47=${47}\n\
    \    local parens_string48=${48}\n    local parens_string49=${49}\n    local parens_string50=${50}\n\
    \    local parens_string51=${51}\n    local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local level=0\n    local parens=0\n    local parens_level=0\n\
    \    local parens_str=\"\"\n    local parens_str_count=0\n    local parens_str_length=0\n\
    \    local parens_str_last=\"\"\n    local parens_str_last_count=0\n    local\
    \ parens_str_last_length=0\n    local parens_str_last_last=\"\"\n    local parens_str_last_last_count=0\n\
    \    local parens_str_last_last_length=0\n    local parens_str_last_last_last=\"\
    \"\n    local parens_str_last_last_last_count=0\n    local parens_str_last_last_last_length=0\n\
    \    local parens_str_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_length=0\n    local parens_str_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_count=0\n    local parens_str_last_last_last_last_last_length=0\n\
    \    local parens_str_last_last_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last_length=0\n    local parens_str_last_last_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_last_last_count=0\n    local\
    \ parens_str_last_last_last_last_last_last_last_length=0\n    local parens_str_last_last_last_last_last_last_last_last=\"\
    \"\n    local parens_str_last_last_last_last_last_last_last_last_count=0\n   \
    \ local parens_str_last_last_last_last_last_last_last_last_length=0\n    local\
    \ parens_str_last_last_last_last_last_last_last_last_last=\"\"\n    local parens_str_last_last_last_last_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last_last_last_last_length=0\n\
    \    local parens_str_last_last_last_last_last_last_last_last_last_last=\"\"\n\
    \    local parens_str_last_last_last_last_last_last_last_last_last_count=0\n \
    \   local parens_str_last_last_last_last_last_last_last_last_last_length=0\n \
    \   local parens_str_last_last_last_last_last_last_last_last_last_last=\"\"\n\
    \    local parens_str_last_last_last_last_last_last_last_last_last_last_count=0\n\
    \    local parens_str_last_last_last_last_last_last_last_last_last_last_length=0\n\
    \    local parens_str_last_last_last_last_last_last_last_last_last_last_last_last=\"\
    \"\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_index=0\n    local paren_group\n    local level\n    local level_index\n\
    \    local paren_group_count\n    local paren_group_count_index\n    local paren_group_count_value\n\
    \    local paren_group_count_value_count\n    local paren_group_count_value_count_index\n\
    \    local paren_group_count_value_count_value\n    local paren_group_count_value_count_value_count\n\
    \    local paren_group_count_value_count_value_count_index\n    local paren_group_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count\n    local paren_group_count_value_count_value_count_value_count_index\n\
    \    local paren_group_count_value_count_value_count_value_count_value\n    local\
    \ paren_group_count_value_count_value_count_value_count_value_count\n    local\
    \ paren_group_count_value_count_value_count_value_count_value_count_index\n  \
    \  local paren_group_count_value_count_value_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_index\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_index\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_index\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count_index\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count_index\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count_value\n\
    \    local paren_group_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count_value_count\n\
    \    local paren_group_count_value_count_value_count_value_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_count_max\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index2\n    local paren_group_count_max_index3\n\
    \    local paren_group_count_max_index4\n    local paren_group_count_max_index5\n\
    \    local paren_group_count_max_index6\n    local paren_group_count_max_index7\n\
    \    local paren_group_count_max_index8\n    local paren_group_count_max_index9\n\
    \    local paren_group_count_max_index10\n    local paren_group_count_max_index11\n\
    \    local paren_group_count_max_index12\n    local paren_group_count_max_index13\n\
    \    local paren_group_count_max_index14\n    local paren_group_count_max_index15\n\
    \    local paren_group_count_max_index16\n    local paren_group_count_max_index17\n\
    \    local paren_group_count_max_index18\n    local paren_group_count_max_index19\n\
    \    local paren_group_count_max_index20\n    local paren_group_count_max_index21\n\
    \    local paren_group_count_max_index22\n    local paren_group_count_max_index23\n\
    \    local paren_group_count_max_index24\n    local paren_group_count_max_index25\n\
    \    local paren_group_count_max_index26\n    local paren_group_count_max_index27\n\
    \    local paren_group_count_max_index28\n    local paren_group_count_max_index29\n\
    \    local paren_group_count_max_index30\n    local paren_group_count_max_index31\n\
    \    local paren_group_count_max_index32\n    local paren_group_count_max_index33\n\
    \    local paren_group_count_max_index34\n    local paren_group_count_max_index35\n\
    \    local paren_group_count_max_index36\n    local paren_group_count_max_index37\n\
    \    local paren_group_count_max_index38\n    local paren_group_count_max_index39\n\
    \    local paren_group_count_max_index40\n    local paren_group_count_max_index41\n\
    \    local paren_group_count_max_index42\n    local paren_group_count_max_index43\n\
    \    local paren_group_count_max_index44\n    local paren_group_count_max_index45\n\
    \    local paren_group_count_max_index46\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_str=\"\"\n\
    \  local paren_level=0\n  local paren_level_str=\"\"\n  local paren_level_str2=\"\
    \"\n  local paren_level_str2=\"\"\n  local paren_level_str3=\"\"\n  local paren_level_str4=\"\
    \"\n  local paren_level_str5=\"\"\n  local paren_level_str6=\"\"\n  local paren_level_str7=\"\
    \"\n  local paren_level_str8=\"\"\n  local paren_level_str9=\"\"\n  local paren_level_str10=\"\
    \"\n  local paren_level_str11=\"\"\n  local paren_level_str12=\"\"\n  local paren_level_str13=\"\
    \"\n  local paren_level_str14=\"\"\n  local paren_level_str15=\"\"\n  local paren_level_str16=\"\
    \"\n  local paren_level_str17=\"\"\n  local paren_level_str18=\"\"\n  local paren_level_str19=\"\
    \"\n  local paren_level_str20=\"\"\n  local paren_level_str21=\"\"\n  local paren_level_str22=\"\
    \"\n  local paren_level_str23=\"\"\n  local paren_level_str24=\"\"\n  local paren_level_str25=\"\
    \"\n  local paren_level_str26=\"\"\n  local paren_level_str27=\"\"\n  local paren_level_str28=\"\
    \"\n  local paren_level_str29=\"\"\n  local paren_level_str30=\"\"\n  local paren_level_str31=\"\
    \"\n  local paren_level_str32=\"\"\n  local paren_level_str33=\"\"\n  local paren_level_str34=\"\
    \"\n  local paren_level_str35=\"\"\n  local paren_level_str36=\"\"\n  local paren_level_str37=\"\
    \"\n  local paren_level_str38=\"\"\n  local paren_level_str39=\"\"\n  local paren_level_str40=\"\
    \"\n  local paren_level_str41=\"\"\n  local paren_level_str42=\"\"\n  local paren_level_str43=\"\
    \"\n  local paren_level_str44=\"\"\n  local paren_level_str45=\"\"\n  local paren_level_str46=\"\
    \"\n  local paren_level_str47=\"\"\n  local paren_level_str48=\"\"\n  local paren_level_str49=\"\
    \"\n  local paren_level_str50=\"\"\n  local paren_level_str51=\"\"\n  local paren_level_str52=\"\
    \"\n  local paren_level_str53=\"\"\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local paren_level=0\n    local paren_level_count=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n   \
    \ local paren_level_str_count=0\n    local paren_level_str=\"\"\n    local paren_level_str_index=0\n\
    \    local paren_level_str_count=0\n    local paren_level_str_count=0\n    local\
    \ paren_level_str=\"\"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n\
    \    local paren_level_str_count=0\n    local paren_level_str=\"\"\n    local\
    \ paren_level_str_index=0\n    local paren_level_str_count=0\n    local paren_level_str_count=0\n\
    \    local paren_level_str=\"\"\n    local paren_level_str_index=0\n    local\
    \ paren_level_str_count=0\n    local paren_level_str_count=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n   \
    \ local paren_level_str_count=0\n    local paren_level_str=\"\"\n    local paren_level_str_index=0\n\
    \    local paren_level_str_count=0\n    local paren_level_str_count=0\n    local\
    \ paren_level_str=\"\"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n\
    \    local paren_level_str_count=0\n    local paren_level_str=\"\"\n    local\
    \ paren_level_str_index=0\n    local paren_level_str_count=0\n    local paren_level_str_count=0\n\
    \    local paren_level_str=\"\"\n    local paren_level_str_index=0\n    local\
    \ paren_level_str_count=0\n    local paren_level_str_count=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n   \
    \ local paren_level_str_count=0\n    local paren_level_str=\"\"\n    local paren_level_str_index=0\n\
    \    local paren_level_str_count=0\n    local paren_level_str_count=0\n    local\
    \ paren_level_str=\"\"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n\
    \    local paren_level_str_count=0\n    local paren_level_str=\"\"\n    local\
    \ paren_level_str_index=0\n    local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_str=$1\n    local paren_group=0\n\
    \    local paren_group_str=\"\"\n    local paren_group_count=0\n    local paren_group_counts=()\n\
    \    local paren_group_counts_str=\"\"\n    local paren_group_counts_strs=()\n\
    \    local paren_group_counts_strs_str=\"\"\n    local paren_group_counts_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_str=\"\"\n    local paren_group_counts_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_str=\"\"\n    local paren_group_counts_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_strs_str=\"\"\n    local paren_group_counts_strs_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_str=\"\"\n    local paren_group_counts_strs_strs_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_str=\"\"\n    local\
    \ paren_group_counts_strs_strs_strs_strs_strs_strs_strs=()\n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\"\
    \n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=\"\
    \"\n    local paren_group_counts_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local paren_group_counts_strs_strs_strs_str\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_count\n  \
    \  local paren_group_length\n    local paren_group_length_count\n    local paren_group_length\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren_group_length_count\n    local\
    \ paren_group_length_count\n    local paren_group_length_count\n    local paren_group_length_count\n\
    \    local paren_group_length_count\n    local paren\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_level=0\n\
    \  local paren_group\n  local paren_group_count\n  local paren_group_level\n \
    \ local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_group_count\n  local paren_group_level\n  local paren_group_count\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_level\n\
    \  local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_count=0\n\
    \  local max_level_str=\"\"\n  local level=0\n  local level_str=\"\"\n  local\
    \ level_str_count=0\n  local level_str_str=\"\"\n  local level_str_str_count=0\n\
    \  local level_str_str_str=\"\"\n  local level_str_str_str_count=0\n  local level_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_count=0\n  local level_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n  local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n  local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\
    \n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_level=0\n\
    \  local paren_group\n  local paren_group_count\n  local paren_group_level\n \
    \ local paren_group_start\n  local paren_group_end\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local paren_group_length\n\
    \  local paren_group_length_count\n  local paren_group_length\n  local paren_group_length_count\n\
    \  local paren_group_length\n  local paren_group_length_count\n  local \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_char=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_level=0\n\
    \  local paren_group\n  local paren_group_level\n  local paren_group_count\n \
    \ local paren_group_counts\n  local paren_group_counts_max\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    \  local paren_group_counts_max_index\n  local paren_group_counts_max_index\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local level=0\n  local parens=0\n  local parens_stack\n\
    \  local i\n  local j\n  local k\n  local parens_level\n  local parens_level_max\n\
    \  local parens_level_max_index\n  local parens_level_max_index2\n  local parens_level_max_index3\n\
    \  local parens_level_max_index4\n  local parens_level_max_index5\n  local parens_level_max_index6\n\
    \  local parens_level_max_index7\n  local parens_level_max_index8\n  local parens_level_max_index9\n\
    \  local parens_level_max_index10\n  local parens_level_max_index11\n  local parens_level_max_index12\n\
    \  local parens_level_max_index13\n  local parens_level_max_index14\n  local parens_level_max_index15\n\
    \  local parens_level_max_index16\n  local parens_level_max_index17\n  local parens_level_max_index18\n\
    \  local parens_level_max_index19\n  local parens_level_max_index20\n  local parens_level_max_index21\n\
    \  local parens_level_max_index22\n  local parens_level_max_index23\n  local parens_level_max_index24\n\
    \  local parens_level_max_index25\n  local parens_level_max_index26\n  local parens_level_max_index27\n\
    \  local parens_level_max_index28\n  local parens_level_max_index29\n  local parens_level_max_index30\n\
    \  local parens_level_max_index31\n  local parens_level_max_index32\n  local parens_level_max_index33\n\
    \  local parens_level_max_index34\n  local parens_level_max_index35\n  local parens_level_max_index36\n\
    \  local parens_level_max_index37\n  local parens_level_max_index38\n  local parens_level_max_index39\n\
    \  local parens_level_max_index40\n  local parens_level_max_index41\n  local parens_level_max_index42\n\
    \  local parens_level_max_index43\n  local parens_level_max_index44\n  local parens_level_max_index45\n\
    \  local parens_level_max_index46\n  local parens_level_max_index47\n  local parens_level_max_index48\n\
    \  local parens_level_max_index49\n  local parens_level_max_index50\n  local parens_level_max_index51\n\
    \  local parens_level_max_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_groups=()\n    local paren_group=''\n\
    \    local paren_group_depth=0\n    local paren_group_count=0\n    local paren_group_count2=0\n\
    \    local paren_group_count3=0\n    local paren_group_count4=0\n    local paren_group_count5=0\n\
    \    local paren_group_count6=0\n    local paren_group_count7=0\n    local paren_group_count8=0\n\
    \    local paren_group_count9=0\n    local paren_group_count10=0\n    local paren_group_count11=0\n\
    \    local paren_group_count12=0\n    local paren_group_count13=0\n    local paren_group_count14=0\n\
    \    local paren_group_count15=0\n    local paren_group_count16=0\n    local paren_group_count17=0\n\
    \    local paren_group_count18=0\n    local paren_group_count19=0\n    local paren_group_count20=0\n\
    \    local paren_group_count21=0\n    local paren_group_count22=0\n    local paren_group_count23=0\n\
    \    local paren_group_count24=0\n    local paren_group_count25=0\n    local paren_group_count26=0\n\
    \    local paren_group_count27=0\n    local paren_group_count28=0\n    local paren_group_count29=0\n\
    \    local paren_group_count30=0\n    local paren_group_count31=0\n    local paren_group_count32=0\n\
    \    local paren_group_count33=0\n    local paren_group_count34=0\n    local paren_group_count35=0\n\
    \    local paren_group_count36=0\n    local paren_group_count37=0\n    local paren_group_count38=0\n\
    \    local paren_group_count39=0\n    local paren_group_count40=0\n    local paren_group_count41=0\n\
    \    local paren_group_count42=0\n    local paren_group_count43=0\n    local paren_group_count44=0\n\
    \    local paren_group_count45=0\n    local paren_group_count46=0\n    local paren_group_count47=0\n\
    \    local paren_group_count48=0\n    local paren_group_count49=0\n    local paren_group_count50=0\n\
    \    local paren_group_count51=0\n    local paren_group_count52=0\n    local paren_group_count53=0\n\
    \    local paren_group_count\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_level_char=\n\
    \  local paren_level_index=\n  local paren_level_char_index=\n  local paren_level_char_count=\n\
    \  local paren_level_chars=\n  local paren_level_char_counts=\n  local paren_level_char_counts_index=\n\
    \  local paren_level_char_counts_index_count=\n  local paren_level_char_counts_index_count_max=\n\
    \  local paren_level_char_counts_index_count_max_index=\n  local paren_level_char_counts_index_count_max_index_count=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max=\n  local paren_level_char_counts_index_count_max_index_count_max_index=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count=\n\
    \  local paren_level_char_counts_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max=\n\
    \  local paren_level_char_count\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_count\n  \
    \  local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local depth=0\n    local paren_level=0\n    local\
    \ paren_nesting=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_max=0\n    local paren_nesting_count=0\n\
    \    local paren_nesting_max=0\n    local paren_nesting_count=0\n    local paren_nesting_max=0\n\
    \    local paren_nesting_count=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local max_level=0\n  local level=0\n  local paren_level=0\n  local paren_char=\"\
    \"\n  local paren_char_count=0\n  local paren_char_count2=0\n  local paren_char_count3=0\n\
    \  local paren_char_count4=0\n  local paren_char_count5=0\n  local paren_char_count6=0\n\
    \  local paren_char_count7=0\n  local paren_char_count8=0\n  local paren_char_count9=0\n\
    \  local paren_char_count10=0\n  local paren_char_count11=0\n  local paren_char_count12=0\n\
    \  local paren_char_count13=0\n  local paren_char_count14=0\n  local paren_char_count15=0\n\
    \  local paren_char_count16=0\n  local paren_char_count17=0\n  local paren_char_count18=0\n\
    \  local paren_char_count19=0\n  local paren_char_count20=0\n  local paren_char_count21=0\n\
    \  local paren_char_count22=0\n  local paren_char_count23=0\n  local paren_char_count24=0\n\
    \  local paren_char_count25=0\n  local paren_char_count26=0\n  local paren_char_count27=0\n\
    \  local paren_char_count28=0\n  local paren_char_count29=0\n  local paren_char_count30=0\n\
    \  local paren_char_count31=0\n  local paren_char_count32=0\n  local paren_char_count33=0\n\
    \  local paren_char_count34=0\n  local paren_char_count35=0\n  local paren_char_count36=0\n\
    \  local paren_char_count37=0\n  local paren_char_count38=0\n  local paren_char_count39=0\n\
    \  local paren_char_count40=0\n  local paren_char_count41=0\n  local paren_char_count42=0\n\
    \  local paren_char_count43=0\n  local paren_char_count44=0\n  local paren_char_count45=0\n\
    \  local paren_char_count46=0\n  local paren_char_count47=0\n  local paren_char_count48=0\n\
    \  local paren_char_count49=0\n  local paren_char_count50=0\n  local paren_char_count51=0\n\
    \  local paren_char_count52=0\n  local paren_char_count53=0\n  local paren_char_count54=0\n\
    \  local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_count=0\n   \
    \ local paren_level_str_count_index=0\n    local paren_level_str_count_index2=0\n\
    \    local paren_level_str_count_index3=0\n    local paren_level_str_count_index4=0\n\
    \    local paren_level_str_count_index5=0\n    local paren_level_str_count_index6=0\n\
    \    local paren_level_str_count_index7=0\n    local paren_level_str_count_index8=0\n\
    \    local paren_level_str_count_index9=0\n    local paren_level_str_count_index10=0\n\
    \    local paren_level_str_count_index11=0\n    local paren_level_str_count_index12=0\n\
    \    local paren_level_str_count_index13=0\n    local paren_level_str_count_index14=0\n\
    \    local paren_level_str_count_index15=0\n    local paren_level_str_count_index16=0\n\
    \    local paren_level_str_count_index17=0\n    local paren_level_str_count_index18=0\n\
    \    local paren_level_str_count_index19=0\n    local paren_level_str_count_index20=0\n\
    \    local paren_level_str_count_index21=0\n    local paren_level_str_count_index22=0\n\
    \    local paren_level_str_count_index23=0\n    local paren_level_str_count_index24=0\n\
    \    local paren_level_str_count_index25=0\n    local paren_level_str_count_index26=0\n\
    \    local paren_level_str_count_index27=0\n    local paren_level_str_count_index28=0\n\
    \    local paren_level_str_count_index29=0\n    local paren_level_str_count_index30=0\n\
    \    local paren_level_str_count_index31=0\n    local paren_level_str_count_index32=0\n\
    \    local paren_level_str_count_index33=0\n    local paren_level_str_count_index34=0\n\
    \    local paren_level_str_count_index35=0\n    local paren_level_str_count_index36=0\n\
    \    local paren_level_str_count_index37=0\n    local paren_level_str_count_index38=0\n\
    \    local paren_level_str_count_index39=0\n    local paren_level_str_count_index40=0\n\
    \    local paren_level_str_count_index41=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_count_level\n    local paren_group_count_level_max\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n    local paren_group_count_level_max_index\n\
    \    local paren_group_count_level_max_index\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local nested_parens_str=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local level=0\n    local level_str=\"\"\n    local parens_str=\"\"\n \
    \   local parens_str_len=0\n    local parens_str_len_max=0\n    local parens_str_len_max_str=\"\
    \"\n    local parens_str_len_max_str_len=0\n    local parens_str_len_max_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len=0\n    local parens_str_len_max_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len=0\n    local parens_str_len_max_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len=0\n    local\
    \ parens_str_len_max_str_len_str_len_str_len_str_len_str=\"\"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str=\"\"\
    \n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_levels=()\n    local paren_level_index=0\n    local paren_level\n\
    \    local paren_group\n    local i\n    local j\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_counts_index\n    local paren_group_counts_indexs\n\
    \    local paren_group_counts_indexes_count\n    local paren_group_counts_indexes_counts\n\
    \    local paren_group_counts_indexes_counts_index\n    local paren_group_counts_indexes_counts_indexs\n\
    \    local paren_group_counts_indexes_counts_indexes_count\n    local paren_group_counts_indexes_counts_indexes_counts\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_index\n    local paren_group_counts_indexes_counts_indexes_counts_indexs\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_count\n  \
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts\n   \
    \ local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_index\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexs\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \    local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local max_level_group_len_count=0\n \
    \   local max_level_group_len_count2=0\n    local max_level_group_len_count3=0\n\
    \    local max_level_group_len_count4=0\n    local max_level_group_len_count5=0\n\
    \    local max_level_group_len_count6=0\n    local max_level_group_len_count7=0\n\
    \    local max_level_group_len_count8=0\n    local max_level_group_len_count9=0\n\
    \    local max_level_group_len_count10=0\n    local max_level_group_len_count11=0\n\
    \    local max_level_group_len_count12=0\n    local max_level_group_len_count13=0\n\
    \    local max_level_group_len_count14=0\n    local max_level_group_len_count15=0\n\
    \    local max_level_group_len_count16=0\n    local max_level_group_len_count17=0\n\
    \    local max_level_group_len_count18=0\n    local max_level_group_len_count19=0\n\
    \    local max_level_group_len_count20=0\n    local max_level_group_len_count21=0\n\
    \    local max_level_group_len_count22=0\n    local max_level_group_len_count23=0\n\
    \    local max_level_group_len_count24=0\n    local max_level_group_len_count25=0\n\
    \    local max_level_group_len_count26=0\n    local max_level_group_len_count27=0\n\
    \    local max_level_group_len_count28=0\n    local max_level_group_len_count29=0\n\
    \    local max_level_group_len_count30=0\n    local max_level_group_len_count31=0\n\
    \    local max_level_group_len_count32=0\n    local max_level_group_len_count33=0\n\
    \    local max_level_group_len_count34=0\n    local max_level_group_len_count35=0\n\
    \    local max_level_group_len_count36=0\n    local max_level_group_len_count37=0\n\
    \    local max_level_group_len_count38=0\n    local max_level_group_len_count39=0\n\
    \    local max_level_group_len_count40=0\n    local max_level_group_len_count41=0\n\
    \    local max_level_group_len_count42=0\n    local max_level_group_len_count43=0\n\
    \    local max_level_group_len_count44=0\n    local max_level_group_len_count45=0\n\
    \    local max_level_group_len_count46=0\n    local max_level_group_len_count47=0\n\
    \    local max_level_group_len_count48=0\n    local max_level_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local nested_parens_str=$1\n  local max_level=0\n  local max_level_count=0\n\
    \  local max_level_str=\"\"\n  local level=0\n  local level_str=\"\"\n  local\
    \ level_str_count=0\n  local level_str_count2=0\n  local level_str_count3=0\n\
    \  local level_str_count4=0\n  local level_str_count5=0\n  local level_str_count6=0\n\
    \  local level_str_count7=0\n  local level_str_count8=0\n  local level_str_count9=0\n\
    \  local level_str_count10=0\n  local level_str_count11=0\n  local level_str_count12=0\n\
    \  local level_str_count13=0\n  local level_str_count14=0\n  local level_str_count15=0\n\
    \  local level_str_count16=0\n  local level_str_count17=0\n  local level_str_count18=0\n\
    \  local level_str_count19=0\n  local level_str_count20=0\n  local level_str_count21=0\n\
    \  local level_str_count22=0\n  local level_str_count23=0\n  local level_str_count24=0\n\
    \  local level_str_count25=0\n  local level_str_count26=0\n  local level_str_count27=0\n\
    \  local level_str_count28=0\n  local level_str_count29=0\n  local level_str_count30=0\n\
    \  local level_str_count31=0\n  local level_str_count32=0\n  local level_str_count33=0\n\
    \  local level_str_count34=0\n  local level_str_count35=0\n  local level_str_count36=0\n\
    \  local level_str_count37=0\n  local level_str_count38=0\n  local level_str_count39=0\n\
    \  local level_str_count40=0\n  local level_str_count41=0\n  local level_str_count42=0\n\
    \  local level_str_count43=0\n  local level_str_count44=0\n  local level_str_count45=0\n\
    \  local level_str_count46=0\n  local level_str_count47=0\n  local level_str_count48=0\n\
    \  local level_str_count49=0\n  local level_str_count50=0\n  local level_str_count51=0\n\
    \  local level_str_count52=0\n  local level_str_count53=0\n  local level_str_count54=0\n\
    \  local level_str_count55=0\n  local level_str_count56=0\n  local level_str_count57=0\n\
    \  local level_str_count58=0\n  local level_str_count59=0\n  \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str2=\"\
    \"\n    local paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local\
    \ paren_level_str4=\"\"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\
    \"\n    local paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local\
    \ paren_level_str9=\"\"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\
    \"\n    local paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local\
    \ paren_level_str14=\"\"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\
    \"\n    local paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local\
    \ paren_level_str19=\"\"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\
    \"\n    local paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local\
    \ paren_level_str24=\"\"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\
    \"\n    local paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local\
    \ paren_level_str29=\"\"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\
    \"\n    local paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local\
    \ paren_level_str34=\"\"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\
    \"\n    local paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local\
    \ paren_level_str39=\"\"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\
    \"\n    local paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local\
    \ paren_level_str44=\"\"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\
    \"\n    local paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local\
    \ paren_level_str49=\"\"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\
    \"\n    local paren_level_str52=\"\"\n    local paren_level_str53=\"\"\n\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local level=0\n    local level_group=\"\"\n    local paren_level=0\n \
    \   local paren_level_group=\"\"\n    local paren_group=\"\"\n    local paren_group_level=0\n\
    \    local paren_group_level_group=\"\"\n    local paren_group_level_count=0\n\
    \    local paren_group_level_count_group=\"\"\n    local paren_group_level_count_group_value=0\n\
    \    local paren_group_level_count_group_count=0\n    local paren_group_level_count_group_count_group=\"\
    \"\n    local paren_group_level_count_group_count_group_value=0\n    local paren_group_level_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group=\"\"\n    local\
    \ paren_group_level_count_group_count_group_count_group_value=0\n    local paren_group_level_count_group_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group=\"\
    \"\n    local paren_group_level_count_group_count_group_count_group_count_group_value=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group=\"\
    \"\n    local paren_group_level_count_group_count_group_count_group_count_group_count_group_value=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group=\"\
    \"\n    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_value=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_count_group=\"\
    \"\n    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_value=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_count_group_value=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_count_group_count=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_group_count_group_count_group_value=0\n\
    \    local paren_group_level_count_group_count_group_count_group_count_group_count_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_chars=0\n    local paren_group_char=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_group_index=0\n  local paren_group\n  local level\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_group_count\n  local paren_group_count\n  local paren_group_count\n\
    \  local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str_reverse=\"\
    \"\n    local paren_level_str_reverse_str=\"\"\n    local paren_level_str_reverse_str_reverse=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str=\"\"\n    local paren_level_str_reverse_str_reverse_str_reverse=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str=\"\"\n    local\
    \ paren_level_str_reverse_str_reverse_str_reverse_str_reverse=\"\"\n    local\
    \ paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\"\n    local\
    \ paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=\"\"\
    \n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n    local paren_level_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str_reverse_str=\"\
    \"\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local max_level_group=\"\"\n    local max_level_group_count=0\n    local\
    \ paren_group\n    local paren_group_count\n    local paren_group_level\n    local\
    \ paren_group_level_count\n    local paren_group_level_group\n    local paren_group_level_group_count\n\
    \    local paren_group_level_group_level\n    local paren_group_level_group_level_count\n\
    \    local paren_group_level_group_level_group\n    local paren_group_level_group_level_group_count\n\
    \    local paren_group_level_group_level_group_level\n    local paren_group_level_group_level_group_level_count\n\
    \    local paren_group_level_group_level_group_level_group\n    local paren_group_level_group_level_group_level_group_count\n\
    \    local paren_group_level_group_level_group_level_group_level\n    local paren_group_level_group_level_group_level_group_level_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group\n    local\
    \ paren_group_level_group_level_group_level_group_level_group_count\n    local\
    \ paren_group_level_group_level_group_level_group_level_group_level\n    local\
    \ paren_group_level_group_level_group_level_group_level_group_level_count\n  \
    \  local paren_group_level_group_level_group_level_group_level_group_level_group\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_count\n\
    \    local paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group_level_group\n\
    \    local paren_group_level_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=\"$1\"\n    local max_level=0\n    local level=0\n\
    \    local paren_level=0\n    local paren_group\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_count_max\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_index\n\
    \    local paren_group_count_max_index\n    local paren_group_count_max_\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_string=$1\n  local parens_string2=\"\
    \"\n  local parens_string3=\"\"\n  local parens_string4=\"\"\n  local parens_string5=\"\
    \"\n  local parens_string6=\"\"\n  local parens_string7=\"\"\n  local parens_string8=\"\
    \"\n  local parens_string9=\"\"\n  local parens_string10=\"\"\n  local parens_string11=\"\
    \"\n  local parens_string12=\"\"\n  local parens_string13=\"\"\n  local parens_string14=\"\
    \"\n  local parens_string15=\"\"\n  local parens_string16=\"\"\n  local parens_string17=\"\
    \"\n  local parens_string18=\"\"\n  local parens_string19=\"\"\n  local parens_string20=\"\
    \"\n  local parens_string21=\"\"\n  local parens_string22=\"\"\n  local parens_string23=\"\
    \"\n  local parens_string24=\"\"\n  local parens_string25=\"\"\n  local parens_string26=\"\
    \"\n  local parens_string27=\"\"\n  local parens_string28=\"\"\n  local parens_string29=\"\
    \"\n  local parens_string30=\"\"\n  local parens_string31=\"\"\n  local parens_string32=\"\
    \"\n  local parens_string33=\"\"\n  local parens_string34=\"\"\n  local parens_string35=\"\
    \"\n  local parens_string36=\"\"\n  local parens_string37=\"\"\n  local parens_string38=\"\
    \"\n  local parens_string39=\"\"\n  local parens_string40=\"\"\n  local parens_string41=\"\
    \"\n  local parens_string42=\"\"\n  local parens_string43=\"\"\n  local parens_string44=\"\
    \"\n  local parens_string45=\"\"\n  local parens_string46=\"\"\n  local parens_string47=\"\
    \"\n  local parens_string48=\"\"\n  local parens_string49=\"\"\n  local parens_string50=\"\
    \"\n  local parens_string51=\"\"\n  local parens_string52=\"\"\n  local parens_string53=\"\
    \"\n  local parens_string54=\"\"\n  local parens_string55=\"\"\n  local parens_string56=\"\
    \"\n  local parens_string57=\"\"\n  local parens_string58=\"\"\n  local parens_string59=\"\
    \"\n  local parens_string60=\"\"\n  local parens_string61=\"\"\n  local parens_string62=\"\
    \"\n  local parens_string63=\"\"\n  \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=0\n  local paren_group_count=0\n\
    \  local paren_group_max=0\n  local paren_group_max_count=0\n  local paren_group_max_count2=0\n\
    \  local paren_group_max_count3=0\n  local paren_group_max_count4=0\n  local paren_group_max_count5=0\n\
    \  local paren_group_max_count6=0\n  local paren_group_max_count7=0\n  local paren_group_max_count8=0\n\
    \  local paren_group_max_count9=0\n  local paren_group_max_count10=0\n  local\
    \ paren_group_max_count11=0\n  local paren_group_max_count12=0\n  local paren_group_max_count13=0\n\
    \  local paren_group_max_count14=0\n  local paren_group_max_count15=0\n  local\
    \ paren_group_max_count16=0\n  local paren_group_max_count17=0\n  local paren_group_max_count18=0\n\
    \  local paren_group_max_count19=0\n  local paren_group_max_count20=0\n  local\
    \ paren_group_max_count21=0\n  local paren_group_max_count22=0\n  local paren_group_max_count23=0\n\
    \  local paren_group_max_count24=0\n  local paren_group_max_count25=0\n  local\
    \ paren_group_max_count26=0\n  local paren_group_max_count27=0\n  local paren_group_max_count28=0\n\
    \  local paren_group_max_count29=0\n  local paren_group_max_count30=0\n  local\
    \ paren_group_max_count31=0\n  local paren_group_max_count32=0\n  local paren_group_max_count33=0\n\
    \  local paren_group_max_count34=0\n  local paren_group_max_count35=0\n  local\
    \ paren_group_max_count36=0\n  local paren_group_max_count37=0\n  local paren_group_max_count38=0\n\
    \  local paren_group_max_count39=0\n  local paren_group_max_count40=0\n  local\
    \ paren_group_max_count41=0\n  local paren_group_max_count42=0\n  local paren_group_max_count43=0\n\
    \  local paren_group_max_count44=0\n  local paren_group_max_count45=0\n  local\
    \ paren_group_max_count46=0\n  local paren_group_max_count47=0\n  local paren_group_max_count48=0\n\
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_nesting_level=0\n    local paren_nesting_paren_level=0\n\
    \    local paren_nesting_paren_nesting_level=0\n    local paren_nesting_paren_nesting_paren_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_level=0\n    local paren_nesting_paren_nesting_paren_nesting_paren_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n \
    \   local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level=0\n\
    \    local paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_level_index\n    local paren_group_level_length\n    local\
    \ paren_group_level_length_index\n    local paren_group_level_length_count\n \
    \   local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local nested_parens_str=\"$1\"\n    local nested_parens_arr=()\n    local\
    \ max_level=0\n    local level=0\n    local parens_level=0\n    local parens_level_arr=()\n\
    \    local parens_level_str=\"\"\n    local parens_level_str_arr=()\n    local\
    \ parens_level_str_count=0\n    local parens_level_str_count_arr=()\n    local\
    \ parens_level_str_count_str=\"\"\n    local parens_level_str_count_str_arr=()\n\
    \    local parens_level_str_count_str_str=\"\"\n    local parens_level_str_count_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str=\"\"\n    local parens_level_str_count_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str=\"\"\n    local parens_level_str_count_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str=\"\"\n    local parens_level_str_count_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str=\"\"\n    local parens_level_str_count_str_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str_str=\"\"\n    local\
    \ parens_level_str_count_str_str_str_str_str_str_str_arr=()\n    local parens_level_str_count_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_level_str_count_str_str_str_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str_str_str_str=\"\"\n \
    \   local parens_level_str_count_str_str_str_str_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str=\"\"\
    \n    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str_str_arr=()\n\
    \    local parens_level_str_count_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local parens_level_str_count_str_str_str_str_str_str_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local paren_groups_len=${#paren_groups}\n\
    \    local max_level=0\n    local max_level_group=\"\"\n    local max_level_group_len=0\n\
    \    local level=0\n    local level_group=\"\"\n    local level_group_len=0\n\
    \    local i\n    local j\n    local paren_group\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_group_len\n    local paren_group_len\n\
    \    local paren_group_len\n    local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local paren_level=0\n    local paren_nesting=0\n\
    \    local paren_group=0\n    local paren_group_str=\"\"\n    local paren_group_count=0\n\
    \    local paren_group_max=0\n    local paren_group_max_str=\"\"\n    local paren_group_max_count=0\n\
    \    local paren_group_max_depth=0\n    local paren_group_max_depth_count=0\n\
    \    local paren_group_max_depth_str=\"\"\n    local paren_group_max_depth_max=0\n\
    \    local paren_group_max_depth_max_str=\"\"\n    local paren_group_max_depth_max_count=0\n\
    \    local paren_group_max_depth_max_depth=0\n    local paren_group_max_depth_max_depth_count=0\n\
    \    local paren_group_max_depth_max_depth_str=\"\"\n    local paren_group_max_depth_max_depth_max=0\n\
    \    local paren_group_max_depth_max_depth_max_str=\"\"\n    local paren_group_max_depth_max_depth_max_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth=0\n    local paren_group_max_depth_max_depth_max_depth_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_str=\"\"\n    local paren_group_max_depth_max_depth_max_depth_max=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_str=\"\"\n    local paren_group_max_depth_max_depth_max_depth_max_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_depth=0\n    local paren_group_max_depth_max_depth_max_depth_max_depth_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_depth_str=\"\"\n    local\
    \ paren_group_max_depth_max_depth_max_depth_max_depth_max=0\n    local paren_group_max_depth_max_depth_max_depth_max_depth_max_str=\"\
    \"\n    local paren_group_max_depth_max_depth_max_depth_max_depth_max_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_depth_max_depth=0\n \
    \   local paren_group_max_depth_max_depth_max_depth_max_depth_max_depth_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_depth_max_depth_str=\"\
    \"\n    local paren_group_max_depth_max_depth_max_depth_max_depth_max_depth_max=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_depth_max_depth_max_str=\"\
    \"\n    local paren_group_max_depth_max_depth_max_depth_max_depth_max_depth_max_count=0\n\
    \    local paren_group_max_depth_max_depth_max_depth_max_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_count=0\n\
    \  local max_level_str=\"\"\n  local level=0\n  local level_str=\"\"\n  local\
    \ level_str_count=0\n  local level_str_str=\"\"\n  local level_str_str_count=0\n\
    \  local level_str_str_str=\"\"\n  local level_str_str_str_count=0\n  local level_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_count=0\n  local level_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n  local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n  local\
    \ level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\
    \n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n  local level_str_str_str_str_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_group=\"\"\
    \n  local max_level_group_len=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren_group_len=0\n  local paren_group_start=0\n\
    \  local paren_group_end=0\n  local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local level=0\n    local level_group=\"\"\n    local level_group_count=0\n\
    \    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group_count=0\n\
    \    local level_group_count_max_group_count_max=0\n    local level_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count=0\n    local level_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group=\"\"\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max=0\n\
    \    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group_count_max_group=\"\
    \"\n    local level_group_count_max_group_count_max_group_count_max_group_count_max_group_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_groups=()\n    local paren_group=''\n\
    \    local paren_group_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_index2=0\n  \
    \  local paren_level_str_index3=0\n    local paren_level_str_index4=0\n    local\
    \ paren_level_str_index5=0\n    local paren_level_str_index6=0\n    local paren_level_str_index7=0\n\
    \    local paren_level_str_index8=0\n    local paren_level_str_index9=0\n    local\
    \ paren_level_str_index10=0\n    local paren_level_str_index11=0\n    local paren_level_str_index12=0\n\
    \    local paren_level_str_index13=0\n    local paren_level_str_index14=0\n  \
    \  local paren_level_str_index15=0\n    local paren_level_str_index16=0\n    local\
    \ paren_level_str_index17=0\n    local paren_level_str_index18=0\n    local paren_level_str_index19=0\n\
    \    local paren_level_str_index20=0\n    local paren_level_str_index21=0\n  \
    \  local paren_level_str_index22=0\n    local paren_level_str_index23=0\n    local\
    \ paren_level_str_index24=0\n    local paren_level_str_index25=0\n    local paren_level_str_index26=0\n\
    \    local paren_level_str_index27=0\n    local paren_level_str_index28=0\n  \
    \  local paren_level_str_index29=0\n    local paren_level_str_index30=0\n    local\
    \ paren_level_str_index31=0\n    local paren_level_str_index32=0\n    local paren_level_str_index33=0\n\
    \    local paren_level_str_index34=0\n    local paren_level_str_index35=0\n  \
    \  local paren_level_str_index36=0\n    local paren_level_str_index37=0\n    local\
    \ paren_level_str_index38=0\n    local paren_level_str_index39=0\n    local paren_level_str_index40=0\n\
    \    local paren_level_str_index41=0\n    local paren_level_str_index42=0\n  \
    \  local paren_level_str_index43=0\n    local paren_level_str_index44=0\n    local\
    \ paren_level_str_index45=0\n    local paren_level_str_index46=0\n    local paren_level_str_index47=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_str_count=0\n    local level_str_count2=0\n    local level_str_count3=0\n\
    \    local level_str_count4=0\n    local level_str_count5=0\n    local level_str_count6=0\n\
    \    local level_str_count7=0\n    local level_str_count8=0\n    local level_str_count9=0\n\
    \    local level_str_count10=0\n    local level_str_count11=0\n    local level_str_count12=0\n\
    \    local level_str_count13=0\n    local level_str_count14=0\n    local level_str_count15=0\n\
    \    local level_str_count16=0\n    local level_str_count17=0\n    local level_str_count18=0\n\
    \    local level_str_count19=0\n    local level_str_count20=0\n    local level_str_count21=0\n\
    \    local level_str_count22=0\n    local level_str_count23=0\n    local level_str_count24=0\n\
    \    local level_str_count25=0\n    local level_str_count26=0\n    local level_str_count27=0\n\
    \    local level_str_count28=0\n    local level_str_count29=0\n    local level_str_count30=0\n\
    \    local level_str_count31=0\n    local level_str_count32=0\n    local level_str_count33=0\n\
    \    local level_str_count34=0\n    local level_str_count35=0\n    local level_str_count36=0\n\
    \    local level_str_count37=0\n    local level_str_count38=0\n    local level_str_count39=0\n\
    \    local level_str_count40=0\n    local level_str_count41=0\n    local level_str_count42=0\n\
    \    local level_str_count43=0\n    local level_str_count44=0\n    local level_str_count45=0\n\
    \    local level_str_count46=0\n    local level_str_count47=0\n    local level_str_count48=0\n\
    \    local level_str_count49=0\n    local level_str_count50=0\n    local level_str_count51=0\n\
    \    local level_str_count52=0\n    local level_str_count53=0\n    local level_str_count54=0\n\
    \    local level_str_count55=0\n    local level_str_count56=0\n    local level_str_count57=0\n\
    \    local level_str_count58=0\n    local level_str_count59=0\n    local \n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_group_index=0\n\
    \    local paren_group_count=0\n    local paren_group_chars=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char=\"\"\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n \
    \   local paren_group_char=\"\"\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char=\"\"\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n \
    \   local paren_group_char=\"\"\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char=\"\"\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n \
    \   local paren_group_char=\"\"\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char=\"\"\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n \
    \   local paren_group_char=\"\"\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char=\"\"\n    local\
    \ paren_group_char_index=0\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local depth=0\n    local paren_level=0\n    local\
    \ paren_char='('\n    local paren_levels=()\n    local paren_levels_str=''\n \
    \   local paren_levels_str_depth=''\n    local paren_levels_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str=''\n    local paren_levels_str_depth_max_str_depth=0\n\
    \    local paren_levels_str_depth_max_str_depth_max=0\n    local paren_levels_str_depth_max_str_depth_max_str=''\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth=0\n    local paren_levels_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str=''\n   \
    \ local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n \
    \   local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=''\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=''\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=''\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_level=0\n\
    \  local paren_group\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n  local paren_group_count\n\
    \  local paren_group_counts\n  local paren_group_count\n  local paren_group_counts\n\
    \  local paren_group_count\n  local paren_group_counts\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_groups=$1\n  local parens_group_count=0\n\
    \  local parens_group_level=0\n  local parens_group_output=\"\"\n  local parens_group_outputs=()\n\
    \  local parens_group_outputs_count=()\n  local parens_group_outputs_level=()\n\
    \  local parens_group_outputs_level_count=()\n  local parens_group_outputs_level_output=\"\
    \"\n  local parens_group_outputs_level_outputs=()\n  local parens_group_outputs_level_outputs_count=()\n\
    \  local parens_group_outputs_level_outputs_level=()\n  local parens_group_outputs_level_outputs_level_count=()\n\
    \  local parens_group_outputs_level_outputs_level_output=\"\"\n  local parens_group_outputs_level_outputs_level_outputs=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_count=()\n  local parens_group_outputs_level_outputs_level_outputs_level=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_count=()\n  local\
    \ parens_group_outputs_level_outputs_level_outputs_level_output=\"\"\n  local\
    \ parens_group_outputs_level_outputs_level_outputs_level_outputs=()\n  local parens_group_outputs_level_outputs_level_outputs_level_outputs_count=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_count=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_output=\"\
    \"\n  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_count=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_count=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_output=\"\
    \"\n  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_outputs=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_outputs_count=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_count=()\n\
    \  local parens_group_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_outputs_level_output=\"\
    \"\n  local parens_group_output\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_group_index=0\n    local paren_group\n    local level\n    local\
    \ level_index\n    local paren_group_count\n    local paren_group_count_index\n\
    \    local paren_group_count_value\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_group_count_value_index\n    local paren_group_count_value_index\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_index=0\n    local\
    \ paren_char\n    local paren_char_index=0\n    local paren_char_count=0\n   \
    \ local paren_char_index2=0\n    local paren_char_count2=0\n    local paren_char_index3=0\n\
    \    local paren_char_count3=0\n    local paren_char_index4=0\n    local paren_char_count4=0\n\
    \    local paren_char_index5=0\n    local paren_char_count5=0\n    local paren_char_index6=0\n\
    \    local paren_char_count6=0\n    local paren_char_index7=0\n    local paren_char_count7=0\n\
    \    local paren_char_index8=0\n    local paren_char_count8=0\n    local paren_char_index9=0\n\
    \    local paren_char_count9=0\n    local paren_char_index10=0\n    local paren_char_count10=0\n\
    \    local paren_char_index11=0\n    local paren_char_count11=0\n    local paren_char_index12=0\n\
    \    local paren_char_count12=0\n    local paren_char_index13=0\n    local paren_char_count13=0\n\
    \    local paren_char_index14=0\n    local paren_char_count14=0\n    local paren_char_index15=0\n\
    \    local paren_char_count15=0\n    local paren_char_index16=0\n    local paren_char_count16=0\n\
    \    local paren_char_index17=0\n    local paren_char_count17=0\n    local paren_char_index18=0\n\
    \    local paren_char_count18=0\n    local paren_char_index19=0\n    local paren_char_count19=0\n\
    \    local paren_char_index20=0\n    local paren_char_count20=0\n    local paren_char_index21=0\n\
    \    local paren_char_count21=0\n    local paren_char_index22=0\n    local paren_char_count22=0\n\
    \    local paren_char_index23=0\n    local paren_char_count23=0\n    local paren_char_index24=0\n\
    \    local paren_char_count24=0\n    local paren_char_index25=0\n    local paren_char_count25=0\n\
    \    local paren_char_index26=0\n    local paren_char_count26=0\n    local \n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_level_str=\"\
    \"\n  local paren_level_str_index=0\n  local paren_level_str_index2=0\n  local\
    \ paren_level_str_index3=0\n  local paren_level_str_index4=0\n  local paren_level_str_index5=0\n\
    \  local paren_level_str_index6=0\n  local paren_level_str_index7=0\n  local paren_level_str_index8=0\n\
    \  local paren_level_str_index9=0\n  local paren_level_str_index10=0\n  local\
    \ paren_level_str_index11=0\n  local paren_level_str_index12=0\n  local paren_level_str_index13=0\n\
    \  local paren_level_str_index14=0\n  local paren_level_str_index15=0\n  local\
    \ paren_level_str_index16=0\n  local paren_level_str_index17=0\n  local paren_level_str_index18=0\n\
    \  local paren_level_str_index19=0\n  local paren_level_str_index20=0\n  local\
    \ paren_level_str_index21=0\n  local paren_level_str_index22=0\n  local paren_level_str_index23=0\n\
    \  local paren_level_str_index24=0\n  local paren_level_str_index25=0\n  local\
    \ paren_level_str_index26=0\n  local paren_level_str_index27=0\n  local paren_level_str_index28=0\n\
    \  local paren_level_str_index29=0\n  local paren_level_str_index30=0\n  local\
    \ paren_level_str_index31=0\n  local paren_level_str_index32=0\n  local paren_level_str_index33=0\n\
    \  local paren_level_str_index34=0\n  local paren_level_str_index35=0\n  local\
    \ paren_level_str_index36=0\n  local paren_level_str_index37=0\n  local paren_level_str_index38=0\n\
    \  local paren_level_str_index39=0\n  local paren_level_str_index40=0\n  local\
    \ paren_level_str_index41=0\n  local paren_level_str_index42=0\n  local paren_level_str_index43=0\n\
    \  local paren_level_str_index44=0\n  local paren_level_str_index45=0\n  local\
    \ paren_level_str_index46=0\n  local paren_level_str_index47=0\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=\"$1\"\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_group_index=0\n  local paren_group\n  local level\n  local i\n\
    \  local j\n  local paren_group_count\n  local paren_group_counts\n  local paren_group_counts_index\n\
    \  local paren_group_counts_indexs\n  local paren_group_counts_indexes_count\n\
    \  local paren_group_counts_indexes_counts\n  local paren_group_counts_indexes_counts_index\n\
    \  local paren_group_counts_indexes_counts_indexs\n  local paren_group_counts_indexes_counts_indexes_count\n\
    \  local paren_group_counts_indexes_counts_indexes_counts\n  local paren_group_counts_indexes_counts_indexes_counts_index\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexs\n  local paren_group_counts_indexes_counts_indexes_counts_indexes_count\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts\n  local\
    \ paren_group_counts_indexes_counts_indexes_counts_indexes_counts_index\n  local\
    \ paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexs\n  local\
    \ paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\n\
    \  local paren_group_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\n\
    \  local paren_group_counts_indexes_counts_index\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local paren_level=0\n    local paren_nesting=0\n\
    \    local paren_nesting_count=0\n    local paren_nesting_level=0\n    local paren_nesting_level_max=0\n\
    \    local paren_nesting_level_max_count=0\n    local paren_nesting_level_max_count2=0\n\
    \    local paren_nesting_level_max_count3=0\n    local paren_nesting_level_max_count4=0\n\
    \    local paren_nesting_level_max_count5=0\n    local paren_nesting_level_max_count6=0\n\
    \    local paren_nesting_level_max_count7=0\n    local paren_nesting_level_max_count8=0\n\
    \    local paren_nesting_level_max_count9=0\n    local paren_nesting_level_max_count10=0\n\
    \    local paren_nesting_level_max_count11=0\n    local paren_nesting_level_max_count12=0\n\
    \    local paren_nesting_level_max_count13=0\n    local paren_nesting_level_max_count14=0\n\
    \    local paren_nesting_level_max_count15=0\n    local paren_nesting_level_max_count16=0\n\
    \    local paren_nesting_level_max_count17=0\n    local paren_nesting_level_max_count18=0\n\
    \    local paren_nesting_level_max_count19=0\n    local paren_nesting_level_max_count20=0\n\
    \    local paren_nesting_level_max_count21=0\n    local paren_nesting_level_max_count22=0\n\
    \    local paren_nesting_level_max_count23=0\n    local paren_nesting_level_max_count24=0\n\
    \    local paren_nesting_level_max_count25=0\n    local paren_nesting_level_max_count26=0\n\
    \    local paren_nesting_level_max_count27=0\n    local paren_nesting_level_max_count28=0\n\
    \    local paren_nesting_level_max_count29=0\n    local paren_nesting_level_max_count30=0\n\
    \    local paren_nesting_level_max_count31=0\n    local paren_nesting_level_max_count32=0\n\
    \    local paren_nesting_level_max_count33=0\n    local paren_nesting_level_max_count34=0\n\
    \    local paren_nesting_level_max_count35=0\n    local paren_nesting_level_max_count36=0\n\
    \    local paren_nesting_level_max_count37=0\n    local paren_nesting_level_max_count38=0\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_groups=()\n    local paren_group=\"\
    \"\n    local paren_group_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local level=0\n  local paren_level=0\n  local paren_char='('\n  local paren_char_count=0\n\
    \  local paren_char_count2=0\n  local paren_char_count3=0\n  local paren_char_count4=0\n\
    \  local paren_char_count5=0\n  local paren_char_count6=0\n  local paren_char_count7=0\n\
    \  local paren_char_count8=0\n  local paren_char_count9=0\n  local paren_char_count10=0\n\
    \  local paren_char_count11=0\n  local paren_char_count12=0\n  local paren_char_count13=0\n\
    \  local paren_char_count14=0\n  local paren_char_count15=0\n  local paren_char_count16=0\n\
    \  local paren_char_count17=0\n  local paren_char_count18=0\n  local paren_char_count19=0\n\
    \  local paren_char_count20=0\n  local paren_char_count21=0\n  local paren_char_count22=0\n\
    \  local paren_char_count23=0\n  local paren_char_count24=0\n  local paren_char_count25=0\n\
    \  local paren_char_count26=0\n  local paren_char_count27=0\n  local paren_char_count28=0\n\
    \  local paren_char_count29=0\n  local paren_char_count30=0\n  local paren_char_count31=0\n\
    \  local paren_char_count32=0\n  local paren_char_count33=0\n  local paren_char_count34=0\n\
    \  local paren_char_count35=0\n  local paren_char_count36=0\n  local paren_char_count37=0\n\
    \  local paren_char_count38=0\n  local paren_char_count39=0\n  local paren_char_count40=0\n\
    \  local paren_char_count41=0\n  local paren_char_count42=0\n  local paren_char_count43=0\n\
    \  local paren_char_count44=0\n  local paren_char_count45=0\n  local paren_char_count46=0\n\
    \  local paren_char_count47=0\n  local paren_char_count48=0\n  local paren_char_count49=0\n\
    \  local paren_char_count50=0\n  local paren_char_count51=0\n  local paren_char_count52=0\n\
    \  local paren_char_count53=0\n  local paren_char_count54=0\n  local paren_char_count55\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=\"\"\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_char=\"\"\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char=\"\"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char=\"\
    \"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_level=0\n\
    \  local paren_nesting_level=0\n  local paren_nesting_levels=()\n  local paren_nesting_levels_string=\"\
    \"\n  local paren_nesting_levels_strings=()\n  local paren_nesting_levels_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings=()\n  local paren_nesting_levels_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings=()\n  local paren_nesting_levels_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings=()\n  local paren_nesting_levels_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings=()\n\
    \  local paren_nesting_levels_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings=()\n\
    \  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string=\"\
    \"\n  local paren_nesting_levels_strings_strings_strings_strings_strings_strings_strings_strings_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    local paren_group_counts\n    local paren_group_count\n    local paren_group_counts\n\
    \    local paren_group_count\n    local paren_group_counts\n    local paren_group_count\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_group\n    local paren_group_level\n    local paren_group_contents\n\
    \    local paren_group_contents_level\n    local paren_group_contents_contents\n\
    \    local paren_group_contents_contents_level\n    local paren_group_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_level\n    local paren_group_contents_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_contents_level\n    local paren_group_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_level\n\
    \    local paren_group_contents_contents_contents_contents_contents_contents_contents_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local level=0\n    local paren_level=0\n    local paren_levels=()\n \
    \   local paren_levels_string=\"\"\n    local paren_levels_string2=\"\"\n    local\
    \ paren_levels_string3=\"\"\n    local paren_levels_string4=\"\"\n    local paren_levels_string5=\"\
    \"\n    local paren_levels_string6=\"\"\n    local paren_levels_string7=\"\"\n\
    \    local paren_levels_string8=\"\"\n    local paren_levels_string9=\"\"\n  \
    \  local paren_levels_string10=\"\"\n    local paren_levels_string11=\"\"\n  \
    \  local paren_levels_string12=\"\"\n    local paren_levels_string13=\"\"\n  \
    \  local paren_levels_string14=\"\"\n    local paren_levels_string15=\"\"\n  \
    \  local paren_levels_string16=\"\"\n    local paren_levels_string17=\"\"\n  \
    \  local paren_levels_string18=\"\"\n    local paren_levels_string19=\"\"\n  \
    \  local paren_levels_string20=\"\"\n    local paren_levels_string21=\"\"\n  \
    \  local paren_levels_string22=\"\"\n    local paren_levels_string23=\"\"\n  \
    \  local paren_levels_string24=\"\"\n    local paren_levels_string25=\"\"\n  \
    \  local paren_levels_string26=\"\"\n    local paren_levels_string27=\"\"\n  \
    \  local paren_levels_string28=\"\"\n    local paren_levels_string29=\"\"\n  \
    \  local paren_levels_string30=\"\"\n    local paren_levels_string31=\"\"\n  \
    \  local paren_levels_string32=\"\"\n    local paren_levels_string33=\"\"\n  \
    \  local paren_levels_string34=\"\"\n    local paren_levels_string35=\"\"\n  \
    \  local paren_levels_string36=\"\"\n    local paren_levels_string37=\"\"\n  \
    \  local paren_levels_string38=\"\"\n    local paren_levels_string39=\"\"\n  \
    \  local paren_levels_string40=\"\"\n    local paren_levels_string41=\"\"\n  \
    \  local paren_levels_string42=\"\"\n    local paren_levels_string43=\"\"\n  \
    \  local paren_levels_string44=\"\"\n    local paren_levels_string45=\"\"\n  \
    \  local paren_levels_string46=\"\"\n    local paren_levels_string47=\"\"\n  \
    \  local paren_levels_string48=\"\"\n    local paren_levels_string49=\"\"\n  \
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local paren_group\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_max_level\n    local paren_group_max_level_count\n\
    \    local paren_group_max_level_char\n    local paren_group_max_level_char_count\n\
    \    local paren_group_max_level_char_count_in_group\n    local paren_group_max_level_char_count_in_group_count\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group\n    local\
    \ paren_group_max_level_char_count_in_group_count_in_group_count\n    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group_count_in_group\n\
    \    local paren_group_max_level_char_count_in_group_count_in_group_count_in_group_count_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local level_str=\"\"\n    local level_num=0\n    local level_num_str=\"\
    \"\n    local level_num_str2=\"\"\n    local level_num_str2=\"\"\n    local level_num_str3=\"\
    \"\n    local level_num_str4=\"\"\n    local level_num_str5=\"\"\n    local level_num_str6=\"\
    \"\n    local level_num_str7=\"\"\n    local level_num_str8=\"\"\n    local level_num_str9=\"\
    \"\n    local level_num_str10=\"\"\n    local level_num_str11=\"\"\n    local\
    \ level_num_str12=\"\"\n    local level_num_str13=\"\"\n    local level_num_str14=\"\
    \"\n    local level_num_str15=\"\"\n    local level_num_str16=\"\"\n    local\
    \ level_num_str17=\"\"\n    local level_num_str18=\"\"\n    local level_num_str19=\"\
    \"\n    local level_num_str20=\"\"\n    local level_num_str21=\"\"\n    local\
    \ level_num_str22=\"\"\n    local level_num_str23=\"\"\n    local level_num_str24=\"\
    \"\n    local level_num_str25=\"\"\n    local level_num_str26=\"\"\n    local\
    \ level_num_str27=\"\"\n    local level_num_str28=\"\"\n    local level_num_str29=\"\
    \"\n    local level_num_str30=\"\"\n    local level_num_str31=\"\"\n    local\
    \ level_num_str32=\"\"\n    local level_num_str33=\"\"\n    local level_num_str34=\"\
    \"\n    local level_num_str35=\"\"\n    local level_num_str36=\"\"\n    local\
    \ level_num_str37=\"\"\n    local level_num_str38=\"\"\n    local level_num_str39=\"\
    \"\n    local level_num_str40=\"\"\n    local level_num_str41=\"\"\n    local\
    \ level_num_str42=\"\"\n    local level_num_str43=\"\"\n    local level_num_str44=\"\
    \"\n    local level_num_str45=\"\"\n    local level_num_str46=\"\"\n    local\
    \ level_num_str47=\"\"\n    local level_num_str48=\"\"\n    local level_num_str49=\"\
    \"\n    local level_num_str50=\"\"\n    local level_num_str51=\"\"\n    local\
    \ level_num_str52=\"\"\n    local level_num_str53=\"\"\n    local level_num_str54=\"\
    \"\n    local level_num_str55=\"\"\n    local level_num_str56=\"\"\n    local\
    \ level_num_str57=\"\"\n    local level_num_str58=\"\"\n    local level_num_str59=\"\
    \"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_group_index=0\n\
    \    local paren_group_count=0\n    local paren_group_length=0\n    local paren_group_chars=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local \n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local nested_parens_str=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local level=0\n    local level_str=\"\"\n    local parens_str=\"\"\n \
    \   local parens_str_len=0\n    local parens_str_len_max=0\n    local parens_str_len_max_str=\"\
    \"\n    local parens_str_len_max_str_len=0\n    local parens_str_len_max_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len=0\n    local parens_str_len_max_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len=0\n    local parens_str_len_max_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len=0\n    local\
    \ parens_str_len_max_str_len_str_len_str_len_str_len_str=\"\"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str=\"\"\
    \n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_level_char=\n\
    \  local paren_level_char_index=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local max_level_group_len_count=0\n \
    \   local max_level_group_len_count2=0\n    local max_level_group_len_count3=0\n\
    \    local max_level_group_len_count4=0\n    local max_level_group_len_count5=0\n\
    \    local max_level_group_len_count6=0\n    local max_level_group_len_count7=0\n\
    \    local max_level_group_len_count8=0\n    local max_level_group_len_count9=0\n\
    \    local max_level_group_len_count10=0\n    local max_level_group_len_count11=0\n\
    \    local max_level_group_len_count12=0\n    local max_level_group_len_count13=0\n\
    \    local max_level_group_len_count14=0\n    local max_level_group_len_count15=0\n\
    \    local max_level_group_len_count16=0\n    local max_level_group_len_count17=0\n\
    \    local max_level_group_len_count18=0\n    local max_level_group_len_count19=0\n\
    \    local max_level_group_len_count20=0\n    local max_level_group_len_count21=0\n\
    \    local max_level_group_len_count22=0\n    local max_level_group_len_count23=0\n\
    \    local max_level_group_len_count24=0\n    local max_level_group_len_count25=0\n\
    \    local max_level_group_len_count26=0\n    local max_level_group_len_count27=0\n\
    \    local max_level_group_len_count28=0\n    local max_level_group_len_count29=0\n\
    \    local max_level_group_len_count30=0\n    local max_level_group_len_count31=0\n\
    \    local max_level_group_len_count32=0\n    local max_level_group_len_count33=0\n\
    \    local max_level_group_len_count34=0\n    local max_level_group_len_count35=0\n\
    \    local max_level_group_len_count36=0\n    local max_level_group_len_count37=0\n\
    \    local max_level_group_len_count38=0\n    local max_level_group_len_count39=0\n\
    \    local max_level_group_len_count40=0\n    local max_level_group_len_count41=0\n\
    \    local max_level_group_len_count42=0\n    local max_level_group_len_count43=0\n\
    \    local max_level_group_len_count44=0\n    local max_level_group_len_count45=0\n\
    \    local max_level_group_len_count46=0\n    local max_level_group_len_count47=0\n\
    \    local max_level_group_len_count48=0\n    local max_level_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local max_level_group_len_count=0\n \
    \   local level=0\n    local level_group=\"\"\n    local level_group_len=0\n \
    \   local level_group_len_count=0\n    local level_group_count=0\n    local level_group_count2=0\n\
    \    local level_group_count3=0\n    local level_group_count4=0\n    local level_group_count5=0\n\
    \    local level_group_count6=0\n    local level_group_count7=0\n    local level_group_count8=0\n\
    \    local level_group_count9=0\n    local level_group_count10=0\n    local level_group_count11=0\n\
    \    local level_group_count12=0\n    local level_group_count13=0\n    local level_group_count14=0\n\
    \    local level_group_count15=0\n    local level_group_count16=0\n    local level_group_count17=0\n\
    \    local level_group_count18=0\n    local level_group_count19=0\n    local level_group_count20=0\n\
    \    local level_group_count21=0\n    local level_group_count22=0\n    local level_group_count23=0\n\
    \    local level_group_count24=0\n    local level_group_count25=0\n    local level_group_count26=0\n\
    \    local level_group_count27=0\n    local level_group_count28=0\n    local level_group_count29=0\n\
    \    local level_group_count30=0\n    local level_group_count31=0\n    local level_group_count32=0\n\
    \    local level_group_count33=0\n    local level_group_count34=0\n    local level_group_count35=0\n\
    \    local level_group_count36=0\n    local level_group_count37=0\n    local level_group_count38=0\n\
    \    local level_group_count39=0\n    local level_group_count40=0\n    local level_group_count41=0\n\
    \    local level_group_count42=0\n    local level_group_count43=0\n    local level_group_count44=0\n\
    \    local level_group_count45=0\n    local level_group_count46=0\n    local level_group_count47=0\n\
    \    local level_group_count48=0\n    local level_group_count49=0\n    local level_group_count50=0\n\
    \    local level_group_count51=0\n    local level_group_count52=0\n    local level_group_count53=0\n\
    \    local level_group_count54=0\n    local level_group_count55=0\n    local level_group_count56=0\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local level=0\n    local paren_level=0\n    local\
    \ paren_open=0\n    local paren_close=0\n    local paren_levels=()\n    local\
    \ paren_levels_str=\"\"\n    local paren_levels_str_count=0\n    local paren_levels_str_count2=0\n\
    \    local paren_levels_str_count3=0\n    local paren_levels_str_count4=0\n  \
    \  local paren_levels_str_count5=0\n    local paren_levels_str_count6=0\n    local\
    \ paren_levels_str_count7=0\n    local paren_levels_str_count8=0\n    local paren_levels_str_count9=0\n\
    \    local paren_levels_str_count10=0\n    local paren_levels_str_count11=0\n\
    \    local paren_levels_str_count12=0\n    local paren_levels_str_count13=0\n\
    \    local paren_levels_str_count14=0\n    local paren_levels_str_count15=0\n\
    \    local paren_levels_str_count16=0\n    local paren_levels_str_count17=0\n\
    \    local paren_levels_str_count18=0\n    local paren_levels_str_count19=0\n\
    \    local paren_levels_str_count20=0\n    local paren_levels_str_count21=0\n\
    \    local paren_levels_str_count22=0\n    local paren_levels_str_count23=0\n\
    \    local paren_levels_str_count24=0\n    local paren_levels_str_count25=0\n\
    \    local paren_levels_str_count26=0\n    local paren_levels_str_count27=0\n\
    \    local paren_levels_str_count28=0\n    local paren_levels_str_count29=0\n\
    \    local paren_levels_str_count30=0\n    local paren_levels_str_count31=0\n\
    \    local paren_levels_str_count32=0\n    local paren_levels_str_count33=0\n\
    \    local paren_levels_str_count34=0\n    local paren_levels_str_count35=0\n\
    \    local paren_levels_str_count36=0\n    local paren_levels_str_count37=0\n\
    \    local paren_levels_str_count38=0\n    local paren_levels_str_count39=0\n\
    \    local paren_levels_str_count40=0\n    local paren_levels_str_count41=0\n\
    \    local paren_levels_str_count42=0\n    local \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=\"$1\"\n    local paren_groups_arr=(${paren_groups//[(\
    \ )]/})\n    local paren_groups_arr_len=${#paren_groups_arr[@]}\n    local paren_groups_arr_i=0\n\
    \    local paren_groups_arr_j=0\n    local paren_groups_arr_max=0\n    local paren_groups_arr_max_index=0\n\
    \    local paren_groups_arr_max_len=0\n    local paren_groups_arr_max_len_index=0\n\
    \    local paren_groups_arr_max_len_val=0\n    local paren_groups_arr_max_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len=0\n    local paren_groups_arr_max_len_val_len_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    local paren_groups_arr_max_len_val_len_val_index=0\n    local paren_groups_arr_max_len_val_len_val_index=0\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_index2=0\n  \
    \  local paren_level_str_index3=0\n    local paren_level_str_index4=0\n    local\
    \ paren_level_str_index5=0\n    local paren_level_str_index6=0\n    local paren_level_str_index7=0\n\
    \    local paren_level_str_index8=0\n    local paren_level_str_index9=0\n    local\
    \ paren_level_str_index10=0\n    local paren_level_str_index11=0\n    local paren_level_str_index12=0\n\
    \    local paren_level_str_index13=0\n    local paren_level_str_index14=0\n  \
    \  local paren_level_str_index15=0\n    local paren_level_str_index16=0\n    local\
    \ paren_level_str_index17=0\n    local paren_level_str_index18=0\n    local paren_level_str_index19=0\n\
    \    local paren_level_str_index20=0\n    local paren_level_str_index21=0\n  \
    \  local paren_level_str_index22=0\n    local paren_level_str_index23=0\n    local\
    \ paren_level_str_index24=0\n    local paren_level_str_index25=0\n    local paren_level_str_index26=0\n\
    \    local paren_level_str_index27=0\n    local paren_level_str_index28=0\n  \
    \  local paren_level_str_index29=0\n    local paren_level_str_index30=0\n    local\
    \ paren_level_str_index31=0\n    local paren_level_str_index32=0\n    local paren_level_str_index33=0\n\
    \    local paren_level_str_index34=0\n    local paren_level_str_index35=0\n  \
    \  local paren_level_str_index36=0\n    local paren_level_str_index37=0\n    local\
    \ paren_level_str_index38=0\n    local paren_level_str_index39=0\n    local paren_level_str_index40=0\n\
    \    local paren_level_str_index41=0\n    local paren_level_str_index42=0\n  \
    \  local paren_level_str_index43=0\n    local paren_level_str_index44=0\n    local\
    \ paren_level_str_index45=0\n    local paren_level_str_index46=0\n    local paren_level_str_index47=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local depth=0\n  local parens=0\n  local opens=0\n  local\
    \ closes=0\n  local max_opens=0\n  local max_closes=0\n  local max_depth=0\n \
    \ local max_parens=0\n  local max_opens_depth=0\n  local max_closes_depth=0\n\
    \  local max_opens_parens=0\n  local max_closes_parens=0\n  local max_depths=0\n\
    \  local max_parens=0\n  local max_depths_parens=0\n  local max_depths_opens=0\n\
    \  local max_depths_closes=0\n  local max_depths_opens_parens=0\n  local max_depths_closes_parens=0\n\
    \  local max_depths_opens_closes=0\n  local max_depths_opens_closes_parens=0\n\
    \  local max_depths_opens_closes_opens=0\n  local max_depths_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_opens_parens=0\n  local max_depths_opens_closes_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_opens_closes_parens=0\n  local max_depths_opens_closes_closes_closes_opens_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_parens=0\n  local max_depths_opens_closes_closes_closes_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_opens_closes_closes_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_opens_closes_closes_closes_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_opens_closes_closes_closes_opens_closes_closes_opens_closes_closes_parens=0\n\
    \  local max_depths_opens_closes_closes_closes_closes_opens_closes_closes_closes_opens_closes_closes_closes_opens_closes_closes_close\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local level=0\n    local parens=0\n    local parens_string=\"\"\n   \
    \ local parens_string2=\"\"\n    local parens_string3=\"\"\n    local parens_string4=\"\
    \"\n    local parens_string5=\"\"\n    local parens_string6=\"\"\n    local parens_string7=\"\
    \"\n    local parens_string8=\"\"\n    local parens_string9=\"\"\n    local parens_string10=\"\
    \"\n    local parens_string11=\"\"\n    local parens_string12=\"\"\n    local\
    \ parens_string13=\"\"\n    local parens_string14=\"\"\n    local parens_string15=\"\
    \"\n    local parens_string16=\"\"\n    local parens_string17=\"\"\n    local\
    \ parens_string18=\"\"\n    local parens_string19=\"\"\n    local parens_string20=\"\
    \"\n    local parens_string21=\"\"\n    local parens_string22=\"\"\n    local\
    \ parens_string23=\"\"\n    local parens_string24=\"\"\n    local parens_string25=\"\
    \"\n    local parens_string26=\"\"\n    local parens_string27=\"\"\n    local\
    \ parens_string28=\"\"\n    local parens_string29=\"\"\n    local parens_string30=\"\
    \"\n    local parens_string31=\"\"\n    local parens_string32=\"\"\n    local\
    \ parens_string33=\"\"\n    local parens_string34=\"\"\n    local parens_string35=\"\
    \"\n    local parens_string36=\"\"\n    local parens_string37=\"\"\n    local\
    \ parens_string38=\"\"\n    local parens_string39=\"\"\n    local parens_string40=\"\
    \"\n    local parens_string41=\"\"\n    local parens_string42=\"\"\n    local\
    \ parens_string43=\"\"\n    local parens_string44=\"\"\n    local parens_string45=\"\
    \"\n    local parens_string46=\"\"\n    local parens_string47=\"\"\n    local\
    \ parens_string48=\"\"\n    local parens_string49=\"\"\n    local parens_string50=\"\
    \"\n    local parens_string51=\"\"\n    local parens_string52=\"\"\n    local\
    \ parens_string53=\"\"\n    local parens_string54=\"\"\n    local parens_string55=\"\
    \"\n    local parens_string56=\"\"\n    local parens_string57=\"\"\n    local\
    \ parens_string58=\"\"\n    local parens_string59=\"\"\n    local parens_string60=\"\
    \"\n    local parens_string61=\"\"\n    local parens_string62=\"\"\n    local\
    \ parens_string63\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_group_index=0\n\
    \    local paren_group_count=0\n    local paren_group_length=0\n    local paren_group_chars=\"\
    \"\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n \
    \   local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_count=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local level=0\n    local level_group=\"\"\n    local paren_level=0\n \
    \   local paren_level_group=\"\"\n    local paren_group=\"\"\n    local paren_group_level=0\n\
    \    local paren_group_level_group=\"\"\n    local paren_group_level_count=0\n\
    \    local paren_group_level_count_group=\"\"\n    local paren_group_level_count_group2=\"\
    \"\n    local paren_group_level_count_group3=\"\"\n    local paren_group_level_count_group4=\"\
    \"\n    local paren_group_level_count_group5=\"\"\n    local paren_group_level_count_group6=\"\
    \"\n    local paren_group_level_count_group7=\"\"\n    local paren_group_level_count_group8=\"\
    \"\n    local paren_group_level_count_group9=\"\"\n    local paren_group_level_count_group10=\"\
    \"\n    local paren_group_level_count_group11=\"\"\n    local paren_group_level_count_group12=\"\
    \"\n    local paren_group_level_count_group13=\"\"\n    local paren_group_level_count_group14=\"\
    \"\n    local paren_group_level_count_group15=\"\"\n    local paren_group_level_count_group16=\"\
    \"\n    local paren_group_level_count_group17=\"\"\n    local paren_group_level_count_group18=\"\
    \"\n    local paren_group_level_count_group19=\"\"\n    local paren_group_level_count_group20=\"\
    \"\n    local paren_group_level_count_group21=\"\"\n    local paren_group_level_count_group22=\"\
    \"\n    local paren_group_level_count_group23=\"\"\n    local paren_group_level_count_group24=\"\
    \"\n    local paren_group_level_count_group25=\"\"\n    local paren_group_level_count_group26=\"\
    \"\n    local paren_group_level_count_group27=\"\"\n    local paren_group_level_count_group28=\"\
    \"\n    local paren_group_level_count_group29=\"\"\n    local paren_group_level_count_group30=\"\
    \"\n    local paren_group_level_count_group31=\"\"\n    local paren_group_level_count_group32=\"\
    \"\n    local paren_group_level_count_group33=\"\"\n    local paren_group_level_count_group34=\"\
    \"\n    local paren_group_level_count_group35=\"\"\n    local paren_group_level_count_group36=\"\
    \"\n    local paren_group_level_count_group37=\"\"\n    local paren_group_level_count_group38=\"\
    \"\n    local paren_group_level_count_group39=\"\"\n    local paren_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local level=0\n  local parens=0\n  local i=0\n  while [\
    \ $i -lt ${#str} ]; do\n    local c=${str:$i:1}\n    if [ $c == '(' -a $parens\
    \ -gt 0 ]; then\n      (( parens -= 1 ))\n    elif [ $c == ')' -a $parens -gt\
    \ 0 ]; then\n      (( parens += 1 ))\n    elif [ $c == '(' -a $parens == 0 ];\
    \ then\n      (( level += 1 ))\n    elif [ $c == ')' -a $parens == 0 ]; then\n\
    \      (( level -= 1 ))\n    fi\n    i=$(( i + 1 ))\n  done\n  echo $level\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 16: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 18: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 20: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 16: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 18: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 20: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 16: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 18: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 20: [: too many arguments

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 14: [: `)'' expected, found (

    /tmp/tmp3z8_739q.sh: line 18: [: `)'' expected, found (

    '
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_groups=()\n\
    \    local paren_group_count=0\n    local paren_group_length=0\n    local paren_group_lengths=()\n\
    \    local paren_group_lengths_max=0\n    local paren_group_lengths_max_index=0\n\
    \    local paren_group_lengths_max_indexs=()\n    local paren_group_lengths_max_count=0\n\
    \    local paren_group_lengths_max_counts=()\n    local paren_group_lengths_max_counts_index=0\n\
    \    local paren_group_lengths_max_counts_indexs=()\n    local paren_group_lengths_max_counts_count=0\n\
    \    local paren_group_lengths_max_counts_counts=()\n    local paren_group_lengths_max_counts_counts_index=0\n\
    \    local paren_group_lengths_max_counts_counts_indexs=()\n    local paren_group_lengths_max_counts_counts_count=0\n\
    \    local paren_group_lengths_max_counts_counts_counts=()\n    local paren_group_lengths_max_counts_counts_counts_index=0\n\
    \    local paren_group_lengths_max_counts_counts_counts_indexs=()\n    local paren_group_lengths_max_counts_counts_counts_count=0\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts=()\n    local paren_group_lengths_max_counts_counts_counts_counts_index=0\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts_indexs=()\n   \
    \ local paren_group_lengths_max_counts_counts_counts_counts_count=0\n    local\
    \ paren_group_lengths_max_counts_counts_counts_counts_counts=()\n    local paren_group_lengths_max_counts_counts_counts_counts_counts_index=0\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts_counts_indexs=()\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts_counts_count=0\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts_counts_counts=()\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts_counts_counts_index=0\n\
    \    local paren_group_lengths_max_counts_counts_counts_counts_counts_counts_indexs=()\n\
    \    local paren_group_lengths_max_counts_counts_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_level\n    local paren_group_level_index\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_string=$1\n  local parens_string2=$2\n\
    \  local parens_string3=$3\n  local parens_string4=$4\n  local parens_string5=$5\n\
    \  local parens_string6=$6\n  local parens_string7=$7\n  local parens_string8=$8\n\
    \  local parens_string9=$9\n  local parens_string10=${10}\n  local parens_string11=${11}\n\
    \  local parens_string12=${12}\n  local parens_string13=${13}\n  local parens_string14=${14}\n\
    \  local parens_string15=${15}\n  local parens_string16=${16}\n  local parens_string17=${17}\n\
    \  local parens_string18=${18}\n  local parens_string19=${19}\n  local parens_string20=${20}\n\
    \  local parens_string21=${21}\n  local parens_string22=${22}\n  local parens_string23=${23}\n\
    \  local parens_string24=${24}\n  local parens_string25=${25}\n  local parens_string26=${26}\n\
    \  local parens_string27=${27}\n  local parens_string28=${28}\n  local parens_string29=${29}\n\
    \  local parens_string30=${30}\n  local parens_string31=${31}\n  local parens_string32=${32}\n\
    \  local parens_string33=${33}\n  local parens_string34=${34}\n  local parens_string35=${35}\n\
    \  local parens_string36=${36}\n  local parens_string37=${37}\n  local parens_string38=${38}\n\
    \  local parens_string39=${39}\n  local parens_string40=${40}\n  local parens_string41=${41}\n\
    \  local parens_string42=${42}\n  local parens_string43=${43}\n  local parens_string44=${44}\n\
    \  local parens_string45=${45}\n  local parens_string46=${46}\n  local parens_string47=${47}\n\
    \  local parens_string48=${48}\n  local parens_string49=${49}\n  local parens_string50=${50}\n\
    \  local parens_string51=${51}\n  local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local paren_level=0\n    local paren_level_count=0\n    local paren_group_count=0\n\
    \    local paren_group_level=0\n    local paren_group_level_count=0\n    local\
    \ paren_group_level_max=0\n    local paren_group_level_max_count=0\n    local\
    \ paren_group_level_max_count2=0\n    local paren_group_level_max_count3=0\n \
    \   local paren_group_level_max_count4=0\n    local paren_group_level_max_count5=0\n\
    \    local paren_group_level_max_count6=0\n    local paren_group_level_max_count7=0\n\
    \    local paren_group_level_max_count8=0\n    local paren_group_level_max_count9=0\n\
    \    local paren_group_level_max_count10=0\n    local paren_group_level_max_count11=0\n\
    \    local paren_group_level_max_count12=0\n    local paren_group_level_max_count13=0\n\
    \    local paren_group_level_max_count14=0\n    local paren_group_level_max_count15=0\n\
    \    local paren_group_level_max_count16=0\n    local paren_group_level_max_count17=0\n\
    \    local paren_group_level_max_count18=0\n    local paren_group_level_max_count19=0\n\
    \    local paren_group_level_max_count20=0\n    local paren_group_level_max_count21=0\n\
    \    local paren_group_level_max_count22=0\n    local paren_group_level_max_count23=0\n\
    \    local paren_group_level_max_count24=0\n    local paren_group_level_max_count25=0\n\
    \    local paren_group_level_max_count26=0\n    local paren_group_level_max_count27=0\n\
    \    local paren_group_level_max_count28=0\n    local paren_group_level_max_count29=0\n\
    \    local paren_group_level_max_count30=0\n    local paren_group_level_max_count31=0\n\
    \    local paren_group_level_max_count32=0\n    local paren_group_level_max_count33=0\n\
    \    local paren_group_level_max_count34=0\n    local paren_group_level_max_count35=0\n\
    \    local paren_group_level_max_count36=0\n    local paren_group_level_max_count37=0\n\
    \    local paren_group_level_max_count38=0\n    local paren_group_level_max_count39=0\n\
    \    local paren_group_level_max_count40=0\n    local paren\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local max_level_str=\"\"\n    local level=0\n    local level_str=\"\"\n \
    \   local level_str_count=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_len=0\n    local level_str_start=0\n\
    \    local level_str_end=0\n    local level_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_char='\
    \ '\n    local paren_level_char_index=-1\n    local paren_level_chars=()\n   \
    \ local paren_level_char_indexes=()\n    local paren_level_char_indexes_count=${#paren_level_chars[@]}\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    \    local paren_level_char_indexes_count\n    local paren_level_char_indexes_count\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_char=\n\
    \    local paren_level_index=0\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_level_char=\n    local paren_level_char=\n\
    \    local paren_level_char=\n    local paren_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_group=0\n  local parens_groups=()\n\
    \  local parens_group_string=\"\"\n  local parens_group_length=0\n  local parens_group_length_string=\"\
    \"\n  local parens_group_length_string2=\"\"\n  local parens_group_length_string3=\"\
    \"\n  local parens_group_length_string4=\"\"\n  local parens_group_length_string5=\"\
    \"\n  local parens_group_length_string6=\"\"\n  local parens_group_length_string7=\"\
    \"\n  local parens_group_length_string8=\"\"\n  local parens_group_length_string9=\"\
    \"\n  local parens_group_length_string10=\"\"\n  local parens_group_length_string11=\"\
    \"\n  local parens_group_length_string12=\"\"\n  local parens_group_length_string13=\"\
    \"\n  local parens_group_length_string14=\"\"\n  local parens_group_length_string15=\"\
    \"\n  local parens_group_length_string16=\"\"\n  local parens_group_length_string17=\"\
    \"\n  local parens_group_length_string18=\"\"\n  local parens_group_length_string19=\"\
    \"\n  local parens_group_length_string20=\"\"\n  local parens_group_length_string21=\"\
    \"\n  local parens_group_length_string22=\"\"\n  local parens_group_length_string23=\"\
    \"\n  local parens_group_length_string24=\"\"\n  local parens_group_length_string25=\"\
    \"\n  local parens_group_length_string26=\"\"\n  local parens_group_length_string27=\"\
    \"\n  local parens_group_length_string28=\"\"\n  local parens_group_length_string29=\"\
    \"\n  local parens_group_length_string30=\"\"\n  local parens_group_length_string31=\"\
    \"\n  local parens_group_length_string32=\"\"\n  local parens_group_length_string33=\"\
    \"\n  local parens_group_length_string34=\"\"\n  local parens_group_length_string35=\"\
    \"\n  local parens_group_length_string36=\"\"\n  local parens_group_length_string37=\"\
    \"\n  local parens_group_length_string38=\"\"\n  local parens_group_length_string39=\"\
    \"\n  local parens_group_length_string40=\"\"\n  local parens_group_length_string41=\"\
    \"\n  local parens_group_length_string42=\"\"\n  local parens_group_length_string43=\"\
    \"\n  local parens_group_length_string44=\"\"\n  local parens_group_length_string45=\"\
    \"\n  local parens_group_length_string46=\"\"\n  local parens_group_length_string47=\"\
    \"\n  local parens_group_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_groups=()\n  local paren_group_count=0\n\
    \  local paren_group_level=0\n  local paren_group_contents=()\n  local paren_group_contents_level=0\n\
    \  local paren_group_contents_count=0\n  local paren_group_contents_contents=()\n\
    \  local paren_group_contents_contents_level=0\n  local paren_group_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents=()\n  local paren_group_contents_contents_contents_level=0\n\
    \  local paren_group_contents_contents_contents_count=0\n  local paren_group_contents_contents_contents_contents=()\n\
    \  local paren_group_contents_contents_contents_contents_level=0\n  local paren_group_contents_contents_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents_contents_contents=()\n  local\
    \ paren_group_contents_contents_contents_contents_contents_level=0\n  local paren_group_contents_contents_contents_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents=()\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_level=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents=()\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_contents=()\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents=()\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_count=0\n\
    \  local paren_group_contents_contents_contents_content\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local max_level_group_len_count=0\n \
    \   local max_level_group_count=0\n    local max_level_group_count_len=0\n   \
    \ local max_level_group_count_len_count=0\n    local max_level_group_count_count=0\n\
    \    local max_level_group_count_count_len=0\n    local max_level_group_count_count_len_count=0\n\
    \    local max_level_group_count_count_count=0\n    local max_level_group_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_len_count=0\n    local max_level_group_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_len=0\n    local max_level_group_count_count_count_count_len_count=0\n\
    \    local max_level_group_count_count_count_count_count=0\n    local max_level_group_count_count_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_count_count_len_count=0\n    local\
    \ max_level_group_count_count_count_count_count_count=0\n    local max_level_group_count_count_count_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_count_count_count_len_count=0\n \
    \   local max_level_group_count_count_count_count_count_count_count=0\n    local\
    \ max_level_group_count_count_count_count_count_count_count_len=0\n    local max_level_group_count_count_count_count_count_count_count_len_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_len_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_len_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_len_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_len=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_count_len_count=0\n\
    \    local max_level_group_count_count_count_count_count_count_count_count_count_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_groups=$1\n    local parens_group_count=0\n\
    \    local parens_group_level=0\n    local parens_group_start=0\n    local parens_group_end=0\n\
    \    local parens_group_length=0\n    local parens_group_length_count=0\n    local\
    \ parens_group_length_start=0\n    local parens_group_length_end=0\n    local\
    \ parens_group_length_length=0\n    local parens_group_length_length_count=0\n\
    \    local parens_group_length_length_start=0\n    local parens_group_length_length_end=0\n\
    \    local parens_group_length_length_length=0\n    local parens_group_length_length_length_count=0\n\
    \    local parens_group_length_length_length_start=0\n    local parens_group_length_length_length_end=0\n\
    \    local parens_group_length_length_length_length=0\n    local parens_group_length_length_length_length_count=0\n\
    \    local parens_group_length_length_length_length_start=0\n    local parens_group_length_length_length_length_end=0\n\
    \    local parens_group_length_length_length_length_length=0\n    local parens_group_length_length_length_length_length_count=0\n\
    \    local parens_group_length_length_length_length_length_start=0\n    local\
    \ parens_group_length_length_length_length_length_end=0\n    local parens_group_length_length_length_length_length_length=0\n\
    \    local parens_group_length_length_length_length_length_count=0\n    local\
    \ parens_group_length_length_length_length_length_start=0\n    local parens_group_length_length_length_length_length_end=0\n\
    \    local parens_group_length_length_length_length_length_length=0\n    local\
    \ parens_group_length_length_length_length_length_length_count=0\n    local parens_group_length_length_length_length_length_length_start=0\n\
    \    local parens_group_length_length_length_length_length_length_end=0\n    local\
    \ parens_group_length_length_length_length_length_length_length=0\n    local parens_group_length_length_length_length_length_length_count=0\n\
    \    local parens_group_length_length_length_length_length_length_start=0\n  \
    \  local parens_group_length_length_length_length_length_length_end=0\n    local\
    \ parens_group_length_length_length_length_length_length_length=0\n    local parens_group_length_length_length_length_length_length_count=0\n\
    \    local parens_group_length_length_length_length_length_length_start=0\n  \
    \  local parens_group_length_length_length_length_length_length_end=0\n    local\
    \ parens_group_length_length_length_length_length_length_length=0\n    local parens_group_length_length_length_length_length_length_count=0\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_str=$1\n  local paren_groups=()\n  local\
    \ paren_group_str=\"\"\n  local paren_group_str_count=0\n  local paren_group_count=0\n\
    \  local paren_group_str_count2=0\n  local paren_group_count2=0\n  local paren_group_str_count3=0\n\
    \  local paren_group_count3=0\n  local paren_group_str_count4=0\n  local paren_group_count4=0\n\
    \  local paren_group_str_count5=0\n  local paren_group_count5=0\n  local paren_group_str_count6=0\n\
    \  local paren_group_count6=0\n  local paren_group_str_count7=0\n  local paren_group_count7=0\n\
    \  local paren_group_str_count8=0\n  local paren_group_count8=0\n  local paren_group_str_count9=0\n\
    \  local paren_group_count9=0\n  local paren_group_str_count10=0\n  local paren_group_count10=0\n\
    \  local paren_group_str_count11=0\n  local paren_group_count11=0\n  local paren_group_str_count12=0\n\
    \  local paren_group_count12=0\n  local paren_group_str_count13=0\n  local paren_group_count13=0\n\
    \  local paren_group_str_count14=0\n  local paren_group_count14=0\n  local paren_group_str_count15=0\n\
    \  local paren_group_count15=0\n  local paren_group_str_count16=0\n  local paren_group_count16=0\n\
    \  local paren_group_str_count17=0\n  local paren_group_count17=0\n  local paren_group_str_count18=0\n\
    \  local paren_group_count18=0\n  local paren_group_str_count19=0\n  local paren_group_count19=0\n\
    \  local paren_group_str_count20=0\n  local paren_group_count20=0\n  local paren_group_str_count21=0\n\
    \  local paren_group_count21=0\n  local paren_group_str_count22=0\n  local paren_group_count22=0\n\
    \  local paren_group_str_count23=0\n  local paren_group_count23=0\n  local paren_group_str_count24=0\n\
    \  local paren_group_count24=0\n  local paren_group_str_count25=0\n  local paren_group_count25=0\n\
    \  local paren_group_str_count26\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local max_level_group=\"\"\n    local level=0\n    local level_group=\"\"\
    \n    local level_group_count=0\n    local level_group_count2=0\n    local level_group_count3=0\n\
    \    local level_group_count4=0\n    local level_group_count5=0\n    local level_group_count6=0\n\
    \    local level_group_count7=0\n    local level_group_count8=0\n    local level_group_count9=0\n\
    \    local level_group_count10=0\n    local level_group_count11=0\n    local level_group_count12=0\n\
    \    local level_group_count13=0\n    local level_group_count14=0\n    local level_group_count15=0\n\
    \    local level_group_count16=0\n    local level_group_count17=0\n    local level_group_count18=0\n\
    \    local level_group_count19=0\n    local level_group_count20=0\n    local level_group_count21=0\n\
    \    local level_group_count22=0\n    local level_group_count23=0\n    local level_group_count24=0\n\
    \    local level_group_count25=0\n    local level_group_count26=0\n    local level_group_count27=0\n\
    \    local level_group_count28=0\n    local level_group_count29=0\n    local level_group_count30=0\n\
    \    local level_group_count31=0\n    local level_group_count32=0\n    local level_group_count33=0\n\
    \    local level_group_count34=0\n    local level_group_count35=0\n    local level_group_count36=0\n\
    \    local level_group_count37=0\n    local level_group_count38=0\n    local level_group_count39=0\n\
    \    local level_group_count40=0\n    local level_group_count41=0\n    local level_group_count42=0\n\
    \    local level_group_count43=0\n    local level_group_count44=0\n    local level_group_count45=0\n\
    \    local level_group_count46=0\n    local level_group_count47=0\n    local level_group_count48=0\n\
    \    local level_group_count49=0\n    local level_group_count50=0\n    local level_group_count51=0\n\
    \    local level_group_count52=0\n    local level_group_count53=0\n    local level_group_count54=0\n\
    \    local level_group_count55=0\n    local level_group_count56=0\n    local level_group_count57=0\n\
    \    local level_group_count58=0\n    local level_group_count59=0\n    local \n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=\"\"\n  local paren_group_count=0\n\
    \  local paren_group_length=0\n  local paren_group_start=0\n  local paren_group_end=0\n\
    \  local paren_group_char=\"\"\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_start=0\n  local paren_group_char_end=0\n  local paren_group_char_index=0\n\
    \  local paren_group_char_indexes=()\n  local paren_group_char_indexes_count=0\n\
    \  local paren_group_char_indexes_length=0\n  local paren_group_char_indexes_start=0\n\
    \  local paren_group_char_indexes_end=0\n  local paren_group_char_indexes_index=0\n\
    \  local paren_group_char_indexes_indexes=()\n  local paren_group_char_indexes_indexes_count=0\n\
    \  local paren_group_char_indexes_indexes_length=0\n  local paren_group_char_indexes_indexes_start=0\n\
    \  local paren_group_char_indexes_indexes_end=0\n  local paren_group_char_indexes_indexes_index=0\n\
    \  local paren_group_char_indexes_indexes_indexes=()\n  local paren_group_char_indexes_indexes_indexes_count=0\n\
    \  local paren_group_char_indexes_indexes_indexes_length=0\n  local paren_group_char_indexes_indexes_start=0\n\
    \  local paren_group_char_indexes_indexes_end=0\n  local paren_group_char_indexes_indexes_index=0\n\
    \  local paren_group_char_indexes_indexes_indexes=()\n  local paren_group_char_indexes_indexes_indexes_count=0\n\
    \  local paren_group_char_indexes_indexes_indexes_length=0\n  local paren_group_char_indexes_indexes_start=0\n\
    \  local paren_group_char_indexes_indexes_end=0\n  local paren_group_char_indexes_indexes_index=0\n\
    \  local paren_group_char_indexes_indexes_indexes=()\n  local paren_group_char_indexes_indexes_indexes_count=0\n\
    \  local paren_group_char_indexes_indexes_indexes_length=0\n  local paren_group_char_indexes_indexes_start=0\n\
    \  local paren_group_char_indexes_indexes_end=0\n  local paren_group_char_indexes_indexes_index=0\n\
    \  local paren_group_char_indexes_indexes_indexes=()\n  local paren_group_char_index\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=\"\"\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_start=0\n    local paren_group_end=0\n\
    \    local paren_group_length=0\n    local paren_group_char=\"\"\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char=\"\"\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char=\"\"\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_length=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_length=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_length=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_count=0\n    local paren_group_char_length=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_length=0\n    local paren_group_char_index=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local paren_level=0\n    local paren_level_str=\"\"\n    local paren_level_str2=\"\
    \"\n    local paren_level_str2=\"\"\n    local paren_level_str3=\"\"\n    local\
    \ paren_level_str4=\"\"\n    local paren_level_str5=\"\"\n    local paren_level_str6=\"\
    \"\n    local paren_level_str7=\"\"\n    local paren_level_str8=\"\"\n    local\
    \ paren_level_str9=\"\"\n    local paren_level_str10=\"\"\n    local paren_level_str11=\"\
    \"\n    local paren_level_str12=\"\"\n    local paren_level_str13=\"\"\n    local\
    \ paren_level_str14=\"\"\n    local paren_level_str15=\"\"\n    local paren_level_str16=\"\
    \"\n    local paren_level_str17=\"\"\n    local paren_level_str18=\"\"\n    local\
    \ paren_level_str19=\"\"\n    local paren_level_str20=\"\"\n    local paren_level_str21=\"\
    \"\n    local paren_level_str22=\"\"\n    local paren_level_str23=\"\"\n    local\
    \ paren_level_str24=\"\"\n    local paren_level_str25=\"\"\n    local paren_level_str26=\"\
    \"\n    local paren_level_str27=\"\"\n    local paren_level_str28=\"\"\n    local\
    \ paren_level_str29=\"\"\n    local paren_level_str30=\"\"\n    local paren_level_str31=\"\
    \"\n    local paren_level_str32=\"\"\n    local paren_level_str33=\"\"\n    local\
    \ paren_level_str34=\"\"\n    local paren_level_str35=\"\"\n    local paren_level_str36=\"\
    \"\n    local paren_level_str37=\"\"\n    local paren_level_str38=\"\"\n    local\
    \ paren_level_str39=\"\"\n    local paren_level_str40=\"\"\n    local paren_level_str41=\"\
    \"\n    local paren_level_str42=\"\"\n    local paren_level_str43=\"\"\n    local\
    \ paren_level_str44=\"\"\n    local paren_level_str45=\"\"\n    local paren_level_str46=\"\
    \"\n    local paren_level_str47=\"\"\n    local paren_level_str48=\"\"\n    local\
    \ paren_level_str49=\"\"\n    local paren_level_str50=\"\"\n    local paren_level_str51=\"\
    \"\n    local paren_level_str52=\"\"\n    local paren_level_str53=\"\"\n\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_level_count=0\n\
    \  local paren_level_char=\n  local paren_level_char_count=0\n  local paren_level_char_index=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  local paren_level_char=\n\
    \  local paren_level_char_count=\n  local paren_level_char_index=\n  \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_index=0\n    local paren_group\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index_count\n    local paren_group_level_length_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count\n    local paren_group_level_length_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count\n    local\
    \ paren_group_level_length_index_count_index_count_index_count_index\n    local\
    \ paren_group_level_length_index_count_index_count_index_count_index_count\n \
    \   local paren_group_level_length_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n\
    \    local paren_group_level_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    \    local paren_group_level_length_index_count_index_\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=0\n  local paren_group_count=0\n\
    \  local paren_group_chars=\"\"\n  local paren_group_char_count=0\n  local paren_group_char_index=0\n\
    \  local paren_group_char_index2=0\n  local paren_group_char_index3=0\n  local\
    \ paren_group_char_index4=0\n  local paren_group_char_index5=0\n  local paren_group_char_index6=0\n\
    \  local paren_group_char_index7=0\n  local paren_group_char_index8=0\n  local\
    \ paren_group_char_index9=0\n  local paren_group_char_index10=0\n  local paren_group_char_index11=0\n\
    \  local paren_group_char_index12=0\n  local paren_group_char_index13=0\n  local\
    \ paren_group_char_index14=0\n  local paren_group_char_index15=0\n  local paren_group_char_index16=0\n\
    \  local paren_group_char_index17=0\n  local paren_group_char_index18=0\n  local\
    \ paren_group_char_index19=0\n  local paren_group_char_index20=0\n  local paren_group_char_index21=0\n\
    \  local paren_group_char_index22=0\n  local paren_group_char_index23=0\n  local\
    \ paren_group_char_index24=0\n  local paren_group_char_index25=0\n  local paren_group_char_index26=0\n\
    \  local paren_group_char_index27=0\n  local paren_group_char_index28=0\n  local\
    \ paren_group_char_index29=0\n  local paren_group_char_index30=0\n  local paren_group_char_index31=0\n\
    \  local paren_group_char_index32=0\n  local paren_group_char_index33=0\n  local\
    \ paren_group_char_index34=0\n  local paren_group_char_index35=0\n  local paren_group_char_index36=0\n\
    \  local paren_group_char_index37=0\n  local paren_group_char_index38=0\n  local\
    \ paren_group_char_index39=0\n  local paren_group_char_index40=0\n  local paren_group_char_index41=0\n\
    \  local paren_group_char_index42=0\n  local paren_group_char_index43=0\n  local\
    \ paren_group_char_index44=0\n  local paren_group_char_index45=0\n  local paren_group_char_index46=0\n\
    \  local paren_group_char_index47=0\n  local paren\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_count=0\n\
    \  local max_level_group=\"\"\n  local max_level_group_count=0\n  local level=0\n\
    \  local level_group=\"\"\n  local level_group_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str_count=0\n  local\
    \ level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n  local level_group_str=\"\"\n  local level_group_str_count=0\n\
    \  local level_group_str=\"\"\n  local level_group_str_count=0\n  local level_group_str=\"\
    \"\n  local level_group_str_count=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local nested_parens_str=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local level=0\n    local level_str=\"\"\n    local i\n    local j\n  \
    \  local k\n    local parens_str\n    local parens_str_tmp\n    local parens_str_tmp2\n\
    \    local parens_str_tmp3\n    local parens_str_tmp4\n    local parens_str_tmp5\n\
    \    local parens_str_tmp6\n    local parens_str_tmp7\n    local parens_str_tmp8\n\
    \    local parens_str_tmp9\n    local parens_str_tmp10\n    local parens_str_tmp11\n\
    \    local parens_str_tmp12\n    local parens_str_tmp13\n    local parens_str_tmp14\n\
    \    local parens_str_tmp15\n    local parens_str_tmp16\n    local parens_str_tmp17\n\
    \    local parens_str_tmp18\n    local parens_str_tmp19\n    local parens_str_tmp20\n\
    \    local parens_str_tmp21\n    local parens_str_tmp22\n    local parens_str_tmp23\n\
    \    local parens_str_tmp24\n    local parens_str_tmp25\n    local parens_str_tmp26\n\
    \    local parens_str_tmp27\n    local parens_str_tmp28\n    local parens_str_tmp29\n\
    \    local parens_str_tmp30\n    local parens_str_tmp31\n    local parens_str_tmp32\n\
    \    local parens_str_tmp33\n    local parens_str_tmp34\n    local parens_str_tmp35\n\
    \    local parens_str_tmp36\n    local parens_str_tmp37\n    local parens_str_tmp38\n\
    \    local parens_str_tmp39\n    local parens_str_tmp40\n    local parens_str_tmp41\n\
    \    local parens_str_tmp42\n    local parens_str_tmp43\n    local parens_str_tmp44\n\
    \    local parens_str_tmp45\n    local parens_str_tmp46\n    local parens_str_tmp47\n\
    \    local parens_str_tmp48\n    local parens_str_tmp49\n    local parens_str_tmp50\n\
    \    local parens_str_tmp51\n    local parens_str_tmp52\n    local parens_str_tmp53\n\
    \    local parens_str_tmp54\n    local parens_str_tmp55\n    local parens_str_tmp56\n\
    \    local parens_str_tmp57\n    local parens_str_tmp\n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_groups=()\n\
    \    local paren_group_count=0\n    local paren_group_counts=()\n    local paren_group_counts_max=0\n\
    \    local paren_group_counts_max_index=0\n    local paren_group_counts_max_indexs=()\n\
    \    local paren_group_counts_max_value=0\n    local paren_group_counts_max_values=()\n\
    \    local paren_group_counts_max_value_length=0\n    local paren_group_counts_max_value_lengths=()\n\
    \    local paren_group_counts_max_value_lengths_index=0\n    local paren_group_counts_max_value_lengths_indexs=()\n\
    \    local paren_group_counts_max_value_lengths_value=0\n    local paren_group_counts_max_value_lengths_values=()\n\
    \    local paren_group_counts_max_value_lengths_value_length=0\n    local paren_group_counts_max_value_lengths_value_lengths=()\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_index=0\n    local\
    \ paren_group_counts_max_value_lengths_value_lengths_indexs=()\n    local paren_group_counts_max_value_lengths_value_lengths_value=0\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_values=()\n    local\
    \ paren_group_counts_max_value_lengths_value_lengths_value_length=0\n    local\
    \ paren_group_counts_max_value_lengths_value_lengths_value_lengths=()\n    local\
    \ paren_group_counts_max_value_lengths_value_lengths_value_lengths_index=0\n \
    \   local paren_group_counts_max_value_lengths_value_lengths_value_lengths_indexs=()\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_value=0\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_values=()\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_value_length=0\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_value_lengths=()\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_value_lengths_index=0\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_value_lengths_indexs=()\n\
    \    local paren_group_counts_max_value_lengths_value_lengths_value_lengths_value_lengths_value=0\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local level=0\n  local parens=0\n  local parens_level=0\n\
    \  local parens_str=\"\"\n  local parens_str_count=0\n  local parens_str_depth=0\n\
    \  local parens_str_last=\"\"\n  local parens_str_last_count=0\n  local parens_str_last_depth=0\n\
    \  local parens_str_last_last=\"\"\n  local parens_str_last_last_count=0\n  local\
    \ parens_str_last_last_depth=0\n  local parens_str_last_last_last=\"\"\n  local\
    \ parens_str_last_last_last_count=0\n  local parens_str_last_last_last_depth=0\n\
    \  local parens_str_last_last_last_last=\"\"\n  local parens_str_last_last_last_last_count=0\n\
    \  local parens_str_last_last_last_last_depth=0\n  local parens_str_last_last_last_last_last=\"\
    \"\n  local parens_str_last_last_last_last_last_count=0\n  local parens_str_last_last_last_last_last_depth=0\n\
    \  local parens_str_last_last_last_last_last_last=\"\"\n  local parens_str_last_last_last_last_last_last_count=0\n\
    \  local parens_str_last_last_last_last_last_last_depth=0\n  local parens_str_last_last_last_last_last_last_last=\"\
    \"\n  local parens_str_last_last_last_last_last_last_last_count=0\n  local parens_str_last_last_last_last_last_last_last_depth=0\n\
    \  local parens_str_last_last_last_last_last_last_last_last=\"\"\n  local parens_str_last_last_last_last_last_last_last_count=0\n\
    \  local parens_str_last_last_last_last_last_last_last_depth=0\n  local parens_str_last_last_last_last_last_last_last_last=\"\
    \"\n  local parens_str_last_last_last_last_last_last_last_last_count=0\n  local\
    \ parens_str_last_last_last_last_last_last_last_last_depth=0\n  local parens_str_last_last_last_last_last_last_last_last_last=\"\
    \"\n  local parens_str_last_last_last_last_last_last_last_last_count=0\n  local\
    \ parens_str_last_last_last_last_last_last_last_last_depth=0\n  local parens_str_last_last_last_last_last_last_last_last_last=\"\
    \"\n  local parens_str_last_last_last_last_last_last_last_last_count=0\n  local\
    \ parens_str_last_last_last_last_last_last_last_last_depth=0\n  local parens_str_last_last_last_last_last_last_last_last_last=\"\
    \"\n  local parens_str_last_last_last_last_last_last_last_last_last_count=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_group_index=0\n\
    \    local paren_group_count=0\n    local paren_group_chars=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_char_index2=0\n   \
    \ local paren_group_char_count2=0\n    local paren_group_char_index3=0\n    local\
    \ paren_group_char_count3=0\n    local paren_group_char_index4=0\n    local paren_group_char_count4=0\n\
    \    local paren_group_char_index5=0\n    local paren_group_char_count5=0\n  \
    \  local paren_group_char_index6=0\n    local paren_group_char_count6=0\n    local\
    \ paren_group_char_index7=0\n    local paren_group_char_count7=0\n    local paren_group_char_index8=0\n\
    \    local paren_group_char_count8=0\n    local paren_group_char_index9=0\n  \
    \  local paren_group_char_count9=0\n    local paren_group_char_index10=0\n   \
    \ local paren_group_char_count10=0\n    local paren_group_char_index11=0\n   \
    \ local paren_group_char_count11=0\n    local paren_group_char_index12=0\n   \
    \ local paren_group_char_count12=0\n    local paren_group_char_index13=0\n   \
    \ local paren_group_char_count13=0\n    local paren_group_char_index14=0\n   \
    \ local paren_group_char_count14=0\n    local paren_group_char_index15=0\n   \
    \ local paren_group_char_count15=0\n    local paren_group_char_index16=0\n   \
    \ local paren_group_char_count16=0\n    local paren_group_char_index17=0\n   \
    \ local paren_group_char_count17=0\n    local paren_group_char_index18=0\n   \
    \ local paren_group_char_count18=0\n    local paren_group_char_index19=0\n   \
    \ local paren_group_char_count19=0\n    local paren_group_char_index20=0\n   \
    \ local paren_group_char_count20=0\n    local paren_group_char_index21=0\n   \
    \ local paren_group_char_count21=0\n    local paren_group_char_index22=0\n   \
    \ local paren_group_char_count22=0\n    local paren_group_char_index23=0\n   \
    \ local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local level=0\n    local parens=0\n    local parens_str=\"\
    \"\n    local parens_str_count=0\n    local parens_str_count_max=0\n    local\
    \ parens_str_count_max_index=0\n    local parens_str_count_max_index2=0\n    local\
    \ parens_str_count_max_index3=0\n    local parens_str_count_max_index4=0\n   \
    \ local parens_str_count_max_index5=0\n    local parens_str_count_max_index6=0\n\
    \    local parens_str_count_max_index7=0\n    local parens_str_count_max_index8=0\n\
    \    local parens_str_count_max_index9=0\n    local parens_str_count_max_index10=0\n\
    \    local parens_str_count_max_index11=0\n    local parens_str_count_max_index12=0\n\
    \    local parens_str_count_max_index13=0\n    local parens_str_count_max_index14=0\n\
    \    local parens_str_count_max_index15=0\n    local parens_str_count_max_index16=0\n\
    \    local parens_str_count_max_index17=0\n    local parens_str_count_max_index18=0\n\
    \    local parens_str_count_max_index19=0\n    local parens_str_count_max_index20=0\n\
    \    local parens_str_count_max_index21=0\n    local parens_str_count_max_index22=0\n\
    \    local parens_str_count_max_index23=0\n    local parens_str_count_max_index24=0\n\
    \    local parens_str_count_max_index25=0\n    local parens_str_count_max_index26=0\n\
    \    local parens_str_count_max_index27=0\n    local parens_str_count_max_index28=0\n\
    \    local parens_str_count_max_index29=0\n    local parens_str_count_max_index30=0\n\
    \    local parens_str_count_max_index31=0\n    local parens_str_count_max_index32=0\n\
    \    local parens_str_count_max_index33=0\n    local parens_str_count_max_index34=0\n\
    \    local parens_str_count_max_index35=0\n    local parens_str_count_max_index36=0\n\
    \    local parens_str_count_max_index37=0\n    local parens_str_count_max_index38=0\n\
    \    local parens_str_count_max_index39=0\n    local parens_str_count_max_index40=0\n\
    \    local parens_str_count_max_index41=0\n    local parens_str_count_max_index42=0\n\
    \    local parens_str_count_max_index43=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_max=0\n    local paren_group_max_index=0\n    local paren_group_max_count=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_group_max_count_index=0\n    local paren_group_max_count_index=0\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_count=0\n\
    \  local max_level_group=\"\"\n  local level=0\n  local level_group=\"\"\n  local\
    \ level_group_count=0\n  local level_group_count2=0\n  local level_group_count3=0\n\
    \  local level_group_count4=0\n  local level_group_count5=0\n  local level_group_count6=0\n\
    \  local level_group_count7=0\n  local level_group_count8=0\n  local level_group_count9=0\n\
    \  local level_group_count10=0\n  local level_group_count11=0\n  local level_group_count12=0\n\
    \  local level_group_count13=0\n  local level_group_count14=0\n  local level_group_count15=0\n\
    \  local level_group_count16=0\n  local level_group_count17=0\n  local level_group_count18=0\n\
    \  local level_group_count19=0\n  local level_group_count20=0\n  local level_group_count21=0\n\
    \  local level_group_count22=0\n  local level_group_count23=0\n  local level_group_count24=0\n\
    \  local level_group_count25=0\n  local level_group_count26=0\n  local level_group_count27=0\n\
    \  local level_group_count28=0\n  local level_group_count29=0\n  local level_group_count30=0\n\
    \  local level_group_count31=0\n  local level_group_count32=0\n  local level_group_count33=0\n\
    \  local level_group_count34=0\n  local level_group_count35=0\n  local level_group_count36=0\n\
    \  local level_group_count37=0\n  local level_group_count38=0\n  local level_group_count39=0\n\
    \  local level_group_count40=0\n  local level_group_count41=0\n  local level_group_count42=0\n\
    \  local level_group_count43=0\n  local level_group_count44=0\n  local level_group_count45=0\n\
    \  local level_group_count46=0\n  local level_group_count47=0\n  local level_group_count48=0\n\
    \  local level_group_count49=0\n  local level_group_count50=0\n  local level_group_count51=0\n\
    \  local level_group_count52=0\n  local level_group_count53=0\n  local level_group_count54=0\n\
    \  local level_group_count55=0\n  local level_group_count56=0\n  local level_group_count57=0\n\
    \  local level_group_count58=0\n  local level_group_count59=0\n  local \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local paren_level=0\n    local paren_level_count=0\n    local paren_group\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_level_count\
    \ \n    local paren_group_level_str\n    local paren_group_level_str_count\n \
    \   local paren_group_level_str_count\n    local paren_group_level_str_count_str\n\
    \    local paren_group_level_str_count_str_count\n    local paren_group_level_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str\n    local paren_group_level_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str\n\
    \    local paren_group_level_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_count_str_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local parens=0\n    local i=0 j=0\n\
    \    while [ $i -lt ${#str} ]; do\n        if [[ ${str[$i]} == ')' ]]; then\n\
    \            parens=$((parens - 1))\n        fi\n        if [[ ${str[$i]} == '('\
    \ && $parens -gt 0 ]]; then\n            depth=$((depth + 1))\n        fi\n  \
    \      if [[ ${str[$i]} == '(' && $parens == 0 ]]; then\n            depth=$((depth\
    \ + 1))\n        fi\n        if [[ ${str[$i]} == ')' && $parens -gt 0 ]]; then\n\
    \            depth=$((depth - 1))\n        fi\n        if [[ ${str[$i]} == ')'\
    \ && $parens == 0 ]]; then\n            depth=$((depth - 1))\n        fi\n   \
    \     i=$((i + 1))\n    done\n    echo \"$depth\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group=\"\"\n    local paren_group_level=0\n    local paren_group_level_index=0\n\
    \    local paren_group_level_length=0\n    local paren_group_level_length_index=0\n\
    \    local paren_group_level_length_value=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_value=0\n    local paren_group_level_length_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value_value_index=0\n\
    \    local paren_group_level_length_value_value_value_value=0\n    local paren_group_level_length_value_value\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_counts\n    local paren_group_counts_index\n\
    \    local paren_group_counts_indexs\n    local paren_group_counts_length\n  \
    \  local paren_group_counts_lengths\n    local paren_group_counts_lengths_index\n\
    \    local paren_group_counts_lengths_indexs\n    local paren_group_counts_lengths_length\n\
    \    local paren_group_counts_lengths_lengths\n    local paren_group_counts_lengths_lengths_index\n\
    \    local paren_group_counts_lengths_lengths_indexs\n    local paren_group_counts_lengths_lengths_length\n\
    \    local paren_group_counts_lengths_lengths_lengths\n    local paren_group_counts_lengths_lengths_lengths_index\n\
    \    local paren_group_counts_lengths_lengths_lengths_indexs\n    local paren_group_counts_lengths_lengths_lengths_length\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths\n    local paren_group_counts_lengths_lengths_lengths_lengths_index\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_indexs\n    local\
    \ paren_group_counts_lengths_lengths_lengths_lengths_length\n    local paren_group_counts_lengths_lengths_lengths_lengths_lengths\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_index\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_indexs\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_length\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_lengths\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_lengths_index\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_lengths_indexs\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_lengths_length\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_lengths_lengths\n\
    \    local paren_group_counts_lengths_lengths_lengths_lengths_lengths_lengths_lengths_index\n\
    \    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_group_index=0\n    local paren_group_count=0\n    local paren_group_level=0\n\
    \    local paren_group_level_max=0\n    local paren_group_level_max_index=0\n\
    \    local paren_group_level_max_count=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index=0\n    local paren_group_level_max_count_index=0\n\
    \    local paren_group_level_max_count_index\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local level=0\n    local level_count=0\n    local paren_group\n    local\
    \ paren_group_count\n    local paren_group_level\n    local paren_group_level_count\n\
    \    local paren_group_level_char\n    local paren_group_level_char_count\n  \
    \  local paren_group_level_char_char\n    local paren_group_level_char_char_count\n\
    \    local paren_group_level_char_char_char\n    local paren_group_level_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char\n    local paren_group_level_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char\n    local paren_group_level_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char\n    local paren_group_level_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char\n    local paren_group_level_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char\n    local\
    \ paren_group_level_char_char_char_char_char_char_char_char_count\n    local paren_group_level_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count\n\
    \    local paren_group_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char\n\
    \    local paren_group_level_char_char_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local level=0\n    local level_count=0\n    local level_str=\"\"\n    local\
    \ level_str_count=0\n    local level_str_str=\"\"\n    local level_str_str_count=0\n\
    \    local level_str_str_str=\"\"\n    local level_str_str_str_count=0\n    local\
    \ level_str_str_str_str=\"\"\n    local level_str_str_str_str_count=0\n    local\
    \ level_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str=\"\"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n  \
    \  local level_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n \
    \   local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\"\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_count=0\n\
    \    local level_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str=\"\
    \"\n    local level_str_str_str_str_str_str_str_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local parens=0\n    local i\n  \
    \  local j\n    local k\n    local parens_level\n    local depth\n    local parens\n\
    \    local i\n    local j\n    local k\n    local parens_level\n    local depth\n\
    \    local parens\n    local i\n    local j\n    local k\n    local parens_level\n\
    \    local depth\n    local parens\n    local i\n    local j\n    local k\n  \
    \  local parens_level\n    local depth\n    local parens\n    local i\n    local\
    \ j\n    local k\n    local parens_level\n    local depth\n    local parens\n\
    \    local i\n    local j\n    local k\n    local parens_level\n    local depth\n\
    \    local parens\n    local i\n    local j\n    local k\n    local parens_level\n\
    \    local depth\n    local parens\n    local i\n    local j\n    local k\n  \
    \  local parens_level\n    local depth\n    local parens\n    local i\n    local\
    \ j\n    local k\n    local parens_level\n    local depth\n    local parens\n\
    \    local i\n    local j\n    local k\n    local parens_level\n    local depth\n\
    \    local parens\n    local i\n    local j\n    local k\n    local parens_level\n\
    \    local depth\n    local parens\n    local i\n    local j\n    local k\n  \
    \  local parens_level\n    local depth\n    local parens\n    local i\n    local\
    \ j\n    local k\n    local parens_level\n    local depth\n    local parens\n\
    \    local i\n    local j\n    local k\n    local parens_level\n    local depth\n\
    \    local parens\n    local i\n    local j\n    local k\n    local parens_level\n\
    \    local depth\n    local parens\n    local i\n    local j\n    local k\n  \
    \  local parens_level\n    local depth\n    local parens\n    local i\n    local\
    \ j\n    local k\n    local parens_level\n    local depth\n    local parens\n\
    \    local i\n    local j\n    local k\n    local parens_level\n    local depth\n\
    \    local parens\n    local i\n    local j\n    \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local level=0\n    local level_group=\"\"\n    local level_group_count=0\n\
    \    local level_group_count2=0\n    local level_group_count3=0\n    local level_group_count4=0\n\
    \    local level_group_count5=0\n    local level_group_count6=0\n    local level_group_count7=0\n\
    \    local level_group_count8=0\n    local level_group_count9=0\n    local level_group_count10=0\n\
    \    local level_group_count11=0\n    local level_group_count12=0\n    local level_group_count13=0\n\
    \    local level_group_count14=0\n    local level_group_count15=0\n    local level_group_count16=0\n\
    \    local level_group_count17=0\n    local level_group_count18=0\n    local level_group_count19=0\n\
    \    local level_group_count20=0\n    local level_group_count21=0\n    local level_group_count22=0\n\
    \    local level_group_count23=0\n    local level_group_count24=0\n    local level_group_count25=0\n\
    \    local level_group_count26=0\n    local level_group_count27=0\n    local level_group_count28=0\n\
    \    local level_group_count29=0\n    local level_group_count30=0\n    local level_group_count31=0\n\
    \    local level_group_count32=0\n    local level_group_count33=0\n    local level_group_count34=0\n\
    \    local level_group_count35=0\n    local level_group_count36=0\n    local level_group_count37=0\n\
    \    local level_group_count38=0\n    local level_group_count39=0\n    local level_group_count40=0\n\
    \    local level_group_count41=0\n    local level_group_count42=0\n    local level_group_count43=0\n\
    \    local level_group_count44=0\n    local level_group_count45=0\n    local level_group_count46=0\n\
    \    local level_group_count47=0\n    local level_group_count48=0\n    local level_group_count49=0\n\
    \    local level_group_count50=0\n    local level_group_count51=0\n    local level_group_count52=0\n\
    \    local level_group_count53=0\n    local level_group_count54=0\n    local level_group_count55=0\n\
    \    local level_group_count56=0\n    local level_group_count57=0\n    local level_group_count58=0\n\
    \    local level_group_count59=0\n    local level_group_count60=0\n    \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local max_level_group_len=0\n    local level=0\n    local level_group=\"\
    \"\n    local level_group_len=0\n    local level_group_count=0\n    local level_group_count_max=0\n\
    \    local level_group_count_max_index=0\n    local level_group_count_max_index2=0\n\
    \    local level_group_count_max_index3=0\n    local level_group_count_max_index4=0\n\
    \    local level_group_count_max_index5=0\n    local level_group_count_max_index6=0\n\
    \    local level_group_count_max_index7=0\n    local level_group_count_max_index8=0\n\
    \    local level_group_count_max_index9=0\n    local level_group_count_max_index10=0\n\
    \    local level_group_count_max_index11=0\n    local level_group_count_max_index12=0\n\
    \    local level_group_count_max_index13=0\n    local level_group_count_max_index14=0\n\
    \    local level_group_count_max_index15=0\n    local level_group_count_max_index16=0\n\
    \    local level_group_count_max_index17=0\n    local level_group_count_max_index18=0\n\
    \    local level_group_count_max_index19=0\n    local level_group_count_max_index20=0\n\
    \    local level_group_count_max_index21=0\n    local level_group_count_max_index22=0\n\
    \    local level_group_count_max_index23=0\n    local level_group_count_max_index24=0\n\
    \    local level_group_count_max_index25=0\n    local level_group_count_max_index26=0\n\
    \    local level_group_count_max_index27=0\n    local level_group_count_max_index28=0\n\
    \    local level_group_count_max_index29=0\n    local level_group_count_max_index30=0\n\
    \    local level_group_count_max_index31=0\n    local level_group_count_max_index32=0\n\
    \    local level_group_count_max_index33=0\n    local level_group_count_max_index34=0\n\
    \    local level_group_count_max_index35=0\n    local level_group_count_max_index36=0\n\
    \    local level_group_count_max_index37=0\n    local level_group_count_max_index38=0\n\
    \    local level_group_count_max_index39=0\n    local level_group_count_max_index40=0\n\
    \    local level_group_count_max_index41=0\n    local level_group_count_max_index42=0\n\
    \    local level_group_count_max_index43=0\n    local level_group_count_max_index44=0\n\
    \    local level_group_count_max_index45=0\n    \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local paren_level=0\n    local paren_level_count=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_count=0\n    local paren_level_str_count2=0\n  \
    \  local paren_level_str_count3=0\n    local paren_level_str_count4=0\n    local\
    \ paren_level_str_count5=0\n    local paren_level_str_count6=0\n    local paren_level_str_count7=0\n\
    \    local paren_level_str_count8=0\n    local paren_level_str_count9=0\n    local\
    \ paren_level_str_count10=0\n    local paren_level_str_count11=0\n    local paren_level_str_count12=0\n\
    \    local paren_level_str_count13=0\n    local paren_level_str_count14=0\n  \
    \  local paren_level_str_count15=0\n    local paren_level_str_count16=0\n    local\
    \ paren_level_str_count17=0\n    local paren_level_str_count18=0\n    local paren_level_str_count19=0\n\
    \    local paren_level_str_count20=0\n    local paren_level_str_count21=0\n  \
    \  local paren_level_str_count22=0\n    local paren_level_str_count23=0\n    local\
    \ paren_level_str_count24=0\n    local paren_level_str_count25=0\n    local paren_level_str_count26=0\n\
    \    local paren_level_str_count27=0\n    local paren_level_str_count28=0\n  \
    \  local paren_level_str_count29=0\n    local paren_level_str_count30=0\n    local\
    \ paren_level_str_count31=0\n    local paren_level_str_count32=0\n    local paren_level_str_count33=0\n\
    \    local paren_level_str_count34=0\n    local paren_level_str_count35=0\n  \
    \  local paren_level_str_count36=0\n    local paren_level_str_count37=0\n    local\
    \ paren_level_str_count38=0\n    local paren_level_str_count39=0\n    local paren_level_str_count40=0\n\
    \    local paren_level_str_count41=0\n    local paren_level_str_count42=0\n  \
    \  local paren_level_str_count43=0\n    local paren_level_str_count44=0\n    local\
    \ paren_level_str_count45=0\n    local paren_level_str_count46=0\n    local paren_level_str_count47=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_group=\"\"\
    \n  local max_level_group_len=0\n  local max_level_group_len_count=0\n  local\
    \ level_group=\"\"\n  local level_group_len=0\n  local level_group_len_count=0\n\
    \  local level_group_count=0\n  local level_group_count_max=0\n  local level_group_count_max_count=0\n\
    \  local level_group_count_max_len=0\n  local level_group_count_max_len_count=0\n\
    \  local level_group_count_max_len_count_max=0\n  local level_group_count_max_len_count_max_count=0\n\
    \  local level_group_count_max_len_count_max_len=0\n  local level_group_count_max_len_count_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_len_max_len_max=0\n  local level_group_count_max_len_count_max_len_max_len_count=0\n\
    \  local level_group_count_max_len_count_max_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_string=$1\n    local parens_string2=\"\
    \"\n    local parens_string3=\"\"\n    local parens_string4=\"\"\n    local parens_string5=\"\
    \"\n    local parens_string6=\"\"\n    local parens_string7=\"\"\n    local parens_string8=\"\
    \"\n    local parens_string9=\"\"\n    local parens_string10=\"\"\n    local parens_string11=\"\
    \"\n    local parens_string12=\"\"\n    local parens_string13=\"\"\n    local\
    \ parens_string14=\"\"\n    local parens_string15=\"\"\n    local parens_string16=\"\
    \"\n    local parens_string17=\"\"\n    local parens_string18=\"\"\n    local\
    \ parens_string19=\"\"\n    local parens_string20=\"\"\n    local parens_string21=\"\
    \"\n    local parens_string22=\"\"\n    local parens_string23=\"\"\n    local\
    \ parens_string24=\"\"\n    local parens_string25=\"\"\n    local parens_string26=\"\
    \"\n    local parens_string27=\"\"\n    local parens_string28=\"\"\n    local\
    \ parens_string29=\"\"\n    local parens_string30=\"\"\n    local parens_string31=\"\
    \"\n    local parens_string32=\"\"\n    local parens_string33=\"\"\n    local\
    \ parens_string34=\"\"\n    local parens_string35=\"\"\n    local parens_string36=\"\
    \"\n    local parens_string37=\"\"\n    local parens_string38=\"\"\n    local\
    \ parens_string39=\"\"\n    local parens_string40=\"\"\n    local parens_string41=\"\
    \"\n    local parens_string42=\"\"\n    local parens_string43=\"\"\n    local\
    \ parens_string44=\"\"\n    local parens_string45=\"\"\n    local parens_string46=\"\
    \"\n    local parens_string47=\"\"\n    local parens_string48=\"\"\n    local\
    \ parens_string49=\"\"\n    local parens_string50=\"\"\n    local parens_string51=\"\
    \"\n    local parens_string52=\"\"\n    local parens_string53=\"\"\n    local\
    \ parens_string54=\"\"\n    local parens_string55=\"\"\n    local parens_string56=\"\
    \"\n    local parens_string57=\"\"\n    local parens_string58=\"\"\n    local\
    \ parens_string59=\"\"\n    local parens_string60=\"\"\n    local parens_string61=\"\
    \"\n    local parens_string62=\"\"\n    local parens_string63=\"\"\n    \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_count=0\n\
    \    local paren_level_char=\n    local paren_level_char_index=\n    local paren_level_char_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars_count=\n    local paren_level_chars=\n    local paren_level_chars_index=\n\
    \    local paren_level_chars_count=0\n    local paren_level_chars=\n    local\
    \ paren_level_chars_index=\n    local paren_level_chars_count=0\n    local paren_level_chars=\n\
    \    local paren_level_chars_index=\n    local paren_level_chars_count=0\n   \
    \ local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    local paren_level_chars_count=0\n\
    \    local paren_level_chars=\n    local paren_level_chars_index=\n    \n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_level=0\n\
    \  local paren_group\n  local paren_group_level\n  local paren_group_count\n \
    \ local paren_group_count_max\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=0\n  local paren_group_count=0\n\
    \  local paren_group_length=0\n  local paren_group_start=0\n  local paren_group_end=0\n\
    \  local paren_group_char=\"\"\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_start=0\n  local paren_group_char_end=0\n  local paren_group_char_index=0\n\
    \  local paren_group_char_count=0\n  local paren_group_char_length=0\n  local\
    \ paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n  local paren_group_char_length=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count=0\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_groups=$1\n    local paren_group\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_count\n    local paren_group_level\n    local paren_group_count\n\
    \    local paren_group_level\n    \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_group=\"\"\
    \n  local level=0\n  local level_group=\"\"\n  local level_group_count=0\n  local\
    \ level_group_count2=0\n  local level_group_count3=0\n  local level_group_count4=0\n\
    \  local level_group_count5=0\n  local level_group_count6=0\n  local level_group_count7=0\n\
    \  local level_group_count8=0\n  local level_group_count9=0\n  local level_group_count10=0\n\
    \  local level_group_count11=0\n  local level_group_count12=0\n  local level_group_count13=0\n\
    \  local level_group_count14=0\n  local level_group_count15=0\n  local level_group_count16=0\n\
    \  local level_group_count17=0\n  local level_group_count18=0\n  local level_group_count19=0\n\
    \  local level_group_count20=0\n  local level_group_count21=0\n  local level_group_count22=0\n\
    \  local level_group_count23=0\n  local level_group_count24=0\n  local level_group_count25=0\n\
    \  local level_group_count26=0\n  local level_group_count27=0\n  local level_group_count28=0\n\
    \  local level_group_count29=0\n  local level_group_count30=0\n  local level_group_count31=0\n\
    \  local level_group_count32=0\n  local level_group_count33=0\n  local level_group_count34=0\n\
    \  local level_group_count35=0\n  local level_group_count36=0\n  local level_group_count37=0\n\
    \  local level_group_count38=0\n  local level_group_count39=0\n  local level_group_count40=0\n\
    \  local level_group_count41=0\n  local level_group_count42=0\n  local level_group_count43=0\n\
    \  local level_group_count44=0\n  local level_group_count45=0\n  local level_group_count46=0\n\
    \  local level_group_count47=0\n  local level_group_count48=0\n  local level_group_count49=0\n\
    \  local level_group_count50=0\n  local level_group_count51=0\n  local level_group_count52=0\n\
    \  local level_group_count53=0\n  local level_group_count54=0\n  local level_group_count55=0\n\
    \  local level_group_count56=0\n  local level_group_count57=0\n  local level_group_count58=0\n\
    \  local level_group_count59=0\n  local level_group_count60=0\n  \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=0\n  local paren_groups=()\n \
    \ local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n  local paren_group_counts=()\n\
    \  local paren_group_string=\"\"\n  local paren_group_count=0\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_count\n    local paren_group_level\n\
    \    local paren_group_level_index\n    local paren_group_level_length\n    local\
    \ paren_group_level_length_index\n    local paren_group_level_length_count\n \
    \   local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local max_level=0\n  local max_level_count=0\n  local level=0\n  local\
    \ level_count=0\n  local paren_level=0\n  local paren_level_count=0\n  local paren_level_char=\n\
    \  local paren_level_char_count=0\n  local paren_level_chars=\n  local paren_level_char_counts=\n\
    \  local paren_level_chars=\n  local paren_level_char_counts=\n  local paren_level_char=\n\
    \  local paren_level_char_count=0\n  local paren_level_chars=\n  local paren_level_char_counts=\n\
    \  local paren_level_char=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char=\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=\n  local paren_level_char_counts=\n  local paren_level_char=\n\
    \  local paren_level_char_count=0\n  local paren_level_chars=\n  local paren_level_char_counts=\n\
    \  local paren_level_char=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char=\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=\n  local paren_level_char_counts=\n  local paren_level_char=\n\
    \  local paren_level_char_count=0\n  local paren_level_chars=\n  local paren_level_char_counts=\n\
    \  local paren_level_char=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char=\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=\n  local paren_level_char_counts=\n  local paren_level_char=\n\
    \  local paren_level_char_count=0\n  local paren_level_chars=\n  local paren_level_char_counts=\n\
    \  local paren_level_char=\n  local paren_level_char_count=0\n  local paren_level_chars=\n\
    \  local paren_level_char_counts=\n  local paren_level_char=\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=\n  local paren_level_char_counts=\n  local paren_level_char=\n\
    \  local paren_level_char\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local paren_level=0\n    local paren_levels=()\n\
    \    local paren_levels_str=\"\"\n    local paren_levels_str_depth=0\n    local\
    \ paren_levels_str_depth_max=0\n    local paren_levels_str_depth_max_str=\"\"\n\
    \    local paren_levels_str_depth_max_str_depth=0\n    local paren_levels_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str=\"\"\n    local paren_levels_str_depth_max_str_depth_max_str_depth=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max=0\n    local\
    \ paren_levels_str_depth_max_str_depth_max_str_depth_max_str=\"\"\n    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str=\"\
    \"\n    local paren_levels_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max_str_depth_max=0\n\
    \    local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_groups=$1\n    local paren_group\n\
    \    local paren_group_len\n    local paren_group_len_count\n    local paren_group_len_counts\n\
    \    local paren_group_len_counts_sum\n    local paren_group_len_counts_sums\n\
    \    local paren_group_len_counts_max\n    local paren_group_len_counts_maxs\n\
    \    local paren_group_len_counts_min\n    local paren_group_len_counts_mins\n\
    \    local paren_group_len_counts_avg\n    local paren_group_len_counts_avgs\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_len_counts_median\n    local paren_group_len_counts_medians\n\
    \    local paren_group_len_counts_mode\n    local paren_group_len_counts_modes\n\
    \    local paren_group_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_char=\"\"\n    local paren_group_char_count=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index2=0\n    local paren_group_char_index3=0\n\
    \    local paren_group_char_index4=0\n    local paren_group_char_index5=0\n  \
    \  local paren_group_char_index6=0\n    local paren_group_char_index7=0\n    local\
    \ paren_group_char_index8=0\n    local paren_group_char_index9=0\n    local paren_group_char_index10=0\n\
    \    local paren_group_char_index11=0\n    local paren_group_char_index12=0\n\
    \    local paren_group_char_index13=0\n    local paren_group_char_index14=0\n\
    \    local paren_group_char_index15=0\n    local paren_group_char_index16=0\n\
    \    local paren_group_char_index17=0\n    local paren_group_char_index18=0\n\
    \    local paren_group_char_index19=0\n    local paren_group_char_index20=0\n\
    \    local paren_group_char_index21=0\n    local paren_group_char_index22=0\n\
    \    local paren_group_char_index23=0\n    local paren_group_char_index24=0\n\
    \    local paren_group_char_index25=0\n    local paren_group_char_index26=0\n\
    \    local paren_group_char_index27=0\n    local paren_group_char_index28=0\n\
    \    local paren_group_char_index29=0\n    local paren_group_char_index30=0\n\
    \    local paren_group_char_index31=0\n    local paren_group_char_index32=0\n\
    \    local paren_group_char_index33=0\n    local paren_group_char_index34=0\n\
    \    local paren_group_char_index35=0\n    local paren_group_char_index36=0\n\
    \    local paren_group_char_index37=0\n    local paren_group_char_index38=0\n\
    \    local paren_group_char_index39=0\n    local paren_group_char_index40=0\n\
    \    local paren_group_char_index41=0\n    local paren_group_char_index42=0\n\
    \    local paren_group_char_index43=0\n    local paren_group_char_index44=0\n\
    \    local paren_group_char_index45=0\n    local paren_group_char_index46=0\n\
    \    local paren_group_char_index47=0\n    local paren_\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_char=0\n    local paren_group_char_count=0\n\
    \    local paren_group_char_length=0\n    local paren_group_char_index=0\n   \
    \ local paren_group_char_count=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char_index=0\n\
    \    local paren_group_char_index=0\n    local paren_group_char_index=0\n    local\
    \ paren_group_char_index=0\n    local paren_group_char_index=0\n    local paren_group_char\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local nested_parens_str=$1\n    local max_level=0\n    local max_level_str=\"\
    \"\n    local level=0\n    local level_str=\"\"\n    local parens_str=\"\"\n \
    \   local parens_str_len=0\n    local parens_str_len_max=0\n    local parens_str_len_max_str=\"\
    \"\n    local parens_str_len_max_str_len=0\n    local parens_str_len_max_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len=0\n    local parens_str_len_max_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len=0\n    local parens_str_len_max_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len=0\n    local\
    \ parens_str_len_max_str_len_str_len_str_len_str_len_str=\"\"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str=\"\"\
    \n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n    local parens_str_len_max_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group=\"\"\n    local paren_group_level=0\n    local paren_group_level_index=0\n\
    \    local paren_group_level_length=0\n    local paren_group_level_length_index=0\n\
    \    local paren_group_level_length_value=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    local paren_group_level_length_value_index=0\n\
    \    local paren_group_level_length_value_index=0\n    \n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=0\n  local paren_group_count=0\n\
    \  local paren_group_level=0\n  local paren_group_char=\"\"\n  local paren_group_char_count=0\n\
    \  local paren_group_char_index=0\n  local paren_group_char_count2=0\n  local\
    \ paren_group_char_index2=0\n  local paren_group_char_count3=0\n  local paren_group_char_index3=0\n\
    \  local paren_group_char_count4=0\n  local paren_group_char_index4=0\n  local\
    \ paren_group_char_count5=0\n  local paren_group_char_index5=0\n  local paren_group_char_count6=0\n\
    \  local paren_group_char_index6=0\n  local paren_group_char_count7=0\n  local\
    \ paren_group_char_index7=0\n  local paren_group_char_count8=0\n  local paren_group_char_index8=0\n\
    \  local paren_group_char_count9=0\n  local paren_group_char_index9=0\n  local\
    \ paren_group_char_count10=0\n  local paren_group_char_index10=0\n  local paren_group_char_count11=0\n\
    \  local paren_group_char_index11=0\n  local paren_group_char_count12=0\n  local\
    \ paren_group_char_index12=0\n  local paren_group_char_count13=0\n  local paren_group_char_index13=0\n\
    \  local paren_group_char_count14=0\n  local paren_group_char_index14=0\n  local\
    \ paren_group_char_count15=0\n  local paren_group_char_index15=0\n  local paren_group_char_count16=0\n\
    \  local paren_group_char_index16=0\n  local paren_group_char_count17=0\n  local\
    \ paren_group_char_index17=0\n  local paren_group_char_count18=0\n  local paren_group_char_index18=0\n\
    \  local paren_group_char_count19=0\n  local paren_group_char_index19=0\n  local\
    \ paren_group_char_count20=0\n  local paren_group_char_index20=0\n  local paren_group_char_count21=0\n\
    \  local paren_group_char_index21=0\n  local paren_group_char_count22=0\n  local\
    \ paren_group_char_index22=0\n  local paren_group_char_count23=0\n  local paren_group_char_index23=0\n\
    \  local paren_group_char_count24=0\n  local paren_group_char\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_groups=$1\n  local paren_group_count=0\n\
    \  local paren_group_level=0\n  local paren_group_str=\"\"\n  local paren_group_str_count=0\n\
    \  local paren_group_str_level=0\n  local paren_group_str_char=\"\"\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_char_index=0\n\
    \  local paren_group_str_char_count=0\n  local paren_group_str_char_level=0\n\
    \  local paren_group_str_char_index=0\n  local paren_group_str_char_count=0\n\
    \  local paren_group_str_char_level=0\n  local paren_group_str_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local nested_parens_str=$1\n  local max_level=0\n  local level=0\n  local\
    \ parens_level=0\n  local parens_level_count=0\n  local parens_level_str=\"\"\n\
    \  local parens_level_char=\"\"\n  local parens_level_char_count=0\n  local parens_level_char_index=0\n\
    \  local parens_level_char_count2=0\n  local parens_level_char_index2=0\n  local\
    \ parens_level_char_count3=0\n  local parens_level_char_index3=0\n  local parens_level_char_count4=0\n\
    \  local parens_level_char_index4=0\n  local parens_level_char_count5=0\n  local\
    \ parens_level_char_index5=0\n  local parens_level_char_count6=0\n  local parens_level_char_index6=0\n\
    \  local parens_level_char_count7=0\n  local parens_level_char_index7=0\n  local\
    \ parens_level_char_count8=0\n  local parens_level_char_index8=0\n  local parens_level_char_count9=0\n\
    \  local parens_level_char_index9=0\n  local parens_level_char_count10=0\n  local\
    \ parens_level_char_index10=0\n  local parens_level_char_count11=0\n  local parens_level_char_index11=0\n\
    \  local parens_level_char_count12=0\n  local parens_level_char_index12=0\n  local\
    \ parens_level_char_count13=0\n  local parens_level_char_index13=0\n  local parens_level_char_count14=0\n\
    \  local parens_level_char_index14=0\n  local parens_level_char_count15=0\n  local\
    \ parens_level_char_index15=0\n  local parens_level_char_count16=0\n  local parens_level_char_index16=0\n\
    \  local parens_level_char_count17=0\n  local parens_level_char_index17=0\n  local\
    \ parens_level_char_count18=0\n  local parens_level_char_index18=0\n  local parens_level_char_count19=0\n\
    \  local parens_level_char_index19=0\n  local parens_level_char_count20=0\n  local\
    \ parens_level_char_index20=0\n  local parens_level_char_count21=0\n  local parens_level_char_index21=0\n\
    \  local parens_level_char_count22=0\n  local parens_level_char_index22=0\n  local\
    \ parens_level_char_count23=0\n  local parens_level_char_index23=0\n  local paren\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local level=0\n    local level_count=0\n    local paren_group\n    local\
    \ paren_group_count\n    local paren_group_level\n    local paren_group_level_count\n\
    \    local paren_group_level_max\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren_group_level_max_index\n    local paren_group_level_max_index\n    local\
    \ paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_group=\"\"\
    \n  local max_level_group_len=0\n  local level=0\n  local level_group=\"\"\n \
    \ local level_group_len=0\n  local i\n  local j\n  local paren_group\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n \
    \ local paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n \
    \ local paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n \
    \ local paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n \
    \ local paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n \
    \ local paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n \
    \ local paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local\
    \ paren_group_len\n  local paren_group_len\n  local paren_group_len\n  local paren_group_len\n\
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_group=0\n    local parens_group_count=0\n\
    \    local parens_group_length=0\n    local parens_group_str=\"\"\n    local parens_group_str_count=0\n\
    \    local parens_group_str_length=0\n    local parens_group_str_char=0\n    local\
    \ parens_group_str_char_count=0\n    local parens_group_str_char_length=0\n  \
    \  local parens_group_str_char_index=0\n    local parens_group_str_char_index_count=0\n\
    \    local parens_group_str_char_index_length=0\n    local parens_group_str_char_index2=0\n\
    \    local parens_group_str_char_index2_count=0\n    local parens_group_str_char_index2_length=0\n\
    \    local parens_group_str_char_index3=0\n    local parens_group_str_char_index3_count=0\n\
    \    local parens_group_str_char_index3_length=0\n    local parens_group_str_char_index4=0\n\
    \    local parens_group_str_char_index4_count=0\n    local parens_group_str_char_index4_length=0\n\
    \    local parens_group_str_char_index5=0\n    local parens_group_str_char_index5_count=0\n\
    \    local parens_group_str_char_index5_length=0\n    local parens_group_str_char_index6=0\n\
    \    local parens_group_str_char_index6_count=0\n    local parens_group_str_char_index6_length=0\n\
    \    local parens_group_str_char_index7=0\n    local parens_group_str_char_index7_count=0\n\
    \    local parens_group_str_char_index7_length=0\n    local parens_group_str_char_index8=0\n\
    \    local parens_group_str_char_index8_count=0\n    local parens_group_str_char_index8_length=0\n\
    \    local parens_group_str_char_index9=0\n    local parens_group_str_char_index9_count=0\n\
    \    local parens_group_str_char_index9_length=0\n    local parens_group_str_char_index10=0\n\
    \    local parens_group_str_char_index10_count=0\n    local parens_group_str_char_index10_length=0\n\
    \    local parens_group_str_char_index11=0\n    local parens_group_str_char_index11_count=0\n\
    \    local parens_group_str_char_index11_length=0\n    local parens_group_str_char_index12=0\n\
    \    local parens_group_str_char_index12_count=0\n    local parens_group_str_char_index12_length=0\n\
    \    local parens_group_str_char_index13=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_counts\n    local paren_group_counts_len\n\
    \    local paren_group_counts_lens\n    local paren_group_counts_lens_max\n  \
    \  local paren_group_counts_lens_max_idx\n    local paren_group_counts_lens_max_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idx\n    local paren_group_counts_lens_max_idxs_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idx\n    local paren_group_counts_lens_max_idxs_idxs_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idx\n    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idx\n    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idx\n    local\
    \ paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs\n    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idx\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs\n  \
    \  local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx\n\
    \    local paren_group_counts_lens_max_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idxs_idx\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_group_index=0\n\
    \    local paren_group_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_char=\"\"\n    local paren_group_char_index=0\n\
    \    local paren_group_char_count=0\n    local paren_group_chars=\"\"\n    local\
    \ paren_group_char_indexes=()\n    local paren_group_char_counts=()\n    local\
    \ paren_group_char_count=0\n    local paren_group_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_group=\"\"\
    \n  local max_level_group_len=0\n  local level=0\n  local level_group=\"\"\n \
    \ local level_group_len=0\n  local i\n  local j\n  local len\n  local len1\n \
    \ local len2\n  local len3\n  local len4\n  local len5\n  local len6\n  local\
    \ len7\n  local len8\n  local len9\n  local len10\n  local len11\n  local len12\n\
    \  local len13\n  local len14\n  local len15\n  local len16\n  local len17\n \
    \ local len18\n  local len19\n  local len20\n  local len21\n  local len22\n  local\
    \ len23\n  local len24\n  local len25\n  local len26\n  local len27\n  local len28\n\
    \  local len29\n  local len30\n  local len31\n  local len32\n  local len33\n \
    \ local len34\n  local len35\n  local len36\n  local len37\n  local len38\n  local\
    \ len39\n  local len40\n  local len41\n  local len42\n  local len43\n  local len44\n\
    \  local len45\n  local len46\n  local len47\n  local len48\n  local len49\n \
    \ local len50\n  local len51\n  local len52\n  local len53\n  local len54\n  local\
    \ len55\n  local len56\n  local len57\n  local len58\n  local len59\n  local len60\n\
    \  local len61\n  local len62\n  local len63\n  local len64\n  local len65\n \
    \ local len66\n  local len67\n  local len68\n  local len69\n  local len70\n  local\
    \ len71\n  local len72\n  local len73\n  local len74\n  local len75\n  local len76\n\
    \  local len77\n  local len78\n  local len79\n  local len80\n  local len81\n \
    \ local len82\n  local len83\n  local len84\n  local len85\n  local len86\n  local\
    \ len87\n  local len88\n  local len89\n  local len90\n  local len\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local level=0\n    local paren_level=0\n    local paren_levels=()\n\
    \    local paren_levels_len=0\n    local paren_levels_max=0\n    local paren_levels_max_len=0\n\
    \    local paren_levels_max_lens=()\n    local paren_levels_max_lens_len=0\n \
    \   local paren_levels_max_lens_max=0\n    local paren_levels_max_lens_max_len=0\n\
    \    local paren_levels_max_lens_max_lens=()\n    local paren_levels_max_lens_max_lens_len=0\n\
    \    local paren_levels_max_lens_max_lens_max=0\n    local paren_levels_max_lens_max_lens_max_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens=()\n    local paren_levels_max_lens_max_lens_max_lens_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max=0\n    local paren_levels_max_lens_max_lens_max_lens_max_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens=()\n    local paren_levels_max_lens_max_lens_max_lens_max_lens_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_max=0\n    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens=()\n    local\
    \ paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens_len=0\n    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens_max=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens_max_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens_max_lens=()\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens_max_lens_len=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_max_lens_max_lens_max=0\n\
    \    local paren_levels_max_lens_max_lens_max_lens_max_lens_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_level=0\n    local paren_level_index=0\n    local paren_level_str=\"\
    \"\n    local paren_level_str_index=0\n    local paren_level_str_index2=0\n  \
    \  local paren_level_str_index3=0\n    local paren_level_str_index4=0\n    local\
    \ paren_level_str_index5=0\n    local paren_level_str_index6=0\n    local paren_level_str_index7=0\n\
    \    local paren_level_str_index8=0\n    local paren_level_str_index9=0\n    local\
    \ paren_level_str_index10=0\n    local paren_level_str_index11=0\n    local paren_level_str_index12=0\n\
    \    local paren_level_str_index13=0\n    local paren_level_str_index14=0\n  \
    \  local paren_level_str_index15=0\n    local paren_level_str_index16=0\n    local\
    \ paren_level_str_index17=0\n    local paren_level_str_index18=0\n    local paren_level_str_index19=0\n\
    \    local paren_level_str_index20=0\n    local paren_level_str_index21=0\n  \
    \  local paren_level_str_index22=0\n    local paren_level_str_index23=0\n    local\
    \ paren_level_str_index24=0\n    local paren_level_str_index25=0\n    local paren_level_str_index26=0\n\
    \    local paren_level_str_index27=0\n    local paren_level_str_index28=0\n  \
    \  local paren_level_str_index29=0\n    local paren_level_str_index30=0\n    local\
    \ paren_level_str_index31=0\n    local paren_level_str_index32=0\n    local paren_level_str_index33=0\n\
    \    local paren_level_str_index34=0\n    local paren_level_str_index35=0\n  \
    \  local paren_level_str_index36=0\n    local paren_level_str_index37=0\n    local\
    \ paren_level_str_index38=0\n    local paren_level_str_index39=0\n    local paren_level_str_index40=0\n\
    \    local paren_level_str_index41=0\n    local paren_level_str_index42=0\n  \
    \  local paren_level_str_index43=0\n    local paren_level_str_index44=0\n    local\
    \ paren_level_str_index45=0\n    local paren_level_str_index46=0\n    local paren_level_str_index47=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local level=0\n    local paren_level=0\n    local paren_levels=()\n\
    \    local paren_levels_str=\"\"\n    local paren_levels_str_tmp=\"\"\n    local\
    \ paren_levels_str_tmp2=\"\"\n    local paren_levels_str_tmp3=\"\"\n    local\
    \ paren_levels_str_tmp4=\"\"\n    local paren_levels_str_tmp5=\"\"\n    local\
    \ paren_levels_str_tmp6=\"\"\n    local paren_levels_str_tmp7=\"\"\n    local\
    \ paren_levels_str_tmp8=\"\"\n    local paren_levels_str_tmp9=\"\"\n    local\
    \ paren_levels_str_tmp10=\"\"\n    local paren_levels_str_tmp11=\"\"\n    local\
    \ paren_levels_str_tmp12=\"\"\n    local paren_levels_str_tmp13=\"\"\n    local\
    \ paren_levels_str_tmp14=\"\"\n    local paren_levels_str_tmp15=\"\"\n    local\
    \ paren_levels_str_tmp16=\"\"\n    local paren_levels_str_tmp17=\"\"\n    local\
    \ paren_levels_str_tmp18=\"\"\n    local paren_levels_str_tmp19=\"\"\n    local\
    \ paren_levels_str_tmp20=\"\"\n    local paren_levels_str_tmp21=\"\"\n    local\
    \ paren_levels_str_tmp22=\"\"\n    local paren_levels_str_tmp23=\"\"\n    local\
    \ paren_levels_str_tmp24=\"\"\n    local paren_levels_str_tmp25=\"\"\n    local\
    \ paren_levels_str_tmp26=\"\"\n    local paren_levels_str_tmp27=\"\"\n    local\
    \ paren_levels_str_tmp28=\"\"\n    local paren_levels_str_tmp29=\"\"\n    local\
    \ paren_levels_str_tmp30=\"\"\n    local paren_levels_str_tmp31=\"\"\n    local\
    \ paren_levels_str_tmp32=\"\"\n    local paren_levels_str_tmp33=\"\"\n    local\
    \ paren_levels_str_tmp34=\"\"\n    local paren_levels_str_tmp35=\"\"\n    local\
    \ paren_levels_str_tmp36=\"\"\n    local paren_levels_str_tmp37=\"\"\n    local\
    \ paren_levels_str_tmp38=\"\"\n    local paren_levels_str_tmp39=\"\"\n    local\
    \ paren_levels_str_tmp40=\"\"\n    local paren_levels_str_tmp41=\"\"\n    local\
    \ paren_levels_str_tmp42=\"\"\n    local paren_levels_str_tmp43=\"\"\n    local\
    \ paren_level\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_levels=()\n    local paren_levels_index=0\n    local paren_levels_size=0\n\
    \    local paren_levels_max_size=0\n    local paren_levels_max_index=0\n    local\
    \ paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n   \
    \ local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_levels_max_size_index=0\n    local paren_levels_max_size_value=0\n\
    \    local paren_level\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_level\n    local paren_group_level_index\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_str=\"\"\n\
    \  local paren_level=0\n  local paren_level_str=\"\"\n  local paren_level_str1=\"\
    \"\n  local paren_level_str2=\"\"\n  local paren_level_str3=\"\"\n  local paren_level_str4=\"\
    \"\n  local paren_level_str5=\"\"\n  local paren_level_str6=\"\"\n  local paren_level_str7=\"\
    \"\n  local paren_level_str8=\"\"\n  local paren_level_str9=\"\"\n  local paren_level_str10=\"\
    \"\n  local paren_level_str11=\"\"\n  local paren_level_str12=\"\"\n  local paren_level_str13=\"\
    \"\n  local paren_level_str14=\"\"\n  local paren_level_str15=\"\"\n  local paren_level_str16=\"\
    \"\n  local paren_level_str17=\"\"\n  local paren_level_str18=\"\"\n  local paren_level_str19=\"\
    \"\n  local paren_level_str20=\"\"\n  local paren_level_str21=\"\"\n  local paren_level_str22=\"\
    \"\n  local paren_level_str23=\"\"\n  local paren_level_str24=\"\"\n  local paren_level_str25=\"\
    \"\n  local paren_level_str26=\"\"\n  local paren_level_str27=\"\"\n  local paren_level_str28=\"\
    \"\n  local paren_level_str29=\"\"\n  local paren_level_str30=\"\"\n  local paren_level_str31=\"\
    \"\n  local paren_level_str32=\"\"\n  local paren_level_str33=\"\"\n  local paren_level_str34=\"\
    \"\n  local paren_level_str35=\"\"\n  local paren_level_str36=\"\"\n  local paren_level_str37=\"\
    \"\n  local paren_level_str38=\"\"\n  local paren_level_str39=\"\"\n  local paren_level_str40=\"\
    \"\n  local paren_level_str41=\"\"\n  local paren_level_str42=\"\"\n  local paren_level_str43=\"\
    \"\n  local paren_level_str44=\"\"\n  local paren_level_str45=\"\"\n  local paren_level_str46=\"\
    \"\n  local paren_level_str47=\"\"\n  local paren_level_str48=\"\"\n  local paren_level_str49=\"\
    \"\n  local paren_level_str50=\"\"\n  local paren_level_str51=\"\"\n  local paren_level_str52=\"\
    \"\n  local paren_level_str53=\"\"\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local level=0\n  local parens=0\n  local parens_string=\"\"\n  local parens_string2=\"\
    \"\n  local parens_string3=\"\"\n  local parens_string4=\"\"\n  local parens_string5=\"\
    \"\n  local parens_string6=\"\"\n  local parens_string7=\"\"\n  local parens_string8=\"\
    \"\n  local parens_string9=\"\"\n  local parens_string10=\"\"\n  local parens_string11=\"\
    \"\n  local parens_string12=\"\"\n  local parens_string13=\"\"\n  local parens_string14=\"\
    \"\n  local parens_string15=\"\"\n  local parens_string16=\"\"\n  local parens_string17=\"\
    \"\n  local parens_string18=\"\"\n  local parens_string19=\"\"\n  local parens_string20=\"\
    \"\n  local parens_string21=\"\"\n  local parens_string22=\"\"\n  local parens_string23=\"\
    \"\n  local parens_string24=\"\"\n  local parens_string25=\"\"\n  local parens_string26=\"\
    \"\n  local parens_string27=\"\"\n  local parens_string28=\"\"\n  local parens_string29=\"\
    \"\n  local parens_string30=\"\"\n  local parens_string31=\"\"\n  local parens_string32=\"\
    \"\n  local parens_string33=\"\"\n  local parens_string34=\"\"\n  local parens_string35=\"\
    \"\n  local parens_string36=\"\"\n  local parens_string37=\"\"\n  local parens_string38=\"\
    \"\n  local parens_string39=\"\"\n  local parens_string40=\"\"\n  local parens_string41=\"\
    \"\n  local parens_string42=\"\"\n  local parens_string43=\"\"\n  local parens_string44=\"\
    \"\n  local parens_string45=\"\"\n  local parens_string46=\"\"\n  local parens_string47=\"\
    \"\n  local parens_string48=\"\"\n  local parens_string49=\"\"\n  local parens_string50=\"\
    \"\n  local parens_string51=\"\"\n  local parens_string52=\"\"\n  local parens_string53=\"\
    \"\n  local parens_string54=\"\"\n  local parens_string55=\"\"\n  local parens_string56=\"\
    \"\n  local parens_string57=\"\"\n  local parens_string58=\"\"\n  local parens_string59=\"\
    \"\n  local parens_string60=\"\"\n  local parens_string61=\"\"\n  local parens_string62=\"\
    \"\n  local parens_string63\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local max_level=0\n  local level=0\n  local paren_level=0\n  local paren_char=\"\
    \"\n  local paren_char_count=0\n  local paren_char_index=0\n  local paren_char_count2=0\n\
    \  local paren_char_index2=0\n  local paren_char_count3=0\n  local paren_char_index3=0\n\
    \  local paren_char_count4=0\n  local paren_char_index4=0\n  local paren_char_count5=0\n\
    \  local paren_char_index5=0\n  local paren_char_count6=0\n  local paren_char_index6=0\n\
    \  local paren_char_count7=0\n  local paren_char_index7=0\n  local paren_char_count8=0\n\
    \  local paren_char_index8=0\n  local paren_char_count9=0\n  local paren_char_index9=0\n\
    \  local paren_char_count10=0\n  local paren_char_index10=0\n  local paren_char_count11=0\n\
    \  local paren_char_index11=0\n  local paren_char_count12=0\n  local paren_char_index12=0\n\
    \  local paren_char_count13=0\n  local paren_char_index13=0\n  local paren_char_count14=0\n\
    \  local paren_char_index14=0\n  local paren_char_count15=0\n  local paren_char_index15=0\n\
    \  local paren_char_count16=0\n  local paren_char_index16=0\n  local paren_char_count17=0\n\
    \  local paren_char_index17=0\n  local paren_char_count18=0\n  local paren_char_index18=0\n\
    \  local paren_char_count19=0\n  local paren_char_index19=0\n  local paren_char_count20=0\n\
    \  local paren_char_index20=0\n  local paren_char_count21=0\n  local paren_char_index21=0\n\
    \  local paren_char_count22=0\n  local paren_char_index22=0\n  local paren_char_count23=0\n\
    \  local paren_char_index23=0\n  local paren_char_count24=0\n  local paren_char_index24=0\n\
    \  local paren_char_count25=0\n  local paren_char_index25=0\n  local paren_char_count26=0\n\
    \  local paren_char_index26=0\n  local paren_char_count27=0\n  local paren_char_index27=0\n\
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local level=0\n    local level_group=\"\"\n    local group_level=0\n \
    \   local group_level_group=\"\"\n    local group_count=0\n    local group_count_group=\"\
    \"\n    local group_count_group_level=0\n    local group_count_group_level_group=\"\
    \"\n    local group_count_group_level_group_count=0\n    local group_count_group_level_group_count_group=\"\
    \"\n    local group_count_group_level_group_count_group_level=0\n    local group_count_group_level_group_count_group_level_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count=0\n\
    \    local group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group_level_group_count_group=\"\
    \"\n    local group_count_group_level_group_count_group_level_group_count_group_level_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local depth=0\n    local opening_paren=0\n    local\
    \ paren_level=0\n    local paren_nesting_level=0\n    local paren_nesting_levels=()\n\
    \    local paren_nesting_level_max=0\n    local paren_nesting_level_max_index=0\n\
    \    local paren_nesting_level_max_count=0\n    local paren_nesting_level_max_count_index=0\n\
    \    local paren_nesting_level_max_count_string=\"\"\n    local paren_nesting_level_max_count_string_index=0\n\
    \    local paren_nesting_level_max_count_string_count=0\n    local paren_nesting_level_max_count_string_counts=()\n\
    \    local paren_nesting_level_max_count_string_count_index=0\n    local paren_nesting_level_max_count_string_count_string=\"\
    \"\n    local paren_nesting_level_max_count_string_count_string_index=0\n    local\
    \ paren_nesting_level_max_count_string_count_string_count=0\n    local paren_nesting_level_max_count_string_count_strings=()\n\
    \    local paren_nesting_level_max_count_string_count_string_index=0\n    local\
    \ paren_nesting_level_max_count_string_count_string_counts=()\n    local paren_nesting_level_max_count_string_count_string_index=0\n\
    \    local paren_nesting_level_max_count_string_count_string_counts=()\n    local\
    \ paren_nesting_level_max_count_string_count_string_index=0\n    local paren_nesting_level_max_count_string_count_string_counts=()\n\
    \    local paren_nesting_level_max_count_string_count_string_index=0\n    local\
    \ paren_nesting_level_max_count_string_count_string_counts=()\n    local paren_nesting_level_max_count_string_count_string_index=0\n\
    \    local paren_nesting_level_max_count_string_count_string_counts=()\n    local\
    \ paren_nesting_level_max_count_string_count_string_index=0\n    local paren_nesting_level_max_count_string_count_string_counts=()\n\
    \    local paren_nesting_level_max_count_string_count_string_index=0\n    local\
    \ paren_nesting_level_max_count_string_count_string_counts=()\n    local paren_nesting_level_max_count_string_count_string_index=0\n\
    \    local paren_nesting_level_max_count_string_count_string_counts=()\n    local\
    \ paren_nesting_level_max_count_string_count_string_index=0\n    local paren_nesting_level_max_count_string_count_string_counts=()\n\
    \    local paren_nesting_level_max_count_string_count_string_index=0\n    local\
    \ paren_nest\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_level\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_index_index\n\
    \    local paren_group_level_length_index_index_index\n    local paren_group_level_length_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index\n    local paren_group_level_length_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local paren_group_level_length_index_index_index_index_index_index_index_index_index_index_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_index=0\n    local paren_level=0\n    local paren_level_index=0\n\
    \    local paren_level_str=\"\"\n    local paren_level_str_index=0\n    local\
    \ paren_level_str_count=0\n    local paren_level_str_char=\"\"\n    local paren_level_str_char_index=0\n\
    \    local paren_level_str_char_count=0\n    local paren_level_str_char_reverse=0\n\
    \    local paren_level_str_char_length=0\n    local paren_level_str_char_length_reverse=0\n\
    \    local paren_level_str_char_length_reverse_index=0\n    local paren_level_str_char_length_reverse_count=0\n\
    \    local paren_level_str_char_length_reverse_count2=0\n    local paren_level_str_char_length_reverse_count3=0\n\
    \    local paren_level_str_char_length_reverse_count4=0\n    local paren_level_str_char_length_reverse_count5=0\n\
    \    local paren_level_str_char_length_reverse_count6=0\n    local paren_level_str_char_length_reverse_count7=0\n\
    \    local paren_level_str_char_length_reverse_count8=0\n    local paren_level_str_char_length_reverse_count9=0\n\
    \    local paren_level_str_char_length_reverse_count10=0\n    local paren_level_str_char_length_reverse_count11=0\n\
    \    local paren_level_str_char_length_reverse_count12=0\n    local paren_level_str_char_length_reverse_count13=0\n\
    \    local paren_level_str_char_length_reverse_count14=0\n    local paren_level_str_char_length_reverse_count15=0\n\
    \    local paren_level_str_char_length_reverse_count16=0\n    local paren_level_str_char_length_reverse_count17=0\n\
    \    local paren_level_str_char_length_reverse_count18=0\n    local paren_level_str_char_length_reverse_count19=0\n\
    \    local paren_level_str_char_length_reverse_count20=0\n    local paren_level_str_char_length_reverse_count21=0\n\
    \    local paren_level_str_char_length_reverse_count22=0\n    local paren_level_str_char_length_reverse_count23=0\n\
    \    local paren_level_str_char_length_reverse_count24=0\n    local paren_level_str_char_length_reverse_count25=0\n\
    \    local paren_level_str_char_length_reverse_count26=0\n    local paren_level_str_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_group=\"\
    \"\n    local level=0\n    local level_group=\"\"\n    local level_group_count=0\n\
    \    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_group=\"\"\
    \n    local level_group_count_max=0\n    local level_group_count_max_group=\"\"\
    \n    local level_group_count_min=0\n    local level_group_count_min_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local level=0\n   \
    \ local paren_level=0\n    local paren_group\n    local paren_group_level\n  \
    \  local paren_group_count\n    local paren_group_counts\n    local paren_group_counts_index\n\
    \    local paren_group_counts_indexs\n    local paren_group_counts_length\n  \
    \  local paren_group_counts_lengths\n    local paren_group_counts_lengths_index\n\
    \    local paren_group_counts_lengths_indexs\n    local paren_group_counts_lengths_indexs_index\n\
    \    local paren_group_counts_lengths_indexs_indexs\n    local paren_group_counts_lengths_indexs_length\n\
    \    local paren_group_counts_lengths_indexs_lengths\n    local paren_group_counts_lengths_indexs_lengths_index\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs\n    local paren_group_counts_lengths_indexs_lengths_indexs_index\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_indexs\n    local\
    \ paren_group_counts_lengths_indexs_lengths_indexs_length\n    local paren_group_counts_lengths_indexs_lengths_indexs_lengths\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_index\n  \
    \  local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs\n   \
    \ local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_index\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_indexs\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_length\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_lengths\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_lengths_index\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_lengths_indexs\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_lengths_indexs_index\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_indexs_lengths_indexs_lengths_index\n\
    \    local paren_group_counts_lengths_indexs_lengths_indexs_lengths_index\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_group=0\n  local parens_groups=()\n\
    \  local parens_group_count=0\n  local parens_group_count_max=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local parens_group_count_max_index=0\n  local parens_group_count_max_index=0\n\
    \  local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_level=0\n    local parens_groups=()\n    local parens_group_count=0\n\
    \    local parens_group_level=0\n    local parens_group_contents=()\n    local\
    \ parens_group_contents_level=0\n    local parens_group_contents_count=0 \n  \
    \  local parens_group_contents_contents=()\n    local parens_group_contents_contents_level=0\n\
    \    local parens_group_contents_contents_count=0 \n    local parens_group_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_level=0\n    local parens_group_contents_contents_contents_count=0\
    \ \n    local parens_group_contents_contents_contents_contents=()\n    local parens_group_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_count=0 \n    local\
    \ parens_group_contents_contents_contents_contents_contents=()\n    local parens_group_contents_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_contents_count=0 \n\
    \    local parens_group_contents_contents_contents_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_level=0\n\
    \    local parens_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents=()\n\
    \    local parens_group_contents_contents_contents_content\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036110
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local level=0\n    local level_index=0\n    local paren_group_index=0\n \
    \   local paren_group\n    local paren_group_level\n    local paren_group_level_index\n\
    \    local paren_group_level_length\n    local paren_group_level_length_index\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length\n\
    \    local paren_group_level_length_index\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren_group_level_length_count\n    local paren_group_level_length_count\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_count=0\n\
    \    local level=0\n    local level_count=0\n    local paren_group\n    local\
    \ paren_group_count\n    local paren_group_level\n    local paren_group_level_count\n\
    \    local paren_group_level_max\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren_group_level_max_count\n    local paren_group_level_max_count\n    local\
    \ paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_groups=$1\n    local max_level=0\n    local max_level_index=0\n\
    \    local paren_index=0\n    local paren_group_index=0\n    local paren_group\n\
    \    local level\n    local paren\n    local i\n    local j\n    local paren_group_count\n\
    \    local paren_group_index\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n    local paren_group_count\n    local paren_group_count\n\
    \    local paren_group_count\n\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local level=0\n  local paren_group\n\
    \  local paren_group_level\n  local paren_group_count\n  local paren_group_count_max\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_max_index\n  local\
    \ paren_group_count_max_index\n  local paren_group_count_max_index\n  local paren_group_count_max_index\n\
    \  local paren_group_count_max_index\n  local paren_group_count_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_level=0\n  local parens_string=$1\n  local parens_string2=\"\
    \"\n  local parens_string3=\"\"\n  local parens_string4=\"\"\n  local parens_string5=\"\
    \"\n  local parens_string6=\"\"\n  local parens_string7=\"\"\n  local parens_string8=\"\
    \"\n  local parens_string9=\"\"\n  local parens_string10=\"\"\n  local parens_string11=\"\
    \"\n  local parens_string12=\"\"\n  local parens_string13=\"\"\n  local parens_string14=\"\
    \"\n  local parens_string15=\"\"\n  local parens_string16=\"\"\n  local parens_string17=\"\
    \"\n  local parens_string18=\"\"\n  local parens_string19=\"\"\n  local parens_string20=\"\
    \"\n  local parens_string21=\"\"\n  local parens_string22=\"\"\n  local parens_string23=\"\
    \"\n  local parens_string24=\"\"\n  local parens_string25=\"\"\n  local parens_string26=\"\
    \"\n  local parens_string27=\"\"\n  local parens_string28=\"\"\n  local parens_string29=\"\
    \"\n  local parens_string30=\"\"\n  local parens_string31=\"\"\n  local parens_string32=\"\
    \"\n  local parens_string33=\"\"\n  local parens_string34=\"\"\n  local parens_string35=\"\
    \"\n  local parens_string36=\"\"\n  local parens_string37=\"\"\n  local parens_string38=\"\
    \"\n  local parens_string39=\"\"\n  local parens_string40=\"\"\n  local parens_string41=\"\
    \"\n  local parens_string42=\"\"\n  local parens_string43=\"\"\n  local parens_string44=\"\
    \"\n  local parens_string45=\"\"\n  local parens_string46=\"\"\n  local parens_string47=\"\
    \"\n  local parens_string48=\"\"\n  local parens_string49=\"\"\n  local parens_string50=\"\
    \"\n  local parens_string51=\"\"\n  local parens_string52=\"\"\n  local parens_string53=\"\
    \"\n  local parens_string54=\"\"\n  local parens_string55=\"\"\n  local parens_string56=\"\
    \"\n  local parens_string57=\"\"\n  local parens_string58=\"\"\n  local parens_string59=\"\
    \"\n  local parens_string60=\"\"\n  local parens_string61=\"\"\n  local parens_string62=\"\
    \"\n  local parens_string63=\"\"\n  \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=\"\"\n  local paren_group_count=0\n\
    \  local paren_group_length=0\n  local paren_group_max=0\n  local paren_group_max_index=0\n\
    \  local paren_group_max_length=0\n  local paren_group_max_count=0\n  local paren_group_max_count_index=0\n\
    \  local paren_group_max_count_length=0\n  local paren_group_max_count_count=0\n\
    \  local paren_group_max_count_count_index=0\n  local paren_group_max_count_count_length=0\n\
    \  local paren_group_max_count_count_count=0\n  local paren_group_max_count_count_count_index=0\n\
    \  local paren_group_max_count_count_count_length=0\n  local paren_group_max_count_count_count_count=0\n\
    \  local paren_group_max_count_count_count_index=0\n  local paren_group_max_count_count_count_count_length=0\n\
    \  local paren_group_max_count_count_count_count_count=0\n  local paren_group_max_count_count_count_count_index=0\n\
    \  local paren_group_max_count_count_count_count_count_length=0\n  local paren_group_max_count_count_count_count_count_count=0\n\
    \  local paren_group_max_count_count_count_count_count_index=0\n  local paren_group_max_count_count_count_count_count_count_length=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count=0\n  local\
    \ paren_group_max_count_count_count_count_count_count_index=0\n  local paren_group_max_count_count_count_count_count_count_count_length=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count=0\n \
    \ local paren_group_max_count_count_count_count_count_count_count_index=0\n  local\
    \ paren_group_max_count_count_count_count_count_count_count_count_length=0\n \
    \ local paren_group_max_count_count_count_count_count_count_count_count_count=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_index=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_count_count_length=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_count_count=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_count_index=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_count_length=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_count_count=0\n\
    \  local paren_group_max_count_count_count_count_count_count_count_count_count_count_index=0\n\
    \  \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=\"\"\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length_remain=0\n    local paren_group_length_remain_count=0\n \
    \   local paren_group_length_remain_remain=0\n    local paren_group_length_remain_remain_index=0\n\
    \    local paren_group_length_remain_remain_index2=0\n    local paren_group_length_remain_remain_index3=0\n\
    \    local paren_group_length_remain_remain_index4=0\n    local paren_group_length_remain_remain_index5=0\n\
    \    local paren_group_length_remain_remain_index6=0\n    local paren_group_length_remain_remain_index7=0\n\
    \    local paren_group_length_remain_remain_index8=0\n    local paren_group_length_remain_remain_index9=0\n\
    \    local paren_group_length_remain_remain_index10=0\n    local paren_group_length_remain_remain_index11=0\n\
    \    local paren_group_length_remain_remain_index12=0\n    local paren_group_length_remain_remain_index13=0\n\
    \    local paren_group_length_remain_remain_index14=0\n    local paren_group_length_remain_remain_index15=0\n\
    \    local paren_group_length_remain_remain_index16=0\n    local paren_group_length_remain_remain_index17=0\n\
    \    local paren_group_length_remain_remain_index18=0\n    local paren_group_length_remain_remain_index19=0\n\
    \    local paren_group_length_remain_remain_index20=0\n    local paren_group_length_remain_remain_index21=0\n\
    \    local paren_group_length_remain_remain_index22=0\n    local paren_group_length_remain_remain_index23=0\n\
    \    local paren_group_length_remain_remain_index24=0\n    local paren_group_length_remain_remain_index25=0\n\
    \    local paren_group_length_remain_remain_index26=0\n    local paren_group_length_remain_remain_index27=0\n\
    \    local paren_group_length_remain_remain_index28=0\n    local paren_group_length_remain_remain_index29=0\n\
    \    local paren_group_length_remain_remain_index30=0\n    local paren_group_length_remain_remain_index31=0\n\
    \    local paren_group_length_remain_remain_index32=0\n    local paren_group_length_remain_remain_index33=0\n\
    \    local paren_group_length_remain_remain_index34=0\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_level=0\n  local paren_group=0\n  local paren_group_count=0\n\
    \  local paren_group_length=0\n  local paren_group_string=\"\"\n  local paren_group_string2=\"\
    \"\n  local paren_group_string3=\"\"\n  local paren_group_string4=\"\"\n  local\
    \ paren_group_string5=\"\"\n  local paren_group_string6=\"\"\n  local paren_group_string7=\"\
    \"\n  local paren_group_string8=\"\"\n  local paren_group_string9=\"\"\n  local\
    \ paren_group_string10=\"\"\n  local paren_group_string11=\"\"\n  local paren_group_string12=\"\
    \"\n  local paren_group_string13=\"\"\n  local paren_group_string14=\"\"\n  local\
    \ paren_group_string15=\"\"\n  local paren_group_string16=\"\"\n  local paren_group_string17=\"\
    \"\n  local paren_group_string18=\"\"\n  local paren_group_string19=\"\"\n  local\
    \ paren_group_string20=\"\"\n  local paren_group_string21=\"\"\n  local paren_group_string22=\"\
    \"\n  local paren_group_string23=\"\"\n  local paren_group_string24=\"\"\n  local\
    \ paren_group_string25=\"\"\n  local paren_group_string26=\"\"\n  local paren_group_string27=\"\
    \"\n  local paren_group_string28=\"\"\n  local paren_group_string29=\"\"\n  local\
    \ paren_group_string30=\"\"\n  local paren_group_string31=\"\"\n  local paren_group_string32=\"\
    \"\n  local paren_group_string33=\"\"\n  local paren_group_string34=\"\"\n  local\
    \ paren_group_string35=\"\"\n  local paren_group_string36=\"\"\n  local paren_group_string37=\"\
    \"\n  local paren_group_string38=\"\"\n  local paren_group_string39=\"\"\n  local\
    \ paren_group_string40=\"\"\n  local paren_group_string41=\"\"\n  local paren_group_string42=\"\
    \"\n  local paren_group_string43=\"\"\n  local paren_group_string44=\"\"\n  local\
    \ paren_group_string45=\"\"\n  local paren_group_string46=\"\"\n  local paren_group_string47=\"\
    \"\n  local paren_group_string48=\"\"\n  local paren_group_string49=\"\"\n  local\
    \ paren_group_string50=\"\"\n  local paren_group_string51=\"\"\n  local paren_group_string52=\"\
    \"\n  local paren_group_string53=\"\"\n  local paren_group_string\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036110
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_index=0\n\
    \  local paren_level=0\n  local paren_level_index=0\n  local paren_level_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n  local paren_level_char_index=0\n  local paren_level_char_count=0\n\
    \  local paren_level_chars=0\n\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036110
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local paren_groups=$1\n  local max_level=0\n  local max_level_group=\"\"\
    \n  local level=0\n  local level_group=\"\"\n  local paren_group=\"\"\n  local\
    \ paren_group_count=0\n  local paren_group_count_max=0\n  local paren_group_count_max_group=\"\
    \"\n  local paren_group_count_max_level=0\n  local paren_group_count_max_level_group=\"\
    \"\n  local paren_group_count_max_level_group_count=0\n  local paren_group_count_max_level_group_count_max=0\n\
    \  local paren_group_count_max_level_group_count_max_group=\"\"\n  local paren_group_count_max_level_group_count_max_level=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group=\"\"\n  local\
    \ paren_group_count_max_level_group_count_max_level_group_count=0\n  local paren_group_count_max_level_group_count_max_level_group_count_max=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_group=\"\
    \"\n  local paren_group_count_max_level_group_count_max_level_group_count_max_level=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group=\"\
    \"\n  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_group=\"\
    \"\n  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group=\"\
    \"\n  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_group=\"\
    \"\n  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level=0\n\
    \  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group=\"\
    \"\n  local paren_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max_level_group_count_max=0\n\
    \  local paren_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local paren_level=0\n    local paren_group=0\n    local paren_group_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length_count=0\n    local paren_group_length=0\n    local paren_group_length_count=0\n\
    \    local paren_group_length=0\n    local paren_group_length_count=0\n    local\
    \ paren_group_length=0\n    local paren_group_length_count=0\n    local paren_group_length=0\n\
    \    local paren_group_length_count=0\n    local paren_group_length=0\n    local\
    \ paren_group_length\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660036109
