language: sh
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_result=1\n  while [ $factorial -gt 0 ]; do\n    factorial_result=$(($factorial_result\
    \ * $factorial))\n    factorial=$(($factorial - 1))\n  done\n  echo $factorial_result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  (( n > 0 )) || return 1\n  local factorial=1\n  while (( n > 0 ))\n  do\n \
    \   (( factorial *= n ))\n    (( n-- ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  (( n > 0 )) || return 1\n  local factorial=1\n  while (( n > 1 )); do\n   \
    \ factorial=$(( factorial * n ))\n    n=$(( n - 1 ))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_sum=0\n  while [ $factorial -gt 0 ]; do\n    factorial_sum=$((factorial_sum\
    \ + factorial))\n    factorial=$((factorial - 1))\n  done\n  echo $factorial_sum\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  local factorial_tmp=$((factorial))\n  while [ $n -gt 0\
    \ ]; do\n    factorial=$((factorial * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial *\
    \ i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n    factorial=$((factorial*$1))\n\
    \    factorial=$((factorial*$1))\n    \n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  local factorial_of_n=1\n  local factorial_of_n-1\n  local\
    \ factorial_of_n-2\n  local factorial_of_n-3\n  local factorial_of_n-4\n  local\
    \ factorial_of_n-5\n  local factorial_of_n-6\n  local factorial_of_n-7\n  local\
    \ factorial_of_n-8\n  local factorial_of_n-9\n  local factorial_of_n-10\n  local\
    \ factorial_of_n-11\n  local factorial_of_n-12\n  local factorial_of_n-13\n  local\
    \ factorial_of_n-14\n  local factorial_of_n-15\n  local factorial_of_n-16\n  local\
    \ factorial_of_n-17\n  local factorial_of_n-18\n  local factorial_of_n-19\n  local\
    \ factorial_of_n-20\n  local factorial_of_n-21\n  local factorial_of_n-22\n  local\
    \ factorial_of_n-23\n  local factorial_of_n-24\n  local factorial_of_n-25\n  local\
    \ factorial_of_n-26\n  local factorial_of_n-27\n  local factorial_of_n-28\n  local\
    \ factorial_of_n-29\n  local factorial_of_n-30\n  local factorial_of_n-31\n  local\
    \ factorial_of_n-32\n  local factorial_of_n-33\n  local factorial_of_n-34\n  local\
    \ factorial_of_n-35\n  local factorial_of_n-36\n  local factorial_of_n-37\n  local\
    \ factorial_of_n-38\n  local factorial_of_n-39\n  local factorial_of_n-40\n  local\
    \ factorial_of_n-41\n  local factorial_of_n-42\n  local factorial_of_n-43\n  local\
    \ factorial_of_n-44\n  local factorial_of_n-45\n  local factorial_of_n-46\n  local\
    \ factorial_of_n-47\n  local factorial_of_n-48\n  local factorial_of_n-49\n  local\
    \ factorial_of_n-50\n  local factorial_of_n-51\n  local factorial_of_n-52\n  local\
    \ factorial_of_n-53\n  local factorial_of_n-54\n  local factorial_of_n-55\n  local\
    \ factorial_of_n-56\n  local factorial_of_n-57\n  local factorial_of_n-58\n  local\
    \ factorial_of_n-59\n  local factorial_of_n-60\n  local factorial_of_n-61\n  \n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmgng8yhn.sh: line 14: local: `factorial_of_n-1'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 15: local: `factorial_of_n-2'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 16: local: `factorial_of_n-3'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 17: local: `factorial_of_n-4'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 18: local: `factorial_of_n-5'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 19: local: `factorial_of_n-6'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 20: local: `factorial_of_n-7'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 21: local: `factorial_of_n-8'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 22: local: `factorial_of_n-9'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 23: local: `factorial_of_n-10'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 24: local: `factorial_of_n-11'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 25: local: `factorial_of_n-12'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 26: local: `factorial_of_n-13'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 27: local: `factorial_of_n-14'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 28: local: `factorial_of_n-15'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 29: local: `factorial_of_n-16'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 30: local: `factorial_of_n-17'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 31: local: `factorial_of_n-18'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 32: local: `factorial_of_n-19'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 33: local: `factorial_of_n-20'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 34: local: `factorial_of_n-21'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 35: local: `factorial_of_n-22'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 36: local: `factorial_of_n-23'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 37: local: `factorial_of_n-24'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 38: local: `factorial_of_n-25'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 39: lo'
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factori\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdrndczi4.sh: line 68: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$(( $factorial * $i\
    \ ))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_sum=0\n  factorial_sum=$((factorial*factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factori\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphto6fx6u.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmphto6fx6u.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  \n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_result=$factorial\n  while [ $factorial -gt 1 ]; do\n    factorial_result=$((factorial_result\
    \ * $factorial))\n    factorial=$((factorial - 1))\n  done\n  echo $factorial_result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_result=1\n  while [ $factorial -gt 0 ]; do\n    factorial_result=$((factorial_result\
    \ * factorial))\n    factorial=$((factorial - 1))\n  done\n  echo $factorial_result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_sum=0\n  factorial_sum=$((factorial*factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factori\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphto6fx6u.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmphto6fx6u.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial *\
    \ i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  (( n > 0 )) || return 1\n  local factorial=1\n  while (( n > 1 )); do\n   \
    \ (( factorial *= n ))\n    (( n-- ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_sum=0\n  for i in $(seq 1 $factorial); do\n    factorial_sum=$((factorial_sum\
    \ + i))\n  done\n  echo $factorial_sum\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factori\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdrndczi4.sh: line 68: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n \
    \   done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial_result=1\n    while [ $factorial -gt 1 ]\n    do\n        factorial_result=$(($factorial_result\
    \ * $factorial))\n        factorial=$(($factorial - 1))\n    done\n    echo $factorial_result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial *\
    \ i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  local factorial_temp\n  while [ $n -gt 0 ]; do\n    factorial_temp=$((factorial*n))\n\
    \    factorial=$((factorial-1))\n    n=$((n-1))\n  done\n  echo $factorial\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_result=1\n  while [ $factorial -gt 1 ]\n  do\n    factorial_result=$(($factorial_result\
    \ * $factorial))\n    factorial=$(($factorial - 1))\n  done\n  echo $factorial_result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factori\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdrndczi4.sh: line 68: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial *\
    \ i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_result=1\n  while [ $factorial -gt 1 ]\n  do\n    factorial_result=$((factorial\
    \ * factorial_result))\n    factorial=$((factorial - 1))\n  done\n  echo $factorial_result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$((factorial*i))\n \
    \   done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  for i in $(seq 1 $n); do\n    factorial=$((factorial*i))\n\
    \  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  local factorial_tmp=1\n\n  while [ $n -gt 0 ]; do\n  \
    \  factorial_tmp=$((factorial * n))\n    factorial=$((factorial_tmp))\n    n=$((n\
    \ - 1))\n  done\n\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$(( factorial * i ))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  \n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  local factorial_2=1\n  local factorial_3=1\n  local factorial_4=1\n\
    \  local factorial_5=1\n  local factorial_6=1\n  local factorial_7=1\n  local\
    \ factorial_8=1\n  local factorial_9=1\n  local factorial_10=1\n  local factorial_11=1\n\
    \  local factorial_12=1\n  local factorial_13=1\n  local factorial_14=1\n  local\
    \ factorial_15=1\n  local factorial_16=1\n  local factorial_17=1\n  local factorial_18=1\n\
    \  local factorial_19=1\n  local factorial_20=1\n  local factorial_21=1\n  local\
    \ factorial_22=1\n  local factorial_23=1\n  local factorial_24=1\n  local factorial_25=1\n\
    \  local factorial_26=1\n  local factorial_27=1\n  local factorial_28=1\n  local\
    \ factorial_29=1\n  local factorial_30=1\n  local factorial_31=1\n  local factorial_32=1\n\
    \  local factorial_33=1\n  local factorial_34=1\n  local factorial_35=1\n  local\
    \ factorial_36=1\n  local factorial_37=1\n  local factorial_38=1\n  local factorial_39=1\n\
    \  local factorial_40=1\n  local factorial_41=1\n  local factorial_42=1\n  local\
    \ factorial_43=1\n  local factorial_44=1\n  local factorial_45=1\n  local factorial_46=1\n\
    \  local factorial_47=1\n  local factorial_48=1\n  local factorial_49=1\n  local\
    \ factorial_50=1\n  local factorial_51=1\n  local factorial_52=1\n  local factorial_53=1\n\
    \  local factorial_54=1\n  local factorial_55=1\n  local factorial_56=1\n  local\
    \ factorial_57=1\n  local factorial_58=1\n  local factorial_59=1\n  local factorial_60=1\n\
    \  local factorial_61=1\n  local factorial_62=1\n  local factorial_63=1\n  local\
    \ factorial_64=1\n  local factorial_65=1\n  local factorial_66=1\n  local factorial_67=1\n\
    \  local factorial_68=1\n  local factorial_69=1\n  local factorial_70=1\n  local\
    \ factorial_71=1\n  local factorial_72=1\n  local factori\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n    factorial=$(($factorial*$1))\n\
    \    factorial=$(($factorial*$1))\n    \n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factorial=$((factorial * factorial))\n    factorial=$((factorial * factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpntel5kgy.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    for (( i=1; i<=$1; i++))\n    do\n        factorial=$((factorial*i))\n  \
    \  done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_sum=0\n  factorial_sum=$((factorial*factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factori\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphto6fx6u.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmphto6fx6u.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial_sum=0\n  factorial_sum=$((factorial*factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factorial))\n\
    \  factorial_sum=$((factorial_sum+factorial))\n  factorial_sum=$((factorial_sum+factori\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphto6fx6u.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmphto6fx6u.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=1\n\
    \    for (( i=1; i<=$1; i++ ))\n    do\n        factorial=$(( factorial * i ))\n\
    \    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local factorial=$1\n\
    \  local factorial_result=1\n  local factorial_temp\n  local factorial_temp2\n\
    \  local factorial_temp3\n  local factorial_temp4\n  local factorial_temp5\n \
    \ local factorial_temp6\n  local factorial_temp7\n  local factorial_temp8\n  local\
    \ factorial_temp9\n  local factorial_temp10\n  local factorial_temp11\n  local\
    \ factorial_temp12\n  local factorial_temp13\n  local factorial_temp14\n  local\
    \ factorial_temp15\n  local factorial_temp16\n  local factorial_temp17\n  local\
    \ factorial_temp18\n  local factorial_temp19\n  local factorial_temp20\n  local\
    \ factorial_temp21\n  local factorial_temp22\n  local factorial_temp23\n  local\
    \ factorial_temp24\n  local factorial_temp25\n  local factorial_temp26\n  local\
    \ factorial_temp27\n  local factorial_temp28\n  local factorial_temp29\n  local\
    \ factorial_temp30\n  local factorial_temp31\n  local factorial_temp32\n  local\
    \ factorial_temp33\n  local factorial_temp34\n  local factorial_temp35\n  local\
    \ factorial_temp36\n  local factorial_temp37\n  local factorial_temp38\n  local\
    \ factorial_temp39\n  local factorial_temp40\n  local factorial_temp41\n  local\
    \ factorial_temp42\n  local factorial_temp43\n  local factorial_temp44\n  local\
    \ factorial_temp45\n  local factorial_temp46\n  local factorial_temp47\n  local\
    \ factorial_temp48\n  local factorial_temp49\n  local factorial_temp50\n  local\
    \ factorial_temp51\n  local factorial_temp52\n  local factorial_temp53\n  local\
    \ factorial_temp54\n  local factorial_temp55\n  local factorial_temp56\n  local\
    \ factorial_temp57\n  local factorial_temp58\n  local factorial_temp59\n  local\
    \ factorial_temp60\n  local factorial_temp61\n  local factorial_temp62\n  local\
    \ factorial_temp63\n  local factorial_temp64\n  local factorial_temp65\n  local\
    \ factorial_temp66\n  local factorial_temp67\n  local factorial_temp68\n  local\
    \ factorial_temp69\n  local factorial_temp70\n  local factorial_temp71\n  local\
    \ \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    factorial=$1\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factorial=$((factorial*factorial))\n    factorial=$((factorial*factorial))\n\
    \    factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmlpi27_5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  local factorial_of_n=1\n  local factorial_of_n-1\n  local\
    \ factorial_of_n-2\n  local factorial_of_n-3\n  local factorial_of_n-4\n  local\
    \ factorial_of_n-5\n  local factorial_of_n-6\n  local factorial_of_n-7\n  local\
    \ factorial_of_n-8\n  local factorial_of_n-9\n  local factorial_of_n-10\n  local\
    \ factorial_of_n-11\n  local factorial_of_n-12\n  local factorial_of_n-13\n  local\
    \ factorial_of_n-14\n  local factorial_of_n-15\n  local factorial_of_n-16\n  local\
    \ factorial_of_n-17\n  local factorial_of_n-18\n  local factorial_of_n-19\n  local\
    \ factorial_of_n-20\n  local factorial_of_n-21\n  local factorial_of_n-22\n  local\
    \ factorial_of_n-23\n  local factorial_of_n-24\n  local factorial_of_n-25\n  local\
    \ factorial_of_n-26\n  local factorial_of_n-27\n  local factorial_of_n-28\n  local\
    \ factorial_of_n-29\n  local factorial_of_n-30\n  local factorial_of_n-31\n  local\
    \ factorial_of_n-32\n  local factorial_of_n-33\n  local factorial_of_n-34\n  local\
    \ factorial_of_n-35\n  local factorial_of_n-36\n  local factorial_of_n-37\n  local\
    \ factorial_of_n-38\n  local factorial_of_n-39\n  local factorial_of_n-40\n  local\
    \ factorial_of_n-41\n  local factorial_of_n-42\n  local factorial_of_n-43\n  local\
    \ factorial_of_n-44\n  local factorial_of_n-45\n  local factorial_of_n-46\n  local\
    \ factorial_of_n-47\n  local factorial_of_n-48\n  local factorial_of_n-49\n  local\
    \ factorial_of_n-50\n  local factorial_of_n-51\n  local factorial_of_n-52\n  local\
    \ factorial_of_n-53\n  local factorial_of_n-54\n  local factorial_of_n-55\n  local\
    \ factorial_of_n-56\n  local factorial_of_n-57\n  local factorial_of_n-58\n  local\
    \ factorial_of_n-59\n  local factorial_of_n-60\n  local factorial_of_n-61\n  \n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmgng8yhn.sh: line 14: local: `factorial_of_n-1'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 15: local: `factorial_of_n-2'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 16: local: `factorial_of_n-3'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 17: local: `factorial_of_n-4'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 18: local: `factorial_of_n-5'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 19: local: `factorial_of_n-6'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 20: local: `factorial_of_n-7'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 21: local: `factorial_of_n-8'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 22: local: `factorial_of_n-9'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 23: local: `factorial_of_n-10'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 24: local: `factorial_of_n-11'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 25: local: `factorial_of_n-12'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 26: local: `factorial_of_n-13'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 27: local: `factorial_of_n-14'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 28: local: `factorial_of_n-15'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 29: local: `factorial_of_n-16'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 30: local: `factorial_of_n-17'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 31: local: `factorial_of_n-18'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 32: local: `factorial_of_n-19'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 33: local: `factorial_of_n-20'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 34: local: `factorial_of_n-21'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 35: local: `factorial_of_n-22'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 36: local: `factorial_of_n-23'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 37: local: `factorial_of_n-24'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 38: local: `factorial_of_n-25'': not a valid identifier

    /tmp/tmpmgng8yhn.sh: line 39: lo'
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factori\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdrndczi4.sh: line 68: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factori\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdrndczi4.sh: line 68: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factorial=$((factorial * factorial))\n  factorial=$((factorial * factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2868vfd5.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  factorial=$1\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factorial=$((factorial*factorial))\n  factorial=$((factorial*factorial))\n\
    \  factori\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphexv8jvg.sh: line 54: factori: command not found

    '
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial * n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n\
    \  local factorial=1\n  while [ $n -gt 1 ]; do\n    factorial=$((factorial * $n))\n\
    \    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660038051
