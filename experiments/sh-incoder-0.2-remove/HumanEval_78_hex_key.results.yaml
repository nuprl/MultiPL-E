language: sh
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n \
    \ hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed\
    \ 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n \
    \ hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed\
    \ 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n \
    \ hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed\
    \ 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n \
    \ hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed\
    \ 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n \
    \ hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed\
    \ 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $hex_key | sed 's/\\///g')\n \
    \ hex_key2=$(echo $hex_key | sed 's/\\///g')\n  hex_key2=$(echo $\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbia4pvpf.sh: line 47: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbia4pvpf.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key |\
    \ sed 's/ //g')\n    local hex_key3\n    hex_key3=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key4\n    hex_key4=$(echo $hex_key | sed 's/ //g')\n    local hex_key5\n\
    \    hex_key5=$(echo $hex_key | sed 's/ //g')\n    local hex_key6\n    hex_key6=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key7\n    hex_key7=$(echo $hex_key |\
    \ sed 's/ //g')\n    local hex_key8\n    hex_key8=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key9\n    hex_key9=$(echo $hex_key | sed 's/ //g')\n    local hex_key10\n\
    \    hex_key10=$(echo $hex_key | sed 's/ //g')\n    local hex_key11\n    hex_key11=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | sed 's/ //g')\n    local hex_key13\n    hex_key13=$(echo $hex_key | sed 's/\
    \ //g')\n    local hex_key14\n    hex_key14=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | sed 's/ //g')\n    local\
    \ hex_key16\n    hex_key16=$(echo $hex_key | sed 's/ //g')\n    local hex_key17\n\
    \    hex_key17=$(echo $hex_key | sed 's/ //g')\n    local hex_key18\n    hex_key18=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | sed 's/ //g')\n    local hex_key20\n    hex_key20=$(echo $hex_key | sed 's/\
    \ //g')\n    local hex_key21\n    hex_key21=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key22\n    hex_key22=$(echo $hex_key | sed 's/ //g')\n    local\
    \ hex_key23\n    hex_key23=$(echo $hex_key | sed 's/\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvnqqj8_g.sh: line 61: unexpected EOF while looking for matching
    `''''

    /tmp/tmpvnqqj8_g.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$2\n    local hex_key3\n\
    \    hex_key3=$3\n    local hex_key4\n    hex_key4=$4\n    local hex_key5\n  \
    \  hex_key5=$5\n    local hex_key6\n    hex_key6=$6\n    local hex_key7\n    hex_key7=$7\n\
    \    local hex_key8\n    hex_key8=$8\n    local hex_key9\n    hex_key9=$9\n  \
    \  local hex_key10\n    hex_key10=$10\n    local hex_key11\n    hex_key11=$11\n\
    \    local hex_key12\n    hex_key12=$12\n    local hex_key13\n    hex_key13=$13\n\
    \    local hex_key14\n    hex_key14=$14\n    local hex_key15\n    hex_key15=$15\n\
    \    local hex_key16\n    hex_key16=$16\n    local hex_key17\n    hex_key17=$17\n\
    \    local hex_key18\n    hex_key18=$18\n    local hex_key19\n    hex_key19=$19\n\
    \    local hex_key20\n    hex_key20=$20\n    local hex_key21\n    hex_key21=$21\n\
    \    local hex_key22\n    hex_key22=$22\n    local hex_key23\n    hex_key23=$23\n\
    \    local hex_key24\n    hex_key24=$24\n    local hex_key25\n    hex_key25=$25\n\
    \    local hex_key26\n    hex_key26=$26\n    local hex_key27\n    hex_key27=$27\n\
    \    local hex_key28\n    hex_key28=$28\n    local hex_key29\n    hex_key29=$29\n\
    \    local hex_key30\n    hex_key30=$30\n    local hex_key31\n    hex_key31=$31\n\
    \    local hex_key32\n    hex_key32=$32\n    local hex_key33\n    hex_key33=$33\n\
    \    local hex_key34\n    hex_key34=$34\n    local hex_key35\n    hex_key35=$35\n\
    \    local hex_key36\n    hex_key36=$36\n    local hex_key37\n    hex_key37=$37\n\
    \    local hex_key38\n    hex_key38=$38\n    local hex_key39\n    hex_key39=$39\n\
    \    local hex_key40\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoi5ewxeu.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54t3tmj4.sh: line 59: unexpected EOF while looking for matching
    `''''

    /tmp/tmp54t3tmj4.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key2\n  hex_key2=$hex_key\n  local hex_key3\n  hex_key3=$hex_key2\n\
    \  local hex_key4\n  hex_key4=$hex_key3\n  local hex_key5\n  hex_key5=$hex_key4\n\
    \  local hex_key6\n  hex_key6=$hex_key5\n  local hex_key7\n  hex_key7=$hex_key6\n\
    \  local hex_key8\n  hex_key8=$hex_key7\n  local hex_key9\n  hex_key9=$hex_key8\n\
    \  local hex_key10\n  hex_key10=$hex_key9\n  local hex_key11\n  hex_key11=$hex_key10\n\
    \  local hex_key12\n  hex_key12=$hex_key11\n  local hex_key13\n  hex_key13=$hex_key12\n\
    \  local hex_key14\n  hex_key14=$hex_key13\n  local hex_key15\n  hex_key15=$hex_key14\n\
    \  local hex_key16\n  hex_key16=$hex_key15\n  local hex_key17\n  hex_key17=$hex_key16\n\
    \  local hex_key18\n  hex_key18=$hex_key17\n  local hex_key19\n  hex_key19=$hex_key18\n\
    \  local hex_key20\n  hex_key20=$hex_key19\n  local hex_key21\n  hex_key21=$hex_key20\n\
    \  local hex_key22\n  hex_key22=$hex_key21\n  local hex_key23\n  hex_key23=$hex_key22\n\
    \  local hex_key24\n  hex_key24=$hex_key23\n  local hex_key25\n  hex_key25=$hex_key24\n\
    \  local hex_key26\n  hex_key26=$hex_key25\n  local hex_key27\n  hex_key27=$hex_key26\n\
    \  local hex_key28\n  hex_key28=$hex_key27\n  local hex_key29\n  hex_key29=$hex_key28\n\
    \  local hex_key30\n  hex_key30=$hex_key29\n  local hex_key31\n  hex_key31=$hex_key30\n\
    \  local hex_key32\n  hex_key32=$hex_key31\n  local hex_key33\n  hex_key33=$hex_key32\n\
    \  local hex_key34\n  hex_key34=$hex_key33\n  local hex_key35\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n    local\
    \ hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[0-9A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f]/}\n    local hex_key=${hex_key//[A-\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3svzx_x2.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr -d '\\n')\n\
    \  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local\
    \ hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n\
    \  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"\
    $hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed\
    \ 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\\
    (.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\\
    )/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\\
    1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n\
    \  local hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local\
    \ hex_key\n  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n\
    \  hex_key=$(echo \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"\
    $hex_key\" | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\1/g')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | \n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp62bjvtj1.sh: line 57: unexpected EOF while looking for matching
    `)''

    /tmp/tmp62bjvtj1.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr -d '[:space:]')\n\
    \  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" |\
    \ tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" |\
    \ tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" |\
    \ tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" |\
    \ tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" |\
    \ tr '[:upper:]' '[:lower:]')\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp9jxivz_.sh: line 43: unexpected EOF while looking for matching
    `''''

    /tmp/tmpp9jxivz_.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n  local hex_key3\n  hex_key3=$(echo $hex_key | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdm9o0quh.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpdm9o0quh.sh: line 39: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n    local\
    \ hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo \"$hex_key\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo \"$hex_key2\"\
    \ | tr '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo \"$hex_key3\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo \"$hex_key4\"\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key6\n    hex_key6=$(echo \"$hex_key5\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key7\n    hex_key7=$(echo \"$hex_key6\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key8\n    hex_key8=$(echo \"$hex_key7\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key9\n    hex_key9=$(echo \"$hex_key8\"\
    \ | tr '[a-z]' '[A-Z]')\n    local hex_key10\n    hex_key10=$(echo \"$hex_key9\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo \"$hex_key10\"\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo \"$hex_key11\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key13\n    hex_key13=$(echo \"$hex_key12\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key14\n    hex_key14=$(echo \"$hex_key13\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key15\n    hex_key15=$(echo \"$hex_key14\"\
    \ | tr '[a-z]' '[A-Z]')\n    local hex_key16\n    hex_key16=$(echo \"$hex_key15\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key17\n    hex_key17=$(echo \"$hex_key16\"\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key18\n    hex_key18=$(echo \"$hex_key17\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key19\n    hex_key19=$(echo \"$hex_key18\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key20\n    hex_key20=$(echo \"$hex_key19\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key21\n    hex_key21=$(echo \"$hex_key20\"\
    \ | tr '[a-z]' '[A-Z]')\n    local \n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2=$2\n  local hex_key3=$3\n  local hex_key4=$4\n  local hex_key5=$5\n\
    \  local hex_key6=$6\n  local hex_key7=$7\n  local hex_key8=$8\n  local hex_key9=$9\n\
    \  local hex_key10=$10\n  local hex_key11=$11\n  local hex_key12=$12\n  local\
    \ hex_key13=$13\n  local hex_key14=$14\n  local hex_key15=$15\n  local hex_key16=$16\n\
    \  local hex_key17=$17\n  local hex_key18=$18\n  local hex_key19=$19\n  local\
    \ hex_key20=$20\n  local hex_key21=$21\n  local hex_key22=$22\n  local hex_key23=$23\n\
    \  local hex_key24=$24\n  local hex_key25=$25\n  local hex_key26=$26\n  local\
    \ hex_key27=$27\n  local hex_key28=$28\n  local hex_key29=$29\n  local hex_key30=$30\n\
    \  local hex_key31=$31\n  local hex_key32=$32\n  local hex_key33=$33\n  local\
    \ hex_key34=$34\n  local hex_key35=$35\n  local hex_key36=$36\n  local hex_key37=$37\n\
    \  local hex_key38=$38\n  local hex_key39=$39\n  local hex_key40=$40\n  local\
    \ hex_key41=$41\n  local hex_key42=$42\n  local hex_key43=$43\n  local hex_key44=$44\n\
    \  local hex_key45=$45\n  local hex_key46=$46\n  local hex_key47=$47\n  local\
    \ hex_key48=$48\n  local hex_key49=$49\n  local hex_key50=$50\n  local hex_key51=$51\n\
    \  local hex_key52=$52\n  local hex_key53=$53\n  local hex_key54=$54\n  local\
    \ hex_key55=$55\n  local hex_key56=$56\n  local hex_key57=$57\n  local hex_key58=$58\n\
    \  local hex_key59=$59\n  local hex_key60=$60\n  local hex_key61=$61\n  local\
    \ hex_key62=$62\n  local hex_key63=$63\n  local hex_key64=$64\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key |\
    \ tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr '[a-z]'\
    \ '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local\
    \ hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key7\n\
    \    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n    hex_key8=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key | tr\
    \ '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n  \
    \  local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local\
    \ hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key17\n\
    \    hex_key17=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key18\n  \
    \  hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n    hex_key19=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key |\
    \ tr '[A-Z]' '[0-9]')\n    local hex_key22\n    hex_key22=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr '[A-Z\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvfwd91r_.sh: line 61: unexpected EOF while looking for matching
    `''''

    /tmp/tmpvfwd91r_.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n    local\
    \ hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local prime_count=0\n    local prime_digits=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local prime_digits_count=$(echo $prime_digits\
    \ | wc -w)\n    local prime_digits_count_2=$(echo $prime_digits | sed 's/\\([0-9A-F]*\\\
    )//g' | wc -w)\n    local prime_digits_count_3=$(echo $prime_digits | sed 's/\\\
    ([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | wc -w)\n    local prime_digits_count_4=$(echo\
    \ $prime_digits | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed\
    \ 's/\\([0-9A-F]*\\)//g' | wc -w)\n    local prime_digits_count_5=$(echo $prime_digits\
    \ | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | wc -w)\n    local prime_digits_count_6=$(echo\
    \ $prime_digits | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed\
    \ 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | wc -w)\n    local prime_digits_count_7=$(echo\
    \ $prime_digits | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed\
    \ 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | wc -w)\n    local prime_digits_count_8=$(echo $prime_digits | sed 's/\\\
    ([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' |\
    \ sed 's/\\([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuewtemgm.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpuewtemgm.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key3\n    hex_key3=$(echo \"$hex_key2\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key4\n    hex_key4=$(echo \"$hex_key3\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key5\n    hex_key5=$(echo \"$hex_key4\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key6\n    hex_key6=$(echo \"$hex_key5\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key7\n    hex_key7=$(echo \"$hex_key6\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key8\n    hex_key8=$(echo \"$hex_key7\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key9\n    hex_key9=$(echo \"$hex_key8\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key10\n    hex_key10=$(echo \"\
    $hex_key9\" | tr '[:upper:]' '[:lower:]')\n    local hex_key11\n    hex_key11=$(echo\
    \ \"$hex_key10\" | tr '[:upper:]' '[:lower:]')\n    local hex_key12\n    hex_key12=$(echo\
    \ \"$hex_key11\" | tr '[:upper:]' '[:lower:]')\n    local hex_key13\n    hex_key13=$(echo\
    \ \"$hex_key12\" | tr '[:upper:]' '[:lower:]')\n    local hex_key14\n    hex_key14=$(echo\
    \ \"$hex_key13\" | tr '[:upper:]' '[:lower:]')\n    local hex_key15\n    hex_key15=$(echo\
    \ \"$hex_key14\" | tr '[:upper:]' '[:lower:]')\n    local hex_key16\n    hex_key16=$(echo\
    \ \"$hex_key15\" | tr '[:upper:]' '[:lower:]')\n    local hex_key17\n    hex_key17=$(echo\
    \ \"$hex_key16\" | tr '[:upper:]' '[:lower:]')\n    local hex_key18\n    hex_key18=$(echo\
    \ \"$hex_key17\" | tr '[:upper:]' '[:lower:]')\n    local hex_key19\n    hex_key19=$(echo\
    \ \"$hex_key18\" | tr '[:upper:]' '[:lower:]\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp7t23ph_.sh: line 53: unexpected EOF while looking for matching
    `''''

    /tmp/tmpp7t23ph_.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key2\n  hex_key2=$hex_key\n  local hex_key3\n  hex_key3=$hex_key2\n\
    \  local hex_key4\n  hex_key4=$hex_key3\n  local hex_key5\n  hex_key5=$hex_key4\n\
    \  local hex_key6\n  hex_key6=$hex_key5\n  local hex_key7\n  hex_key7=$hex_key6\n\
    \  local hex_key8\n  hex_key8=$hex_key7\n  local hex_key9\n  hex_key9=$hex_key8\n\
    \  local hex_key10\n  hex_key10=$hex_key9\n  local hex_key11\n  hex_key11=$hex_key10\n\
    \  local hex_key12\n  hex_key12=$hex_key11\n  local hex_key13\n  hex_key13=$hex_key12\n\
    \  local hex_key14\n  hex_key14=$hex_key13\n  local hex_key15\n  hex_key15=$hex_key14\n\
    \  local hex_key16\n  hex_key16=$hex_key15\n  local hex_key17\n  hex_key17=$hex_key16\n\
    \  local hex_key18\n  hex_key18=$hex_key17\n  local hex_key19\n  hex_key19=$hex_key18\n\
    \  local hex_key20\n  hex_key20=$hex_key19\n  local hex_key21\n  hex_key21=$hex_key20\n\
    \  local hex_key22\n  hex_key22=$hex_key21\n  local hex_key23\n  hex_key23=$hex_key22\n\
    \  local hex_key24\n  hex_key24=$hex_key23\n  local hex_key25\n  hex_key25=$hex_key24\n\
    \  local hex_key26\n  hex_key26=$hex_key25\n  local hex_key27\n  hex_key27=$hex_key26\n\
    \  local hex_key28\n  hex_key28=$hex_key27\n  local hex_key29\n  hex_key29=$hex_key28\n\
    \  local hex_key30\n  hex_key30=$hex_key29\n  local hex_key31\n  hex_key31=$hex_key30\n\
    \  local hex_key32\n  hex_key32=$hex_key31\n  local hex_key33\n  hex_key33=$hex_key32\n\
    \  local hex_key34\n  hex_key34=$hex_key33\n  local hex_key35\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local\
    \ hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n\
    \  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo\
    \ $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local\
    \ hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n\
    \  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo\
    \ $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local\
    \ hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg65k42tx.sh: line 59: unexpected EOF while looking for matching
    `''''

    /tmp/tmpg65k42tx.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key20\n    hex_key20=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key21\n    \n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037503
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local prime_count=0\n    local prime_digits=$(echo $hex_key\
    \ | sed -e 's/\\([0-9A-F]*\\)/\\1/g')\n    local prime_digits_count=$(echo $prime_digits\
    \ | wc -w)\n    local prime_digits_array=($(echo $prime_digits | sed -e 's/\\\
    ([0-9A-F]*\\)/\\1/g'))\n    local prime_digits_array_count=${#prime_digits_array[@]}\n\
    \    local prime_digits_array_index=0\n    local prime_digits_array_element\n\
    \    local prime_digits_array_element_count\n    local prime_digits_array_element_index\n\
    \    local prime_digits_array_element_value\n    local prime_digits_array_element_value_count\n\
    \    local prime_digits_array_element_value_length\n    local prime_digits_array_element_value_length_index\n\
    \    local prime_digits_array_element_value_length_value\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    local prime_digits_array_element_value_length_value_index\n\
    \    local prime_digits_array_element_value_length_value_index\n    \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key20\n    hex_key20=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key21\n    \n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037503
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n    local hex_key=${hex_key,,}\n\
    \    local hex_key=${\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoi5ewxeu.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key |\
    \ tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr '[a-z]'\
    \ '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[a-z]')\n    local hex_key7\n\
    \    hex_key7=$(echo $hex_key | tr '[a-z]' '[0-9]')\n    local hex_key8\n    hex_key8=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key |\
    \ tr '[0-9]' '[a-z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key | tr\
    \ '[a-z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]' '[a-z]')\n\
    \    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[a-z]' '[0-9]')\n  \
    \  local hex_key15\n    hex_key15=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key16\n    hex_key16=$(echo $hex_key | tr '[A-Z]' '[a-z]')\n    local hex_key17\n\
    \    hex_key17=$(echo $hex_key | tr '[a-z]' '[0-9]')\n    local hex_key18\n  \
    \  hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n    hex_key19=$(echo\
    \ $hex_key | tr '[A-Z]' '[a-z]')\n    local hex_key20\n    hex_key20=$(echo $hex_key\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key21\n    hex_key21=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key22\n    hex_key22=$(echo $hex_key | tr\
    \ '[A-Z]' '[a-z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr '[a-z\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvkxaz2tm.sh: line 61: unexpected EOF while looking for matching
    `''''

    /tmp/tmpvkxaz2tm.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\\
    )//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\\
    )//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\\
    )//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8b8ay9jb.sh: line 40: unexpected EOF while looking for matching
    `''''

    /tmp/tmp8b8ay9jb.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr -d '\\n')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[:upper:]' '[:lower:]')\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037503
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$hex_key\n    local\
    \ hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n   \
    \ local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$hex_key\n    local hex_key\n    hex_key=$hex_key\n\
    \    local hex_key\n    hex_key=$\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local prime_count=0\n    local prime_digits=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\1/g')\n    local prime_digits_len=$(echo $prime_digits\
    \ | wc -w)\n    local prime_digits_str=$(echo $prime_digits | sed 's/ //g')\n\
    \    local prime_digits_str_len=$(echo $prime_digits_str | wc -w)\n    local prime_digits_str_arr=($prime_digits_str)\n\
    \    local prime_digits_str_arr_len=${#prime_digits_str_arr[@]}\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len-1)))\n    local prime_digits_str_arr_len_min=$(echo\
    \ $((prime_digits_str_arr_len-2)))\n    local prime_digits_str_arr_len_min=$(echo\
    \ $((prime_digits_str_arr_len_min-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_max-1)))\n    local prime_digits_str_arr_len_max=$(echo\
    \ $((prime_digits_str_arr_len_\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcmm7y0kj.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmpcmm7y0kj.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo \"$hex_key\" | tr '[:upper:]'\
    \ '[:lower:]')\n  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54t3tmj4.sh: line 59: unexpected EOF while looking for matching
    `''''

    /tmp/tmp54t3tmj4.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local prime_count=0\n    local prime_digits=0\n    local prime_digits_2=0\n\
    \    local prime_digits_3=0\n    local prime_digits_5=0\n    local prime_digits_7=0\n\
    \    local prime_digits_11=0\n    local prime_digits_13=0\n    local prime_digits_17=0\n\
    \    local prime_digits_19=0\n    local prime_digits_23=0\n    local prime_digits_29=0\n\
    \    local prime_digits_31=0\n    local prime_digits_37=0\n    local prime_digits_41=0\n\
    \    local prime_digits_43=0\n    local prime_digits_47=0\n    local prime_digits_53=0\n\
    \    local prime_digits_59=0\n    local prime_digits_61=0\n    local prime_digits_67=0\n\
    \    local prime_digits_71=0\n    local prime_digits_73=0\n    local prime_digits_79=0\n\
    \    local prime_digits_83=0\n    local prime_digits_89=0\n    local prime_digits_97=0\n\
    \    local prime_digits_101=0\n    local prime_digits_103=0\n    local prime_digits_107=0\n\
    \    local prime_digits_109=0\n    local prime_digits_113=0\n    local prime_digits_127=0\n\
    \    local prime_digits_131=0\n    local prime_digits_137=0\n    local prime_digits_139=0\n\
    \    local prime_digits_149=0\n    local prime_digits_151=0\n    local prime_digits_157=0\n\
    \    local prime_digits_163=0\n    local prime_digits_167=0\n    local prime_digits_173=0\n\
    \    local prime_digits_179=0\n    local prime_digits_181=0\n    local prime_digits_191=0\n\
    \    local prime_digits_193=0\n    local prime_digits_197=0\n    local prime_digits_199=0\n\
    \    local prime_digits_211=0\n    local prime_digits_223=0\n    local prime_digits_227=0\n\
    \    local prime_digits_229=0\n    local prime_digits_233=0\n    local prime_digits_239=0\n\
    \    local prime_digits_241=0\n    local prime_digit\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key | sed 's/[^0-9A-F]//g')\n\
    \  local hex_key3\n  hex_key3=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local\
    \ hex_key4\n  hex_key4=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key5\n\
    \  hex_key5=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key6\n  hex_key6=$(echo\
    \ $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key7\n  hex_key7=$(echo $hex_key\
    \ | sed 's/^[0-9A-F]//g')\n  local hex_key8\n  hex_key8=$(echo $hex_key | sed\
    \ 's/^[0-9A-F]//g')\n  local hex_key9\n  hex_key9=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n\
    \  local hex_key10\n  hex_key10=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local\
    \ hex_key11\n  hex_key11=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key12\n\
    \  hex_key12=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key13\n  hex_key13=$(echo\
    \ $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key14\n  hex_key14=$(echo $hex_key\
    \ | sed 's/^[0-9A-F]//g')\n  local hex_key15\n  hex_key15=$(echo $hex_key | sed\
    \ 's/^[0-9A-F]//g')\n  local hex_key16\n  hex_key16=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n\
    \  local hex_key17\n  hex_key17=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local\
    \ hex_key18\n  hex_key18=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key19\n\
    \  hex_key19=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key20\n  hex_key20=$(echo\
    \ $hex_key | sed 's/^[0-9A-F]//g')\n  local hex_key21\n  \n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037503
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54t3tmj4.sh: line 59: unexpected EOF while looking for matching
    `''''

    /tmp/tmp54t3tmj4.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n    local\
    \ hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2=$2\n    local hex_key3=$3\n    local hex_key4=$4\n\
    \    local hex_key5=$5\n    local hex_key6=$6\n    local hex_key7=$7\n    local\
    \ hex_key8=$8\n    local hex_key9=$9\n    local hex_key10=$10\n    local hex_key11=$11\n\
    \    local hex_key12=$12\n    local hex_key13=$13\n    local hex_key14=$14\n \
    \   local hex_key15=$15\n    local hex_key16=$16\n    local hex_key17=$17\n  \
    \  local hex_key18=$18\n    local hex_key19=$19\n    local hex_key20=$20\n   \
    \ local hex_key21=$21\n    local hex_key22=$22\n    local hex_key23=$23\n    local\
    \ hex_key24=$24\n    local hex_key25=$25\n    local hex_key26=$26\n    local hex_key27=$27\n\
    \    local hex_key28=$28\n    local hex_key29=$29\n    local hex_key30=$30\n \
    \   local hex_key31=$31\n    local hex_key32=$32\n    local hex_key33=$33\n  \
    \  local hex_key34=$34\n    local hex_key35=$35\n    local hex_key36=$36\n   \
    \ local hex_key37=$37\n    local hex_key38=$38\n    local hex_key39=$39\n    local\
    \ hex_key40=$40\n    local hex_key41=$41\n    local hex_key42=$42\n    local hex_key43=$43\n\
    \    local hex_key44=$44\n    local hex_key45=$45\n    local hex_key46=$46\n \
    \   local hex_key47=$47\n    local hex_key48=$48\n    local hex_key49=$49\n  \
    \  local hex_key50=$50\n    local hex_key51=$51\n    local hex_key52=$52\n   \
    \ local hex_key53=$53\n    local hex_key54=$54\n    local hex_key55=$55\n    local\
    \ hex_key56=$56\n    local hex_key57=$57\n    local hex_key58=$58\n    local hex_key59=$59\n\
    \    local hex_key60=$60\n    local hex_key61=$61\n    local hex_key62=$62\n \
    \   local hex_key63=$63\n    local hex_key64=$64\n    \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n    local\
    \ hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n  local hex_key3\n  hex_key3=$(echo $hex_key | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdm9o0quh.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpdm9o0quh.sh: line 39: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n\
    \  local hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local\
    \ hex_key\n  hex_key=$hex_key\n  local hex_key\n  hex_key=$hex_key\n  local hex_key\n\
    \  hex_key=$\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local hex_key2\n  local hex_key3\n  local hex_key4\n  local hex_key5\n  local\
    \ hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n  local hex_key10\n\
    \  local hex_key11\n  local hex_key12\n  local hex_key13\n  local hex_key14\n\
    \  local hex_key15\n  local hex_key16\n  local hex_key17\n  local hex_key18\n\
    \  local hex_key19\n  local hex_key20\n  local hex_key21\n  local hex_key22\n\
    \  local hex_key23\n  local hex_key24\n  local hex_key25\n  local hex_key26\n\
    \  local hex_key27\n  local hex_key28\n  local hex_key29\n  local hex_key30\n\
    \  local hex_key31\n  local hex_key32\n  local hex_key33\n  local hex_key34\n\
    \  local hex_key35\n  local hex_key36\n  local hex_key37\n  local hex_key38\n\
    \  local hex_key39\n  local hex_key40\n  local hex_key41\n  local hex_key42\n\
    \  local hex_key43\n  local hex_key44\n  local hex_key45\n  local hex_key46\n\
    \  local hex_key47\n  local hex_key48\n  local hex_key49\n  local hex_key50\n\
    \  local hex_key51\n  local hex_key52\n  local hex_key53\n  local hex_key54\n\
    \  local hex_key55\n  local hex_key56\n  local hex_key57\n  local hex_key58\n\
    \  local hex_key59\n  local hex_key60\n  local hex_key61\n  local hex_key62\n\
    \  local hex_key63\n  local hex_key64\n  local hex_key65\n  local hex_key66\n\
    \  local hex_key67\n  local hex_key68\n  local hex_key69\n  local hex_key70\n\
    \  local hex_key71\n  local hex_key72\n  local hex_key73\n  local hex_key74\n\
    \  local hex_key75\n  local hex_key76\n  local hex_key77\n  local hex_key78\n\
    \  local hex_key79\n  local hex_key80\n  local hex_key81\n  local hex_key82\n\
    \  local hex_key83\n  local hex_key84\n  local hex_key85\n  \n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key\n\
    \  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key3\n  hex_key3=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key4\n  hex_key4=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key5\n  hex_key5=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key6\n  hex_key6=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key7\n  hex_key7=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key8\n  hex_key8=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key9\n  hex_key9=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key10\n  hex_key10=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key11\n  hex_key11=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key12\n  hex_key12=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key13\n  hex_key13=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key14\n  hex_key14=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key15\n  hex_key15=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key16\n  hex_key16=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key17\n  hex_key17=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key18\n  hex_key18=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key19\n  hex_key19=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key20\n  hex_key20=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key21\n  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037503
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660037507
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[0-9A-Fa-f]/}\n    local hex_key=${hex_key//[A-Fa-f]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa-f0-9]/}\n\
    \    local hex_key=${hex_key//[A-Fa-f0-9]/}\n    local hex_key=${hex_key//[A-Fa\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_o4ig9r3.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qawt7sk.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037502
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n   \
    \ local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037502
