language: sh
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/ \\1/g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} == \"0\" ]]; then\n            output+=(\"${digit}\")\n    \
    \    fi\n    done\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' '\
    \ read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra ADDR <<< \n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6hglcgym.sh: line 41: syntax error near unexpected token `newline''

    /tmp/tmp6hglcgym.sh: line 41: `    IFS='' '' read -ra ADDR <<< ''

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a y\n    local -a z\n    local\
    \ -a result\n    local -a count\n    local -a digit\n    local -a counts\n   \
    \ local -a count\n    local -a i\n    local -a j\n    local -a k\n    local -a\
    \ l\n    local -a m\n    local -a n\n    local -a p\n    local -a q\n    local\
    \ -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local\
    \ -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a result\n\
    \    local -a count\n    local -a digit\n    local -a counts\n    local -a count\n\
    \    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a\
    \ m\n    local -a n\n    local -a p\n    local -a q\n    local -a r\n    local\
    \ -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local\
    \ -a x\n    local -a y\n    local -a z\n    local -a result\n    local -a count\n\
    \    local -a digit\n    local -a counts\n    local -a count\n    local -a i\n\
    \    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a\
    \ n\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local\
    \ -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local\
    \ -a y\n    local -a z\n    local -a result\n    local -a count\n    local -a\
    \ digit\n    local -a counts\n    local -a count\n    local -a i\n    local -a\
    \ j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local\
    \ -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for i in $(seq 0 $((${#x}-1)))\n    do\n        local digit=${x:$i:1}\n \
    \       if [[ $digit =~ ^[0-7]+$ ]]\n        then\n            output+=(\"$digit\"\
    )\n        fi\n    done\n    echo \"${output[@]}\" | sort -n -k 1 -r \n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for i in $x; do\n        if (( i % 2 )); then\n            output+=(\"$i\"\
    )\n        fi\n    done\n    sort -u <<< \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local count\n    local digit\n    local tmp\n \
    \   \n    output=()\n    \n    for (( i=0; i<${#x}; i++ )); do\n        digit=${x:$i:1}\n\
    \        if [[ ${digit:0:1} == \"0\" ]]; then\n            count=$((${#output[@]}\
    \ + 1))\n            tmp=${digit:1}\n            for (( j=0; j<${#tmp}; j++ ));\
    \ do\n                if [[ ${tmp:$j:1} == \"0\" ]]; then\n                  \
    \  count=$((${count} + 1))\n                fi\n            done\n           \
    \ if [[ ${count} -eq 0 ]]; then\n                output+=(\"${digit}\")\n    \
    \        fi\n        fi\n    done\n    \n    IFS=$'\\n'\n    sort -u <<< \"${output[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    x=$1\n    local output\n    output=()\n\
    \    local i\n    for i in $(seq 0 $((${#x}-1)))\n    do\n        if [[ ${x[$i]}\
    \ -eq 0 ]]\n        then\n            x=${x%?}\n            output+=(\"$x\")\n\
    \        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfyub2nrr.sh: line 16: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} == \"0\" ]]; then\n            local j=0\n            while\
    \ [[ ${digit:$j:1} == \"0\" ]]; do\n                j=$(( j+1 ))\n           \
    \ done\n            (( j-- ))\n            (( output[${#output[@]}]=$i ))\n  \
    \      fi\n    done\n    local output\n    for (( i=0; i<${#output[@]}; i++ ));\
    \ do\n        echo ${output[$i]}\n    done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for (( i=0; i<${#output};\
    \ i++ )); do\n        if [[ ${output[$i]} -eq 0 ]]; then\n            echo \"\
    ${output[$i]}\"\n        fi\n    done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1rlggxd_.sh: line 14: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"$digit\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local digit\n    local count\n    local tmp\n    \n    output=()\n\
    \    count=0\n    for i in $x; do\n        digit=$(( 10#$i ))\n        if (( count%2\
    \ )); then\n            tmp=${digit}\n        else\n            tmp=${digit}2\n\
    \        fi\n        if [[ ${output[$j]} != $tmp ]]; then\n            output[$j]=$tmp\n\
    \            (( j++ ))\n        fi\n        (( count++ ))\n    done\n    \n  \
    \  IFS=' '\n    for j in ${!output[@]}; do\n        echo \"${output[j]}\"\n  \
    \  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local digit\n    local count\n    local digitCount\n\
    \    local tmp\n    \n    output=()\n    \n    for i in \"${x}\"; do\n       \
    \ digitCount=0\n        for j in \"${!output[@]}\"; do\n            if [ \"${output[j]}\"\
    \ == \"${i}\" ]; then\n                digitCount=$((digitCount+1))\n        \
    \    fi\n        done\n        if [ \"${digitCount}\" -eq \"0\" ]; then\n    \
    \        output+=(\"${i}\")\n        fi\n    done\n    \n    for i in \"${!output[@]}\"\
    ; do\n        tmp=()\n        for j in \"${!output[@]}\"; do\n            if [\
    \ \"${output[j]}\" == \"${i}\" ]; then\n                tmp+=(\"${output[j]}\"\
    )\n            fi\n        done\n        \n        count=${#tmp[@]}\n        \n\
    \        for j in \"${!tmp[@]}\"; do\n            if [ \"${tmp[j]}\" == \"${i}\"\
    \ ]; then\n                count=$((count-1))\n            fi\n        done\n\
    \        \n        if [ \"${count}\" -eq \"0\" ]; then\n            output+=(\"\
    ${i}\")\n        fi\n    done\n    \n    IFS=' '\n    \n    for k in \"${!output[@]}\"\
    ; do\n        IFS=','\n        echo \"${output[k]}\"\n    done\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"$digit\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local j\n       \
    \ for (( j=0; j<${#x}; j++ )); do\n            [[ \"${x[j]}\" == [0-9] ]] && continue\n\
    \            [[ \"${x[j]}\" == [!0-9] ]] && output+=(\"${x[j]}\") && break\n \
    \       done\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d | sort -n)\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a result\n\
    \    local -i i\n    local len\n    local digit\n    local tmp\n    local -n arr=\n\
    \    local -n result=\n\n    arr=( $1 )\n    len=${#arr[@]}\n    result=()\n \
    \   for (( i=0; i<len; i++ )); do\n        tmp=${arr[i]}\n        digit=${tmp:0:1}\n\
    \        if [[ $tmp != $digit ]]; then\n            result+=( $tmp )\n       \
    \ fi\n    done\n    IFS=$'\\n'\n    sort -u <<< \"${result[*]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_i7z_jye.sh: line 16: local: arr: reference variable cannot be
    an array

    /tmp/tmp_i7z_jye.sh: line 17: local: result: reference variable cannot be an array

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local digit\n    local count\n    local digitCount\n\
    \    local lastDigit\n    local lastDigitCount\n    local lastDigitIndex\n   \
    \ local lastDigitCountIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigitIndex\n    local lastDigitCountIndex\n\
    \    local lastDigitIndex\n    local lastDigitCountIndex\n    local lastDigitIndex\n\
    \    local lastDigitCountIndex\n    local lastDigit\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ $digit == [0-9] ]]; then\n            local count=0\n            for (( j=0;\
    \ j<${#output[@]}; j++ )); do\n                if [[ ${output[$j]} -eq $digit\
    \ ]]; then\n                    (( count++ ))\n                fi\n          \
    \  done\n            if [[ $count -eq 0 ]]; then\n                output+=(\"\
    $digit\")\n            fi\n        fi\n    done\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for (( i=1; i<${#x};\
    \ i++ )); do\n        if [[ ${x[i]} -eq ${output} ]]; then\n            output=$output$x[i]\n\
    \        fi\n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmpuhqudpi3.sh: line 14: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local count\n    local digit\n    local tmp\n \
    \   \n    output=()\n    count=0\n    for ((i=0; i<${#x}; i++)); do\n        tmp=${x:$i:1}\n\
    \        if [[ ${tmp: -1} =~ [0-9] ]]; then\n            ((count++))\n       \
    \ fi\n    done\n    for ((j=0; j<${#x}; j++)); do\n        tmp=${x:$j:1}\n   \
    \     if [[ ${tmp: -1} =~ [0-9] ]]; then\n            ((count++))\n        fi\n\
    \    done\n    for ((k=0; k<${#x}; k++)); do\n        tmp=${x:$k:1}\n        if\
    \ [[ ${tmp: -1} =~ [0-9] ]]; then\n            ((count++))\n        fi\n    done\n\
    \    for ((l=0; l<${#x}; l++)); do\n        tmp=${x:$l:1}\n        if [[ ${tmp:\
    \ -1} =~ [0-9] ]]; then\n            ((count++))\n        fi\n    done\n    for\
    \ ((m=0; m<${#x}; m++)); do\n        tmp=${x:$m:1}\n        if [[ ${tmp: -1} =~\
    \ [0-9] ]]; then\n            ((count++))\n        fi\n    done\n    for ((n=0;\
    \ n<${#x}; n++)); do\n        tmp=${x:$n:1}\n        if [[ ${tmp: -1} =~ [0-9]\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    for ((o=0; o<${#x};\
    \ o++)); do\n        tmp=${x:$o:1}\n        if [[ ${tmp: -1} =~ [0-9] ]]; then\n\
    \            ((count++))\n        fi\n    done\n    for ((p=0; p<${#x}; p++));\
    \ do\n        tmp=${x:$p:1}\n        if [[ ${tmp: -1} =~ [0-9] ]]; then\n    \
    \        ((count++))\n        fi\n    done\n    for ((q=0; q<${#x}; q++)); do\n\
    \        tmp=${x:$q:1}\n        if [[ ${tmp: -1} =~ [0-9] ]]; then\n         \
    \   ((count++))\n        fi\n    done\n    for ((r=0; r<${#x}; r++)); do\n   \
    \     tmp=${x:$r:1}\n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6dc5mwyx.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmp6dc5mwyx.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"$digit\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${x:$i:1}\")\n        fi\n\
    \    done\n    IFS=' ' read -ra arr <<< \"${output[*]}\"\n    IFS=' ' read -ra\
    \ arr2 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr3 <<< \"${output[*]}\"\n\
    \    IFS=' ' read -ra arr4 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr5 <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra arr6 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr7 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr8 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr9 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr10 <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra arr11 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr12 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr13 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr14 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr15\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr16 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr17 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr18 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr19 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr20\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr21 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr22 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr23 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr24 \n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=17 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660037608
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u | sed 's/ //g')\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} == \"0\" ]]; then\n            output+=(\"${digit}\")\n    \
    \    fi\n    done\n    IFS=' ' read -ra ADDR <<< \"${output[*]}\"\n    IFS=' '\
    \ read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"\
    ${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra NEW_ADDR <<< \"${output[*]}\"\n    IFS=' ' read -ra NEW_ADDR <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra NEW_\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660037608
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    local i\n    for i in $x; do\n        if [[ $(( i % 2 )) -eq 0 ]]; then\n\
    \            output+=(\"$i\")\n        fi\n    done\n    sort -u <<< \"${output[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local y \n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n\n}\n\ncandidate() {\n  \
    \  unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ $digit =~ ^[0-9]+$ ]]; then\n            if (( ${#output[@]} < ${#digit}\
    \ )); then\n                output+=(\"$digit\")\n            fi\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a result\n\
    \    local -i i\n    local j\n    local k\n    local len\n    local max\n    local\
    \ tmp\n    local -n arr=$1\n    local -n result=$2\n    local -i i=0\n    local\
    \ j=0\n    local k=0\n    local len=${#arr[@]}\n    local max=0\n    local tmp\n\
    \    \n    while [ $i -lt $len ]; do\n        tmp=${arr[$i]}\n        (( max ==\
    \ 0 )) && max=$tmp\n        (( tmp % 2 != 0 )) && result[$j++]=$tmp\n        ((\
    \ tmp > max )) && max=$tmp\n        (( i++ ))\n    done\n    \n    for (( k=0;\
    \ k<$j; k++ )); do\n        tmp=${result[$k]}\n        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n\
    \    done\n    \n    for (( k=0; k<$j; k++ )); do\n        tmp=${result[$k]}\n\
    \        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n    done\n    \n    for (( k=0;\
    \ k<$j; k++ )); do\n        tmp=${result[$k]}\n        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n\
    \    done\n    \n    for (( k=0; k<$j; k++ )); do\n        tmp=${result[$k]}\n\
    \        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n    done\n    \n    for (( k=0;\
    \ k<$j; k++ )); do\n        tmp=${result[$k]}\n        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n\
    \    done\n    \n    for (( k=0; k<$j; k++ )); do\n        tmp=${result[$k]}\n\
    \        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n    done\n    \n    for (( k=0;\
    \ k<$j; k++ )); do\n        tmp=${result[$k]}\n        (( tmp % 2 != 0 )) && result[$k++]=$tmp\n\
    \    done\n    \n    for (( k=0; k<$j; k++ )); do\n        tmp=${result\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ffcmc8g.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for i in $x; do\n        local j\n        for j in $(seq 0 $((${#i}-1)));\
    \ do\n            if [[ ${i:$j} =~ ^[0-9]+$ ]]; then\n                if ((${#output[@]}\
    \ < ${#i})); then\n                    output+=(\"${i:$j}\")\n               \
    \ fi\n            fi\n        done\n    done\n    echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local digit\n    local count\n    local tmp\n    local tmp2\n\
    \    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n\
    \    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n\
    \    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local\
    \ tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n\
    \    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local\
    \ tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n\
    \    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local\
    \ tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n\
    \    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local\
    \ tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n\
    \    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local\
    \ tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n\
    \    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local\
    \ tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n\
    \    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local\
    \ tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n\
    \    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local\
    \ tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n\
    \    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local\
    \ tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n\
    \    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local\
    \ \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for (( i=0; i<${#output};\
    \ i++ )); do\n        if [[ ${output[$i]} == 0 ]]; then\n            output[$i]=1\n\
    \        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} == \"0\" ]]; then\n            local j\n            for (( j=0;\
    \ j<${#output[@]}; j++ )); do\n                if [[ ${output[j]:0:1} == \"0\"\
    \ ]]; then\n                    output[j]=${output[j]:1}\n                else\n\
    \                    break\n                fi\n            done\n        else\n\
    \            output+=(\"$digit\")\n        fi\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${x:$i:1}\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for (( i=1; i<${#x};\
    \ i++ )); do\n        if [[ ${x:$i:1} == 0 ]]; then\n            echo \"$output\"\
    \n            break\n        fi\n    done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -i i\n   \
    \ local -a ret\n    local -n digit\n    local -n count\n    local -n i\n    local\
    \ -n j\n    local -n len\n    local -n max\n    local -n min\n    local -n tmp\n\
    \    local -n tmp2\n    local -n tmp3\n    local -n tmp4\n    local -n tmp5\n\
    \    local -n tmp6\n    local -n tmp7\n    local -n tmp8\n    local -n tmp9\n\
    \    local -n tmp10\n    local -n tmp11\n    local -n tmp12\n    local -n tmp13\n\
    \    local -n tmp14\n    local -n tmp15\n    local -n tmp16\n    local -n tmp17\n\
    \    local -n tmp18\n    local -n tmp19\n    local -n tmp20\n    local -n tmp21\n\
    \    local -n tmp22\n    local -n tmp23\n    local -n tmp24\n    local -n tmp25\n\
    \    local -n tmp26\n    local -n tmp27\n    local -n tmp28\n    local -n tmp29\n\
    \    local -n tmp30\n    local -n tmp31\n    local -n tmp32\n    local -n tmp33\n\
    \    local -n tmp34\n    local -n tmp35\n    local -n tmp36\n    local -n tmp37\n\
    \    local -n tmp38\n    local -n tmp39\n    local -n tmp40\n    local -n tmp41\n\
    \    local -n tmp42\n    local -n tmp43\n    local -n tmp44\n    local -n tmp45\n\
    \    local -n tmp46\n    local -n tmp47\n    local -n tmp48\n    local -n tmp49\n\
    \    local -n tmp50\n    local -n tmp51\n    local -n tmp52\n    local -n tmp53\n\
    \    local -n tmp54\n    local -n tmp55\n    local -n tmp56\n    local -n tmp57\n\
    \    local -n tmp58\n    local -n tmp59\n    local -n tmp60\n    local -n tmp61\n\
    \    local -n tmp62\n    local -n tmp63\n    local -n tmp64\n    local \n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/ \\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local count\n    local digit\n    \n    # sort input in increasing order\n\
    \    x=$(echo \"$x\" | sort -n | tr -d '\\n')\n    \n    # initialize output list\n\
    \    output=$(echo \"$x\" | tr -d '\\n')\n    \n    # loop through all elements\
    \ in input list\n    for ((i=1; i<${#x}; i++)); do\n        # initialize count\
    \ variable\n        count=$(echo \"$output\" | grep -c \"^${x[i]}$\")\n      \
    \  \n        # check if count is 0\n        if [[ $count -eq 0 ]]; then\n    \
    \        # append current element to output list\n            output+=\"${x[i]}\"\
    \n        fi\n    done\n    \n    # return output list\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for i in $(seq 0 $((${#x}-1)));\
    \ do\n        if [[ ${x:$i:1} == 0 ]]; then\n            output=$(echo \"$output\"\
    \ | sed 's/\\([0-9]*\\)$/\\1/')\n        fi\n    done\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d | tr '\\n' ' ')\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1/g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${x:$i:1}\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} == \"0\" ]]; then\n            output+=(\"${digit}\")\n    \
    \    fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    output=()\n    for i in \"${x}\"; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n\
    \            local j\n            for j in \"${!output[@]}\"; do\n           \
    \     if [[ $j -eq $i ]]; then\n                    output+=(\"$j\")\n       \
    \             break\n                fi\n            done\n        fi\n    done\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${digit}\")\n        fi\n\
    \    done\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for i in $(seq 0 $((${#x}-1)))\n    do\n        local j\n        for j in\
    \ $(seq 0 $((${#x}-1)))\n        do\n            if [[ ${x[$i]} == ${x[$j]} ]]\n\
    \            then\n                break\n            fi\n        done\n     \
    \   if [[ $j -eq $((${#x}-1)) ]]\n        then\n            output+=(\"${x[$i]}\"\
    )\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local digit\n    local count\n    local digits\n\
    \    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local\
    \ tmp96\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort -u | tr '\\n' ' ')\n    echo \"\
    $output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local i j k l m n o p q r s t u v\
    \ w x y z\n    local -a arr\n    arr=( $1 )\n    local len=${#arr[@]}\n    local\
    \ -a result\n    result=( )\n    for (( i=0; i<len; i++ )); do\n        x=${arr[i]}\n\
    \        for (( j=0; j<i; j++ )); do\n            y=${arr[j]}\n            if\
    \ (( x % y == 0 )); then\n                arr[j]=$x\n                break\n \
    \           fi\n        done\n    done\n    for (( i=0; i<len; i++ )); do\n  \
    \      x=${arr[i]}\n        for (( j=0; j<i; j++ )); do\n            y=${arr[j]}\n\
    \            if (( x % y == 0 )); then\n                arr[j]=$x\n          \
    \      break\n            fi\n        done\n    done\n    for (( i=0; i<len; i++\
    \ )); do\n        x=${arr[i]}\n        for (( j=0; j<i; j++ )); do\n         \
    \   y=${arr[j]}\n            if (( x % y == 0 )); then\n                arr[j]=$x\n\
    \                break\n            fi\n        done\n    done\n    for (( i=0;\
    \ i<len; i++ )); do\n        x=${arr[i]}\n        for (( j=0; j<i; j++ )); do\n\
    \            y=${arr[j]}\n            if (( x % y == 0 )); then\n            \
    \    arr[j]=$x\n                break\n            fi\n        done\n    done\n\
    \    for (( i=0; i<len; i++ )); do\n        x=${arr[i]}\n        for (( j=0; j<i;\
    \ j++ )); do\n            y=${arr[j]}\n            if (( x % y == 0 )); then\n\
    \                arr[j]=$x\n                break\n            fi\n        done\n\
    \    done\n    for (( i=0; i<len; i++ )); do\n        x=${arr[i]}\n        for\
    \ (( j=0; j<i; j++ )); do\n            y=${arr[j]}\n            if (( x % y ==\
    \ 0 )); then\n                arr[j]=$x\n                break\n            fi\n\
    \        done\n    done\n    for (( i=0; i<len; i++ )); do\n        x=${arr[i]}\n\
    \        for (( j=0; j<i; j++ )); do\n            y=${arr[j]}\n            if\
    \ (( x % y == 0 )); then\n                arr[j]=$x\n                break\n \
    \           fi\n        done\n    done\n    for (( i=0; i<len\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp63q94yjw.sh: line 86: unexpected EOF while looking for matching
    `)''

    /tmp/tmp63q94yjw.sh: line 102: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"$digit\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local i j k l m n o p q r s t u v\
    \ w x y z\n    x=$1\n    i=$((${#x}-1))\n    while [ $i -ge 0 ]; do\n        j=$((i-1))\n\
    \        while [ $j -ge 0 ]; do\n            k=$((j-1))\n            while [ $k\
    \ -ge 0 ]; do\n                l=$((k-1))\n                while [ $l -ge 0 ];\
    \ do\n                    m=$((l-1))\n                    while [ $m -ge 0 ];\
    \ do\n                        n=$((m-1))\n                        while [ $n -ge\
    \ 0 ]; do\n                            o=$((n-1))\n                          \
    \  while [ $o -ge 0 ]; do\n                                p=$((o-1))\n      \
    \                          while [ $p -ge 0 ]; do\n                          \
    \          q=$((p-1))\n                                    while [ $q -ge 0 ];\
    \ do\n                                        r=$((q-1))\n                   \
    \                     while [ $r -ge 0 ]; do\n                               \
    \             s=$((r-1))\n                                            while [\
    \ $s -ge 0 ]; do\n                                                t=$((s-1))\n\
    \                                                while [ $t -ge 0 ]; do\n    \
    \                                                u=$((t-1))\n                \
    \                                    while [ $u -ge 0 ]; do\n                \
    \                                        v=$((u-1))\n                        \
    \                                while [ $v -ge 0 ]; do\n                    \
    \                                        w=$((v-1))\n                        \
    \                                    while [ $w -ge 0 ]; do\n                \
    \                                                x=$((w-1))\n                \
    \                                                while [ $x -ge 0 ]; do\n    \
    \                                                                y=$((x-1))\n\
    \                                                                    while [ $y\
    \ -ge 0 ]; do\n                                                              \
    \          z=$((y-1))\n                                                      \
    \                  while [ $z -ge 0 ]; do\n                                  \
    \                                          if [ $x -eq $y -a $x -eq $z -a $y -eq\
    \ $z -a $x -eq $w -a $y -eq $w -a $z -eq $w -a $z -eq $w ]; then\n           \
    \                                                                     x=$((x-1))\n\
    \                                                                            fi\n\
    \                                                                        done\n\
    \                                                                    done\n  \
    \                                                              done\n        \
    \                                                    done\n                  \
    \                                      done\n                                \
    \                    done\n                                                done\n\
    \                                            done\n                          \
    \              done\n                                    done\n              \
    \                  done\n                            done\n                  \
    \      done\n                    done\n                done\n            done\n\
    \        done\n    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660037608
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n\
    \        if [[ ${digit:0:1} == \"0\" ]]; then\n            local j\n         \
    \   for (( j=0; j<${#output[@]}; j++ )); do\n                if [[ ${output[j]:0:1}\
    \ == \"0\" ]]; then\n                    output[j]=\"${output[j]:1}${digit:1}\"\
    \n                    break\n                fi\n            done\n        else\n\
    \            output+=(\"${digit}\")\n        fi\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n \
    \   echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for i in $x; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            if ((\
    \ ${#i} % 2 )); then\n                output+=(\"$i\")\n            fi\n     \
    \   fi\n    done\n    sort -u <<< \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${x:$i:1}\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local output\n    local i\n    local\
    \ count\n    local digit\n    local digits\n    local j\n    local k\n    local\
    \ len\n    local max\n    local min\n    local num\n    local output\n    local\
    \ tmp\n    local xlen\n    local y\n    local z\n    local zlen\n    local zmax\n\
    \    local zmin\n    local znum\n    local zoutput\n    local ztmp\n    local\
    \ zxlen\n    local zy\n    local zz\n    local zzlen\n    local zzmax\n    local\
    \ zzmin\n    local zznum\n    local zzoutput\n    local zztmp\n    local zzxlen\n\
    \    local zzy\n    local zzz\n    local zzzlen\n    local zzzmax\n    local zzzmin\n\
    \    local zzznum\n    local zzzoutput\n    local zzztmp\n    local zzzxlen\n\
    \    local zzzy\n    local zzzz\n    local zzzzlen\n    local zzzzmax\n    local\
    \ zzzzmin\n    local zzzznum\n    local zzzzoutput\n    local zzzztmp\n    local\
    \ zzzzxlen\n    local zzzzy\n    local zzzzz\n    local zzzzzlen\n    local zzzzzmax\n\
    \    local zzzzzmin\n    local zzzzznum\n    local zzzzzoutput\n    local zzzzztmp\n\
    \    local zzzzzxlen\n    local zzzzzy\n    local zzzzzz\n    local zzzzzzlen\n\
    \    local zzzzzzmax\n    local zzzzzzmin\n    local zzzzzznum\n    local zzzzzzoutput\n\
    \    local zzzzzztmp\n    local zzzzzzxlen\n    local zzzzzzy\n    local zzzzzzz\n\
    \    local zzzzzzzlen\n    local zzzzzzzmax\n    local zzzzzzzmin\n    local zzzzzzznum\n\
    \    local zzzzzzzoutput\n    local zzzzzzztmp\n    local zzzzzzzxlen\n    local\
    \ zzzzzzzy\n    local zzzzzzzz\n    local zzzzzzzzlen\n    local zzzzzzzzmax\n\
    \    local zzzzzzzzmin\n    local zzzzzzzznum\n    local zzzzzzzzoutput\n    local\
    \ zzzzzzzztmp\n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    x=\"$1\"\n    local -a y\n    y=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local z\n        z=\"${x:$i:1}\"\
    \n        if [[ ${z:0:1} = 0 ]]; then\n            y+=(\"$z\")\n        fi\n \
    \   done\n    echo \"${y[*]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/ \\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local count\n    local digit\n    local tmp\n \
    \   \n    output=()\n    \n    for (( i=0; i<${#x}; i++ )); do\n        digit=${x:$i:1}\n\
    \        count=$(echo \"${digit}\" | wc -c)\n        \n        if [ $count -eq\
    \ 0 ]; then\n            output+=(\"${x:$i:1}\")\n        fi\n    done\n    \n\
    \    for (( j=0; j<${#output[@]}; j++ )); do\n        tmp=${output[$j]}\n    \
    \    for (( k=0; k<${#output[@]}; k++ )); do\n            if [ \"${tmp}\" == \"\
    ${output[$k]}\" ]; then\n                tmp=${output[$k]}\n            fi\n \
    \       done\n        output[$j]=$tmp\n    done\n    \n    IFS=' ' read -r -a\
    \ output <<< \"${output[*]}\"\n    \n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a result\n\
    \    local -i i\n    local j\n    local k\n    local len\n    local tmp\n    local\
    \ -n arr=$1\n    local -n result=$2\n    local -i i=0\n    local j=0\n    local\
    \ k=0\n    local len=0\n    local tmp\n    local -n x=$arr\n    local -n y=$result\n\
    \    local -i len=${#x}\n    local tmp\n    local -n digit=$x\n    local -n digit2=$y\n\
    \    local digit\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n    local digit2\n    local digit2\n    local digit2\n\
    \    local digit2\n    local digit2\n    local digit2\n    local digit2\n    local\
    \ digit2\n    local digit2\n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk3jyzco7.sh: line 17: local: `15 33 1422 1'': invalid variable
    name for name reference

    /tmp/tmpk3jyzco7.sh: line 18: local: result: reference variable cannot be an array

    /tmp/tmpk3jyzco7.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpk3jyzco7.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpk3jyzco7.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpk3jyzco7.sh: line 29: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a ret\n \
    \   local -i cnt\n\n    arr=( $1 )\n    cnt=${#arr[@]}\n    ret=()\n\n    for\
    \ (( i=0; i<$cnt; i++ )); do\n        x=${arr[i]}\n        if (( x % 2 )); then\n\
    \            ret+=( $x )\n        fi\n    done\n\n    sort -u <<< \"${ret[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local i j k l m n o p q r s t u v\
    \ w x y z\n    local -a arr\n    arr=( $1 )\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        x=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            y=${arr[j]}\n\
    \            if (( ${#x} > ${#y} )); then\n                k=${#x}\n         \
    \   else\n                k=${#y}\n            fi\n            if (( ${#x} > k\
    \ )); then\n                arr[j]=${x%??}\n            fi\n        done\n   \
    \ done\n    arr=( ${arr[@]} )\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  x=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            y=${arr[j]}\n \
    \           if (( ${#x} > ${#y} )); then\n                k=${#x}\n          \
    \  else\n                k=${#y}\n            fi\n            if (( ${#x} > k\
    \ )); then\n                arr[j]=${y%??}\n            fi\n        done\n   \
    \ done\n    arr=( ${arr[@]} )\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  x=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            y=${arr[j]}\n \
    \           if (( ${#x} > ${#y} )); then\n                k=${#x}\n          \
    \  else\n                k=${#y}\n            fi\n            if (( ${#x} > k\
    \ )); then\n                arr[j]=${y%??}\n            fi\n        done\n   \
    \ done\n    arr=( ${arr[@]} )\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  x=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            y=${arr[j]}\n \
    \           if (( ${#x} > ${#y} )); then\n                k=${#x}\n          \
    \  else\n                k=${#y}\n            fi\n            if (( ${#x} > k\
    \ )); then\n                arr[j]=${y%??}\n            fi\n        done\n   \
    \ done\n    arr=( ${arr[@]} )\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  x\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8tu32qrq.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmp8tu32qrq.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a ret\n \
    \   local -i i\n    local -n len\n    local -n count\n    local -i j\n    local\
    \ -n digit\n    local -n digit2\n    local -n digit3\n    local -n digit4\n  \
    \  local -n digit5\n    local -n digit6\n    local -n digit7\n    local -n digit8\n\
    \    local -n digit9\n    local -n digit10\n    local -n digit11\n    local -n\
    \ digit12\n    local -n digit13\n    local -n digit14\n    local -n digit15\n\
    \    local -n digit16\n    local -n digit17\n    local -n digit18\n    local -n\
    \ digit19\n    local -n digit20\n    local -n digit21\n    local -n digit22\n\
    \    local -n digit23\n    local -n digit24\n    local -n digit25\n    local -n\
    \ digit26\n    local -n digit27\n    local -n digit28\n    local -n digit29\n\
    \    local -n digit30\n    local -n digit31\n    local -n digit32\n    local -n\
    \ digit33\n    local -n digit34\n    local -n digit35\n    local -n digit36\n\
    \    local -n digit37\n    local -n digit38\n    local -n digit39\n    local -n\
    \ digit40\n    local -n digit41\n    local -n digit42\n    local -n digit43\n\
    \    local -n digit44\n    local -n digit45\n    local -n digit46\n    local -n\
    \ digit47\n    local -n digit48\n    local -n digit49\n    local -n digit50\n\
    \    local -n digit51\n    local -n digit52\n    local -n digit53\n    local -n\
    \ digit54\n    local -n digit55\n    local -n digit56\n    local -n digit57\n\
    \    local -n digit58\n    local -n digit59\n    local -n digit60\n    local -n\
    \ digit61\n    local -n digit62\n    local -n digit63\n    local -n digit64\n\
    \    local -n digit65\n    local -n digit66\n    local -n digit67\n    local -n\
    \ digit68\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/ \\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    x=$1\n    local ret\n    ret=()\n\
    \    local i\n    for i in $(seq 0 $((${#x}-1)))\n    do\n        if [[ ${x:$i:1}\
    \ == 0 ]]\n        then\n            ret+=(\"${x:$i:1}\")\n        fi\n    done\n\
    \    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sort -n | uniq -u -d | sort -n)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local digit\n    local count\n    local tmp\n    \n    output=$(echo\
    \ \"$x\" | sed 's/ //g')\n    \n    for ((i=0; i<${#output}; i++)); do\n     \
    \   digit=${output:$i:1}\n        count=$(echo \"$x\" | grep -c \"$digit\")\n\
    \        \n        if (( count > 0 )); then\n            for ((j=0; j<i; j++));\
    \ do\n                tmp=${output:$j:1}\n                if [ \"$tmp\" == \"\
    $digit\" ]; then\n                    echo \"$digit appears $count times\"\n \
    \                   break\n                fi\n            done\n        fi\n\
    \    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for (( i=1; i<=9; i++\
    \ )); do\n        if [[ \"$output\" == \"$i\" ]]; then\n            continue\n\
    \        fi\n        if [[ \"$output\" == *\"$i\"* ]]; then\n            output=$(echo\
    \ \"$output\" | sed \"s/$i//g\")\n            continue\n        fi\n        output=$(echo\
    \ \"$output\" | sed \"s/$i//g\")\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local digit\n    local count\n    local tmp\n \
    \   \n    output=()\n    \n    for (( i=0; i<${#x}; i++ )); do\n        digit=${x:$i:1}\n\
    \        count=0\n        for (( j=0; j<${#digit}; j++ )); do\n            tmp=${digit:$j:1}\n\
    \            if [[ $tmp != $digit ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ $count -eq 0 ]]; then\n         \
    \   output+=(\"$x\")\n        fi\n    done\n    \n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n \
    \   IFS=' ' read -r -a output <<< \"${output[*]}\"\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n \
    \   IFS=' ' read -r -a output <<< \"${output[*]}\"\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n \
    \   IFS=' ' read -r -a output <<< \"${output[*]}\"\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n \
    \   IFS=' ' read -r -a output <<< \"${output[*]}\"\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n \
    \   IFS=' ' read -r -a output <<< \"${output[*]}\"\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output <<< \"${output[*]}\"\n \
    \   IFS=' ' read -r -a output <<< \"${output[*]}\"\n    IFS=' ' read -r -a output\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -r -a output \n}\n\ncandidate() {\n \
    \   unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=61 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=33 encoding='utf-8'>
  timestamp: 1660037608
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    local i\n\
    \    local j\n    local k\n    local len\n    local digit\n    local tmp\n   \
    \ \n    len=${#x}\n    output=()\n    \n    for (( i=0; i<len; i++ )); do\n  \
    \      tmp=${x:$i:1}\n        digit=${tmp:0:1}\n        \n        for (( j=0;\
    \ j<i; j++ )); do\n            if (( ${x:$j:1} % $digit )); then\n           \
    \     break\n            fi\n        done\n        \n        if (( j == i ));\
    \ then\n            output+=(\"$tmp\")\n        fi\n    done\n    \n    IFS=$'\\\
    n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n \
    \   IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\\
    n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n \
    \   IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\\
    n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n \
    \   IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\\
    n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n \
    \   IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\\
    n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n \
    \   IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\\
    n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n \
    \   IFS=$'\\n'\n    \n    IFS=$'\\n'\n    \n    IFS=$\n}\n\ncandidate() {\n  \
    \  unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa_86xxwo.sh: line 26: ((: 1 %   : syntax error: operand expected
    (error token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 5 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 1 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 5 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 3 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 3 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: % 1 : syntax error: operand expected (error
    token is "% 1 ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: % 1 : syntax error: operand expected (error
    token is "% 1 ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 1 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 5 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 3 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 3 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 1 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 4 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 2 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: 2 %   : syntax error: operand expected (error
    token is "%   ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: % 1 : syntax error: operand expected (error
    token is "% 1 ")

    /tmp/tmpa_86xxwo.sh: line 26: ((: % 1 : syntax error: operand expected (error
    token is "% 1 ")

    /tmp/tmpa_86xxwo.sh: line'
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    local i\n    for i in $(seq 0 $((${#x}-1)))\n    do\n        if [[ ${x:$i:1}\
    \ == 0 ]]\n        then\n            output+=(\"${x:$i:1}\")\n        fi\n   \
    \ done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort -u)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d | tr '\\n' ' ')\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d | sort -n)\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local i\n    for (( i=1; i<=9; i++\
    \ )); do\n        if [ \"$output\" == \"$i\" ]; then\n            continue\n \
    \       fi\n        if [ \"$output\" == \"$(($i%10))\" ]; then\n            output=\"\
    $output$i\"\n            continue\n        fi\n        output=\"$output$(($i%10))\"\
    \n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ (( ${digit:0:1} == 0 )) ; then\n            output+=(\"${digit}\")\n       \
    \ fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7kled4jw.sh: line 14: ((: == 0 : syntax error: operand expected
    (error token is "== 0 ")

    /tmp/tmp7kled4jw.sh: line 14: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    /tmp/tmp7kled4jw.sh: line 14: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    '
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${x:$i:1}\")\n        fi\n\
    \    done\n    IFS=$'\\n' output=($(sort <<<\"${output[*]}\"))\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${digit}\")\n        fi\n\
    \    done\n    echo \"${output[@]}\" | sort -n | uniq\n}\n\ncandidate() {\n  \
    \  unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a ret\n \
    \   local -i i\n    local j\n    local k\n    local -n digit\n    local -n digit2\n\
    \    local -n digit3\n    local -n digit4\n    local -n digit5\n    local -n digit6\n\
    \    local -n digit7\n    local -n digit8\n    local -n digit9\n    local -n digit10\n\
    \    local -n digit11\n    local -n digit12\n    local -n digit13\n    local -n\
    \ digit14\n    local -n digit15\n    local -n digit16\n    local -n digit17\n\
    \    local -n digit18\n    local -n digit19\n    local -n digit20\n    local -n\
    \ digit21\n    local -n digit22\n    local -n digit23\n    local -n digit24\n\
    \    local -n digit25\n    local -n digit26\n    local -n digit27\n    local -n\
    \ digit28\n    local -n digit29\n    local -n digit30\n    local -n digit31\n\
    \    local -n digit32\n    local -n digit33\n    local -n digit34\n    local -n\
    \ digit35\n    local -n digit36\n    local -n digit37\n    local -n digit38\n\
    \    local -n digit39\n    local -n digit40\n    local -n digit41\n    local -n\
    \ digit42\n    local -n digit43\n    local -n digit44\n    local -n digit45\n\
    \    local -n digit46\n    local -n digit47\n    local -n digit48\n    local -n\
    \ digit49\n    local -n digit50\n    local -n digit51\n    local -n digit52\n\
    \    local -n digit53\n    local -n digit54\n    local -n digit55\n    local -n\
    \ digit56\n    local -n digit57\n    local -n digit58\n    local -n digit59\n\
    \    local -n digit60\n    local -n digit61\n    local -n digit62\n    local -n\
    \ digit63\n    local -n digit64\n    local -n digit65\n    local -n digit66\n\
    \    local -n digit67\n    local -n digit68\n    local -n digit69\n    \n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u | sed 's/ //g')\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a y\n    local -a z\n    local\
    \ -a result\n    local -a count\n    local -a tmp\n    local -a tmp2\n    local\
    \ -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local\
    \ -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n    local\
    \ -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n    local\
    \ -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local\
    \ -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local\
    \ -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local\
    \ -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local\
    \ -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local\
    \ -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local\
    \ -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local\
    \ -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local\
    \ -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local\
    \ -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local\
    \ -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local\
    \ -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local\
    \ -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local\
    \ -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local \n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x\n    local -a arr\n    local -a ret\n \
    \   local -i i\n    local -n len\n    local -i j\n    local -n len2\n    local\
    \ -i k\n    local -n len3\n    local -i l\n    local -n len4\n    local -i m\n\
    \    local -n len5\n    local -i n\n    local -n len6\n    local -i p\n    local\
    \ -n len7\n    local -i q\n    local -n len8\n    local -i r\n    local -n len9\n\
    \    local -i s\n    local -n len10\n    local -i t\n    local -n len11\n    local\
    \ -i u\n    local -n len12\n    local -i v\n    local -n len13\n    local -i w\n\
    \    local -n len14\n    local -i x\n    local -n len15\n    local -i y\n    local\
    \ -n len16\n    local -i z\n    local -n len17\n    local -i a\n    local -n len18\n\
    \    local -i b\n    local -n len19\n    local -i c\n    local -n len20\n    local\
    \ -i d\n    local -n len21\n    local -i e\n    local -n len22\n    local -i f\n\
    \    local -n len23\n    local -i g\n    local -n len24\n    local -i h\n    local\
    \ -n len25\n    local -i i\n    local -n len26\n    local -i j\n    local -n len27\n\
    \    local -i k\n    local -n len28\n    local -i l\n    local -n len29\n    local\
    \ -i m\n    local -n len30\n    local -i n\n    local -n len31\n    local -i o\n\
    \    local -n len32\n    local -i p\n    local -n len33\n    local -i q\n    local\
    \ -n len34\n    local -i r\n    local -n len35\n    local -i s\n    local -n len36\n\
    \    local -i t\n    local -n len37\n    local -i u\n    local -n len38\n    local\
    \ -i v\n    local -n len39\n    local -i w\n    local -n len40\n    local -i x\n\
    \    local -n len41\n    local -i y\n\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${digit}\")\n        fi\n\
    \    done\n    IFS=$'\\n' output=($(sort <<<\"${output[*]}\"))\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${digit}\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -u | grep -E \"^[0-9]*$\" | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=()\n\
    \    for (( i=0; i<${#x}; i++ )); do\n        local digit=${x:$i:1}\n        if\
    \ [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"${x:$i:1}\")\n        fi\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n#\n# $1 is a space-separated\
    \ list\nunique_digits() {\n    local x=\"$1\"\n    local output\n    output=$(echo\
    \ \"$x\" | sed 's/\\([0-9]\\)/ \\1 /g' | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037603
