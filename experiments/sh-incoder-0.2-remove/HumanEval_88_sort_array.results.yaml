language: sh
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=0\n    for i in \"${array[@]}\"; do\n        sum=$((\
    \ $sum + $i ))\n    done\n    if [ $(( sum % 2 )) -eq 1 ]; then\n        for i\
    \ in \"${array[@]}\"; do\n            temp=$i\n            j=$(( $i - 1 ))\n \
    \           while [ $j -gt 0 ] && [ $temp -gt $array[$j] ]; do\n             \
    \   array[$j+1]=$array[$j]\n                j=$(( $j - 1 ))\n            done\n\
    \            array[$j+1]=$temp\n        done\n    else\n        for i in \"${array[@]}\"\
    ; do\n            temp=$i\n            j=$(( $i + 1 ))\n            while [ $j\
    \ -gt $(( ${#array[@]} - 1 )) ] && [ $temp -gt $array[$j] ]; do\n            \
    \    array[$j-1]=$array[$j]\n                j=$(( $j + 1 ))\n            done\n\
    \            array[$j-1]=$temp\n        done\n    fi\n}\n\ncandidate() {\n   \
    \ sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3gcb3886.sh: line 18: 0 +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmp3gcb3886.sh: line 24: [: 5[4]: integer expression expected

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local sum1\n    local sum2\n    local sum3\n    local sum4\n\
    \    local sum5\n    local sum6\n    local sum7\n    local sum8\n    local sum9\n\
    \    local sum10\n    local sum11\n    local sum12\n    local sum13\n    local\
    \ sum14\n    local sum15\n    local sum16\n    local sum17\n    local sum18\n\
    \    local sum19\n    local sum20\n    local sum21\n    local sum22\n    local\
    \ sum23\n    local sum24\n    local sum25\n    local sum26\n    local sum27\n\
    \    local sum28\n    local sum29\n    local sum30\n    local sum31\n    local\
    \ sum32\n    local sum33\n    local sum34\n    local sum35\n    local sum36\n\
    \    local sum37\n    local sum38\n    local sum39\n    local sum40\n    local\
    \ sum41\n    local sum42\n    local sum43\n    local sum44\n    local sum45\n\
    \    local sum46\n    local sum47\n    local sum48\n    local sum49\n    local\
    \ sum50\n    local sum51\n    local sum52\n    local sum53\n    local sum54\n\
    \    local sum55\n    local sum56\n    local sum57\n    local sum58\n    local\
    \ sum59\n    local sum60\n    local sum61\n    local sum62\n    local sum63\n\
    \    local sum64\n    local sum65\n    local sum66\n    local sum67\n    local\
    \ sum68\n    local sum69\n    local sum70\n    local sum71\n    local sum72\n\
    \    local sum73\n    local sum74\n    local sum75\n    local sum76\n    local\
    \ sum77\n    local sum78\n    local sum79\n    local sum80\n    local sum81\n\
    \    local sum82\n    local sum83\n    local sum84\n    local sum85\n    local\
    \ sum86\n    local sum87\n    local sum88\n    local sum89\n    local sum90\n\
    \    local sum91\n    local sum92\n    local sum93\n    local sum94\n    local\
    \ sum95\n    local sum96\n    local sum97\n    local sum98\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n    local odd\n    local even\n\
    \    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n\
    \    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n\
    \    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local\
    \ tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n\
    \    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local\
    \ tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n\
    \    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local\
    \ tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n\
    \    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local\
    \ tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n\
    \    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local\
    \ tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n\
    \    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local\
    \ tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n\
    \    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local\
    \ tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n\
    \    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local\
    \ tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n\
    \    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local\
    \ tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n\
    \    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local temp\n    local len\n    local flag\n   \
    \ local temp2\n    local flag2\n    local temp3\n    local flag3\n    local temp4\n\
    \    local flag4\n    local temp5\n    local flag5\n    local temp6\n    local\
    \ flag6\n    local temp7\n    local flag7\n    local temp8\n    local flag8\n\
    \    local temp9\n    local flag9\n    local temp10\n    local flag10\n    local\
    \ temp11\n    local flag11\n    local temp12\n    local flag12\n    local temp13\n\
    \    local flag13\n    local temp14\n    local flag14\n    local temp15\n    local\
    \ flag15\n    local temp16\n    local flag16\n    local temp17\n    local flag17\n\
    \    local temp18\n    local flag18\n    local temp19\n    local flag19\n    local\
    \ temp20\n    local flag20\n    local temp21\n    local flag21\n    local temp22\n\
    \    local flag22\n    local temp23\n    local flag23\n    local temp24\n    local\
    \ flag24\n    local temp25\n    local flag25\n    local temp26\n    local flag26\n\
    \    local temp27\n    local flag27\n    local temp28\n    local flag28\n    local\
    \ temp29\n    local flag29\n    local temp30\n    local flag30\n    local temp31\n\
    \    local flag31\n    local temp32\n    local flag32\n    local temp33\n    local\
    \ flag33\n    local temp34\n    local flag34\n    local temp35\n    local flag35\n\
    \    local temp36\n    local flag36\n    local temp37\n    local flag37\n    local\
    \ temp38\n    local flag38\n    local temp39\n    local flag39\n    local temp40\n\
    \    local flag40\n    local temp41\n    local flag41\n    local temp42\n    local\
    \ flag42\n    local temp43\n    local flag43\n    local temp44\n    local flag44\n\
    \    local temp45\n    local flag45\n    local temp46\n    local flag46\n    local\
    \ temp47\n    local flag47\n    local temp48\n    local flag48\n    local temp49\n\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local arr=$1\n  local sum\n  local i\n  local j\n  local\
    \ k\n  local temp\n  local len\n  local odd\n  local even\n  local temp2\n  local\
    \ temp3\n  local temp4\n  local temp5\n  local temp6\n  local temp7\n  local temp8\n\
    \  local temp9\n  local temp10\n  local temp11\n  local temp12\n  local temp13\n\
    \  local temp14\n  local temp15\n  local temp16\n  local temp17\n  local temp18\n\
    \  local temp19\n  local temp20\n  local temp21\n  local temp22\n  local temp23\n\
    \  local temp24\n  local temp25\n  local temp26\n  local temp27\n  local temp28\n\
    \  local temp29\n  local temp30\n  local temp31\n  local temp32\n  local temp33\n\
    \  local temp34\n  local temp35\n  local temp36\n  local temp37\n  local temp38\n\
    \  local temp39\n  local temp40\n  local temp41\n  local temp42\n  local temp43\n\
    \  local temp44\n  local temp45\n  local temp46\n  local temp47\n  local temp48\n\
    \  local temp49\n  local temp50\n  local temp51\n  local temp52\n  local temp53\n\
    \  local temp54\n  local temp55\n  local temp56\n  local temp57\n  local temp58\n\
    \  local temp59\n  local temp60\n  local temp61\n  local temp62\n  local temp63\n\
    \  local temp64\n  local temp65\n  local temp66\n  local temp67\n  local temp68\n\
    \  local temp69\n  local temp70\n  local temp71\n  local temp72\n  local temp73\n\
    \  local temp74\n  local temp75\n  local temp76\n  local temp77\n  local temp78\n\
    \  local temp79\n  local temp80\n  local temp81\n  local temp82\n  local temp83\n\
    \  local temp84\n  local temp85\n  local temp86\n  local temp87\n  local temp88\n\
    \  local temp89\n  local temp90\n  local temp91\n  local temp92\n  local temp93\n\
    \  local temp94\n  local temp95\n  local temp96\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$array\"\n\
    \    else\n        echo \"$array\" | sort -n -k 2 -r | awk '{print $2}'\n    fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e=0\n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $(( ${#array[@]} - 1 )) | bc)\n\
    \    if [ $sum -gt 0 ]; then\n        echo \"$array is not sorted\"\n        return\
    \ 1\n    fi\n    for (( i=1; i<${#array[@]}; i++ )); do\n        sum=$(( sum +\
    \ ${array[$i]} ))\n    done\n    if [ $sum -gt 0 ]; then\n        echo \"$array\
    \ is not sorted\"\n        return 1\n    fi\n    for (( j=1; j<${#array[@]}; j++\
    \ )); do\n        sum=$(( sum - ${array[$j]} ))\n    done\n    if [ $sum -gt 0\
    \ ]; then\n        echo \"$array is not sorted\"\n        return 1\n    fi\n \
    \   for (( k=0; k<${#array[@]}; k++ )); do\n        if [ ${array[$k]} -gt ${array[$k+1]}\
    \ ]; then\n            temp=${array[$k]}\n            array[$k]=${array[$k+1]}\n\
    \            array[$k+1]=${temp}\n        fi\n    done\n    echo \"$array is sorted\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660033808
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local tmp\n    local len\n    local flag\n\n    sum=$(( ${arr[0]} + ${arr[${#arr[@]}\
    \ -1]} ))\n    len=${#arr[@]}\n    flag=0\n\n    for (( i=1; i<len; i++ )); do\n\
    \        if [ $(( ${arr[i]} + ${arr[i - 1]} )) -gt $sum ]; then\n            flag=1\n\
    \            break\n        fi\n    done\n\n    if [ $flag -eq 0 ]; then\n   \
    \     flag=1\n        for (( j=1; j<len; j++ )); do\n            if [ $(( ${arr[j]}\
    \ + ${arr[j-1]} )) -le $sum ]; then\n                flag=0\n                break\n\
    \            fi\n        done\n    fi\n\n    if [ $flag -eq 1 ]; then\n      \
    \  flag=1\n        for (( j=1; j<len; j++ )); do\n            if [ $(( ${arr[j]}\
    \ + ${arr[j-1]} )) -gt $sum ]; then\n                tmp=${arr[j]}\n         \
    \       arr[j]=${arr[j-1]}\n                arr[j-1]=${tmp}\n                flag=0\n\
    \                break\n            fi\n        done\n    fi\n\n    echo ${arr[@]}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4_49_w21.sh: line 19: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmp4_49_w21.sh: line 19: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax error in expression
    (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local temp2\n    local temp3\n\
    \    local temp4\n    local temp5\n    local temp6\n    local temp7\n    local\
    \ temp8\n    local temp9\n    local temp10\n    local temp11\n    local temp12\n\
    \    local temp13\n    local temp14\n    local temp15\n    local temp16\n    local\
    \ temp17\n    local temp18\n    local temp19\n    local temp20\n    local temp21\n\
    \    local temp22\n    local temp23\n    local temp24\n    local temp25\n    local\
    \ temp26\n    local temp27\n    local temp28\n    local temp29\n    local temp30\n\
    \    local temp31\n    local temp32\n    local temp33\n    local temp34\n    local\
    \ temp35\n    local temp36\n    local temp37\n    local temp38\n    local temp39\n\
    \    local temp40\n    local temp41\n    local temp42\n    local temp43\n    local\
    \ temp44\n    local temp45\n    local temp46\n    local temp47\n    local temp48\n\
    \    local temp49\n    local temp50\n    local temp51\n    local temp52\n    local\
    \ temp53\n    local temp54\n    local temp55\n    local temp56\n    local temp57\n\
    \    local temp58\n    local temp59\n    local temp60\n    local temp61\n    local\
    \ temp62\n    local temp63\n    local temp64\n    local temp65\n    local temp66\n\
    \    local temp67\n    local temp68\n    local temp69\n    local temp70\n    local\
    \ temp71\n    local temp72\n    local temp73\n    local temp74\n    local temp75\n\
    \    local temp76\n    local temp77\n    local temp78\n    local temp79\n    local\
    \ temp80\n    local temp81\n    local temp82\n    local temp83\n    local temp84\n\
    \    local temp85\n    local temp86\n    local temp87\n    local temp88\n    local\
    \ temp89\n    local temp90\n    local temp91\n    local temp92\n    local temp93\n\
    \    local temp94\n    local temp95\n    local temp96\n    local temp97\n    local\
    \ \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4\
    \ 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n\
    \    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate\
    \ \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local result\n    local flag\n\
    \n    sum=$(( ${arr[0]} + ${arr[${#arr[@]}-1]} ))\n    if [ $(( sum % 2 )) -eq\
    \ 1 ]; then\n        flag=asc\n    else\n        flag=desc\n    fi\n    len=${#arr[@]}\n\
    \    for (( i=0; i<len; i++ )); do\n        for (( j=i+1; j<len; j++ )); do\n\
    \            temp=${arr[i]}\n            arr[i]=${arr[j]}\n            arr[j]=${temp}\n\
    \        done\n    done\n    for (( i=0; i<len; i++ )); do\n        sum=$(( ${arr[i]}\
    \ + ${arr[i+1]} ))\n        if [ $(( sum % 2 )) -eq 1 ]; then\n            arr[i]=${arr[i]}\n\
    \        else\n            arr[i]=${arr[i+1]}\n        fi\n    done\n    result=()\n\
    \    for (( i=0; i<len; i++ )); do\n        result+=(\"${arr[i]}\")\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa1gu3hri.sh: line 21: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmpa1gu3hri.sh: line 36: 5 +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local temp\n    local result\n    local sum1\n\
    \    local sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n\
    \    local sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n\
    \    local sum12\n    local sum13\n    local sum14\n    local sum15\n    local\
    \ sum16\n    local sum17\n    local sum18\n    local sum19\n    local sum20\n\
    \    local sum21\n    local sum22\n    local sum23\n    local sum24\n    local\
    \ sum25\n    local sum26\n    local sum27\n    local sum28\n    local sum29\n\
    \    local sum30\n    local sum31\n    local sum32\n    local sum33\n    local\
    \ sum34\n    local sum35\n    local sum36\n    local sum37\n    local sum38\n\
    \    local sum39\n    local sum40\n    local sum41\n    local sum42\n    local\
    \ sum43\n    local sum44\n    local sum45\n    local sum46\n    local sum47\n\
    \    local sum48\n    local sum49\n    local sum50\n    local sum51\n    local\
    \ sum52\n    local sum53\n    local sum54\n    local sum55\n    local sum56\n\
    \    local sum57\n    local sum58\n    local sum59\n    local sum60\n    local\
    \ sum61\n    local sum62\n    local sum63\n    local sum64\n    local sum65\n\
    \    local sum66\n    local sum67\n    local sum68\n    local sum69\n    local\
    \ sum70\n    local sum71\n    local sum72\n    local sum73\n    local sum74\n\
    \    local sum75\n    local sum76\n    local sum77\n    local sum78\n    local\
    \ sum79\n    local sum80\n    local sum81\n    local sum82\n    local sum83\n\
    \    local sum84\n    local sum85\n    local sum86\n    local sum87\n    local\
    \ sum88\n    local sum89\n    local sum90\n    local sum91\n    local sum92\n\
    \    local sum93\n    local sum94\n    local sum95\n    \n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=$(echo $(( ${#array[@]} - 1 )) | bc)\n    for ((\
    \ i = 0; i < ${#array[@]}; i++ )); do\n        sum=$(( sum + ${array[$i]} ))\n\
    \    done\n    if [ $(( sum % 2 )) -eq 1 ]; then\n        for (( i = 0; i < ${#array[@]};\
    \ i++ )); do\n            temp=${array[$i]}\n            array[$i]=${array[$((\
    \ i + 1 ))]}\n            array[$(( i + 1 ))]=${temp}\n        done\n    else\n\
    \        for (( i = 0; i < ${#array[@]}; i++ )); do\n            temp=${array[$i]}\n\
    \            array[$i]=${array[$(( i + 1 ))]}\n            array[$(( i + 1 ))]=${temp}\n\
    \        done\n    fi\n    echo ${array[@]}\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660033808
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local len\n    local temp\n    local flag\n    local count\n    local\
    \ temp2\n    local temp3\n    local temp4\n    local temp5\n    local temp6\n\
    \    local temp7\n    local temp8\n    local temp9\n    local temp10\n    local\
    \ temp11\n    local temp12\n    local temp13\n    local temp14\n    local temp15\n\
    \    local temp16\n    local temp17\n    local temp18\n    local temp19\n    local\
    \ temp20\n    local temp21\n    local temp22\n    local temp23\n    local temp24\n\
    \    local temp25\n    local temp26\n    local temp27\n    local temp28\n    local\
    \ temp29\n    local temp30\n    local temp31\n    local temp32\n    local temp33\n\
    \    local temp34\n    local temp35\n    local temp36\n    local temp37\n    local\
    \ temp38\n    local temp39\n    local temp40\n    local temp41\n    local temp42\n\
    \    local temp43\n    local temp44\n    local temp45\n    local temp46\n    local\
    \ temp47\n    local temp48\n    local temp49\n    local temp50\n    local temp51\n\
    \    local temp52\n    local temp53\n    local temp54\n    local temp55\n    local\
    \ temp56\n    local temp57\n    local temp58\n    local temp59\n    local temp60\n\
    \    local temp61\n    local temp62\n    local temp63\n    local temp64\n    local\
    \ temp65\n    local temp66\n    local temp67\n    local temp68\n    local temp69\n\
    \    local temp70\n    local temp71\n    local temp72\n    local temp73\n    local\
    \ temp74\n    local temp75\n    local temp76\n    local temp77\n    local temp78\n\
    \    local temp79\n    local temp80\n    local temp81\n    local temp82\n    local\
    \ temp83\n    local temp84\n    local temp85\n    local temp86\n    local temp87\n\
    \    local temp88\n    local temp89\n    local temp90\n    local temp91\n    local\
    \ temp92\n    local temp93\n    local temp94\n    local temp95\n    local temp96\n\
    \    local temp\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local tmp\n    sum=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  sum=$((sum+${arr[i]}))\n    done\n    if [ $((sum%2)) -eq 1 ]; then\n     \
    \   arr=( $(sort -n <<<\"${arr[@]}\") )\n    else\n        arr=( $(sort -rn <<<\"\
    ${arr[@]}\") )\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnoxysplr.sh: line 18: sum+: syntax error: operand expected (error
    token is "+")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local sum1\n    local sum2\n    local sum3\n    local sum4\n\
    \    local sum5\n    local sum6\n    local sum7\n    local sum8\n    local sum9\n\
    \    local sum10\n    local sum11\n    local sum12\n    local sum13\n    local\
    \ sum14\n    local sum15\n    local sum16\n    local sum17\n    local sum18\n\
    \    local sum19\n    local sum20\n    local sum21\n    local sum22\n    local\
    \ sum23\n    local sum24\n    local sum25\n    local sum26\n    local sum27\n\
    \    local sum28\n    local sum29\n    local sum30\n    local sum31\n    local\
    \ sum32\n    local sum33\n    local sum34\n    local sum35\n    local sum36\n\
    \    local sum37\n    local sum38\n    local sum39\n    local sum40\n    local\
    \ sum41\n    local sum42\n    local sum43\n    local sum44\n    local sum45\n\
    \    local sum46\n    local sum47\n    local sum48\n    local sum49\n    local\
    \ sum50\n    local sum51\n    local sum52\n    local sum53\n    local sum54\n\
    \    local sum55\n    local sum56\n    local sum57\n    local sum58\n    local\
    \ sum59\n    local sum60\n    local sum61\n    local sum62\n    local sum63\n\
    \    local sum64\n    local sum65\n    local sum66\n    local sum67\n    local\
    \ sum68\n    local sum69\n    local sum70\n    local sum71\n    local sum72\n\
    \    local sum73\n    local sum74\n    local sum75\n    local sum76\n    local\
    \ sum77\n    local sum78\n    local sum79\n    local sum80\n    local sum81\n\
    \    local sum82\n    local sum83\n    local sum84\n    local sum85\n    local\
    \ sum86\n    local sum87\n    local sum88\n    local sum89\n    local sum90\n\
    \    local sum91\n    local sum92\n    local sum93\n    local sum94\n    local\
    \ sum95\n    local sum96\n    local sum97\n    local sum98\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local result\n    sum=$(echo \"\
    $array\" | awk '{sum+=$1} END {print sum}')\n    if [ $sum -gt $(( ${#array[@]}\
    \ / 2 )) ]; then\n        echo \"$array\"\n        return\n    fi\n    for ((\
    \ i=1; i<${#array[@]}; i++ )); do\n        sum=$(echo \"$array[$i]\" | awk '{sum+=$1}\
    \ END {print sum}')\n        if [ $sum -gt $(( ${#array[@]} / 2 )) ]; then\n \
    \           echo \"$array\"\n            return\n        fi\n    done\n    for\
    \ (( j=1; j<${#array[@]}; j++ )); do\n        sum=$(echo \"$array[$j]\" | awk\
    \ '{sum+=$1} END {print sum}')\n        if [ $sum -gt $(( ${#array[@]} / 2 ))\
    \ ]; then\n            echo \"$array\"\n            return\n        fi\n    done\n\
    \    for (( k=1; k<${#array[@]}; k++ )); do\n        sum=$(echo \"$array[$k]\"\
    \ | awk '{sum+=$1} END {print sum}')\n        if [ $sum -gt $(( ${#array[@]} /\
    \ 2 )) ]; then\n            echo \"$array\"\n            return\n        fi\n\
    \    done\n    for (( i=1; i<${#array[@]}; i++ )); do\n        sum=$(echo \"$array[$i]\"\
    \ | awk '{sum+=$1} END {print sum}')\n        if [ $sum -gt $(( ${#array[@]} /\
    \ 2 )) ]; then\n            echo \"$array\"\n            return\n        fi\n\
    \    done\n    for (( j=1; j<${#array[@]}; j++ )); do\n        sum=$(echo \"$array[$j]\"\
    \ | awk '{sum+=$1} END {print sum}')\n        if [ $sum -gt $(( ${#array[@]} /\
    \ 2 )) ]; then\n            echo \"$array\"\n            return\n        fi\n\
    \    done\n    for (( k=1; k<${#array[@]}; k++ )); do\n        sum=$(echo \"$array[$k]\"\
    \ | awk '{sum+=$1} END {print sum}')\n        if [ $sum -gt $(( ${#array[@]} /\
    \ 2 )) ]; then\n            echo \"$array\"\n            return\n        \n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0mrjdmdg.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmp0mrjdmdg.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local len2\n    local len3\n    local len4\n    local len5\n\
    \    local len6\n    local len7\n    local len8\n    local len9\n    local len10\n\
    \    local len11\n    local len12\n    local len13\n    local len14\n    local\
    \ len15\n    local len16\n    local len17\n    local len18\n    local len19\n\
    \    local len20\n    local len21\n    local len22\n    local len23\n    local\
    \ len24\n    local len25\n    local len26\n    local len27\n    local len28\n\
    \    local len29\n    local len30\n    local len31\n    local len32\n    local\
    \ len33\n    local len34\n    local len35\n    local len36\n    local len37\n\
    \    local len38\n    local len39\n    local len40\n    local len41\n    local\
    \ len42\n    local len43\n    local len44\n    local len45\n    local len46\n\
    \    local len47\n    local len48\n    local len49\n    local len50\n    local\
    \ len51\n    local len52\n    local len53\n    local len54\n    local len55\n\
    \    local len56\n    local len57\n    local len58\n    local len59\n    local\
    \ len60\n    local len61\n    local len62\n    local len63\n    local len64\n\
    \    local len65\n    local len66\n    local len67\n    local len68\n    local\
    \ len69\n    local len70\n    local len71\n    local len72\n    local len73\n\
    \    local len74\n    local len75\n    local len76\n    local len77\n    local\
    \ len78\n    local len79\n    local len80\n    local len81\n    local len82\n\
    \    local len83\n    local len84\n    local len85\n    local len86\n    local\
    \ len87\n    local len88\n    local len89\n    local len90\n    local len91\n\
    \    local len92\n    local len93\n    local len94\n    local len95\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local odd\n    local even\n    local tmp\n\
    \n    sum=$(echo $arr | awk '{sum+=$1} END {print sum}')\n    odd=$(echo $sum\
    \ | awk '{print (sum%2)}')\n    even=$(echo $sum | awk '{print (sum%2)}')\n  \
    \  len=$(echo $arr | wc -w)\n\n    for (( i=1; i<=$len; i++ )); do\n        for\
    \ (( j=0; j<$len; j++ )); do\n            if [ $j -gt $i ]; then\n           \
    \     tmp=$arr[j]\n                arr[j]=$arr[i]\n                arr[i]=$tmp\n\
    \            fi\n        done\n    done\n\n    for (( k=0; k<$len; k++ )); do\n\
    \        if [ $k -gt $len ]; then\n            tmp=$arr[k]\n            arr[k]=$arr[$len]\n\
    \            arr[$len]=$tmp\n        fi\n    done\n\n    if [ $odd -eq 1 ]; then\n\
    \        arr=($(sort -n <<<\"${arr[@]}\" | sed 's/^/-/g'))\n    elif [ $even -eq\
    \ 1 ]; then\n        arr=($(sort -n <<<\"${arr[@]}\" | sed 's/^/+/g'))\n    fi\n\
    \n    echo ${arr[@]}\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local len\n    local\
    \ i\n    local j\n    local k\n    local temp\n    local tmp\n    local tmp2\n\
    \    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n\
    \    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n\
    \    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local\
    \ tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n\
    \    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local\
    \ tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n\
    \    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local\
    \ tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n\
    \    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local\
    \ tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n\
    \    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local\
    \ tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n\
    \    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local\
    \ tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n\
    \    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local\
    \ tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n\
    \    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local\
    \ tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n\
    \    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local\
    \ tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n\
    \    local tmp94\n    local tmp95\n    local tmp96\n    local tmp\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local temp\n    local result\n    local sum1\n\
    \    local sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n\
    \    local sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n\
    \    local sum12\n    local sum13\n    local sum14\n    local sum15\n    local\
    \ sum16\n    local sum17\n    local sum18\n    local sum19\n    local sum20\n\
    \    local sum21\n    local sum22\n    local sum23\n    local sum24\n    local\
    \ sum25\n    local sum26\n    local sum27\n    local sum28\n    local sum29\n\
    \    local sum30\n    local sum31\n    local sum32\n    local sum33\n    local\
    \ sum34\n    local sum35\n    local sum36\n    local sum37\n    local sum38\n\
    \    local sum39\n    local sum40\n    local sum41\n    local sum42\n    local\
    \ sum43\n    local sum44\n    local sum45\n    local sum46\n    local sum47\n\
    \    local sum48\n    local sum49\n    local sum50\n    local sum51\n    local\
    \ sum52\n    local sum53\n    local sum54\n    local sum55\n    local sum56\n\
    \    local sum57\n    local sum58\n    local sum59\n    local sum60\n    local\
    \ sum61\n    local sum62\n    local sum63\n    local sum64\n    local sum65\n\
    \    local sum66\n    local sum67\n    local sum68\n    local sum69\n    local\
    \ sum70\n    local sum71\n    local sum72\n    local sum73\n    local sum74\n\
    \    local sum75\n    local sum76\n    local sum77\n    local sum78\n    local\
    \ sum79\n    local sum80\n    local sum81\n    local sum82\n    local sum83\n\
    \    local sum84\n    local sum85\n    local sum86\n    local sum87\n    local\
    \ sum88\n    local sum89\n    local sum90\n    local sum91\n    local sum92\n\
    \    local sum93\n    local sum94\n    local sum95\n    local sum96\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local index\n\
    \    local i\n    local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1}\
    \ END {print sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$array\
    \ is sorted\"\n    else\n        echo \"$array is NOT sorted\"\n    fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local sum1\n  \
    \  local sum2\n    local i\n    local j\n    local k\n    local temp\n    local\
    \ len\n    local flag\n    local flag1\n    local flag2\n    local flag3\n   \
    \ local flag4\n    local flag5\n    local flag6\n    local flag7\n    local flag8\n\
    \    local flag9\n    local flag10\n    local flag11\n    local flag12\n    local\
    \ flag13\n    local flag14\n    local flag15\n    local flag16\n    local flag17\n\
    \    local flag18\n    local flag19\n    local flag20\n    local flag21\n    local\
    \ flag22\n    local flag23\n    local flag24\n    local flag25\n    local flag26\n\
    \    local flag27\n    local flag28\n    local flag29\n    local flag30\n    local\
    \ flag31\n    local flag32\n    local flag33\n    local flag34\n    local flag35\n\
    \    local flag36\n    local flag37\n    local flag38\n    local flag39\n    local\
    \ flag40\n    local flag41\n    local flag42\n    local flag43\n    local flag44\n\
    \    local flag45\n    local flag46\n    local flag47\n    local flag48\n    local\
    \ flag49\n    local flag50\n    local flag51\n    local flag52\n    local flag53\n\
    \    local flag54\n    local flag55\n    local flag56\n    local flag57\n    local\
    \ flag58\n    local flag59\n    local flag60\n    local flag61\n    local flag62\n\
    \    local flag63\n    local flag64\n    local flag65\n    local flag66\n    local\
    \ flag67\n    local flag68\n    local flag69\n    local flag70\n    local flag71\n\
    \    local flag72\n    local flag73\n    local flag74\n    local flag75\n    local\
    \ flag76\n    local flag77\n    local flag78\n    local flag79\n    local flag80\n\
    \    local flag81\n    local flag82\n    local flag83\n    local flag84\n    local\
    \ flag85\n    local flag86\n    local flag87\n    local flag88\n    local flag89\n\
    \    local flag90\n    local flag91\n    local flag92\n    local flag93\n    local\
    \ flag\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    local result\n    sum=$(echo \"$array\" | awk\
    \ '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo\
    \ \"$array\"\n        return\n    fi\n    for ((i=0; i<${#array[@]}-1; i++));\
    \ do\n        sum=$(echo \"$array[$i]\" | awk '{sum+=$1} END {print sum}')\n \
    \       if [ $((sum%2)) -eq 1 ]; then\n            echo \"$array[$i]\"\n     \
    \       return\n        fi\n    done\n    echo \"$array\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n \
    \   local len\n    local tmp\n    local len\n    local tmp\n    local len\n  \
    \  local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n   \
    \ local len\n    local tmp\n    local len\n    local tmp\n    local len\n    local\
    \ tmp\n    local len\n    local tmp\n    local len\n    local tmp\n    local len\n\
    \    local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n \
    \   local len\n    local tmp\n    local len\n    local tmp\n    local len\n  \
    \  local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n   \
    \ local len\n    local tmp\n    local len\n    local tmp\n    local len\n    local\
    \ tmp\n    local len\n    local tmp\n    local len\n    local tmp\n    local len\n\
    \    local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n \
    \   local len\n    local tmp\n    local len\n    local tmp\n    local len\n  \
    \  local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n   \
    \ local len\n    local tmp\n    local len\n    local tmp\n    local len\n    local\
    \ tmp\n    local len\n    local tmp\n    local len\n    local tmp\n    local len\n\
    \    local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n \
    \   local len\n    local tmp\n    local len\n    local tmp\n    local len\n  \
    \  local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n   \
    \ local len\n    local tmp\n    local len\n    local tmp\n    local len\n    local\
    \ tmp\n    local len\n    local tmp\n    local len\n    local tmp\n    local len\n\
    \    local tmp\n    local len\n    local tmp\n    local len\n    local tmp\n \
    \   local len\n    local tmp\n    local len\n    local tmp\n    local len\n  \
    \  local tmp\n    local len\n    local tmp\n    local len\n    local \n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local len\n    local\
    \ i\n    local j\n    local k\n    local temp\n    local sorted\n    local result\n\
    \    local sum1\n    local sum2\n    local sum3\n    local sum4\n    local sum5\n\
    \    local sum6\n    local sum7\n    local sum8\n    local sum9\n    local sum10\n\
    \    local sum11\n    local sum12\n    local sum13\n    local sum14\n    local\
    \ sum15\n    local sum16\n    local sum17\n    local sum18\n    local sum19\n\
    \    local sum20\n    local sum21\n    local sum22\n    local sum23\n    local\
    \ sum24\n    local sum25\n    local sum26\n    local sum27\n    local sum28\n\
    \    local sum29\n    local sum30\n    local sum31\n    local sum32\n    local\
    \ sum33\n    local sum34\n    local sum35\n    local sum36\n    local sum37\n\
    \    local sum38\n    local sum39\n    local sum40\n    local sum41\n    local\
    \ sum42\n    local sum43\n    local sum44\n    local sum45\n    local sum46\n\
    \    local sum47\n    local sum48\n    local sum49\n    local sum50\n    local\
    \ sum51\n    local sum52\n    local sum53\n    local sum54\n    local sum55\n\
    \    local sum56\n    local sum57\n    local sum58\n    local sum59\n    local\
    \ sum60\n    local sum61\n    local sum62\n    local sum63\n    local sum64\n\
    \    local sum65\n    local sum66\n    local sum67\n    local sum68\n    local\
    \ sum69\n    local sum70\n    local sum71\n    local sum72\n    local sum73\n\
    \    local sum74\n    local sum75\n    local sum76\n    local sum77\n    local\
    \ sum78\n    local sum79\n    local sum80\n    local sum81\n    local sum82\n\
    \    local sum83\n    local sum84\n    local sum85\n    local sum86\n    local\
    \ sum87\n    local sum88\n    local sum89\n    local sum90\n    local sum91\n\
    \    local sum92\n    local sum93\n    local sum94\n    local sum95\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    local len\n    local odd\n    local even\n    local result\n\
    \    local count\n    local i\n    local j\n    local temp\n    local len\n  \
    \  local odd\n    local even\n    local result\n    local count\n    local i\n\
    \    local j\n    local temp\n    local len\n    local odd\n    local even\n \
    \   local result\n    local count\n    local i\n    local j\n    local temp\n\
    \    local len\n    local odd\n    local even\n    local result\n    local count\n\
    \    local i\n    local j\n    local temp\n    local len\n    local odd\n    local\
    \ even\n    local result\n    local count\n    local i\n    local j\n    local\
    \ temp\n    local len\n    local odd\n    local even\n    local result\n    local\
    \ count\n    local i\n    local j\n    local temp\n    local len\n    local odd\n\
    \    local even\n    local result\n    local count\n    local i\n    local j\n\
    \    local temp\n    local len\n    local odd\n    local even\n    local result\n\
    \    local count\n    local i\n    local j\n    local temp\n    local len\n  \
    \  local odd\n    local even\n    local result\n    local count\n    local i\n\
    \    local j\n    local temp\n    local len\n    local odd\n    local even\n \
    \   local result\n    local count\n    local i\n    local j\n    local temp\n\
    \    local len\n    local odd\n    local even\n    local result\n    local count\n\
    \    local i\n    local j\n    local temp\n    local len\n    local odd\n    local\
    \ even\n    local result\n    local count\n    local i\n    local j\n    local\
    \ temp\n    local len\n    local odd\n    local even\n    local result\n    local\
    \ count\n    local i\n    local j\n    local temp\n    local len\n    local odd\n\
    \    local even\n    local result\n    local count\n    local i\n    local j\n\
    \    local temp\n    local len\n    local odd\n    local even\n    local result\n\
    \    local count\n    local i\n    local j\n    local temp\n    local len\n  \
    \  local odd\n    local \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local flag\n    local flag2\n\
    \    local flag3\n    local flag4\n    local flag5\n    local flag6\n    local\
    \ flag7\n    local flag8\n    local flag9\n    local flag10\n    local flag11\n\
    \    local flag12\n    local flag13\n    local flag14\n    local flag15\n    local\
    \ flag16\n    local flag17\n    local flag18\n    local flag19\n    local flag20\n\
    \    local flag21\n    local flag22\n    local flag23\n    local flag24\n    local\
    \ flag25\n    local flag26\n    local flag27\n    local flag28\n    local flag29\n\
    \    local flag30\n    local flag31\n    local flag32\n    local flag33\n    local\
    \ flag34\n    local flag35\n    local flag36\n    local flag37\n    local flag38\n\
    \    local flag39\n    local flag40\n    local flag41\n    local flag42\n    local\
    \ flag43\n    local flag44\n    local flag45\n    local flag46\n    local flag47\n\
    \    local flag48\n    local flag49\n    local flag50\n    local flag51\n    local\
    \ flag52\n    local flag53\n    local flag54\n    local flag55\n    local flag56\n\
    \    local flag57\n    local flag58\n    local flag59\n    local flag60\n    local\
    \ flag61\n    local flag62\n    local flag63\n    local flag64\n    local flag65\n\
    \    local flag66\n    local flag67\n    local flag68\n    local flag69\n    local\
    \ flag70\n    local flag71\n    local flag72\n    local flag73\n    local flag74\n\
    \    local flag75\n    local flag76\n    local flag77\n    local flag78\n    local\
    \ flag79\n    local flag80\n    local flag81\n    local flag82\n    local flag83\n\
    \    local flag84\n    local flag85\n    local flag86\n    local flag87\n    local\
    \ flag88\n    local flag89\n    local flag90\n    local flag91\n    local flag92\n\
    \    local flag93\n    local flag94\n    local flag95\n    local flag96\n    local\
    \ flag\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    local result\n    sum=$(echo \"$array\" | awk\
    \ '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo\
    \ \"$array is even\"\n    else\n        echo \"$array is odd\"\n    fi\n    local\
    \ length=$((${#array[@]}-1))\n    for (( i=0; i<$length; i++ )); do\n        local\
    \ j=$((i+1))\n        local temp=$((${array[$i]}+${array[$j]}))\n        array[$i]=$temp\n\
    \        array[$j]=$temp\n    done\n    for (( i=0; i<$length; i++ )); do\n  \
    \      result=$((${array[$i]}+${array[$((i+1))]}))\n        if [ $((result%2))\
    \ -eq 1 ]; then\n            array[$i]=$result\n        else\n            array[$i]=$((result-1))\n\
    \        fi\n    done\n    local length=$((${#array[@]}-1))\n    for (( i=0; i<$length;\
    \ i++ )); do\n        result=$((${array[$i]}+${array[$((i+1))]}))\n        if\
    \ [ $((result%2)) -eq 1 ]; then\n            array[$i]=$result\n        else\n\
    \            array[$i]=$((result-1))\n        fi\n    done\n    local length=$((${#array[@]}-1))\n\
    \    for (( i=0; i<$length; i++ )); do\n        result=$((${array[$i]}+${array[$((i+1))]}))\n\
    \        if [ $((result%2)) -eq 1 ]; then\n            array[$i]=$result\n   \
    \     else\n            array[$i]=$((result-1))\n        fi\n    done\n    local\
    \ length=$((${#array[@]}-1))\n    for (( i=0; i<$length; i++ )); do\n        result=$((${array[$i]}+${array[$((i+1))]}))\n\
    \        if [ $((result%2)) -eq 1 ]; then\n            array[$i]=$result\n   \
    \     else\n            array[$i]=$((result-1))\n        fi\n    done\n    local\
    \ length=$((${#array[@]}-1))\n    for (( i=0; i<$length; i++ )); do\n        result=$((${array[$i]}+${array[$((i+1))]}))\n\
    \        if [ $((result%2)) -eq 1 ]; then\n            array[$i]=$result\n   \
    \     else\n            array[$i]=$\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpon2t7n75.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmpon2t7n75.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local tmp\n    local len\n    local odd\n    local\
    \ even\n    local temp\n    local result\n\n    sum=$(echo \"${arr[@]}\" | awk\
    \ '{sum+=$1} END {print sum}')\n    odd=$(echo \"${sum}\" | awk '{print (sum%2)}')\n\
    \    even=$(echo \"${sum}\" | awk '{print (sum%2)}')\n    len=${#arr[@]}\n   \
    \ temp=${arr[0]}\n    arr[0]=${arr[1]}\n    arr[1]=${arr[$len]}\n    arr[$len]=$temp\n\
    \    arr=(\"${arr[@]}\")\n    i=0\n    j=0\n    k=0\n    while [ $i -lt $len ];\
    \ do\n        if [ $j -eq $len ]; then\n            tmp=${arr[$i]}\n         \
    \   arr[$i]=${arr[$j]}\n            arr[$j]=$tmp\n            arr=(\"${arr[@]}\"\
    )\n            i=$((i+1))\n            j=$((j+1))\n        fi\n        if [ $odd\
    \ -eq 1 ]; then\n            tmp=${arr[$i]}\n            arr[$i]=${arr[$j]}\n\
    \            arr[$j]=$tmp\n            arr=(\"${arr[@]}\")\n            i=$((i+1))\n\
    \            j=$((j+1))\n        else\n            tmp=${arr[$i]}\n          \
    \  arr[$i]=${arr[$j]}\n            arr[$j]=$tmp\n            arr=(\"${arr[@]}\"\
    )\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    result=$(echo\
    \ \"${arr[@]}\" | awk '{print ($1+$2)}')\n    echo \"${result}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local result=()\n    local temp=()\n    local flag=0\n    local\
    \ flag2=0\n    local flag3=0\n    local flag4=0\n    local flag5=0\n    local\
    \ flag6=0\n    local flag7=0\n    local flag8=0\n    local flag9=0\n    local\
    \ flag10=0\n    local flag11=0\n    local flag12=0\n    local flag13=0\n    local\
    \ flag14=0\n    local flag15=0\n    local flag16=0\n    local flag17=0\n    local\
    \ flag18=0\n    local flag19=0\n    local flag20=0\n    local flag21=0\n    local\
    \ flag22=0\n    local flag23=0\n    local flag24=0\n    local flag25=0\n    local\
    \ flag26=0\n    local flag27=0\n    local flag28=0\n    local flag29=0\n    local\
    \ flag30=0\n    local flag31=0\n    local flag32=0\n    local flag33=0\n    local\
    \ flag34=0\n    local flag35=0\n    local flag36=0\n    local flag37=0\n    local\
    \ flag38=0\n    local flag39=0\n    local flag40=0\n    local flag41=0\n    local\
    \ flag42=0\n    local flag43=0\n    local flag44=0\n    local flag45=0\n    local\
    \ flag46=0\n    local flag47=0\n    local flag48=0\n    local flag49=0\n    local\
    \ flag50=0\n    local flag51=0\n    local flag52=0\n    local flag53=0\n    local\
    \ flag54=0\n    local flag55=0\n    local flag56=0\n    local flag57=0\n    local\
    \ flag58=0\n    local flag59=0\n    local flag60=0\n    local flag61=0\n    local\
    \ flag62=0\n    local flag63=0\n    local flag64=0\n    local flag65=0\n    local\
    \ flag66=0\n    local flag67=0\n    local flag68=0\n    local flag69=0\n    local\
    \ flag70=0\n    local flag71=0\n    local flag72=0\n    local flag73=0\n    local\
    \ flag74=0\n    local flag75=0\n    local flag76=0\n    local flag77=0\n    local\
    \ flag78=0\n    local flag79=0\n    local flag80=0\n    \n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local index\n\
    \    local length\n    local i\n    local j\n    local k\n    local temp\n   \
    \ local result\n    local odd\n    local even\n    local first\n    local last\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(( ${arr[0]} + ${arr[1]} ))\n    arr=(\
    \ ${arr[@]:0:1} )\n    arr=( ${arr[@]:1:${#arr[@]}} )\n    for (( i=1; i<${#arr[@]};\
    \ i++ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [[ ${sum} -eq\
    \ 0 ]]; then\n        echo \"${arr[@]}\"\n        return\n    fi\n    if [[ ${sum}\
    \ -eq 1 ]]; then\n        arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}}\
    \ )\n        arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n \
    \       arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n      \
    \  arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n        arr=(\
    \ ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n        arr=( ${arr[@]:0:1}\
    \ )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n        arr=( ${arr[@]:0:1} )\n \
    \       arr=( ${arr[@]:1:${#arr[@]}} )\n        arr=( ${arr[@]:0:1} )\n      \
    \  arr=( ${arr[@]:1:${#arr[@]}} )\n        arr=( ${arr[@]:0:1} )\n        arr=(\
    \ ${arr[@]:1:${#arr[@]}} )\n        arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}}\
    \ )\n        arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n \
    \       arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n      \
    \  arr=( ${arr[@]:0:1} )\n        arr=( ${arr[@]:1:${#arr[@]}} )\n        arr=(\
    \ ${arr[@]:0:\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu14k7r6i.sh: line 57: syntax error near unexpected token `(''

    /tmp/tmpu14k7r6i.sh: line 57: `candidate() {''

    /tmp/tmpu14k7r6i.sh: line 58: sort_array: command not found

    /tmp/tmpu14k7r6i.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpu14k7r6i.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local tmp\n    local len\n    local flag\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=( $1 )\n    local sum=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local i\n  local\
    \ j\n  local result\n  sum=$(echo \"$array\" | awk '{sum+=$1} END {print sum}')\n\
    \  result=()\n  for i in \"${array[@]}\"; do\n    for j in \"${array[@]}\"; do\n\
    \      if [ \"$i\" -gt \"$j\" ]; then\n        if [ \"$sum\" -gt \"$((sum+j))\"\
    \ ]; then\n          result+=(\"$i\")\n        fi\n      fi\n    done\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp1m8snzw3.sh: line 20: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$arr\"\n        return\n\
    \    fi\n    for ((i=0;i<${#arr[@]};i++)); do\n        k=i\n        while [ $((k--))\
    \ -ge 0 ] && [ $((k--)) -le ${#arr[@]} ]; do\n            if [ $((sum-arr[k]))\
    \ -eq 0 ]; then\n                tmp=${arr[k]}\n                arr[k]=${arr[k+1]}\n\
    \                arr[k+1]=${tmp}\n            fi\n        done\n    done\n   \
    \ echo \"${arr[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoovmlxve.sh: line 25: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    local result\n    sum=$(echo \"$array\" | awk\
    \ '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo\
    \ \"$array is sorted in descending order\"\n    else\n        echo \"$array is\
    \ sorted in ascending order\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local tmp\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local temp2\n    local temp3\n\
    \    local temp4\n    local temp5\n    local temp6\n    local temp7\n    local\
    \ temp8\n    local temp9\n    local temp10\n    local temp11\n    local temp12\n\
    \    local temp13\n    local temp14\n    local temp15\n    local temp16\n    local\
    \ temp17\n    local temp18\n    local temp19\n    local temp20\n    local temp21\n\
    \    local temp22\n    local temp23\n    local temp24\n    local temp25\n    local\
    \ temp26\n    local temp27\n    local temp28\n    local temp29\n    local temp30\n\
    \    local temp31\n    local temp32\n    local temp33\n    local temp34\n    local\
    \ temp35\n    local temp36\n    local temp37\n    local temp38\n    local temp39\n\
    \    local temp40\n    local temp41\n    local temp42\n    local temp43\n    local\
    \ temp44\n    local temp45\n    local temp46\n    local temp47\n    local temp48\n\
    \    local temp49\n    local temp50\n    local temp51\n    local temp52\n    local\
    \ temp53\n    local temp54\n    local temp55\n    local temp56\n    local temp57\n\
    \    local temp58\n    local temp59\n    local temp60\n    local temp61\n    local\
    \ temp62\n    local temp63\n    local temp64\n    local temp65\n    local temp66\n\
    \    local temp67\n    local temp68\n    local temp69\n    local temp70\n    local\
    \ temp71\n    local temp72\n    local temp73\n    local temp74\n    local temp75\n\
    \    local temp76\n    local temp77\n    local temp78\n    local temp79\n    local\
    \ temp80\n    local temp81\n    local temp82\n    local temp83\n    local temp84\n\
    \    local temp85\n    local temp86\n    local temp87\n    local temp88\n    local\
    \ temp89\n    local temp90\n    local temp91\n    local temp92\n    local temp93\n\
    \    local temp94\n    local temp95\n    local temp96\n    local temp97\n    local\
    \ \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4\
    \ 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n\
    \    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate\
    \ \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [ $(( sum % 2 ))\
    \ -eq 1 ]; then\n        arr=( $(sort -n ${arr[@]}) )\n    else\n        arr=(\
    \ $(sort -n -r ${arr[@]}) )\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpta69irz3.sh: line 19: sum +  : syntax error: operand expected (error
    token is "+  ")

    sort: cannot read: 5: No such file or directory

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    sum=0\n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        sum=$(( sum + ${array[i]} ))\n    done\n    if [ $(( sum % 2 ))\
    \ -eq 1 ]; then\n        echo \"${array[@]}\"\n    else\n        echo \"${array[@]}\"\
    \ | sort -n\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkujt6gg3.sh: line 18: sum +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmpkujt6gg3.sh: line 18: sum + 2 4 3 0 1 5 : syntax error in expression (error
    token is "4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n\n    sum=$(( ${arr[0]} + ${arr[${#arr[@]}-1]}\
    \ ))\n    len=${#arr[@]}\n    for (( i=0; i<${len}; i++ )); do\n        if [ $((\
    \ ${arr[i]} + ${arr[i+1]} )) -gt $sum ]; then\n            tmp=${arr[i]}\n   \
    \         arr[i]=${arr[i+1]}\n            arr[i+1]=${tmp}\n        fi\n    done\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprc9vcwun.sh: line 19: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmprc9vcwun.sh: line 22: 5 +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local temp\n    local result\n    local odd\n    local even\n\
    \    local length\n    length=${#array[@]}\n    odd=false\n    even=false\n  \
    \  while [ $i -lt $length ]; do\n        sum=$(( $sum + ${array[$i]} ))\n    \
    \    i=$(( $i + 1 ))\n    done\n    if [ $sum -gt 0 ]; then\n        odd=true\n\
    \    else\n        even=true\n    fi\n    if [ $odd -eq true ]; then\n       \
    \ length=${#array[@]}\n        i=$(( $length - 1 ))\n        while [ $i -gt 0\
    \ ]; do\n            temp=${array[$i]}\n            array[$i]=${array[$(( $i -\
    \ 1 ))]}\n            array[$(( $i - 1 ))]=$temp\n            i=$(( $i - 1 ))\n\
    \        done\n    fi\n    if [ $even -eq true ]; then\n        length=${#array[@]}\n\
    \        j=$(( $length - 1 ))\n        while [ $j -gt 0 ]; do\n            temp=${array[$j]}\n\
    \            array[$j]=${array[$(( $j - 1 ))]}\n            array[$(( $j - 1 ))]=$temp\n\
    \            j=$(( $j - 1 ))\n        done\n    fi\n    result=()\n    for element\
    \ in \"${array[@]}\"; do\n        result+=(\"$element\")\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2zkewrtc.sh: line 24: 0 +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmp2zkewrtc.sh: line 32: [: true: integer expression expected

    /tmp/tmp2zkewrtc.sh: line 42: [: false: integer expression expected

    /tmp/tmp2zkewrtc.sh: line 24: 0 + 2 4 3 0 1 5 : syntax error in expression (error
    token is "4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum % 2)) -eq 1 ]; then\n        echo \"$arr\"\n    else\n\
    \        echo \"$arr | sort -n\"\n    fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local sum1\n    local sum2\n \
    \   local sum3\n    local sum4\n    local sum5\n    local sum6\n    local sum7\n\
    \    local sum8\n    local sum9\n    local sum10\n    local sum11\n    local sum12\n\
    \    local sum13\n    local sum14\n    local sum15\n    local sum16\n    local\
    \ sum17\n    local sum18\n    local sum19\n    local sum20\n    local sum21\n\
    \    local sum22\n    local sum23\n    local sum24\n    local sum25\n    local\
    \ sum26\n    local sum27\n    local sum28\n    local sum29\n    local sum30\n\
    \    local sum31\n    local sum32\n    local sum33\n    local sum34\n    local\
    \ sum35\n    local sum36\n    local sum37\n    local sum38\n    local sum39\n\
    \    local sum40\n    local sum41\n    local sum42\n    local sum43\n    local\
    \ sum44\n    local sum45\n    local sum46\n    local sum47\n    local sum48\n\
    \    local sum49\n    local sum50\n    local sum51\n    local sum52\n    local\
    \ sum53\n    local sum54\n    local sum55\n    local sum56\n    local sum57\n\
    \    local sum58\n    local sum59\n    local sum60\n    local sum61\n    local\
    \ sum62\n    local sum63\n    local sum64\n    local sum65\n    local sum66\n\
    \    local sum67\n    local sum68\n    local sum69\n    local sum70\n    local\
    \ sum71\n    local sum72\n    local sum73\n    local sum74\n    local sum75\n\
    \    local sum76\n    local sum77\n    local sum78\n    local sum79\n    local\
    \ sum80\n    local sum81\n    local sum82\n    local sum83\n    local sum84\n\
    \    local sum85\n    local sum86\n    local sum87\n    local sum88\n    local\
    \ sum89\n    local sum90\n    local sum91\n    local sum92\n    local sum93\n\
    \    local sum94\n    local sum95\n    local sum96\n    local sum\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local sum1\n    local sum2\n    local sum3\n    local sum4\n\
    \    local sum5\n    local sum6\n    local sum7\n    local sum8\n    local sum9\n\
    \    local sum10\n    local sum11\n    local sum12\n    local sum13\n    local\
    \ sum14\n    local sum15\n    local sum16\n    local sum17\n    local sum18\n\
    \    local sum19\n    local sum20\n    local sum21\n    local sum22\n    local\
    \ sum23\n    local sum24\n    local sum25\n    local sum26\n    local sum27\n\
    \    local sum28\n    local sum29\n    local sum30\n    local sum31\n    local\
    \ sum32\n    local sum33\n    local sum34\n    local sum35\n    local sum36\n\
    \    local sum37\n    local sum38\n    local sum39\n    local sum40\n    local\
    \ sum41\n    local sum42\n    local sum43\n    local sum44\n    local sum45\n\
    \    local sum46\n    local sum47\n    local sum48\n    local sum49\n    local\
    \ sum50\n    local sum51\n    local sum52\n    local sum53\n    local sum54\n\
    \    local sum55\n    local sum56\n    local sum57\n    local sum58\n    local\
    \ sum59\n    local sum60\n    local sum61\n    local sum62\n    local sum63\n\
    \    local sum64\n    local sum65\n    local sum66\n    local sum67\n    local\
    \ sum68\n    local sum69\n    local sum70\n    local sum71\n    local sum72\n\
    \    local sum73\n    local sum74\n    local sum75\n    local sum76\n    local\
    \ sum77\n    local sum78\n    local sum79\n    local sum80\n    local sum81\n\
    \    local sum82\n    local sum83\n    local sum84\n    local sum85\n    local\
    \ sum86\n    local sum87\n    local sum88\n    local sum89\n    local sum90\n\
    \    local sum91\n    local sum92\n    local sum93\n    local sum94\n    local\
    \ sum95\n    local sum96\n    local sum97\n    local sum98\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    local len\n    local flag\n\n    sum=$(echo $array |\
    \ awk '{sum+=$1} END {print sum}')\n    len=$(echo $array | wc -w)\n    flag=0\n\
    \    for ((i=0; i<len; i++)); do\n        if [ $((sum % 2)) -eq 1 ]; then\n  \
    \          temp=$(echo $array | awk -v i=$i -v sum=$sum '{if($i<sum) print $i}')\n\
    \            array=$(echo $array | awk -v i=$i -v sum=$sum '{if($i>sum) print\
    \ $i}')\n            array=$(echo $temp | tr ' ' '\\n' | sort -n)\n          \
    \  flag=1\n        else\n            temp=$(echo $array | awk -v i=$i -v sum=$sum\
    \ '{if($i>sum) print $i}')\n            array=$(echo $array | awk -v i=$i -v sum=$sum\
    \ '{if($i<sum) print $i}')\n            array=$(echo $temp | tr ' ' '\\n' | sort\
    \ -r)\n            flag=0\n        fi\n    done\n    if [ $flag ==1 ]; then\n\
    \        echo \"$array\"\n    else\n        echo \"$array\"\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzvsqzreo.sh: line 35: [: 0: unary operator expected

    /tmp/tmpzvsqzreo.sh: line 35: [: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local result\n    local count\n    local sum1\n    local sum2\n\
    \    local sum3\n    local sum4\n    local sum5\n    local sum6\n    local sum7\n\
    \    local sum8\n    local sum9\n    local sum10\n    local sum11\n    local sum12\n\
    \    local sum13\n    local sum14\n    local sum15\n    local sum16\n    local\
    \ sum17\n    local sum18\n    local sum19\n    local sum20\n    local sum21\n\
    \    local sum22\n    local sum23\n    local sum24\n    local sum25\n    local\
    \ sum26\n    local sum27\n    local sum28\n    local sum29\n    local sum30\n\
    \    local sum31\n    local sum32\n    local sum33\n    local sum34\n    local\
    \ sum35\n    local sum36\n    local sum37\n    local sum38\n    local sum39\n\
    \    local sum40\n    local sum41\n    local sum42\n    local sum43\n    local\
    \ sum44\n    local sum45\n    local sum46\n    local sum47\n    local sum48\n\
    \    local sum49\n    local sum50\n    local sum51\n    local sum52\n    local\
    \ sum53\n    local sum54\n    local sum55\n    local sum56\n    local sum57\n\
    \    local sum58\n    local sum59\n    local sum60\n    local sum61\n    local\
    \ sum62\n    local sum63\n    local sum64\n    local sum65\n    local sum66\n\
    \    local sum67\n    local sum68\n    local sum69\n    local sum70\n    local\
    \ sum71\n    local sum72\n    local sum73\n    local sum74\n    local sum75\n\
    \    local sum76\n    local sum77\n    local sum78\n    local sum79\n    local\
    \ sum80\n    local sum81\n    local sum82\n    local sum83\n    local sum84\n\
    \    local sum85\n    local sum86\n    local sum87\n    local sum88\n    local\
    \ sum89\n    local sum90\n    local sum91\n    local sum92\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local flag\n    local temp2\n\
    \    local temp3\n    local temp4\n    local temp5\n    local temp6\n    local\
    \ temp7\n    local temp8\n    local temp9\n    local temp10\n    local temp11\n\
    \    local temp12\n    local temp13\n    local temp14\n    local temp15\n    local\
    \ temp16\n    local temp17\n    local temp18\n    local temp19\n    local temp20\n\
    \    local temp21\n    local temp22\n    local temp23\n    local temp24\n    local\
    \ temp25\n    local temp26\n    local temp27\n    local temp28\n    local temp29\n\
    \    local temp30\n    local temp31\n    local temp32\n    local temp33\n    local\
    \ temp34\n    local temp35\n    local temp36\n    local temp37\n    local temp38\n\
    \    local temp39\n    local temp40\n    local temp41\n    local temp42\n    local\
    \ temp43\n    local temp44\n    local temp45\n    local temp46\n    local temp47\n\
    \    local temp48\n    local temp49\n    local temp50\n    local temp51\n    local\
    \ temp52\n    local temp53\n    local temp54\n    local temp55\n    local temp56\n\
    \    local temp57\n    local temp58\n    local temp59\n    local temp60\n    local\
    \ temp61\n    local temp62\n    local temp63\n    local temp64\n    local temp65\n\
    \    local temp66\n    local temp67\n    local temp68\n    local temp69\n    local\
    \ temp70\n    local temp71\n    local temp72\n    local temp73\n    local temp74\n\
    \    local temp75\n    local temp76\n    local temp77\n    local temp78\n    local\
    \ temp79\n    local temp80\n    local temp81\n    local temp82\n    local temp83\n\
    \    local temp84\n    local temp85\n    local temp86\n    local temp87\n    local\
    \ temp88\n    local temp89\n    local temp90\n    local temp91\n    local temp92\n\
    \    local temp93\n    local temp94\n    local temp95\n    local temp96\n    local\
    \ temp\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local count\n    local odd\n    local even\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp93\n    local temp94\n    local temp95\n    local\
    \ temp96\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [ $(( sum % 2 )) -eq\
    \ 1 ]; then\n        arr=($(sort -n -k 1 -k ${#arr[@]} <<< \"${arr[@]}\" ))\n\
    \    else\n        arr=($(sort -n -k 1 -k ${#arr[@]} -r -k ${#arr[@]} <<< \"${arr[@]}\"\
    \ ))\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa_do8bmx.sh: line 19: sum +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local res\n\n    sum=$(echo\
    \ \"${arr[@]}\" | awk '{sum+=$1} END {print sum}')\n    len=${#arr[@]}\n\n   \
    \ for (( i=1; i<len; i++ )); do\n        for (( j=i; j<len; j++ )); do\n     \
    \       if (( ${arr[i]} > ${arr[j]} )); then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=${temp}\n          \
    \  fi\n        done\n    done\n\n    for (( k=0; k<len; k++ )); do\n        res+=\"\
    ${arr[k]} \"\n    done\n\n    echo \"${res}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( ${#arr} / 2 )) ]; then\n        echo \"$arr\"\n\
    \        return\n    fi\n    for (( i=1; i<${#arr}; i++ )); do\n        for ((\
    \ j=0; j<i; j++ )); do\n            if [ $(( ${arr[i]} + ${arr[j]} )) -gt $((\
    \ ${arr[i]} + ${arr[j]} )) ]; then\n                tmp=${arr[i]}\n          \
    \      arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n       \
    \ done\n    done\n    echo \"$arr\"\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9w0ivc35.sh: line 24: + 2 4 3 0 1 5 : syntax error in expression
    (error token is "4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    sum=$(echo\
    \ $arr | awk '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n\
    \        echo \"${arr[@]}\"\n    else\n        echo \"${arr[@]}\" | sort -n -k\
    \ 2 -r | awk '{print $2}'\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local sum1\n\
    \    local sum2\n    local i\n    local j\n    local k\n    local temp\n    sum=$(echo\
    \ \"$array\" | awk '{sum+=$1} END {print sum}')\n    sum1=$(echo \"$array\" |\
    \ awk '{sum1+=$1} END {print sum1}')\n    sum2=$(echo \"$array\" | awk '{sum2+=$1}\
    \ END {print sum2}')\n    if [ $sum -eq 0 ]; then\n        echo \"$array\"\n \
    \       return\n    fi\n    if [ $sum1 -eq 0 ]; then\n        echo \"$array\"\n\
    \        return\n    fi\n    if [ $sum2 -eq 0 ]; then\n        echo \"$array\"\
    \n        return\n    fi\n    if [ $sum -eq $sum1 ]; then\n        if [ $sum -eq\
    \ $sum2 ]; then\n            echo \"$array\"\n            return\n        fi\n\
    \        echo \"$array\"\n        return\n    fi\n    if [ $sum1 -eq $sum2 ];\
    \ then\n        echo \"$array\"\n        return\n    fi\n    if [ $sum2 -eq $sum1\
    \ ]; then\n        echo \"$array\"\n        return\n    fi\n    if [ $sum -eq\
    \ $sum1 -a $sum1 -eq $sum2 ]; then\n        echo \"$array\"\n        return\n\
    \    fi\n    if [ $sum1 -eq $sum2 -a $sum1 -eq $sum2 ]; then\n        echo \"\
    $array\"\n        return\n    fi\n    if [ $sum2 -eq $sum1 -a $sum1 -eq $sum2\
    \ ]; then\n        echo \"$array\"\n        return\n    fi\n    if [ $sum -eq\
    \ $sum1 -a $sum2 -eq $sum1 ]; then\n        echo \"$array\"\n        return\n\
    \    fi\n    if [ $sum1 -eq $sum2 -a $sum2 -eq $sum1 ]; then\n        echo \"\
    $array\"\n        return\n    fi\n    if [ $sum2 -eq $sum1 -a $sum2 -eq $sum1\
    \ ]; then\n        echo \"$array\"\n        return\n    fi\n    if [ $sum -eq\
    \ $sum1 -a $sum2 -eq $sum2 ]; then\n        echo \"$array\"\n        return\n\
    \    fi\n    if [ $sum1 -eq $sum2 -a $sum2 -eq $sum2 ]; then\n        echo \"\
    $array\"\n        return\n    fi\n    if [ $sum2 -eq $sum1 -a $sum2 -eq $sum2\
    \ ]; then\n        echo \"$array\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi8n7z3vm.sh: line 98: unexpected EOF while looking for matching
    `"''

    /tmp/tmpi8n7z3vm.sh: line 102: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local count\n    local odd\n    local even\n\
    \    local temp2\n    local count2\n    local odd2\n    local even2\n    local\
    \ temp3\n    local count3\n    local odd3\n    local even3\n    local temp4\n\
    \    local count4\n    local odd4\n    local even4\n    local temp5\n    local\
    \ count5\n    local odd5\n    local even5\n    local temp6\n    local count6\n\
    \    local odd6\n    local even6\n    local temp7\n    local count7\n    local\
    \ odd7\n    local even7\n    local temp8\n    local count8\n    local odd8\n \
    \   local even8\n    local temp9\n    local count9\n    local odd9\n    local\
    \ even9\n    local temp10\n    local count10\n    local odd10\n    local even10\n\
    \    local temp11\n    local count11\n    local odd11\n    local even11\n    local\
    \ temp12\n    local count12\n    local odd12\n    local even12\n    local temp13\n\
    \    local count13\n    local odd13\n    local even13\n    local temp14\n    local\
    \ count14\n    local odd14\n    local even14\n    local temp15\n    local count15\n\
    \    local odd15\n    local even15\n    local temp16\n    local count16\n    local\
    \ odd16\n    local even16\n    local temp17\n    local count17\n    local odd17\n\
    \    local even17\n    local temp18\n    local count18\n    local odd18\n    local\
    \ even18\n    local temp19\n    local count19\n    local odd19\n    local even19\n\
    \    local temp20\n    local count20\n    local odd20\n    local even20\n    local\
    \ temp21\n    local count21\n    local odd21\n    local even21\n    local temp22\n\
    \    local count22\n    local odd22\n    local even22\n    local temp23\n    local\
    \ count23\n    local odd23\n    local even23\n    local temp24\n    local count24\n\
    \    local odd24\n    local even24\n    local temp25\n    local count25\n    local\
    \ odd25\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    local len\n    local flag\n\n    sum=$(( ${arr[0]} +\
    \ ${arr[${#arr[@]} - 1]} ))\n    flag=0\n    for (( i = 0; i < ${#arr[@]}; i++\
    \ )); do\n        if (( ${arr[i]} > sum )) ; then\n            flag=1\n      \
    \      break\n        fi\n    done\n    if [ $flag -eq 0 ] ; then\n        echo\
    \ \"$arr\"\n        return\n    fi\n\n    temp=${arr[0]}\n    arr[0]=${arr[${#arr[@]}\
    \ - 1]}\n    arr[${#arr[@]}-1]=${temp}\n\n    len=${#arr[@]}\n    for (( i = 1;\
    \ i < len; i++ )); do\n        sum=$(( ${arr[i]} + ${arr[i - 1]} ))\n        if\
    \ (( sum % 2 )) ; then\n            temp=${arr[i]}\n            arr[i]=${arr[i\
    \ - 1]}\n            arr[i - 1]=${temp}\n        fi\n    done\n\n    echo \"$arr\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv8odf_01.sh: line 19: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmpv8odf_01.sh: line 19: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax error in expression
    (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$arr\" | sort -n -k\
    \ 1\n    else\n        echo \"$arr\" | sort -n -k 2\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp93\n    local temp94\n    local temp95\n    local\
    \ temp96\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print sum}')\n\
    \    if [ $((sum % 2)) -eq 1 ]; then\n        echo \"$arr\"\n    else\n      \
    \  echo \"$arr | sort -n -r\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp93\n    local temp94\n    local temp95\n    local\
    \ temp96\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo \"$array\"\n\
    \    else\n        echo \"$array\" | sort -n -r\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    local len\n    local flag\n    local temp2\n    local\
    \ temp3\n    local temp4\n    local temp5\n    local temp6\n    local temp7\n\
    \    local temp8\n    local temp9\n    local temp10\n    local temp11\n    local\
    \ temp12\n    local temp13\n    local temp14\n    local temp15\n    local temp16\n\
    \    local temp17\n    local temp18\n    local temp19\n    local temp20\n    local\
    \ temp21\n    local temp22\n    local temp23\n    local temp24\n    local temp25\n\
    \    local temp26\n    local temp27\n    local temp28\n    local temp29\n    local\
    \ temp30\n    local temp31\n    local temp32\n    local temp33\n    local temp34\n\
    \    local temp35\n    local temp36\n    local temp37\n    local temp38\n    local\
    \ temp39\n    local temp40\n    local temp41\n    local temp42\n    local temp43\n\
    \    local temp44\n    local temp45\n    local temp46\n    local temp47\n    local\
    \ temp48\n    local temp49\n    local temp50\n    local temp51\n    local temp52\n\
    \    local temp53\n    local temp54\n    local temp55\n    local temp56\n    local\
    \ temp57\n    local temp58\n    local temp59\n    local temp60\n    local temp61\n\
    \    local temp62\n    local temp63\n    local temp64\n    local temp65\n    local\
    \ temp66\n    local temp67\n    local temp68\n    local temp69\n    local temp70\n\
    \    local temp71\n    local temp72\n    local temp73\n    local temp74\n    local\
    \ temp75\n    local temp76\n    local temp77\n    local temp78\n    local temp79\n\
    \    local temp80\n    local temp81\n    local temp82\n    local temp83\n    local\
    \ temp84\n    local temp85\n    local temp86\n    local temp87\n    local temp88\n\
    \    local temp89\n    local temp90\n    local temp91\n    local temp92\n    local\
    \ temp93\n    local temp94\n    local temp95\n    local temp96\n    local temp97\n\
    \    local \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    sum=$(echo \"$array\" | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( ${#array[@]} % 2 )) ]; then\n        echo \"$array\"\
    \n        return\n    fi\n    for (( i=1; i<${#array[@]}; i++ )); do\n       \
    \ for (( j=i+1; j<${#array[@]}; j++ )); do\n            if [ $(( ${array[$i]}\
    \ + ${array[$j]} )) -gt $(( ${array[$i]} + ${array[$j]} )) ]; then\n         \
    \       temp=${array[$i]}\n                array[$i]=${array[$j]}\n          \
    \      array[$j]=$temp\n            fi\n        done\n    done\n    echo \"$array\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local len\n    local odd\n    local\
    \ even\n    local first\n    local last\n    local temp2\n    local temp3\n  \
    \  local temp4\n    local temp5\n    local temp6\n    local temp7\n    local temp8\n\
    \    local temp9\n    local temp10\n    local temp11\n    local temp12\n    local\
    \ temp13\n    local temp14\n    local temp15\n    local temp16\n    local temp17\n\
    \    local temp18\n    local temp19\n    local temp20\n    local temp21\n    local\
    \ temp22\n    local temp23\n    local temp24\n    local temp25\n    local temp26\n\
    \    local temp27\n    local temp28\n    local temp29\n    local temp30\n    local\
    \ temp31\n    local temp32\n    local temp33\n    local temp34\n    local temp35\n\
    \    local temp36\n    local temp37\n    local temp38\n    local temp39\n    local\
    \ temp40\n    local temp41\n    local temp42\n    local temp43\n    local temp44\n\
    \    local temp45\n    local temp46\n    local temp47\n    local temp48\n    local\
    \ temp49\n    local temp50\n    local temp51\n    local temp52\n    local temp53\n\
    \    local temp54\n    local temp55\n    local temp56\n    local temp57\n    local\
    \ temp58\n    local temp59\n    local temp60\n    local temp61\n    local temp62\n\
    \    local temp63\n    local temp64\n    local temp65\n    local temp66\n    local\
    \ temp67\n    local temp68\n    local temp69\n    local temp70\n    local temp71\n\
    \    local temp72\n    local temp73\n    local temp74\n    local temp75\n    local\
    \ temp76\n    local temp77\n    local temp78\n    local temp79\n    local temp80\n\
    \    local temp81\n    local temp82\n    local temp83\n    local temp84\n    local\
    \ temp85\n    local temp86\n    local temp87\n    local temp88\n    local temp89\n\
    \    local temp90\n    local temp91\n    local temp92\n    local temp93\n    local\
    \ temp94\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local sum1\n    local sum2\n    local sum3\n  \
    \  local sum4\n    local sum5\n    local sum6\n    local sum7\n    local sum8\n\
    \    local sum9\n    local sum10\n    local sum11\n    local sum12\n    local\
    \ sum13\n    local sum14\n    local sum15\n    local sum16\n    local sum17\n\
    \    local sum18\n    local sum19\n    local sum20\n    local sum21\n    local\
    \ sum22\n    local sum23\n    local sum24\n    local sum25\n    local sum26\n\
    \    local sum27\n    local sum28\n    local sum29\n    local sum30\n    local\
    \ sum31\n    local sum32\n    local sum33\n    local sum34\n    local sum35\n\
    \    local sum36\n    local sum37\n    local sum38\n    local sum39\n    local\
    \ sum40\n    local sum41\n    local sum42\n    local sum43\n    local sum44\n\
    \    local sum45\n    local sum46\n    local sum47\n    local sum48\n    local\
    \ sum49\n    local sum50\n    local sum51\n    local sum52\n    local sum53\n\
    \    local sum54\n    local sum55\n    local sum56\n    local sum57\n    local\
    \ sum58\n    local sum59\n    local sum60\n    local sum61\n    local sum62\n\
    \    local sum63\n    local sum64\n    local sum65\n    local sum66\n    local\
    \ sum67\n    local sum68\n    local sum69\n    local sum70\n    local sum71\n\
    \    local sum72\n    local sum73\n    local sum74\n    local sum75\n    local\
    \ sum76\n    local sum77\n    local sum78\n    local sum79\n    local sum80\n\
    \    local sum81\n    local sum82\n    local sum83\n    local sum84\n    local\
    \ sum85\n    local sum86\n    local sum87\n    local sum88\n    local sum89\n\
    \    local sum90\n    local sum91\n    local sum92\n    local sum93\n    local\
    \ sum94\n    local sum95\n    local sum96\n    local sum97\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo \"$arr\" | sort -n -k\
    \ 1\n    else\n        echo \"$arr\" | sort -n -k 3\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local temp\n    sum=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sum=$((sum+${arr[i]}))\n    done\n    if [ $((sum%2)) -eq\
    \ 1 ]; then\n        echo \"${arr[@]}\"\n    else\n        echo \"${arr[@]}\"\
    \ | sort -n\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7hgpk2tz.sh: line 19: sum+: syntax error: operand expected (error
    token is "+")

    /tmp/tmp7hgpk2tz.sh: line 19: sum+2 4 3 0 1 5: syntax error in expression (error
    token is "4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local sum1\n  \
    \  local sum2\n    local i\n    local j\n    local k\n    local len\n    local\
    \ tmp\n    local tmp1\n    local tmp2\n    local tmp3\n    local tmp4\n    local\
    \ tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local\
    \ tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n\
    \    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local\
    \ tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n\
    \    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local\
    \ tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n\
    \    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local\
    \ tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n\
    \    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local\
    \ tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n\
    \    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local\
    \ tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n\
    \    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local\
    \ tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n\
    \    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local\
    \ tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n\
    \    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local\
    \ tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n\
    \    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local\
    \ tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local tmp\n    local len\n    local flag\n\n    sum=$(echo $arr | awk\
    \ '{sum+=$1} END {print sum}')\n    len=$(echo $arr | wc -w)\n\n    if [ $(( $sum\
    \ % 2 )) -eq 1 ]; then\n        flag=1\n    else\n        flag=0\n    fi\n\n \
    \   for (( i=0; i<$len; i++ )); do\n        for (( j=$i; j<$len; j++ )); do\n\
    \            if [ $(( $arr[$i]+$arr[$j] )) -gt $sum ]; then\n                tmp=$arr[$i]\n\
    \                arr[$i]=$arr[$j]\n                arr[$j]=$tmp\n            fi\n\
    \        done\n    done\n\n    echo $arr\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp64kwbq71.sh: line 30: 5[0]+5[0] : syntax error: invalid arithmetic
    operator (error token is "[0]+5[0] ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=1\n   \
    \ local j=1\n    local k=1\n    local l=1\n    local m=1\n    local n=1\n    local\
    \ o=1\n    local p=1\n    local q=1\n    local r=1\n    local s=1\n    local t=1\n\
    \    local u=1\n    local v=1\n    local w=1\n    local x=1\n    local y=1\n \
    \   local z=1\n    local a=1\n    local b=1\n    local c=1\n    local d=1\n  \
    \  local e=1\n    local f=1\n    local g=1\n    local h=1\n    local i=1\n   \
    \ local j=1\n    local k=1\n    local l=1\n    local m=1\n    local n=1\n    local\
    \ o=1\n    local p=1\n    local q=1\n    local r=1\n    local s=1\n    local t=1\n\
    \    local u=1\n    local v=1\n    local w=1\n    local x=1\n    local y=1\n \
    \   local z=1\n    local a=1\n    local b=1\n    local c=1\n    local d=1\n  \
    \  local e=1\n    local f=1\n    local g=1\n    local h=1\n    local i=1\n   \
    \ local j=1\n    local k=1\n    local l=1\n    local m=1\n    local n=1\n    local\
    \ o=1\n    local p=1\n    local q=1\n    local r=1\n    local s=1\n    local t=1\n\
    \    local u=1\n    local v=1\n    local w=1\n    local x=1\n    local y=1\n \
    \   local z=1\n    local a=1\n    local b=1\n    local c=1\n    local d=1\n  \
    \  local \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local first\n    local last\n    local tmp\n    local count\n    local tmp2\n\
    \    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n\
    \    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n\
    \    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local\
    \ tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n\
    \    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local\
    \ tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n\
    \    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local\
    \ tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n\
    \    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local\
    \ tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n\
    \    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local\
    \ tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n\
    \    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local\
    \ tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n\
    \    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local\
    \ tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n\
    \    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local\
    \ tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n\
    \    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local\
    \ tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local len=${#arr[@]}\n    local\
    \ flag\n\n    flag=0\n    for (( i=0; i<len; i++ )); do\n        sum=$(( sum +\
    \ arr[i] ))\n        if [ $(( sum % 2 )) -eq 1 ]; then\n            flag=1\n \
    \           break\n        fi\n    done\n\n    if [ $flag -eq 0 ]; then\n    \
    \    flag=0\n        for (( j=0; j<len; j++ )); do\n            sum=$(( sum -\
    \ arr[j] ))\n            if [ $(( sum % 2 )) -eq 0 ]; then\n                flag=1\n\
    \                break\n            fi\n        done\n    fi\n\n    if [ $flag\
    \ -eq 1 ]; then\n        flag=0\n        for (( k=0; k<len; k++ )); do\n     \
    \       temp=$(( arr[k] ))\n            arr[k]=$arr[j]\n            arr[j]=$temp\n\
    \            j=$(( j + 1 ))\n            if [ $(( arr[j-1] + arr[j] )) -eq 0 ];\
    \ then\n                flag=1\n                break\n            fi\n      \
    \  done\n    fi\n\n    for (( i=0; i<len; i++ )); do\n        printf \"%d \" ${arr[i]}\n\
    \    done\n    printf \"\\n\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( $(echo $arr | awk '{sum+=$1} END {print sum}')\
    \ % 2 )) ]; then\n        echo \"$arr\"\n    else\n        echo \"$arr | sort\
    \ -n\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local first\n    local last\n    local temp2\n    local temp3\n    local\
    \ temp4\n    local temp5\n    local temp6\n    local temp7\n    local temp8\n\
    \    local temp9\n    local temp10\n    local temp11\n    local temp12\n    local\
    \ temp13\n    local temp14\n    local temp15\n    local temp16\n    local temp17\n\
    \    local temp18\n    local temp19\n    local temp20\n    local temp21\n    local\
    \ temp22\n    local temp23\n    local temp24\n    local temp25\n    local temp26\n\
    \    local temp27\n    local temp28\n    local temp29\n    local temp30\n    local\
    \ temp31\n    local temp32\n    local temp33\n    local temp34\n    local temp35\n\
    \    local temp36\n    local temp37\n    local temp38\n    local temp39\n    local\
    \ temp40\n    local temp41\n    local temp42\n    local temp43\n    local temp44\n\
    \    local temp45\n    local temp46\n    local temp47\n    local temp48\n    local\
    \ temp49\n    local temp50\n    local temp51\n    local temp52\n    local temp53\n\
    \    local temp54\n    local temp55\n    local temp56\n    local temp57\n    local\
    \ temp58\n    local temp59\n    local temp60\n    local temp61\n    local temp62\n\
    \    local temp63\n    local temp64\n    local temp65\n    local temp66\n    local\
    \ temp67\n    local temp68\n    local temp69\n    local temp70\n    local temp71\n\
    \    local temp72\n    local temp73\n    local temp74\n    local temp75\n    local\
    \ temp76\n    local temp77\n    local temp78\n    local temp79\n    local temp80\n\
    \    local temp81\n    local temp82\n    local temp83\n    local temp84\n    local\
    \ temp85\n    local temp86\n    local temp87\n    local temp88\n    local temp89\n\
    \    local temp90\n    local temp91\n    local temp92\n    local temp93\n    local\
    \ temp94\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    sum=0\n    for i in \"${array[@]}\"; do\n   \
    \     sum=$(( sum + i ))\n    done\n    if [ $(( sum % 2 )) -eq 1 ]; then\n  \
    \      for i in \"${array[@]}\"; do\n            temp=$i\n            j=$(( i\
    \ + 1 ))\n            while [ $j -gt $(( ${#array[@]} - 1 )) ]; do\n         \
    \       array[$j-1]=$temp\n                j=$(( j - 1 ))\n            done\n\
    \        done\n    else\n        for i in \"${array[@]}\"; do\n            temp=$i\n\
    \            j=$(( i + 1 ))\n            while [ $j -gt $(( ${#array[@]} - 1 ))\
    \ ]; do\n                array[$j-1]=$temp\n                j=$(( j - 1 ))\n \
    \           done\n        done\n        for i in \"${array[@]}\"; do\n       \
    \     temp=$i\n            j=$(( i + 1 ))\n            while [ $j -gt $(( ${#array[@]}\
    \ - 1 )) ]; do\n                array[$j-1]=$temp\n                j=$(( j - 1\
    \ ))\n            done\n        done\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    sum=$(echo \"$array\" | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$array\"\n       \
    \ return\n    fi\n    for (( i=0; i<${#array[@]}-1; i++ )); do\n        for ((\
    \ j=0; j<${#array[@]}-1; j++ )); do\n            if [ $(( ${array[j]} > ${array[j+1]}\
    \ )) ]; then\n                temp=${array[j]}\n                array[j]=${array[j+1]}\n\
    \                array[j+1]=${temp}\n            fi\n        done\n    done\n\
    \    echo \"$array\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"$@\")\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    sum=$(expr \"${arr[0]}\" + \"${arr[1]}\"\
    )\n    if [ \"${sum%2}\" = \"0\" ]; then\n        arr=($(sort -n -k 1,1 -k 2,2\
    \ \"${arr[@]}\" | sed 's/^/-/g'))\n    else\n        arr=($(sort -n -k 1,1 -k\
    \ 2,2 \"${arr[@]}\" | sed 's/^/+/g'))\n    fi\n    for ((i = 0; i < ${#arr[@]};\
    \ i++)); do\n        temp=${arr[i]}\n        arr[i]=${arr[i+1]}\n        arr[i+1]=${temp}\n\
    \    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    sort: cannot read: '''': No such file or directory

    expr: non-integer argument

    sort: cannot read: 5: No such file or directory

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n    if [[ $sum -gt 0 ]]; then\n        echo \"$array\"\n    \
    \    return\n    fi\n    local temp\n    local count\n    local flag\n    local\
    \ temp2\n    local temp3\n    local temp4\n    local temp5\n    local temp6\n\
    \    local temp7\n    local temp8\n    local temp9\n    local temp10\n    local\
    \ temp11\n    local temp12\n    local temp13\n    local temp14\n    local temp15\n\
    \    local temp16\n    local temp17\n    local temp18\n    local temp19\n    local\
    \ temp20\n    local temp21\n    local temp22\n    local temp23\n    local temp24\n\
    \    local temp25\n    local temp26\n    local temp27\n    local temp28\n    local\
    \ temp29\n    local temp30\n    local temp31\n    local temp32\n    local temp33\n\
    \    local temp34\n    local temp35\n    local temp36\n    local temp37\n    local\
    \ temp38\n    local temp39\n    local temp40\n    local temp41\n    local temp42\n\
    \    local temp43\n    local temp44\n    local temp45\n    local temp46\n    local\
    \ temp47\n    local temp48\n    local temp49\n    local temp50\n    local temp51\n\
    \    local temp52\n    local temp53\n    local temp54\n    local temp55\n    local\
    \ temp56\n    local temp57\n    local temp58\n    local temp59\n    local temp60\n\
    \    local temp61\n    local temp62\n    local temp63\n    local temp64\n    local\
    \ temp65\n    local temp66\n    local temp67\n    local temp68\n    local temp69\n\
    \    local temp70\n    local temp71\n    local temp72\n    local temp73\n    local\
    \ temp74\n    local temp75\n    local temp76\n    local temp77\n    local temp78\n\
    \    local temp79\n    local temp80\n    local temp81\n    local temp82\n    local\
    \ temp83\n    local temp84\n    local temp85\n    local temp86\n    local temp87\n\
    \    local temp88\n    local temp89\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local result\n\n    sum=$(echo \"\
    $array\" | awk '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n\
    \        echo \"$array\"\n    else\n        echo \"$array\" | sort -n -r\n   \
    \ fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n   \
    \ [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local tmp\n    local len\n    local odd\n    local\
    \ even\n    local temp\n    local result\n    local sum1\n    local sum2\n   \
    \ local sum3\n    local sum4\n    local sum5\n    local sum6\n    local sum7\n\
    \    local sum8\n    local sum9\n    local sum10\n    local sum11\n    local sum12\n\
    \    local sum13\n    local sum14\n    local sum15\n    local sum16\n    local\
    \ sum17\n    local sum18\n    local sum19\n    local sum20\n    local sum21\n\
    \    local sum22\n    local sum23\n    local sum24\n    local sum25\n    local\
    \ sum26\n    local sum27\n    local sum28\n    local sum29\n    local sum30\n\
    \    local sum31\n    local sum32\n    local sum33\n    local sum34\n    local\
    \ sum35\n    local sum36\n    local sum37\n    local sum38\n    local sum39\n\
    \    local sum40\n    local sum41\n    local sum42\n    local sum43\n    local\
    \ sum44\n    local sum45\n    local sum46\n    local sum47\n    local sum48\n\
    \    local sum49\n    local sum50\n    local sum51\n    local sum52\n    local\
    \ sum53\n    local sum54\n    local sum55\n    local sum56\n    local sum57\n\
    \    local sum58\n    local sum59\n    local sum60\n    local sum61\n    local\
    \ sum62\n    local sum63\n    local sum64\n    local sum65\n    local sum66\n\
    \    local sum67\n    local sum68\n    local sum69\n    local sum70\n    local\
    \ sum71\n    local sum72\n    local sum73\n    local sum74\n    local sum75\n\
    \    local sum76\n    local sum77\n    local sum78\n    local sum79\n    local\
    \ sum80\n    local sum81\n    local sum82\n    local sum83\n    local sum84\n\
    \    local sum85\n    local sum86\n    local sum87\n    local sum88\n    local\
    \ sum89\n    local sum90\n    local sum91\n    local sum92\n    local sum93\n\
    \    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(( ${arr[0]} + ${arr[1]} ))\n    if\
    \ [ $sum -gt $(( ${arr[0]} + ${arr[1]} )) ]; then\n        echo \"$arr\"\n   \
    \     return\n    fi\n    arr=( ${arr[@]:1:} )\n    arr=( ${arr[@]:0:1} )\n  \
    \  arr=( ${arr[@]:0:-1} )\n    arr=( ${arr[@]:0:-2} )\n    arr=( ${arr[@]:0:-3}\
    \ )\n    arr=( ${arr[@]:0:-4} )\n    arr=( ${arr[@]:0:-5} )\n    arr=( ${arr[@]:0:-6}\
    \ )\n    arr=( ${arr[@]:0:-7} )\n    arr=( ${arr[@]:0:-8} )\n    arr=( ${arr[@]:0:-9}\
    \ )\n    arr=( ${arr[@]:0:-10} )\n    arr=( ${arr[@]:0:-11} )\n    arr=( ${arr[@]:0:-12}\
    \ )\n    arr=( ${arr[@]:0:-13} )\n    arr=( ${arr[@]:0:-14} )\n    arr=( ${arr[@]:0:-15}\
    \ )\n    arr=( ${arr[@]:0:-16} )\n    arr=( ${arr[@]:0:-17} )\n    arr=( ${arr[@]:0:-18}\
    \ )\n    arr=( ${arr[@]:0:-19} )\n    arr=( ${arr[@]:0:-20} )\n    arr=( ${arr[@]:0:-21}\
    \ )\n    arr=( ${arr[@]:0:-22} )\n    arr=( ${arr[@]:0:-23} )\n    arr=( ${arr[@]:0:-24}\
    \ )\n    arr=( ${arr[@]:0:-25} )\n    arr=( ${arr[@]:0:-26} )\n    arr=( ${arr[@]:0:-27}\
    \ )\n    arr=( ${arr[@]:0:-28} )\n    arr=( ${arr[@]:0:-29} )\n    arr=( ${arr[@]:0:-30}\
    \ )\n    arr=( ${arr[@]:0:-31} )\n    arr=( ${arr[@]:0:-32} )\n    arr=( ${arr[@]:0:-33}\
    \ )\n    arr=( ${arr[@]:0:\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppxbsugzs.sh: line 60: syntax error near unexpected token `(''

    /tmp/tmppxbsugzs.sh: line 60: `candidate() {''

    /tmp/tmppxbsugzs.sh: line 61: sort_array: command not found

    /tmp/tmppxbsugzs.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmppxbsugzs.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local result\n    local sum1\n    local sum2\n    local sum3\n    local\
    \ sum4\n    local sum5\n    local sum6\n    local sum7\n    local sum8\n    local\
    \ sum9\n    local sum10\n    local sum11\n    local sum12\n    local sum13\n \
    \   local sum14\n    local sum15\n    local sum16\n    local sum17\n    local\
    \ sum18\n    local sum19\n    local sum20\n    local sum21\n    local sum22\n\
    \    local sum23\n    local sum24\n    local sum25\n    local sum26\n    local\
    \ sum27\n    local sum28\n    local sum29\n    local sum30\n    local sum31\n\
    \    local sum32\n    local sum33\n    local sum34\n    local sum35\n    local\
    \ sum36\n    local sum37\n    local sum38\n    local sum39\n    local sum40\n\
    \    local sum41\n    local sum42\n    local sum43\n    local sum44\n    local\
    \ sum45\n    local sum46\n    local sum47\n    local sum48\n    local sum49\n\
    \    local sum50\n    local sum51\n    local sum52\n    local sum53\n    local\
    \ sum54\n    local sum55\n    local sum56\n    local sum57\n    local sum58\n\
    \    local sum59\n    local sum60\n    local sum61\n    local sum62\n    local\
    \ sum63\n    local sum64\n    local sum65\n    local sum66\n    local sum67\n\
    \    local sum68\n    local sum69\n    local sum70\n    local sum71\n    local\
    \ sum72\n    local sum73\n    local sum74\n    local sum75\n    local sum76\n\
    \    local sum77\n    local sum78\n    local sum79\n    local sum80\n    local\
    \ sum81\n    local sum82\n    local sum83\n    local sum84\n    local sum85\n\
    \    local sum86\n    local sum87\n    local sum88\n    local sum89\n    local\
    \ sum90\n    local sum91\n    local sum92\n    local sum93\n    local sum94\n\
    \    local sum95\n    local sum96\n    local sum97\n    local sum98\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( ${#arr[@]} / 2 )) ]; then\n        echo \"$arr\"\
    \n        return\n    fi\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        for\
    \ (( j=0; j<i; j++ )); do\n            if [ $(( ${arr[i]} + ${arr[j]} )) -gt $((\
    \ ${arr[i]} + ${arr[j]} )) ]; then\n                temp=${arr[i]}\n         \
    \       arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n     \
    \   done\n    done\n    echo \"$arr\"\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo \"$arr | sort -n\"\n\
    \    else\n        echo \"$arr | sort -r\"\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local sum1\n    local sum2\n    local sum3\n  \
    \  local sum4\n    local sum5\n    local sum6\n    local sum7\n    local sum8\n\
    \    local sum9\n    local sum10\n    local sum11\n    local sum12\n    local\
    \ sum13\n    local sum14\n    local sum15\n    local sum16\n    local sum17\n\
    \    local sum18\n    local sum19\n    local sum20\n    local sum21\n    local\
    \ sum22\n    local sum23\n    local sum24\n    local sum25\n    local sum26\n\
    \    local sum27\n    local sum28\n    local sum29\n    local sum30\n    local\
    \ sum31\n    local sum32\n    local sum33\n    local sum34\n    local sum35\n\
    \    local sum36\n    local sum37\n    local sum38\n    local sum39\n    local\
    \ sum40\n    local sum41\n    local sum42\n    local sum43\n    local sum44\n\
    \    local sum45\n    local sum46\n    local sum47\n    local sum48\n    local\
    \ sum49\n    local sum50\n    local sum51\n    local sum52\n    local sum53\n\
    \    local sum54\n    local sum55\n    local sum56\n    local sum57\n    local\
    \ sum58\n    local sum59\n    local sum60\n    local sum61\n    local sum62\n\
    \    local sum63\n    local sum64\n    local sum65\n    local sum66\n    local\
    \ sum67\n    local sum68\n    local sum69\n    local sum70\n    local sum71\n\
    \    local sum72\n    local sum73\n    local sum74\n    local sum75\n    local\
    \ sum76\n    local sum77\n    local sum78\n    local sum79\n    local sum80\n\
    \    local sum81\n    local sum82\n    local sum83\n    local sum84\n    local\
    \ sum85\n    local sum86\n    local sum87\n    local sum88\n    local sum89\n\
    \    local sum90\n    local sum91\n    local sum92\n    local sum93\n    local\
    \ sum94\n    local sum95\n    local sum96\n    local sum97\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp93\n    local temp94\n    local temp95\n    local\
    \ temp96\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=$(( ${array[0]} + ${array[${#array[@]}-1]} ))\n \
    \   if [ $sum -gt 0 ]; then\n        echo \"$array is not sorted\"\n        return\n\
    \    fi\n    local len=${#array[@]}\n    for (( i=0; i<len; i++ )); do\n     \
    \   sum=$(( ${array[i]} + ${array[i+1]} ))\n        if [ $sum -gt 0 ]; then\n\
    \            echo \"$array is not sorted\"\n            return\n        fi\n \
    \   done\n    for (( i=0; i<len; i++ )); do\n        sum=$(( ${array[i]} + ${array[i-1]}\
    \ ))\n        if [ $sum -gt 0 ]; then\n            echo \"$array is not sorted\"\
    \n            return\n        fi\n    done\n    for (( j=1; j<len; j++ )); do\n\
    \        sum=$(( ${array[j]} + ${array[j-1]} ))\n        if [ $sum -gt 0 ]; then\n\
    \            echo \"$array is not sorted\"\n            return\n        fi\n \
    \   done\n    for (( j=1; j<len; j++ )); do\n        sum=$(( ${array[j]} + ${array[j-1]}\
    \ ))\n        if [ $sum -gt 0 ]; then\n            echo \"$array is not sorted\"\
    \n            return\n        fi\n    done\n    for (( j=1; j<len; j++ )); do\n\
    \        sum=$(( ${array[j]} + ${array[j-1]} ))\n        if [ $sum -gt 0 ]; then\n\
    \            echo \"$array is not sorted\"\n            return\n        fi\n \
    \   done\n    for (( j=1; j<len; j++ )); do\n        sum=$(( ${array[j]} + ${array[j-1]}\
    \ ))\n        if [ $sum -gt 0 ]; then\n            echo \"$array is not sorted\"\
    \n            return\n        fi\n    done\n    for (( j=1; j<len; j++ )); do\n\
    \        sum=$(( ${array[j]} + ${array[j-1]} ))\n        if [ $sum -gt 0 ]; then\n\
    \            echo \"$array is not sorted\"\n            return\n        fi\n \
    \   done\n    for (( j=1; j<len; j++ )); do\n        sum=$(( ${array[j]} + ${array[j-1]}\
    \ ))\n        if [ $sum -gt 0 ]; then\n            echo \"$array is not sorted\"\
    \n            return\n        fi\n    done\n    for (( j=1; j<len; j++ )); do\n\
    \        \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8l4366nq.sh: line 80: syntax error near unexpected token `}''

    /tmp/tmp8l4366nq.sh: line 80: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo \"$arr\"\n    else\n\
    \        echo \"$arr | sort -n\"\n    fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local arr=$1\n  local sum\n  local i\n  local j\n  local\
    \ k\n  local len\n  local temp\n  local res\n  local sum1\n  local sum2\n  local\
    \ sum3\n  local sum4\n  local sum5\n  local sum6\n  local sum7\n  local sum8\n\
    \  local sum9\n  local sum10\n  local sum11\n  local sum12\n  local sum13\n  local\
    \ sum14\n  local sum15\n  local sum16\n  local sum17\n  local sum18\n  local sum19\n\
    \  local sum20\n  local sum21\n  local sum22\n  local sum23\n  local sum24\n \
    \ local sum25\n  local sum26\n  local sum27\n  local sum28\n  local sum29\n  local\
    \ sum30\n  local sum31\n  local sum32\n  local sum33\n  local sum34\n  local sum35\n\
    \  local sum36\n  local sum37\n  local sum38\n  local sum39\n  local sum40\n \
    \ local sum41\n  local sum42\n  local sum43\n  local sum44\n  local sum45\n  local\
    \ sum46\n  local sum47\n  local sum48\n  local sum49\n  local sum50\n  local sum51\n\
    \  local sum52\n  local sum53\n  local sum54\n  local sum55\n  local sum56\n \
    \ local sum57\n  local sum58\n  local sum59\n  local sum60\n  local sum61\n  local\
    \ sum62\n  local sum63\n  local sum64\n  local sum65\n  local sum66\n  local sum67\n\
    \  local sum68\n  local sum69\n  local sum70\n  local sum71\n  local sum72\n \
    \ local sum73\n  local sum74\n  local sum75\n  local sum76\n  local sum77\n  local\
    \ sum78\n  local sum79\n  local sum80\n  local sum81\n  local sum82\n  local sum83\n\
    \  local sum84\n  local sum85\n  local sum86\n  local sum87\n  local sum88\n \
    \ local sum89\n  local sum90\n  local sum91\n  local sum92\n  local sum93\n  local\
    \ sum94\n  local sum95\n  local sum\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum + ${arr[i]}))\n    done\n    if [[ $((sum%2)) -eq 1 ]];\
    \ then\n        arr=($(sort -n -k 1 <<<\"${arr[@]}\" | sed 's/^/-/g'))\n    else\n\
    \        arr=($(sort -n -k 1 <<<\"${arr[@]}\" | sed 's/^/+/g'))\n    fi\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        temp=${arr[i]}\n        for ((j=i+1;\
    \ j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt ${temp} ]]; then\n\
    \                arr[j]=${temp}\n            fi\n        done\n    done\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphol_cvmy.sh: line 19: sum + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=$(echo $((${#arr[@]} * 2)) | bc)\n    for ((i = 0;\
    \ i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo $((${arr[i]} * 2)) | bc)\n\
    \    done\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo $((${arr[i]}\
    \ + sum)) | bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n      \
    \  if (( ${arr[i]} % 2 )); then\n            arr[i]=$(echo $((${arr[i]} / 2))\
    \ | bc)\n        else\n            arr[i]=$(echo $((${arr[i]} / 2)) | bc)\n  \
    \      fi\n    done\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo\
    \ $((${arr[i]} + sum)) | bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++));\
    \ do\n        arr[i]=$(echo $((${arr[i]} + sum)) | bc)\n    done\n    for ((i\
    \ = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo $((${arr[i]} + sum)) |\
    \ bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo\
    \ $((${arr[i]} + sum)) | bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++));\
    \ do\n        arr[i]=$(echo $((${arr[i]} + sum)) | bc)\n    done\n    for ((i\
    \ = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo $((${arr[i]} + sum)) |\
    \ bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo\
    \ $((${arr[i]} + sum)) | bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++));\
    \ do\n        arr[i]=$(echo $((${arr[i]} + sum)) | bc)\n    done\n    for ((i\
    \ = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo $((${arr[i]} + sum)) |\
    \ bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++)); do\n        arr[i]=$(echo\
    \ $((${arr[i]} + sum)) | bc)\n    done\n    for ((i = 0; i < ${#arr[@]}; i++));\
    \ do\n        arr[i]=$(echo $((${arr[i]} + sum)) | \n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd6fxmmua.sh: line 61: unexpected EOF while looking for matching
    `)''

    /tmp/tmpd6fxmmua.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp93\n    local temp94\n    local temp95\n    local\
    \ temp96\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [ $(( sum % 2 ))\
    \ -eq 1 ]; then\n        arr=( $(sort -n -k 1 <<< \"${arr[@]}\") )\n    else\n\
    \        arr=( $(sort -n -k 2 <<< \"${arr[@]}\") )\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjgb8qwxx.sh: line 19: sum +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local result\n    local tmp\n    local flag\n\n    while [\
    \ $i -lt ${#array[@]} ]; do\n        sum=$(( ${sum} + ${array[i]} ))\n       \
    \ i=$(( i + 1 ))\n    done\n\n    if [ $(( ${sum} % 2 )) -eq 1 ]; then\n     \
    \   flag=asc\n    else\n        flag=desc\n    fi\n\n    if [ $flag == \"asc\"\
    \ ]; then\n        result=`sort -n -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k\
    \ 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k\
    \ 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k\
    \ 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k\
    \ 48 -k 49 -k 50 -k 51 -k 52 -k 53 -k 54 -k 55 -k 56 -k 57 -k 58 -k 59 -k 60 -k\
    \ 61 -k 62 -k 63 -k 64 -k 65 -k 66 -k 67 -k 68 -k 69 -k 70 -k 71 -k 72 -k 73 -k\
    \ 74 -k 75 -k 76 -k 77 -k 78 -k 79 -k 80 -k 81 -k 82 -k 83 -k 84 -k 85 -k 86 -k\
    \ 87 -k 88 -k 89 -k 90 -k 91 -k 92 -k 93 -k 94 -k 95 -k 96 -k 97 -k 98 -k 99 -k\
    \ 100 -k 101 -k 102 -k 103 -k 104 -k 105 -k 106 -k 107 -k 108 -k 109 -k 110 -k\
    \ 111 -k 112 -k 113 -k 114 -k 115 -k 116 -k 117 -k 118 -k 119 -k 120 -k 121 -k\
    \ 122 -\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1ptnp5zp.sh: line 31: unexpected EOF while looking for matching
    ``''

    /tmp/tmp1ptnp5zp.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local len\n    local odd\n    local\
    \ even\n    local temp2\n    local result\n    local sum2\n    local sum3\n  \
    \  local sum4\n    local sum5\n    local sum6\n    local sum7\n    local sum8\n\
    \    local sum9\n    local sum10\n    local sum11\n    local sum12\n    local\
    \ sum13\n    local sum14\n    local sum15\n    local sum16\n    local sum17\n\
    \    local sum18\n    local sum19\n    local sum20\n    local sum21\n    local\
    \ sum22\n    local sum23\n    local sum24\n    local sum25\n    local sum26\n\
    \    local sum27\n    local sum28\n    local sum29\n    local sum30\n    local\
    \ sum31\n    local sum32\n    local sum33\n    local sum34\n    local sum35\n\
    \    local sum36\n    local sum37\n    local sum38\n    local sum39\n    local\
    \ sum40\n    local sum41\n    local sum42\n    local sum43\n    local sum44\n\
    \    local sum45\n    local sum46\n    local sum47\n    local sum48\n    local\
    \ sum49\n    local sum50\n    local sum51\n    local sum52\n    local sum53\n\
    \    local sum54\n    local sum55\n    local sum56\n    local sum57\n    local\
    \ sum58\n    local sum59\n    local sum60\n    local sum61\n    local sum62\n\
    \    local sum63\n    local sum64\n    local sum65\n    local sum66\n    local\
    \ sum67\n    local sum68\n    local sum69\n    local sum70\n    local sum71\n\
    \    local sum72\n    local sum73\n    local sum74\n    local sum75\n    local\
    \ sum76\n    local sum77\n    local sum78\n    local sum79\n    local sum80\n\
    \    local sum81\n    local sum82\n    local sum83\n    local sum84\n    local\
    \ sum85\n    local sum86\n    local sum87\n    local sum88\n    local sum89\n\
    \    local sum90\n    local sum91\n    local sum92\n    local sum93\n    local\
    \ sum94\n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local result\n    local sum1\n\
    \    local sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n\
    \    local sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n\
    \    local sum12\n    local sum13\n    local sum14\n    local sum15\n    local\
    \ sum16\n    local sum17\n    local sum18\n    local sum19\n    local sum20\n\
    \    local sum21\n    local sum22\n    local sum23\n    local sum24\n    local\
    \ sum25\n    local sum26\n    local sum27\n    local sum28\n    local sum29\n\
    \    local sum30\n    local sum31\n    local sum32\n    local sum33\n    local\
    \ sum34\n    local sum35\n    local sum36\n    local sum37\n    local sum38\n\
    \    local sum39\n    local sum40\n    local sum41\n    local sum42\n    local\
    \ sum43\n    local sum44\n    local sum45\n    local sum46\n    local sum47\n\
    \    local sum48\n    local sum49\n    local sum50\n    local sum51\n    local\
    \ sum52\n    local sum53\n    local sum54\n    local sum55\n    local sum56\n\
    \    local sum57\n    local sum58\n    local sum59\n    local sum60\n    local\
    \ sum61\n    local sum62\n    local sum63\n    local sum64\n    local sum65\n\
    \    local sum66\n    local sum67\n    local sum68\n    local sum69\n    local\
    \ sum70\n    local sum71\n    local sum72\n    local sum73\n    local sum74\n\
    \    local sum75\n    local sum76\n    local sum77\n    local sum78\n    local\
    \ sum79\n    local sum80\n    local sum81\n    local sum82\n    local sum83\n\
    \    local sum84\n    local sum85\n    local sum86\n    local sum87\n    local\
    \ sum88\n    local sum89\n    local sum90\n    local sum91\n    local sum92\n\
    \    local sum93\n    local sum94\n    local sum95\n    local sum96\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local result\n    local flag\n    local count\n    local temp1\n    local\
    \ temp2\n    local temp3\n    local temp4\n    local temp5\n    local temp6\n\
    \    local temp7\n    local temp8\n    local temp9\n    local temp10\n    local\
    \ temp11\n    local temp12\n    local temp13\n    local temp14\n    local temp15\n\
    \    local temp16\n    local temp17\n    local temp18\n    local temp19\n    local\
    \ temp20\n    local temp21\n    local temp22\n    local temp23\n    local temp24\n\
    \    local temp25\n    local temp26\n    local temp27\n    local temp28\n    local\
    \ temp29\n    local temp30\n    local temp31\n    local temp32\n    local temp33\n\
    \    local temp34\n    local temp35\n    local temp36\n    local temp37\n    local\
    \ temp38\n    local temp39\n    local temp40\n    local temp41\n    local temp42\n\
    \    local temp43\n    local temp44\n    local temp45\n    local temp46\n    local\
    \ temp47\n    local temp48\n    local temp49\n    local temp50\n    local temp51\n\
    \    local temp52\n    local temp53\n    local temp54\n    local temp55\n    local\
    \ temp56\n    local temp57\n    local temp58\n    local temp59\n    local temp60\n\
    \    local temp61\n    local temp62\n    local temp63\n    local temp64\n    local\
    \ temp65\n    local temp66\n    local temp67\n    local temp68\n    local temp69\n\
    \    local temp70\n    local temp71\n    local temp72\n    local temp73\n    local\
    \ temp74\n    local temp75\n    local temp76\n    local temp77\n    local temp78\n\
    \    local temp79\n    local temp80\n    local temp81\n    local temp82\n    local\
    \ temp83\n    local temp84\n    local temp85\n    local temp86\n    local temp87\n\
    \    local temp88\n    local temp89\n    local temp90\n    local temp91\n    local\
    \ temp92\n    local \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local sum1\n    local sum2\n    local sum3\n    local sum4\n\
    \    local sum5\n    local sum6\n    local sum7\n    local sum8\n    local sum9\n\
    \    local sum10\n    local sum11\n    local sum12\n    local sum13\n    local\
    \ sum14\n    local sum15\n    local sum16\n    local sum17\n    local sum18\n\
    \    local sum19\n    local sum20\n    local sum21\n    local sum22\n    local\
    \ sum23\n    local sum24\n    local sum25\n    local sum26\n    local sum27\n\
    \    local sum28\n    local sum29\n    local sum30\n    local sum31\n    local\
    \ sum32\n    local sum33\n    local sum34\n    local sum35\n    local sum36\n\
    \    local sum37\n    local sum38\n    local sum39\n    local sum40\n    local\
    \ sum41\n    local sum42\n    local sum43\n    local sum44\n    local sum45\n\
    \    local sum46\n    local sum47\n    local sum48\n    local sum49\n    local\
    \ sum50\n    local sum51\n    local sum52\n    local sum53\n    local sum54\n\
    \    local sum55\n    local sum56\n    local sum57\n    local sum58\n    local\
    \ sum59\n    local sum60\n    local sum61\n    local sum62\n    local sum63\n\
    \    local sum64\n    local sum65\n    local sum66\n    local sum67\n    local\
    \ sum68\n    local sum69\n    local sum70\n    local sum71\n    local sum72\n\
    \    local sum73\n    local sum74\n    local sum75\n    local sum76\n    local\
    \ sum77\n    local sum78\n    local sum79\n    local sum80\n    local sum81\n\
    \    local sum82\n    local sum83\n    local sum84\n    local sum85\n    local\
    \ sum86\n    local sum87\n    local sum88\n    local sum89\n    local sum90\n\
    \    local sum91\n    local sum92\n    local sum93\n    local sum94\n    local\
    \ sum95\n    local sum96\n    local sum97\n    local sum98\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    sum=0\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [ $(( sum % 2 ))\
    \ -eq 1 ]; then\n        arr=( $(sort -n <<< \"${arr[@]}\") )\n    else\n    \
    \    arr=( $(sort -n -r <<< \"${arr[@]}\") )\n    fi\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        tmp=${arr[i]}\n        arr[i]=${arr[i+1]}\n        arr[i+1]=${tmp}\n\
    \    done\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660033808
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $(( sum % 2 )) -eq 1 ]; then\n        echo \"$arr\" | sort\
    \ -n -k 1\n    else\n        echo \"$arr\" | sort -n -k 2\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local first\n    local last\n    local temp2\n    local result\n    local\
    \ count\n    local flag\n    local count2\n    local count3\n    local count4\n\
    \    local count5\n    local count6\n    local count7\n    local count8\n    local\
    \ count9\n    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local len=${#arr[@]}\n    local\
    \ temp1\n    local temp2\n    local temp3\n    local temp4\n    local temp5\n\
    \    local temp6\n    local temp7\n    local temp8\n    local temp9\n    local\
    \ temp10\n    local temp11\n    local temp12\n    local temp13\n    local temp14\n\
    \    local temp15\n    local temp16\n    local temp17\n    local temp18\n    local\
    \ temp19\n    local temp20\n    local temp21\n    local temp22\n    local temp23\n\
    \    local temp24\n    local temp25\n    local temp26\n    local temp27\n    local\
    \ temp28\n    local temp29\n    local temp30\n    local temp31\n    local temp32\n\
    \    local temp33\n    local temp34\n    local temp35\n    local temp36\n    local\
    \ temp37\n    local temp38\n    local temp39\n    local temp40\n    local temp41\n\
    \    local temp42\n    local temp43\n    local temp44\n    local temp45\n    local\
    \ temp46\n    local temp47\n    local temp48\n    local temp49\n    local temp50\n\
    \    local temp51\n    local temp52\n    local temp53\n    local temp54\n    local\
    \ temp55\n    local temp56\n    local temp57\n    local temp58\n    local temp59\n\
    \    local temp60\n    local temp61\n    local temp62\n    local temp63\n    local\
    \ temp64\n    local temp65\n    local temp66\n    local temp67\n    local temp68\n\
    \    local temp69\n    local temp70\n    local temp71\n    local temp72\n    local\
    \ temp73\n    local temp74\n    local temp75\n    local temp76\n    local temp77\n\
    \    local temp78\n    local temp79\n    local temp80\n    local temp81\n    local\
    \ temp82\n    local temp83\n    local temp84\n    local temp85\n    local temp86\n\
    \    local temp87\n    local temp88\n    local temp89\n    local temp90\n    local\
    \ temp91\n    local temp92\n    local temp93\n    local temp94\n    local temp95\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local temp\n    local sum1\n    local sum2\n\
    \    local sum3\n    local sum4\n    local sum5\n    local sum6\n    local sum7\n\
    \    local sum8\n    local sum9\n    local sum10\n    local sum11\n    local sum12\n\
    \    local sum13\n    local sum14\n    local sum15\n    local sum16\n    local\
    \ sum17\n    local sum18\n    local sum19\n    local sum20\n    local sum21\n\
    \    local sum22\n    local sum23\n    local sum24\n    local sum25\n    local\
    \ sum26\n    local sum27\n    local sum28\n    local sum29\n    local sum30\n\
    \    local sum31\n    local sum32\n    local sum33\n    local sum34\n    local\
    \ sum35\n    local sum36\n    local sum37\n    local sum38\n    local sum39\n\
    \    local sum40\n    local sum41\n    local sum42\n    local sum43\n    local\
    \ sum44\n    local sum45\n    local sum46\n    local sum47\n    local sum48\n\
    \    local sum49\n    local sum50\n    local sum51\n    local sum52\n    local\
    \ sum53\n    local sum54\n    local sum55\n    local sum56\n    local sum57\n\
    \    local sum58\n    local sum59\n    local sum60\n    local sum61\n    local\
    \ sum62\n    local sum63\n    local sum64\n    local sum65\n    local sum66\n\
    \    local sum67\n    local sum68\n    local sum69\n    local sum70\n    local\
    \ sum71\n    local sum72\n    local sum73\n    local sum74\n    local sum75\n\
    \    local sum76\n    local sum77\n    local sum78\n    local sum79\n    local\
    \ sum80\n    local sum81\n    local sum82\n    local sum83\n    local sum84\n\
    \    local sum85\n    local sum86\n    local sum87\n    local sum88\n    local\
    \ sum89\n    local sum90\n    local sum91\n    local sum92\n    local sum93\n\
    \    local sum94\n    local sum95\n    local sum96\n    local sum\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local temp\n    local flag=0\n    local sum1\n\
    \    local sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n\
    \    local sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n\
    \    local sum12\n    local sum13\n    local sum14\n    local sum15\n    local\
    \ sum16\n    local sum17\n    local sum18\n    local sum19\n    local sum20\n\
    \    local sum21\n    local sum22\n    local sum23\n    local sum24\n    local\
    \ sum25\n    local sum26\n    local sum27\n    local sum28\n    local sum29\n\
    \    local sum30\n    local sum31\n    local sum32\n    local sum33\n    local\
    \ sum34\n    local sum35\n    local sum36\n    local sum37\n    local sum38\n\
    \    local sum39\n    local sum40\n    local sum41\n    local sum42\n    local\
    \ sum43\n    local sum44\n    local sum45\n    local sum46\n    local sum47\n\
    \    local sum48\n    local sum49\n    local sum50\n    local sum51\n    local\
    \ sum52\n    local sum53\n    local sum54\n    local sum55\n    local sum56\n\
    \    local sum57\n    local sum58\n    local sum59\n    local sum60\n    local\
    \ sum61\n    local sum62\n    local sum63\n    local sum64\n    local sum65\n\
    \    local sum66\n    local sum67\n    local sum68\n    local sum69\n    local\
    \ sum70\n    local sum71\n    local sum72\n    local sum73\n    local sum74\n\
    \    local sum75\n    local sum76\n    local sum77\n    local sum78\n    local\
    \ sum79\n    local sum80\n    local sum81\n    local sum82\n    local sum83\n\
    \    local sum84\n    local sum85\n    local sum86\n    local sum87\n    local\
    \ sum88\n    local sum89\n    local sum90\n    local sum91\n    local sum92\n\
    \    local sum93\n    local sum94\n    local sum95\n\n}\n\ncandidate() {\n   \
    \ sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local result\n    local count\n    local i\n    local j\n\
    \    local k\n    local tmp\n    local len\n    local odd\n    local even\n  \
    \  local tmp\n    local result\n    local count\n    local i\n    local j\n  \
    \  local k\n    local tmp\n    local len\n    local odd\n    local even\n    local\
    \ tmp\n    local result\n    local count\n    local i\n    local j\n    local\
    \ k\n    local tmp\n    local len\n    local odd\n    local even\n    local tmp\n\
    \    local result\n    local count\n    local i\n    local j\n    local k\n  \
    \  local tmp\n    local len\n    local odd\n    local even\n    local tmp\n  \
    \  local result\n    local count\n    local i\n    local j\n    local k\n    local\
    \ tmp\n    local len\n    local odd\n    local even\n    local tmp\n    local\
    \ result\n    local count\n    local i\n    local j\n    local k\n    local tmp\n\
    \    local len\n    local odd\n    local even\n    local tmp\n    local result\n\
    \    local count\n    local i\n    local j\n    local k\n    local tmp\n    local\
    \ len\n    local odd\n    local even\n    local tmp\n    local result\n    local\
    \ count\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\
    \    local odd\n    local even\n    local tmp\n    local result\n    local count\n\
    \    local i\n    local j\n    local k\n    local tmp\n    local len\n    local\
    \ odd\n    local even\n    local tmp\n    local result\n    local count\n    local\
    \ i\n    local j\n    local k\n    local tmp\n    local len\n    local odd\n \
    \   local even\n    local tmp\n    local result\n    local count\n    local i\n\
    \    local j\n    local k\n    local tmp\n    local len\n    local odd\n    local\
    \ even\n    local tmp\n    local result\n    local count\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n    local \n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( ${#arr[@]} -1 )) ]; then\n        echo \"$arr\
    \ is too large\"\n        return 1\n    fi\n    arr=($(echo $arr | sed 's/ /\\\
    n/g'))\n    i=0\n    j=$(( ${#arr[@]} - 1 ))\n    while [ $i -le $j ]; do\n  \
    \      k=$(( i + 1 ))\n        if [ $k -gt $j ]; then\n            k=$j\n    \
    \    fi\n        temp=$(( ${arr[i]} + ${arr[k]} ))\n        if [ $temp -gt $((\
    \ ${#arr[@]} -1 )) ]; then\n            temp=$(( ${#arr[@]} - 1 ))\n        fi\n\
    \        if [ $temp -gt 0 ]; then\n            arr[i]=$temp\n            i=$k\n\
    \        else\n            arr[i]=${arr[i]}\n            i=$j\n        fi\n  \
    \  done\n    arr=($(echo $arr | sed 's/ /\\n/g'))\n    i=0\n    j=$(( ${#arr[@]}\
    \ - 1 ))\n    while [ $i -le $j ]; do\n        k=$(( i + 1 ))\n        if [ $k\
    \ -gt $j ]; then\n            k=$j\n        fi\n        temp=$(( ${arr[i]} + ${arr[k]}\
    \ ))\n        if [ $temp -gt $(( ${#arr[@]} -1 )) ]; then\n            temp=$((\
    \ ${#arr[@]} - 1 ))\n        fi\n        if [ $temp -gt 0 ]; then\n          \
    \  arr[i]=$temp\n            i=$k\n        else\n            arr[i]=${arr[i]}\n\
    \            i=$j\n        fi\n    done\n    arr=($(echo $arr | sed 's/ /\\n/g'))\n\
    \    i=0\n    j=$(( ${#arr[@]} - 1 ))\n    while [ $i -le $j ]; do\n        k=$((\
    \ i + 1 ))\n        if [ $k -gt $j ]; then\n            k=$j\n        fi\n   \
    \     temp=$(( ${arr[i]} + ${arr[k]} ))\n        if [ $temp -gt $(( ${#arr[@]}\
    \ -1 )) ]; then\n            temp=$(( ${#arr[@]} - 1 ))\n        fi\n        if\
    \ [ $temp -gt 0 ]; then\n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpulp9dzwl.sh: line 76: syntax error near unexpected token `}''

    /tmp/tmpulp9dzwl.sh: line 76: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local result\n    local count\n\
    \    local sum1\n    local sum2\n    local sum3\n    local sum4\n    local sum5\n\
    \    local sum6\n    local sum7\n    local sum8\n    local sum9\n    local sum10\n\
    \    local sum11\n    local sum12\n    local sum13\n    local sum14\n    local\
    \ sum15\n    local sum16\n    local sum17\n    local sum18\n    local sum19\n\
    \    local sum20\n    local sum21\n    local sum22\n    local sum23\n    local\
    \ sum24\n    local sum25\n    local sum26\n    local sum27\n    local sum28\n\
    \    local sum29\n    local sum30\n    local sum31\n    local sum32\n    local\
    \ sum33\n    local sum34\n    local sum35\n    local sum36\n    local sum37\n\
    \    local sum38\n    local sum39\n    local sum40\n    local sum41\n    local\
    \ sum42\n    local sum43\n    local sum44\n    local sum45\n    local sum46\n\
    \    local sum47\n    local sum48\n    local sum49\n    local sum50\n    local\
    \ sum51\n    local sum52\n    local sum53\n    local sum54\n    local sum55\n\
    \    local sum56\n    local sum57\n    local sum58\n    local sum59\n    local\
    \ sum60\n    local sum61\n    local sum62\n    local sum63\n    local sum64\n\
    \    local sum65\n    local sum66\n    local sum67\n    local sum68\n    local\
    \ sum69\n    local sum70\n    local sum71\n    local sum72\n    local sum73\n\
    \    local sum74\n    local sum75\n    local sum76\n    local sum77\n    local\
    \ sum78\n    local sum79\n    local sum80\n    local sum81\n    local sum82\n\
    \    local sum83\n    local sum84\n    local sum85\n    local sum86\n    local\
    \ sum87\n    local sum88\n    local sum89\n    local sum90\n    local sum91\n\
    \    local sum92\n    local sum93\n    local sum94\n    local sum95\n    local\
    \ sum\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local temp\n    local result\n\n    # Sort the array in ascending\
    \ order\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$((${arr[i]} + ${arr[i+1]}))\n\
    \        if [ $((sum % 2)) -eq 1 ]; then\n            temp=${arr[i]}\n       \
    \     arr[i]=${arr[i+1]}\n            arr[i+1]=${temp}\n        fi\n    done\n\
    \n    # Sort the array in descending order\n    for ((j=${#arr[@]}-1; j>=0; j--));\
    \ do\n        sum=$((${arr[j]} + ${arr[j-1]}))\n        if [ $((sum % 2)) -eq\
    \ 1 ]; then\n            temp=${arr[j]}\n            arr[j]=${arr[j-1]}\n    \
    \        arr[j-1]=${temp}\n        fi\n    done\n\n    echo \"${arr[@]}\"\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfgi7005z.sh: line 20: + : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmpfgi7005z.sh: line 20: 5 + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local result\n    sum=$(echo \"\
    $array\" | awk '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n\
    \        echo \"$array is even\"\n        echo \"$array is even\"\n    else\n\
    \        echo \"$array is odd\"\n        echo \"$array is odd\"\n    fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local temp\n    local result\n    local sum1\n    local sum2\n\
    \    local sum3\n    local sum4\n    local sum5\n    local sum6\n    local sum7\n\
    \    local sum8\n    local sum9\n    local sum10\n    local sum11\n    local sum12\n\
    \    local sum13\n    local sum14\n    local sum15\n    local sum16\n    local\
    \ sum17\n    local sum18\n    local sum19\n    local sum20\n    local sum21\n\
    \    local sum22\n    local sum23\n    local sum24\n    local sum25\n    local\
    \ sum26\n    local sum27\n    local sum28\n    local sum29\n    local sum30\n\
    \    local sum31\n    local sum32\n    local sum33\n    local sum34\n    local\
    \ sum35\n    local sum36\n    local sum37\n    local sum38\n    local sum39\n\
    \    local sum40\n    local sum41\n    local sum42\n    local sum43\n    local\
    \ sum44\n    local sum45\n    local sum46\n    local sum47\n    local sum48\n\
    \    local sum49\n    local sum50\n    local sum51\n    local sum52\n    local\
    \ sum53\n    local sum54\n    local sum55\n    local sum56\n    local sum57\n\
    \    local sum58\n    local sum59\n    local sum60\n    local sum61\n    local\
    \ sum62\n    local sum63\n    local sum64\n    local sum65\n    local sum66\n\
    \    local sum67\n    local sum68\n    local sum69\n    local sum70\n    local\
    \ sum71\n    local sum72\n    local sum73\n    local sum74\n    local sum75\n\
    \    local sum76\n    local sum77\n    local sum78\n    local sum79\n    local\
    \ sum80\n    local sum81\n    local sum82\n    local sum83\n    local sum84\n\
    \    local sum85\n    local sum86\n    local sum87\n    local sum88\n    local\
    \ sum89\n    local sum90\n    local sum91\n    local sum92\n    local sum93\n\
    \    local sum94\n    local sum95\n    local sum96\n    local sum97\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local result\n\n    sum=$(echo $array | awk '{sum+=$1} END {print sum}')\n\
    \    len=$((${#array[@]}-1))\n    odd=$((${sum} % 2))\n    even=$((${sum} % 2))\n\
    \    if [ $odd -eq 1 ]; then\n        echo \"Sort in ascending order\"\n     \
    \   echo \"$array\"\n        echo \"$array\"\n        echo \"$array\"\n    else\n\
    \        echo \"Sort in descending order\"\n        echo \"$array\"\n        echo\
    \ \"$array\"\n        echo \"$array\"\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        result=$(echo \"$array\"\
    \ | sort -n -k 1,1 -k 2,2 -k 3,3 -k 4,4 -k 5,5 -k 6,6 -k 7,7 -k 8,8 -k 9,9 -k\
    \ 10,10 -k 11,11 -k 12,12 -k 13,13 -k 14,14 -k 15,15 -k 16,16 -k 17,17 -k 18,18\
    \ -k 19,19 -k 20,20 -k 21,21 -k 22,22 -k 23,23 -k 24,24 -k 25,25 -k 26,26 -k 27,27\
    \ -k 28,28 -k 29,29 -k 30,30 -k 31,31 -k 32,32 -k 33,33 -k 34,34 -k 35,35 -k 36,36\
    \ -k 37,37 -k 38,38 -k 39,39 -k 40,40 -k 41,41 -k 42,42 -k 43,43 -k 44,44 -k 45,45\
    \ -k 46,46 -k 47,47 -k 48,48 -k 49,49 -k 50,50 -k 51,51 -k 52,52 -k 53,53 -k 54,54\
    \ -k 55,55 -k 56,56 -k 57,57 -k 58,58 -k 59,59 -k 60,60 -k 61,61 -k 62,62 -k 63,63\
    \ -k 64,64 -k 65,65 -k 66,66 -k 67,67 -k 68,68 -k 69,69 -k 70,70 -k 71,71 -k 72,72\
    \ -k 73,73 -k 74,74 -k 75,75 -k 76,76 -k 77,77 -k 78,78 -k 79,79 -k 80,80 -k 81,81\
    \ -k 82,82 -k 83,83 -k 84,84 -k 85,85 -k 86,86 -k 87,87 -k 88,88 -k 89,89 -k 90,90\
    \ -k 91,91 -k 92,92 -k 93,93 -k 94,94 -k \n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmk7xy1st.sh: line 18: unexpected EOF while looking for matching
    `)''

    /tmp/tmpmk7xy1st.sh: line 37: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( $(echo $arr | awk '{sum+=$1} END {print sum}')\
    \ % 2 )) ]; then\n        echo \"$arr\"\n        return\n    fi\n    for (( i=1;\
    \ i<${#arr[@]}; i++ )); do\n        for (( j=0; j<i; j++ )); do\n            if\
    \ [ $arr[$j] -gt $arr[$j+1] ]; then\n                temp=$arr[$j]\n         \
    \       arr[$j]=$arr[$j+1]\n                arr[$j+1]=$temp\n            fi\n\
    \        done\n    done\n    echo \"$arr\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(( ${arr[0]} + ${arr[1]} ))\n    if\
    \ [ $sum -gt 0 ]; then\n        echo \"$arr\"\n        return\n    fi\n    local\
    \ len=$(( ${#arr[@]} - 1 ))\n    for (( i=1; i<len; i++ )); do\n        sum=$((\
    \ ${arr[i]} + ${arr[i-1]} ))\n        if [ $sum -gt 0 ]; then\n            echo\
    \ \"$arr\"\n            return\n        fi\n    done\n    for (( j=1; j<len; j++\
    \ )); do\n        sum=$(( ${arr[j]} + ${arr[j-1]} ))\n        if [ $sum -gt 0\
    \ ]; then\n            echo \"$arr\"\n            return\n        fi\n    done\n\
    \    for (( k=0; k<len; k++ )); do\n        sum=$(( ${arr[k]} + ${arr[k-1]} ))\n\
    \        if [ $sum -gt 0 ]; then\n            echo \"$arr\"\n            return\n\
    \        fi\n    done\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpio33ixz_.sh: line 17: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmpio33ixz_.sh: line 17: 5 +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local temp\n    sum=$(echo \"${arr[@]}\" | awk\
    \ '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo\
    \ \"${arr[@]}\" | sort -n -k 1\n    else\n        echo \"${arr[@]}\" | sort -n\
    \ -k 2\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local flag=0\n    local flag2=0\n\
    \    local flag3=0\n    local flag4=0\n    local flag5=0\n    local flag6=0\n\
    \    local flag7=0\n    local flag8=0\n    local flag9=0\n    local flag10=0\n\
    \    local flag11=0\n    local flag12=0\n    local flag13=0\n    local flag14=0\n\
    \    local flag15=0\n    local flag16=0\n    local flag17=0\n    local flag18=0\n\
    \    local flag19=0\n    local flag20=0\n    local flag21=0\n    local flag22=0\n\
    \    local flag23=0\n    local flag24=0\n    local flag25=0\n    local flag26=0\n\
    \    local flag27=0\n    local flag28=0\n    local flag29=0\n    local flag30=0\n\
    \    local flag31=0\n    local flag32=0\n    local flag33=0\n    local flag34=0\n\
    \    local flag35=0\n    local flag36=0\n    local flag37=0\n    local flag38=0\n\
    \    local flag39=0\n    local flag40=0\n    local flag41=0\n    local flag42=0\n\
    \    local flag43=0\n    local flag44=0\n    local flag45=0\n    local flag46=0\n\
    \    local flag47=0\n    local flag48=0\n    local flag49=0\n    local flag50=0\n\
    \    local flag51=0\n    local flag52=0\n    local flag53=0\n    local flag54=0\n\
    \    local flag55=0\n    local flag56=0\n    local flag57=0\n    local flag58=0\n\
    \    local flag59=0\n    local flag60=0\n    local flag61=0\n    local flag62=0\n\
    \    local flag63=0\n    local flag64=0\n    local flag65=0\n    local flag66=0\n\
    \    local flag67=0\n    local flag68=0\n    local flag69=0\n    local flag70=0\n\
    \    local flag71=0\n    local flag72=0\n    local flag73=0\n    local flag74=0\n\
    \    local flag75=0\n    local flag76=0\n    local flag77=0\n    local flag78=0\n\
    \    local flag79=0\n    local flag80=0\n    local flag81\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local tmp\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [ $(( sum % 2 ))\
    \ -eq 1 ]; then\n        arr=($(sort -n -k 1 -k ${#arr[@]} <<< \"${arr[@]}\" ))\n\
    \    else\n        arr=($(sort -n -k 1 -k ${#arr[@]} -r -k ${#arr[@]} <<< \"${arr[@]}\"\
    \ ))\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv9tv3yg0.sh: line 19: sum +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$arr\" >> $2\n   \
    \ else\n        echo \"$arr\" >> $3\n    fi\n    for ((i=0;i<${#arr[@]};++i));\
    \ do\n        for ((j=i+1;j<${#arr[@]};++j)); do\n            if [ $((arr[i]+arr[j]))\
    \ -gt $((arr[i]+arr[j-1])) ]; then\n                temp=${arr[i]}\n         \
    \       arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n     \
    \   done\n    done\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7wombura.sh: line 19: $2: ambiguous redirect

    /tmp/tmp7wombura.sh: line 21: $3: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"$@\")\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local len\n    local flag\n    local\
    \ odd\n    local even\n    local temp1\n    local temp2\n    local temp3\n   \
    \ local temp4\n    local temp5\n    local temp6\n    local temp7\n    local temp8\n\
    \    local temp9\n    local temp10\n    local temp11\n    local temp12\n    local\
    \ temp13\n    local temp14\n    local temp15\n    local temp16\n    local temp17\n\
    \    local temp18\n    local temp19\n    local temp20\n    local temp21\n    local\
    \ temp22\n    local temp23\n    local temp24\n    local temp25\n    local temp26\n\
    \    local temp27\n    local temp28\n    local temp29\n    local temp30\n    local\
    \ temp31\n    local temp32\n    local temp33\n    local temp34\n    local temp35\n\
    \    local temp36\n    local temp37\n    local temp38\n    local temp39\n    local\
    \ temp40\n    local temp41\n    local temp42\n    local temp43\n    local temp44\n\
    \    local temp45\n    local temp46\n    local temp47\n    local temp48\n    local\
    \ temp49\n    local temp50\n    local temp51\n    local temp52\n    local temp53\n\
    \    local temp54\n    local temp55\n    local temp56\n    local temp57\n    local\
    \ temp58\n    local temp59\n    local temp60\n    local temp61\n    local temp62\n\
    \    local temp63\n    local temp64\n    local temp65\n    local temp66\n    local\
    \ temp67\n    local temp68\n    local temp69\n    local temp70\n    local temp71\n\
    \    local temp72\n    local temp73\n    local temp74\n    local temp75\n    local\
    \ temp76\n    local temp77\n    local temp78\n    local temp79\n    local temp80\n\
    \    local temp81\n    local temp82\n    local temp83\n    local temp84\n    local\
    \ temp85\n    local temp86\n    local temp87\n    local temp88\n    local temp89\n\
    \    local temp90\n    local temp91\n    local temp92\n    local temp93\n    local\
    \ \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4\
    \ 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n\
    \    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate\
    \ \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local sum1\n    local sum2\n    local flag\n    sum=$(echo\
    \ $arr | awk '{sum+=$1} END {print sum}')\n    flag=0\n    sum1=$(echo $sum |\
    \ awk '{sum1+=$1} END {print sum1}')\n    sum2=$(echo $sum | awk '{sum2+=$1} END\
    \ {print sum2}')\n    for i in $(seq 0 $((${#arr[@]} - 1))); do\n        if [\
    \ $((sum1 % 2)) -eq 0 ]; then\n            flag=1\n            break\n       \
    \ fi\n    done\n    if [ $flag ]; then\n        for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n            if [ $((sum2 % 2)) -eq 0 ]; then\n                flag=0\n\
    \                break\n            fi\n        done\n    fi\n    if [ $flag ];\
    \ then\n        for i in $(seq 0 $((${#arr[@]} - 1))); do\n            if [ $((sum1\
    \ % 2)) -eq 0 ]; then\n                arr[i]=$((${arr[i]} + ${arr[i + 1]}))\n\
    \                arr[i+1]=$((${arr[i + 1]} + ${arr[i]}))\n                arr[i]=$((${arr[i]}\
    \ + ${arr[i]}))\n                arr[i+1]=$((${arr[i + 1]} + ${arr[i + 1]}))\n\
    \                sum1=$(echo $sum1 | awk '{sum1+=$1} END {print sum1}')\n    \
    \            sum2=$(echo $sum2 | awk '{sum2+=$1} END {print sum2}')\n        \
    \    else\n                arr[i]=$((${arr[i]} + ${arr[i + 1]}))\n           \
    \     arr[i+1]=$((${arr[i + 1]} + ${arr[i]}))\n                arr[i]=$((${arr[i]}\
    \ + ${arr[i]}))\n                arr[i+1]=$((${arr[i + 1]} + ${arr[i + 1]}))\n\
    \                sum1=$(echo $sum1 | awk '{sum1+=$1} END {print sum1}')\n    \
    \            sum2=$(echo $sum2 | awk '{sum2+=$1} END {print sum2}')\n        \
    \    fi\n        done\n    else\n        for i in $(seq 0 $((${#arr[@]} - 1)));\
    \ do\n            if [ $((sum1 % 2)) -eq 0 ]; then\n                arr[i]=$((${arr[i]}\
    \ + ${arr[i + 1]}))\n                arr[i+1]=$((${arr[i + 1]} + ${arr[i]}))\n\
    \                arr[i]=$((${arr[i]} + ${\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6hs_s5lp.sh: line 60: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6hs_s5lp.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    sum=0\n\
    \    for i in ${array[@]}; do\n        sum=$((sum+i))\n    done\n    if [ $((sum%2))\
    \ -eq 1 ]; then\n        echo \"${array[@]}\"\n    else\n        echo \"${array[@]}\"\
    \ | sort -n\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local temp2\n    local temp3\n \
    \   local temp4\n    local temp5\n    local temp6\n    local temp7\n    local\
    \ temp8\n    local temp9\n    local temp10\n    local temp11\n    local temp12\n\
    \    local temp13\n    local temp14\n    local temp15\n    local temp16\n    local\
    \ temp17\n    local temp18\n    local temp19\n    local temp20\n    local temp21\n\
    \    local temp22\n    local temp23\n    local temp24\n    local temp25\n    local\
    \ temp26\n    local temp27\n    local temp28\n    local temp29\n    local temp30\n\
    \    local temp31\n    local temp32\n    local temp33\n    local temp34\n    local\
    \ temp35\n    local temp36\n    local temp37\n    local temp38\n    local temp39\n\
    \    local temp40\n    local temp41\n    local temp42\n    local temp43\n    local\
    \ temp44\n    local temp45\n    local temp46\n    local temp47\n    local temp48\n\
    \    local temp49\n    local temp50\n    local temp51\n    local temp52\n    local\
    \ temp53\n    local temp54\n    local temp55\n    local temp56\n    local temp57\n\
    \    local temp58\n    local temp59\n    local temp60\n    local temp61\n    local\
    \ temp62\n    local temp63\n    local temp64\n    local temp65\n    local temp66\n\
    \    local temp67\n    local temp68\n    local temp69\n    local temp70\n    local\
    \ temp71\n    local temp72\n    local temp73\n    local temp74\n    local temp75\n\
    \    local temp76\n    local temp77\n    local temp78\n    local temp79\n    local\
    \ temp80\n    local temp81\n    local temp82\n    local temp83\n    local temp84\n\
    \    local temp85\n    local temp86\n    local temp87\n    local temp88\n    local\
    \ temp89\n    local temp90\n    local temp91\n    local temp92\n    local temp93\n\
    \    local temp94\n    local temp95\n    local temp96\n    local temp97\n    local\
    \ temp98\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local i\n  local\
    \ j\n  local temp\n  local result\n\n  sum=$(echo \"$array\" | awk '{sum+=$1}\
    \ END {print sum}')\n  result=$(echo \"$array\" | awk '{for (i=1;i<=NF;i++) print\
    \ $i}')\n\n  if [ \"$sum\" -eq \"0\" ]; then\n    echo \"$result\"\n  else\n \
    \   for ((i=0;i<${#result[@]};i++)); do\n      for ((j=i+1;j<${#result[@]};j++));\
    \ do\n        if [ \"$result[i]\" -gt \"$result[j]\" ]; then\n          temp=\"\
    $result[i]\"\n          result[i]=\"$result[j]\"\n          result[j]=\"$temp\"\
    \n        fi\n      done\n    done\n    echo \"${result[@]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n    local flag\n\n    sum=$(echo\
    \ $arr | awk '{sum+=$1} END {print sum}')\n    len=$(echo $arr | wc -w)\n\n  \
    \  if [ $(( len % 2 )) -eq 0 ]; then\n        flag=1\n    else\n        flag=0\n\
    \    fi\n\n    for (( i=1; i<len; i++ )); do\n        for (( j=0; j<i; j++ ));\
    \ do\n            if [ $(( sum - arr[j] )) -gt 0 ]; then\n                tmp=$arr[j]\n\
    \                arr[j]=$arr[i]\n                arr[i]=$tmp\n            fi\n\
    \        done\n    done\n\n    for (( k=0; k<len; k++ )); do\n        if [ $((\
    \ sum - arr[k] )) -eq $flag ]; then\n            tmp=$arr[k]\n            arr[k]=$arr[$((\
    \ len-1 ))]\n            arr[$(( len-1 ))]=tmp\n        fi\n    done\n\n    echo\
    \ $arr\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo \"$arr\"\n        return\n\
    \    fi\n    for ((i=0;i<${#arr[@]};++i)); do\n        temp=${arr[i]}\n      \
    \  j=$((i+1))\n        k=$((j-1))\n        while [ $((k<${#arr[@]})) -eq 0 ];\
    \ do\n            ((k++))\n        done\n        if [ $((k<${#arr[@]})) -eq 0\
    \ ]; then\n            ((j++))\n        fi\n        if [ $((j>i)) -eq 0 ]; then\n\
    \            ((i++))\n        fi\n        if [ $((temp<${arr[j]})) -eq 0 ]; then\n\
    \            arr[i]=${arr[i]}\n        else\n            arr[j]=${arr[j]}\n  \
    \      fi\n    done\n    echo \"$arr\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_k0we_62.sh: line 35: temp<: syntax error: operand expected (error
    token is "<")

    /tmp/tmp_k0we_62.sh: line 35: 2 4 3 0 1 5: syntax error in expression (error token
    is "4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=$1\n  local sum\n  local i\n  local j\n\
    \  local temp\n  local len\n  local odd\n  local even\n  local temp2\n  local\
    \ temp3\n  local temp4\n  local temp5\n  local temp6\n  local temp7\n  local temp8\n\
    \  local temp9\n  local temp10\n  local temp11\n  local temp12\n  local temp13\n\
    \  local temp14\n  local temp15\n  local temp16\n  local temp17\n  local temp18\n\
    \  local temp19\n  local temp20\n  local temp21\n  local temp22\n  local temp23\n\
    \  local temp24\n  local temp25\n  local temp26\n  local temp27\n  local temp28\n\
    \  local temp29\n  local temp30\n  local temp31\n  local temp32\n  local temp33\n\
    \  local temp34\n  local temp35\n  local temp36\n  local temp37\n  local temp38\n\
    \  local temp39\n  local temp40\n  local temp41\n  local temp42\n  local temp43\n\
    \  local temp44\n  local temp45\n  local temp46\n  local temp47\n  local temp48\n\
    \  local temp49\n  local temp50\n  local temp51\n  local temp52\n  local temp53\n\
    \  local temp54\n  local temp55\n  local temp56\n  local temp57\n  local temp58\n\
    \  local temp59\n  local temp60\n  local temp61\n  local temp62\n  local temp63\n\
    \  local temp64\n  local temp65\n  local temp66\n  local temp67\n  local temp68\n\
    \  local temp69\n  local temp70\n  local temp71\n  local temp72\n  local temp73\n\
    \  local temp74\n  local temp75\n  local temp76\n  local temp77\n  local temp78\n\
    \  local temp79\n  local temp80\n  local temp81\n  local temp82\n  local temp83\n\
    \  local temp84\n  local temp85\n  local temp86\n  local temp87\n  local temp88\n\
    \  local temp89\n  local temp90\n  local temp91\n  local temp92\n  local temp93\n\
    \  local temp94\n  local temp95\n  local temp96\n  local temp\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    local result\n    sum=$(echo \"$array\" | awk\
    \ '{sum+=$1} END {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo\
    \ \"$array\"\n    else\n        echo \"$array\" | sort -n -r\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local result\n    sum=$(echo $(( ${#array[@]}\
    \ - 1 )) | bc)\n    if [ $sum -gt 0 ]; then\n        echo \"$array is not sorted\"\
    \n        return 1\n    fi\n    local count\n    local count2\n    local count3\n\
    \    local count4\n    local count5\n    local count6\n    local count7\n    local\
    \ count8\n    local count9\n    local count10\n    local count11\n    local count12\n\
    \    local count13\n    local count14\n    local count15\n    local count16\n\
    \    local count17\n    local count18\n    local count19\n    local count20\n\
    \    local count21\n    local count22\n    local count23\n    local count24\n\
    \    local count25\n    local count26\n    local count27\n    local count28\n\
    \    local count29\n    local count30\n    local count31\n    local count32\n\
    \    local count33\n    local count34\n    local count35\n    local count36\n\
    \    local count37\n    local count38\n    local count39\n    local count40\n\
    \    local count41\n    local count42\n    local count43\n    local count44\n\
    \    local count45\n    local count46\n    local count47\n    local count48\n\
    \    local count49\n    local count50\n    local count51\n    local count52\n\
    \    local count53\n    local count54\n    local count55\n    local count56\n\
    \    local count57\n    local count58\n    local count59\n    local count60\n\
    \    local count61\n    local count62\n    local count63\n    local count64\n\
    \    local count65\n    local count66\n    local count67\n    local count68\n\
    \    local count69\n    local count70\n    local count71\n    local count72\n\
    \    local count73\n    local count74\n    local count75\n    local count76\n\
    \    local count77\n    local count78\n    local count79\n    local count80\n\
    \    local count81\n    local count82\n    local count83\n    local count84\n\
    \    local count85\n    local count86\n    local count87\n    local count88\n\
    \    local count89\n\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( $(echo $sum | awk '{print $1}') / 2 )) ]; then\n\
    \        echo \"$arr\"\n        return\n    fi\n    arr=($(echo $arr | awk '{print\
    \ $1}'))\n    arr=($(echo $arr | awk '{print $2}'))\n    arr=($(echo $arr | awk\
    \ '{print $3}'))\n    arr=($(echo $arr | awk '{print $4}'))\n    arr=($(echo $arr\
    \ | awk '{print $5}'))\n    arr=($(echo $arr | awk '{print $6}'))\n    arr=($(echo\
    \ $arr | awk '{print $7}'))\n    arr=($(echo $arr | awk '{print $8}'))\n    arr=($(echo\
    \ $arr | awk '{print $9}'))\n    arr=($(echo $arr | awk '{print $10}'))\n    arr=($(echo\
    \ $arr | awk '{print $11}'))\n    arr=($(echo $arr | awk '{print $12}'))\n   \
    \ arr=($(echo $arr | awk '{print $13}'))\n    arr=($(echo $arr | awk '{print $14}'))\n\
    \    arr=($(echo $arr | awk '{print $15}'))\n    arr=($(echo $arr | awk '{print\
    \ $16}'))\n    arr=($(echo $arr | awk '{print $17}'))\n    arr=($(echo $arr |\
    \ awk '{print $18}'))\n    arr=($(echo $arr | awk '{print $19}'))\n    arr=($(echo\
    \ $arr | awk '{print $20}'))\n    arr=($(echo $arr | awk '{print $21}'))\n   \
    \ arr=($(echo $arr | awk '{print $22}'))\n    arr=($(echo $arr | awk '{print $23}'))\n\
    \    arr=($(echo $arr | awk '{print $24}'))\n    arr=($(echo $arr | awk '{print\
    \ $25}'))\n    arr=($(echo $arr | awk '{print $26}'))\n    arr=($(echo $arr |\
    \ awk '{print $27}'))\n    arr=($(echo $arr | awk '{print $28}'))\n    arr=($(echo\
    \ $arr | awk '{print $29}'))\n    arr=(\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4moguewq.sh: line 54: syntax error near unexpected token `(''

    /tmp/tmp4moguewq.sh: line 54: `candidate() {''

    /tmp/tmp4moguewq.sh: line 55: sort_array: command not found

    /tmp/tmp4moguewq.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmp4moguewq.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local len=${#arr[@]}\n    local\
    \ flag\n\n    flag=0\n    while [ $i -lt $len ]; do\n        sum=$(( sum + arr[$i]\
    \ ))\n        i=$(( i + 1 ))\n    done\n\n    if [ $(( sum % 2 )) -eq 1 ]; then\n\
    \        flag=1\n        arr=( ${arr[@]/#/-} )\n        len=${#arr[@]}\n    fi\n\
    \n    while [ $j -lt $len ]; do\n        sum=$(( sum + arr[$j] ))\n        j=$((\
    \ j + 1 ))\n    done\n\n    if [ $(( sum % 2 )) -eq 0 ]; then\n        flag=1\n\
    \        arr=( ${arr[@]/#/-} )\n        len=${#arr[@]}\n    fi\n\n    while [\
    \ $k -lt $len ]; do\n        sum=$(( sum + arr[$k] ))\n        k=$(( k + 1 ))\n\
    \    done\n\n    if [ $(( sum % 2 )) -eq 0 ]; then\n        flag=1\n        arr=(\
    \ ${arr[@]/#/-} )\n        len=${#arr[@]}\n    fi\n\n    if [ $flag -eq 0 ]; then\n\
    \        echo \"$arr\"\n    else\n        echo \"$arr\"\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5fm0ie34.sh: line 44: -: syntax error: operand expected (error
    token is "-")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    local len\n    local flag\n    local count\n    local\
    \ temp1\n    local temp2\n    local temp3\n    local temp4\n    local temp5\n\
    \    local temp6\n    local temp7\n    local temp8\n    local temp9\n    local\
    \ temp10\n    local temp11\n    local temp12\n    local temp13\n    local temp14\n\
    \    local temp15\n    local temp16\n    local temp17\n    local temp18\n    local\
    \ temp19\n    local temp20\n    local temp21\n    local temp22\n    local temp23\n\
    \    local temp24\n    local temp25\n    local temp26\n    local temp27\n    local\
    \ temp28\n    local temp29\n    local temp30\n    local temp31\n    local temp32\n\
    \    local temp33\n    local temp34\n    local temp35\n    local temp36\n    local\
    \ temp37\n    local temp38\n    local temp39\n    local temp40\n    local temp41\n\
    \    local temp42\n    local temp43\n    local temp44\n    local temp45\n    local\
    \ temp46\n    local temp47\n    local temp48\n    local temp49\n    local temp50\n\
    \    local temp51\n    local temp52\n    local temp53\n    local temp54\n    local\
    \ temp55\n    local temp56\n    local temp57\n    local temp58\n    local temp59\n\
    \    local temp60\n    local temp61\n    local temp62\n    local temp63\n    local\
    \ temp64\n    local temp65\n    local temp66\n    local temp67\n    local temp68\n\
    \    local temp69\n    local temp70\n    local temp71\n    local temp72\n    local\
    \ temp73\n    local temp74\n    local temp75\n    local temp76\n    local temp77\n\
    \    local temp78\n    local temp79\n    local temp80\n    local temp81\n    local\
    \ temp82\n    local temp83\n    local temp84\n    local temp85\n    local temp86\n\
    \    local temp87\n    local temp88\n    local temp89\n    local temp90\n    local\
    \ temp91\n    local temp92\n    local temp93\n    local temp94\n    local temp95\n\
    \    local temp\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=0\n    for ((i=0; i<${#array[@]}; i++)); do\n   \
    \     sum=$((sum+${array[i]}))\n    done\n    if [ $((sum%2)) -eq 1 ]; then\n\
    \        echo \"${array[@]}\"\n    else\n        echo \"${array[@]}\" | sort -n\
    \ -r | head -n -1\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdshzuuqf.sh: line 18: sum+: syntax error: operand expected (error
    token is "+")

    /tmp/tmpdshzuuqf.sh: line 18: sum+2 4 3 0 1 5: syntax error in expression (error
    token is "4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local len1\n    local len2\n    local len3\n    local len4\n\
    \    local len5\n    local len6\n    local len7\n    local len8\n    local len9\n\
    \    local len10\n    local len11\n    local len12\n    local len13\n    local\
    \ len14\n    local len15\n    local len16\n    local len17\n    local len18\n\
    \    local len19\n    local len20\n    local len21\n    local len22\n    local\
    \ len23\n    local len24\n    local len25\n    local len26\n    local len27\n\
    \    local len28\n    local len29\n    local len30\n    local len31\n    local\
    \ len32\n    local len33\n    local len34\n    local len35\n    local len36\n\
    \    local len37\n    local len38\n    local len39\n    local len40\n    local\
    \ len41\n    local len42\n    local len43\n    local len44\n    local len45\n\
    \    local len46\n    local len47\n    local len48\n    local len49\n    local\
    \ len50\n    local len51\n    local len52\n    local len53\n    local len54\n\
    \    local len55\n    local len56\n    local len57\n    local len58\n    local\
    \ len59\n    local len60\n    local len61\n    local len62\n    local len63\n\
    \    local len64\n    local len65\n    local len66\n    local len67\n    local\
    \ len68\n    local len69\n    local len70\n    local len71\n    local len72\n\
    \    local len73\n    local len74\n    local len75\n    local len76\n    local\
    \ len77\n    local len78\n    local len79\n    local len80\n    local len81\n\
    \    local len82\n    local len83\n    local len84\n    local len85\n    local\
    \ len86\n    local len87\n    local len88\n    local len89\n    local len90\n\
    \    local len91\n    local len92\n    local len93\n    local len94\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local i\n  local\
    \ j\n  local temp\n  local result\n  sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n  if (( sum % 2 )); then\n    temp=$(echo \"$array\" | awk '{print\
    \ $1}')\n    for (( i=1; i<${#array[@]}; i++ )); do\n      result=$(echo \"$temp\
    \ + $i\" | bc)\n      if (( result % 2 )); then\n        array[$i]=$temp\n   \
    \   else\n        array[$i]=$i\n      fi\n    done\n  else\n    temp=$(echo \"\
    $array\" | awk '{print $1}')\n    for (( i=1; i<${#array[@]}; i++ )); do\n   \
    \   result=$(echo \"$temp - $i\" | bc)\n      if (( result % 2 )); then\n    \
    \    array[$i]=$temp\n      else\n        array[$i]=$i\n      fi\n    done\n \
    \ fi\n  echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local i\n  local\
    \ j\n  local k\n  local temp\n  local result\n  sum=$(echo \"$array\" | awk '{sum+=$1}\
    \ END {print sum}')\n  if [ \"$sum\" -gt \"$(( ${#array[@]} / 2 ))\" ]; then\n\
    \    temp=$(echo \"$array\" | awk '{print $1}')\n    for (( i=1; i<${#array[@]};\
    \ i++ )); do\n      result=$(echo \"$temp\" | awk '{print $1}')\n      j=$(( ${i}\
    \ - 1 ))\n      k=$(echo \"$temp\" | awk '{print $2}')\n      if [ \"$k\" -gt\
    \ \"$j\" ]; then\n        array[$i]=$(echo \"$temp\" | awk '{print $2}')\n   \
    \     array[$j]=$(echo \"$temp\" | awk '{print $1}')\n      fi\n      temp=$(echo\
    \ \"$temp\" | awk '{print $2}')\n    done\n  else\n    temp=$(echo \"$array\"\
    \ | awk '{print $1}')\n    for (( i=1; i<${#array[@]}; i++ )); do\n      result=$(echo\
    \ \"$temp\" | awk '{print $1}')\n      j=$(( ${i} - 1 ))\n      k=$(echo \"$temp\"\
    \ | awk '{print $2}')\n      if [ \"$k\" -lt \"$j\" ]; then\n        array[$i]=$(echo\
    \ \"$temp\" | awk '{print $1}')\n        array[$j]=$(echo \"$temp\" | awk '{print\
    \ $2}')\n      fi\n      temp=$(echo \"$temp\" | awk '{print $2}')\n    done\n\
    \  fi\n  echo \"$array\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local sum1\n    local sum2\n    local sum3\n    local sum4\n\
    \    local sum5\n    local sum6\n    local sum7\n    local sum8\n    local sum9\n\
    \    local sum10\n    local sum11\n    local sum12\n    local sum13\n    local\
    \ sum14\n    local sum15\n    local sum16\n    local sum17\n    local sum18\n\
    \    local sum19\n    local sum20\n    local sum21\n    local sum22\n    local\
    \ sum23\n    local sum24\n    local sum25\n    local sum26\n    local sum27\n\
    \    local sum28\n    local sum29\n    local sum30\n    local sum31\n    local\
    \ sum32\n    local sum33\n    local sum34\n    local sum35\n    local sum36\n\
    \    local sum37\n    local sum38\n    local sum39\n    local sum40\n    local\
    \ sum41\n    local sum42\n    local sum43\n    local sum44\n    local sum45\n\
    \    local sum46\n    local sum47\n    local sum48\n    local sum49\n    local\
    \ sum50\n    local sum51\n    local sum52\n    local sum53\n    local sum54\n\
    \    local sum55\n    local sum56\n    local sum57\n    local sum58\n    local\
    \ sum59\n    local sum60\n    local sum61\n    local sum62\n    local sum63\n\
    \    local sum64\n    local sum65\n    local sum66\n    local sum67\n    local\
    \ sum68\n    local sum69\n    local sum70\n    local sum71\n    local sum72\n\
    \    local sum73\n    local sum74\n    local sum75\n    local sum76\n    local\
    \ sum77\n    local sum78\n    local sum79\n    local sum80\n    local sum81\n\
    \    local sum82\n    local sum83\n    local sum84\n    local sum85\n    local\
    \ sum86\n    local sum87\n    local sum88\n    local sum89\n    local sum90\n\
    \    local sum91\n    local sum92\n    local sum93\n    local sum94\n    local\
    \ sum95\n    local sum96\n    local sum97\n    local sum98\n\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local i\n  local\
    \ j\n  local k\n  local temp\n  sum=0\n  for i in \"${array[@]}\"; do\n    sum=$((\
    \ sum + i ))\n  done\n  if (( sum % 2 )); then\n    for j in \"${array[@]}\";\
    \ do\n      temp=$(( j - 1 ))\n      k=$(( temp + 1 ))\n      while (( k <= j\
    \ )); do\n        array[k]=${array[k]}\n        k=$(( k + 1 ))\n      done\n \
    \     array[j]=${array[j]}\n    done\n  else\n    for j in \"${array[@]}\"; do\n\
    \      temp=$(( j + 1 ))\n      k=$(( temp - 1 ))\n      while (( k >= j )); do\n\
    \        array[k]=${array[k]}\n        k=$(( k - 1 ))\n      done\n      array[j]=${array[j]}\n\
    \    done\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=$1\n  local sum=0\n  local i=0\n  local\
    \ j=0\n  local temp\n  local result\n  while [ $i -lt ${#array[@]} ]; do\n   \
    \ sum=$(( sum + ${array[$i]} ))\n    i=$(( i + 1 ))\n  done\n  result=()\n  while\
    \ [ $j -lt ${#array[@]} ]; do\n    if [ $(( sum % 2 )) -eq 0 ]; then\n      temp=${array[$j]}\n\
    \      array[$j]=${array[$(( j - 1 ))]}\n      array[$(( j - 1 ))]=${temp}\n \
    \     j=$(( j + 1 ))\n    else\n      temp=${array[$j]}\n      array[$j]=${array[$((\
    \ j + 1 ))]}\n      array[$(( j + 1 ))]=${temp}\n      j=$(( j + 1 ))\n    fi\n\
    \  done\n  result=( \"${array[@]}\" )\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=25 encoding='utf-8'>
  timestamp: 1660033808
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n    if [ $((sum%2)) -eq 1 ]; then\n        echo \"$array\"\n\
    \    else\n        echo \"$array\" | sort -n -r\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local len\n    local\
    \ i\n    local j\n    local k\n    local temp\n    local temp2\n    local temp3\n\
    \    local temp4\n    local temp5\n    local temp6\n    local temp7\n    local\
    \ temp8\n    local temp9\n    local temp10\n    local temp11\n    local temp12\n\
    \    local temp13\n    local temp14\n    local temp15\n    local temp16\n    local\
    \ temp17\n    local temp18\n    local temp19\n    local temp20\n    local temp21\n\
    \    local temp22\n    local temp23\n    local temp24\n    local temp25\n    local\
    \ temp26\n    local temp27\n    local temp28\n    local temp29\n    local temp30\n\
    \    local temp31\n    local temp32\n    local temp33\n    local temp34\n    local\
    \ temp35\n    local temp36\n    local temp37\n    local temp38\n    local temp39\n\
    \    local temp40\n    local temp41\n    local temp42\n    local temp43\n    local\
    \ temp44\n    local temp45\n    local temp46\n    local temp47\n    local temp48\n\
    \    local temp49\n    local temp50\n    local temp51\n    local temp52\n    local\
    \ temp53\n    local temp54\n    local temp55\n    local temp56\n    local temp57\n\
    \    local temp58\n    local temp59\n    local temp60\n    local temp61\n    local\
    \ temp62\n    local temp63\n    local temp64\n    local temp65\n    local temp66\n\
    \    local temp67\n    local temp68\n    local temp69\n    local temp70\n    local\
    \ temp71\n    local temp72\n    local temp73\n    local temp74\n    local temp75\n\
    \    local temp76\n    local temp77\n    local temp78\n    local temp79\n    local\
    \ temp80\n    local temp81\n    local temp82\n    local temp83\n    local temp84\n\
    \    local temp85\n    local temp86\n    local temp87\n    local temp88\n    local\
    \ temp89\n    local temp90\n    local temp91\n    local temp92\n    local temp93\n\
    \    local temp94\n    local temp95\n    local temp96\n    local temp97\n    local\
    \ \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4\
    \ 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n\
    \    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate\
    \ \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n  \
    \  local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n   \
    \ local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local\
    \ O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n\
    \    local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n \
    \   local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local\
    \ o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n\
    \    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n  \
    \  local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n   \
    \ local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local\
    \ O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n\
    \    local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n \
    \   local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n  \
    \  local e\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local result\n    local flag\n\
    \n    sum=$(echo $arr | awk '{sum+=$1} END {print sum}')\n    len=$(echo $arr\
    \ | wc -w)\n    if [ $(( $sum % 2 )) -eq 0 ]; then\n        flag=asc\n    else\n\
    \        flag=desc\n    fi\n\n    if [ $flag == \"asc\" ]; then\n        echo\
    \ \"Sort the array in ascending order\"\n    else\n        echo \"Sort the array\
    \ in descending order\"\n    fi\n\n    for (( i=1; i<$len; i++ )); do\n      \
    \  temp=$(echo $arr | awk -v i=\"$i\" '{print $i}')\n        for (( j=$i; j<$len;\
    \ j++ )); do\n            if [ $(( $temp + $arr[j] )) -gt $sum ]; then\n     \
    \           arr[$j+1]=$arr[j]\n                arr[$j]=$temp\n            fi\n\
    \        done\n    done\n\n    result=$(echo $arr | awk '{print $1\" \"$2\" \"\
    $3\" \"$4\" \"$5}')\n    echo \"$result\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local temp\n    local result\n    local sum1\n\
    \    local sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n\
    \    local sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n\
    \    local sum12\n    local sum13\n    local sum14\n    local sum15\n    local\
    \ sum16\n    local sum17\n    local sum18\n    local sum19\n    local sum20\n\
    \    local sum21\n    local sum22\n    local sum23\n    local sum24\n    local\
    \ sum25\n    local sum26\n    local sum27\n    local sum28\n    local sum29\n\
    \    local sum30\n    local sum31\n    local sum32\n    local sum33\n    local\
    \ sum34\n    local sum35\n    local sum36\n    local sum37\n    local sum38\n\
    \    local sum39\n    local sum40\n    local sum41\n    local sum42\n    local\
    \ sum43\n    local sum44\n    local sum45\n    local sum46\n    local sum47\n\
    \    local sum48\n    local sum49\n    local sum50\n    local sum51\n    local\
    \ sum52\n    local sum53\n    local sum54\n    local sum55\n    local sum56\n\
    \    local sum57\n    local sum58\n    local sum59\n    local sum60\n    local\
    \ sum61\n    local sum62\n    local sum63\n    local sum64\n    local sum65\n\
    \    local sum66\n    local sum67\n    local sum68\n    local sum69\n    local\
    \ sum70\n    local sum71\n    local sum72\n    local sum73\n    local sum74\n\
    \    local sum75\n    local sum76\n    local sum77\n    local sum78\n    local\
    \ sum79\n    local sum80\n    local sum81\n    local sum82\n    local sum83\n\
    \    local sum84\n    local sum85\n    local sum86\n    local sum87\n    local\
    \ sum88\n    local sum89\n    local sum90\n    local sum91\n    local sum92\n\
    \    local sum93\n    local sum94\n    local sum95\n    local sum96\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local tmp\n    local flag\n    local flag2\n\
    \    local flag3\n    local flag4\n    local flag5\n    local flag6\n    local\
    \ flag7\n    local flag8\n    local flag9\n    local flag10\n    local flag11\n\
    \    local flag12\n    local flag13\n    local flag14\n    local flag15\n    local\
    \ flag16\n    local flag17\n    local flag18\n    local flag19\n    local flag20\n\
    \    local flag21\n    local flag22\n    local flag23\n    local flag24\n    local\
    \ flag25\n    local flag26\n    local flag27\n    local flag28\n    local flag29\n\
    \    local flag30\n    local flag31\n    local flag32\n    local flag33\n    local\
    \ flag34\n    local flag35\n    local flag36\n    local flag37\n    local flag38\n\
    \    local flag39\n    local flag40\n    local flag41\n    local flag42\n    local\
    \ flag43\n    local flag44\n    local flag45\n    local flag46\n    local flag47\n\
    \    local flag48\n    local flag49\n    local flag50\n    local flag51\n    local\
    \ flag52\n    local flag53\n    local flag54\n    local flag55\n    local flag56\n\
    \    local flag57\n    local flag58\n    local flag59\n    local flag60\n    local\
    \ flag61\n    local flag62\n    local flag63\n    local flag64\n    local flag65\n\
    \    local flag66\n    local flag67\n    local flag68\n    local flag69\n    local\
    \ flag70\n    local flag71\n    local flag72\n    local flag73\n    local flag74\n\
    \    local flag75\n    local flag76\n    local flag77\n    local flag78\n    local\
    \ flag79\n    local flag80\n    local flag81\n    local flag82\n    local flag83\n\
    \    local flag84\n    local flag85\n    local flag86\n    local flag87\n    local\
    \ flag88\n    local flag89\n    local flag90\n    local flag91\n    local flag92\n\
    \    local flag93\n    local flag94\n    local flag95\n    local flag96\n    local\
    \ flag\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local flag\n    local count\n    local sum1\n    local sum2\n    local sum3\n\
    \    local sum4\n    local sum5\n    local sum6\n    local sum7\n    local sum8\n\
    \    local sum9\n    local sum10\n    local sum11\n    local sum12\n    local\
    \ sum13\n    local sum14\n    local sum15\n    local sum16\n    local sum17\n\
    \    local sum18\n    local sum19\n    local sum20\n    local sum21\n    local\
    \ sum22\n    local sum23\n    local sum24\n    local sum25\n    local sum26\n\
    \    local sum27\n    local sum28\n    local sum29\n    local sum30\n    local\
    \ sum31\n    local sum32\n    local sum33\n    local sum34\n    local sum35\n\
    \    local sum36\n    local sum37\n    local sum38\n    local sum39\n    local\
    \ sum40\n    local sum41\n    local sum42\n    local sum43\n    local sum44\n\
    \    local sum45\n    local sum46\n    local sum47\n    local sum48\n    local\
    \ sum49\n    local sum50\n    local sum51\n    local sum52\n    local sum53\n\
    \    local sum54\n    local sum55\n    local sum56\n    local sum57\n    local\
    \ sum58\n    local sum59\n    local sum60\n    local sum61\n    local sum62\n\
    \    local sum63\n    local sum64\n    local sum65\n    local sum66\n    local\
    \ sum67\n    local sum68\n    local sum69\n    local sum70\n    local sum71\n\
    \    local sum72\n    local sum73\n    local sum74\n    local sum75\n    local\
    \ sum76\n    local sum77\n    local sum78\n    local sum79\n    local sum80\n\
    \    local sum81\n    local sum82\n    local sum83\n    local sum84\n    local\
    \ sum85\n    local sum86\n    local sum87\n    local sum88\n    local sum89\n\
    \    local sum90\n    local sum91\n    local sum92\n    local sum93\n    \n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local temp\n    local result\n    local sum1\n    local sum2\n\
    \    local sum3\n    local sum4\n    local sum5\n    local sum6\n    local sum7\n\
    \    local sum8\n    local sum9\n    local sum10\n    local sum11\n    local sum12\n\
    \    local sum13\n    local sum14\n    local sum15\n    local sum16\n    local\
    \ sum17\n    local sum18\n    local sum19\n    local sum20\n    local sum21\n\
    \    local sum22\n    local sum23\n    local sum24\n    local sum25\n    local\
    \ sum26\n    local sum27\n    local sum28\n    local sum29\n    local sum30\n\
    \    local sum31\n    local sum32\n    local sum33\n    local sum34\n    local\
    \ sum35\n    local sum36\n    local sum37\n    local sum38\n    local sum39\n\
    \    local sum40\n    local sum41\n    local sum42\n    local sum43\n    local\
    \ sum44\n    local sum45\n    local sum46\n    local sum47\n    local sum48\n\
    \    local sum49\n    local sum50\n    local sum51\n    local sum52\n    local\
    \ sum53\n    local sum54\n    local sum55\n    local sum56\n    local sum57\n\
    \    local sum58\n    local sum59\n    local sum60\n    local sum61\n    local\
    \ sum62\n    local sum63\n    local sum64\n    local sum65\n    local sum66\n\
    \    local sum67\n    local sum68\n    local sum69\n    local sum70\n    local\
    \ sum71\n    local sum72\n    local sum73\n    local sum74\n    local sum75\n\
    \    local sum76\n    local sum77\n    local sum78\n    local sum79\n    local\
    \ sum80\n    local sum81\n    local sum82\n    local sum83\n    local sum84\n\
    \    local sum85\n    local sum86\n    local sum87\n    local sum88\n    local\
    \ sum89\n    local sum90\n    local sum91\n    local sum92\n    local sum93\n\
    \    local sum94\n    local sum95\n    local sum96\n    local sum97\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( ${#arr} % 2 )) ]; then\n        echo \"descending\"\
    \n        arr=($(sort -n <<<\"${arr[@]}\" | sed 's/^/-/g'))\n    else\n      \
    \  echo \"ascending\"\n        arr=($(sort <<<\"${arr[@]}\" | sed 's/^/+/g'))\n\
    \    fi\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        for (( j=0; j<i; j++\
    \ )); do\n            if [ ${arr[j]} -gt ${arr[j+1]} ]; then\n               \
    \ temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n                arr[j+1]=${temp}\n\
    \            fi\n        done\n    done\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local len\n    local temp\n    local flag\n    local tmp\n    local tmp2\n\
    \    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n\
    \    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n\
    \    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local\
    \ tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n\
    \    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local\
    \ tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n\
    \    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local\
    \ tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n\
    \    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local\
    \ tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n\
    \    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local\
    \ tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n\
    \    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local\
    \ tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n\
    \    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local\
    \ tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n\
    \    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local\
    \ tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n\
    \    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local\
    \ tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n\
    \    local tmp94\n    local tmp95\n    local tmp96\n    local tmp\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    sum=$(echo $(( ${#array[@]} - 1 )) | bc)\n    if [ $sum\
    \ -gt 0 ]; then\n        echo \"$array is not sorted\"\n        return 1\n   \
    \ fi\n    for (( i=1; i<${#array[@]}; i++ )); do\n        sum=$(echo $(( ${array[$i]}\
    \ + ${array[$(( $i - 1 ))]} )) | bc)\n        if [ $sum -gt 0 ]; then\n      \
    \      echo \"$array is not sorted\"\n            return 1\n        fi\n    done\n\
    \    for (( j=1; j<${#array[@]}; j++ )); do\n        sum=$(echo $(( ${array[$j]}\
    \ + ${array[$(( $j - 1 ))]} )) | bc)\n        if [ $sum -gt 0 ]; then\n      \
    \      echo \"$array is not sorted\"\n            return 1\n        fi\n    done\n\
    \    for (( i=1; i<${#array[@]}; i++ )); do\n        temp=$(echo $(( ${array[$i]}\
    \ + ${array[$(( $i - 1 ))]} )) | bc)\n        if [ $temp -gt 0 ]; then\n     \
    \       array[$i]=${array[$i]}\n        fi\n    done\n    for (( j=1; j<${#array[@]};\
    \ j++ )); do\n        temp=$(echo $(( ${array[$j]} + ${array[$(( $j - 1 ))]} ))\
    \ | bc)\n        if [ $temp -gt 0 ]; then\n            array[$j]=${array[$j]}\n\
    \        fi\n    done\n    for (( i=1; i<${#array[@]}; i++ )); do\n        array[$i]=${array[$i]}\n\
    \    done\n    for (( j=1; j<${#array[@]}; j++ )); do\n        array[$j]=${array[$j]}\n\
    \    done\n    echo \"$array is sorted\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    sum=$((\
    \ ${arr[0]} + ${arr[${#arr[@]} - 1]} ))\n    if [ $sum -gt ${#arr[@]} ]; then\n\
    \        echo \"Invalid input\"\n        return 1\n    fi\n    for (( i=1; i<${#arr[@]};\
    \ i++ )); do\n        local j\n        local k\n        if [ $(( ${arr[i]} + ${arr[i-1]}\
    \ )) -gt $(( ${arr[i]} + ${arr[i+1]} )) ]; then\n            arr[i]=${arr[i-1]}\n\
    \            arr[i-1]=${arr[i]}\n            arr[i]=${arr[i+1]}\n            arr[i+1]=${arr[i]}\n\
    \        fi\n    done\n    arr=( \"${arr[@]:0:${#arr[@]}}\" )\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3bkcvbin.sh: line 14: +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local index\n  local\
    \ tmp\n  local result\n  local i\n  sum=0\n  for i in \"${array[@]}\"; do\n  \
    \  sum=$(( sum + i ))\n  done\n  if (( sum % 2 )); then\n    index=2\n  else\n\
    \    index=1\n  fi\n  result=()\n  while (( index > 0 )); do\n    tmp=${array[index-1]}\n\
    \    array[index-1]=${array[index]}\n    array[index]=tmp\n    index=$(( index\
    \ - 1 ))\n  done\n  result=( \"${array[@]}\" )\n  echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for i in $arr; do\n        sum=$((\
    \ $sum + $i ))\n    done\n    if [ $(( $sum % 2 )) -eq 1 ]; then\n        arr=(\
    \ $(sort -n -k 1,1 -k 2,2 -k 3,3 -k 4,4 -k 5,5 -k 6,6 -k 7,7 -k 8,8 -k 9,9 -k\
    \ 10,10 -k 11,11 -k 12,12 -k 13,13 -k 14,14 -k 15,15 -k 16,16 -k 17,17 -k 18,18\
    \ -k 19,19 -k 20,20 -k 21,21 -k 22,22 -k 23,23 -k 24,24 -k 25,25 -k 26,26 -k 27,27\
    \ -k 28,28 -k 29,29 -k 30,30 -k 31,31 -k 32,32 -k 33,33 -k 34,34 -k 35,35 -k 36,36\
    \ -k 37,37 -k 38,38 -k 39,39 -k 40,40 -k 41,41 -k 42,42 -k 43,43 -k 44,44 -k 45,45\
    \ -k 46,46 -k 47,47 -k 48,48 -k 49,49 -k 50,50 -k 51,51 -k 52,52 -k 53,53 -k 54,54\
    \ -k 55,55 -k 56,56 -k 57,57 -k 58,58 -k 59,59 -k 60,60 -k 61,61 -k 62,62 -k 63,63\
    \ -k 64,64 -k 65,65 -k 66,66 -k 67,67 -k 68,68 -k 69,69 -k 70,70 -k 71,71 -k 72,72\
    \ -k 73,73 -k 74,74 -k 75,75 -k 76,76 -k 77,77 -k 78,78 -k 79,79 -k 80,80 -k 81,81\
    \ -k 82,82 -k 83,83 -k 84,84 -k 85,85 -k 86,86 -k 87,87 -k 88,88 -k 89,89 -k 90,90\
    \ -k 91,91 -k 92,92 -k 93,93 \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn4c9t3a7.sh: line 22: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn4c9t3a7.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local temp\n    local len=${#arr[@]}\n    local\
    \ odd\n    local even\n    local reverse\n    local tmp\n    local result\n  \
    \  local sum1\n    local sum2\n    local sum3\n    local sum4\n    local sum5\n\
    \    local sum6\n    local sum7\n    local sum8\n    local sum9\n    local sum10\n\
    \    local sum11\n    local sum12\n    local sum13\n    local sum14\n    local\
    \ sum15\n    local sum16\n    local sum17\n    local sum18\n    local sum19\n\
    \    local sum20\n    local sum21\n    local sum22\n    local sum23\n    local\
    \ sum24\n    local sum25\n    local sum26\n    local sum27\n    local sum28\n\
    \    local sum29\n    local sum30\n    local sum31\n    local sum32\n    local\
    \ sum33\n    local sum34\n    local sum35\n    local sum36\n    local sum37\n\
    \    local sum38\n    local sum39\n    local sum40\n    local sum41\n    local\
    \ sum42\n    local sum43\n    local sum44\n    local sum45\n    local sum46\n\
    \    local sum47\n    local sum48\n    local sum49\n    local sum50\n    local\
    \ sum51\n    local sum52\n    local sum53\n    local sum54\n    local sum55\n\
    \    local sum56\n    local sum57\n    local sum58\n    local sum59\n    local\
    \ sum60\n    local sum61\n    local sum62\n    local sum63\n    local sum64\n\
    \    local sum65\n    local sum66\n    local sum67\n    local sum68\n    local\
    \ sum69\n    local sum70\n    local sum71\n    local sum72\n    local sum73\n\
    \    local sum74\n    local sum75\n    local sum76\n    local sum77\n    local\
    \ sum78\n    local sum79\n    local sum80\n    local sum81\n    local sum82\n\
    \    local sum83\n    local sum84\n    local sum85\n    local sum86\n    local\
    \ sum87\n    local sum88\n    local sum89\n    local sum90\n    local sum91\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $sum -gt $(( $(echo $arr | awk '{sum+=$1} END {print sum}')\
    \ % 2 )) ]; then\n        echo \"$arr\"\n        return\n    fi\n    for (( i=1;\
    \ i<${#arr[@]}; i++ )); do\n        sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n        if [ $sum -gt $(( $(echo $arr | awk '{sum+=$1} END {print sum}')\
    \ % 2 )) ]; then\n            echo \"$arr\"\n            return\n        fi\n\
    \    done\n    for (( j=1; j<${#arr[@]}; j++ )); do\n        sum=$(echo $arr |\
    \ awk '{sum+=$1} END {print sum}')\n        if [ $sum -gt $(( $(echo $arr | awk\
    \ '{sum+=$1} END {print sum}') % 2 )) ]; then\n            echo \"$arr\"\n   \
    \         return\n        fi\n    done\n    for (( k=1; k<${#arr[@]}; k++ ));\
    \ do\n        sum=$(echo $arr | awk '{sum+=$1} END {print sum}')\n        if [\
    \ $sum -gt $(( $(echo $arr | awk '{sum+=$1} END {print sum}') % 2 )) ]; then\n\
    \            echo \"$arr\"\n            return\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    sum=$(echo \"$array\" | awk '{sum+=$1}\
    \ END {print sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$array\"\
    \n        return\n    fi\n    for (( i=1; i<${#array}; i++ )); do\n        for\
    \ (( j=0; j<i; j++ )); do\n            if [ $(( ${array[j]} + ${array[j+1]} ))\
    \ -gt $(( ${array[j]} )) ]; then\n                temp=${array[j]}\n         \
    \       array[j]=${array[j+1]}\n                array[j+1]=$temp\n           \
    \ fi\n        done\n    done\n    echo \"$array\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    sum=$((${arr[0]}\
    \ + ${arr[${#arr[@]}-1]}))\n    if [ $sum -gt ${#arr[@]} ]; then\n        echo\
    \ \"$arr: invalid input\"\n        return 1\n    fi\n    if [ $sum -eq ${#arr[@]}\
    \ ]; then\n        echo \"$arr: invalid input\"\n        return 1\n    fi\n  \
    \  if [ $sum -eq 0 ]; then\n        echo \"$arr: invalid input\"\n        return\
    \ 1\n    fi\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        local j\n     \
    \   local tmp\n        tmp=$((${arr[i]} + ${arr[i-1]}))\n        if [ $tmp -gt\
    \ ${#arr[@]} ]; then\n            echo \"$arr: invalid input\"\n            return\
    \ 1\n        fi\n        if [ $tmp -eq ${#arr[@]} ]; then\n            echo \"\
    $arr: invalid input\"\n            return 1\n        fi\n        if [ $tmp -eq\
    \ 0 ]; then\n            echo \"$arr: invalid input\"\n            return 1\n\
    \        fi\n        if [ $(( ${arr[i]} + ${arr[i-1]} )) -gt 0 ]; then\n     \
    \       arr[i]=$tmp\n        else\n            arr[i-1]=$tmp\n        fi\n   \
    \ done\n    echo \"$arr\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpks3c4ql0.sh: line 14: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local temp2\n    local temp3\n    local temp4\n    local temp5\n    local\
    \ temp6\n    local temp7\n    local temp8\n    local temp9\n    local temp10\n\
    \    local temp11\n    local temp12\n    local temp13\n    local temp14\n    local\
    \ temp15\n    local temp16\n    local temp17\n    local temp18\n    local temp19\n\
    \    local temp20\n    local temp21\n    local temp22\n    local temp23\n    local\
    \ temp24\n    local temp25\n    local temp26\n    local temp27\n    local temp28\n\
    \    local temp29\n    local temp30\n    local temp31\n    local temp32\n    local\
    \ temp33\n    local temp34\n    local temp35\n    local temp36\n    local temp37\n\
    \    local temp38\n    local temp39\n    local temp40\n    local temp41\n    local\
    \ temp42\n    local temp43\n    local temp44\n    local temp45\n    local temp46\n\
    \    local temp47\n    local temp48\n    local temp49\n    local temp50\n    local\
    \ temp51\n    local temp52\n    local temp53\n    local temp54\n    local temp55\n\
    \    local temp56\n    local temp57\n    local temp58\n    local temp59\n    local\
    \ temp60\n    local temp61\n    local temp62\n    local temp63\n    local temp64\n\
    \    local temp65\n    local temp66\n    local temp67\n    local temp68\n    local\
    \ temp69\n    local temp70\n    local temp71\n    local temp72\n    local temp73\n\
    \    local temp74\n    local temp75\n    local temp76\n    local temp77\n    local\
    \ temp78\n    local temp79\n    local temp80\n    local temp81\n    local temp82\n\
    \    local temp83\n    local temp84\n    local temp85\n    local temp86\n    local\
    \ temp87\n    local temp88\n    local temp89\n    local temp90\n    local temp91\n\
    \    local temp92\n    local temp93\n    local temp94\n    local temp95\n    local\
    \ temp96\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local result\n    local count\n    local i\n    local j\n\
    \    local k\n    local tmp\n    local len\n    local odd\n    local even\n  \
    \  local tmp\n    local result\n    local count\n    local i\n    local j\n  \
    \  local k\n    local tmp\n    local len\n    local odd\n    local even\n    local\
    \ tmp\n    local result\n    local count\n    local i\n    local j\n    local\
    \ k\n    local tmp\n    local len\n    local odd\n    local even\n    local tmp\n\
    \    local result\n    local count\n    local i\n    local j\n    local k\n  \
    \  local tmp\n    local len\n    local odd\n    local even\n    local tmp\n  \
    \  local result\n    local count\n    local i\n    local j\n    local k\n    local\
    \ tmp\n    local len\n    local odd\n    local even\n    local tmp\n    local\
    \ result\n    local count\n    local i\n    local j\n    local k\n    local tmp\n\
    \    local len\n    local odd\n    local even\n    local tmp\n    local result\n\
    \    local count\n    local i\n    local j\n    local k\n    local tmp\n    local\
    \ len\n    local odd\n    local even\n    local tmp\n    local result\n    local\
    \ count\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\
    \    local odd\n    local even\n    local tmp\n    local result\n    local count\n\
    \    local i\n    local j\n    local k\n    local tmp\n    local len\n    local\
    \ odd\n    local even\n    local tmp\n    local result\n    local count\n    local\
    \ i\n    local j\n    local k\n    local tmp\n    local len\n    local odd\n \
    \   local even\n    local tmp\n    local result\n    local count\n    local i\n\
    \    local j\n    local k\n    local tmp\n    local len\n    local odd\n    local\
    \ even\n    local tmp\n    local result\n    local count\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n    local \n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=\"$1\"\n  local sum\n  local i\n  local\
    \ j\n  local k\n  local temp\n  local result\n  sum=$(echo \"$array\" | awk '{sum+=$1}\
    \ END {print sum}')\n  if [ $((sum%2)) -eq 0 ]; then\n    temp=$(echo \"$array\"\
    \ | awk '{print $1}')\n    for (( i=1; i<${#array[@]}; i++ )); do\n      result=$(echo\
    \ \"$temp\" | awk '{print $1}')\n      j=$((i-1))\n      k=$(echo \"$temp\" |\
    \ awk '{print $2}')\n      while [ $((j>=0)) && ((j<${#array[@]})) ]; do\n   \
    \     if [ $((k>=0)) && ((k<${#array[@]})) ]; then\n          if [ \"$result\"\
    \ -gt \"$array[j]\" ]; then\n            array[j]=$result\n            j=$((j-1))\n\
    \          elif [ \"$result\" -lt \"$array[k]\" ]; then\n            array[k]=$result\n\
    \            k=$((k-1))\n          fi\n        fi\n      done\n    done\n  else\n\
    \    temp=$(echo \"$array\" | awk '{print $1}')\n    for (( i=1; i<${#array[@]};\
    \ i++ )); do\n      result=$(echo \"$temp\" | awk '{print $1}')\n      j=$((i-1))\n\
    \      k=$(echo \"$temp\" | awk '{print $2}')\n      while [ $((j>=0)) && ((j<${#array[@]}))\
    \ ]; do\n        if [ $((k>=0)) && ((k<${#array[@]})) ]; then\n          if [\
    \ \"$result\" -gt \"$array[k]\" ]; then\n            array[k]=$result\n      \
    \      k=$((k-1))\n          elif [ \"$result\" -lt \"$array[j]\" ]; then\n  \
    \          array[j]=$result\n            j=$((j-1))\n          fi\n        fi\n\
    \      done\n    done\n  fi\n  echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphdzat9r_.sh: line 25: syntax error near unexpected token `]''

    /tmp/tmphdzat9r_.sh: line 25: `      while [ $((j>=0)) && ((j<${#array[@]})) ];
    do''

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local temp\n    local result\n    local sum1\n\
    \    local sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n\
    \    local sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n\
    \    local sum12\n    local sum13\n    local sum14\n    local sum15\n    local\
    \ sum16\n    local sum17\n    local sum18\n    local sum19\n    local sum20\n\
    \    local sum21\n    local sum22\n    local sum23\n    local sum24\n    local\
    \ sum25\n    local sum26\n    local sum27\n    local sum28\n    local sum29\n\
    \    local sum30\n    local sum31\n    local sum32\n    local sum33\n    local\
    \ sum34\n    local sum35\n    local sum36\n    local sum37\n    local sum38\n\
    \    local sum39\n    local sum40\n    local sum41\n    local sum42\n    local\
    \ sum43\n    local sum44\n    local sum45\n    local sum46\n    local sum47\n\
    \    local sum48\n    local sum49\n    local sum50\n    local sum51\n    local\
    \ sum52\n    local sum53\n    local sum54\n    local sum55\n    local sum56\n\
    \    local sum57\n    local sum58\n    local sum59\n    local sum60\n    local\
    \ sum61\n    local sum62\n    local sum63\n    local sum64\n    local sum65\n\
    \    local sum66\n    local sum67\n    local sum68\n    local sum69\n    local\
    \ sum70\n    local sum71\n    local sum72\n    local sum73\n    local sum74\n\
    \    local sum75\n    local sum76\n    local sum77\n    local sum78\n    local\
    \ sum79\n    local sum80\n    local sum81\n    local sum82\n    local sum83\n\
    \    local sum84\n    local sum85\n    local sum86\n    local sum87\n    local\
    \ sum88\n    local sum89\n    local sum90\n    local sum91\n    local sum92\n\
    \    local sum93\n    local sum94\n    local sum95\n    local sum96\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local temp\n    local len\n    local flag\n\n    sum=$(echo $arr | awk\
    \ '{sum+=$1} END {print sum}')\n    len=$(echo $arr | wc -w)\n    flag=0\n   \
    \ for ((i=0; i<$len; i++)); do\n        if [ $((sum % 2)) -eq 0 ]; then\n    \
    \        temp=$(echo $arr | awk -v i=$i '{print $i}')\n            arr[i]=$temp\n\
    \            flag=1\n        fi\n    done\n    if [ $flag -eq 0 ]; then\n    \
    \    flag=0\n        for ((j=$len-1; j>=0; j--)); do\n            temp=$(echo\
    \ $arr | awk -v j=$j '{print $j}')\n            arr[j]=$temp\n            flag=1\n\
    \        done\n    fi\n    echo $arr\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local flag\n\n    sum=$(echo\
    \ $arr | awk '{sum+=$1} END {print sum}')\n    len=$((${#arr[@]} - 1))\n    flag=0\n\
    \    for (( i=1; i<=$len; i++ )); do\n        if [ $(( sum % 2 )) -eq 0 ]; then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [ $flag -eq\
    \ 0 ]; then\n        echo \"$arr\"\n    else\n        echo \"$arr\"\n    fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local result\n    sum=$(echo \"$array\" | awk '{sum+=$1} END\
    \ {print sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$array\"\n\
    \    else\n        echo \"$array\" | sort -n -r\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local len\n    local odd\n    local\
    \ even\n    local result\n    local tmp\n    local tmp2\n    local tmp3\n    local\
    \ tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local\
    \ tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n \
    \   local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local\
    \ tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n\
    \    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local\
    \ tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n\
    \    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local\
    \ tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n\
    \    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local\
    \ tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n\
    \    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local\
    \ tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n\
    \    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local\
    \ tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n\
    \    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local\
    \ tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n\
    \    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local\
    \ tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n\
    \    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local\
    \ tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n\
    \    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local tmp\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local \n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local flag\n    local flag2\n\
    \    local flag3\n    local flag4\n    local flag5\n    local flag6\n    local\
    \ flag7\n    local flag8\n    local flag9\n    local flag10\n    local flag11\n\
    \    local flag12\n    local flag13\n    local flag14\n    local flag15\n    local\
    \ flag16\n    local flag17\n    local flag18\n    local flag19\n    local flag20\n\
    \    local flag21\n    local flag22\n    local flag23\n    local flag24\n    local\
    \ flag25\n    local flag26\n    local flag27\n    local flag28\n    local flag29\n\
    \    local flag30\n    local flag31\n    local flag32\n    local flag33\n    local\
    \ flag34\n    local flag35\n    local flag36\n    local flag37\n    local flag38\n\
    \    local flag39\n    local flag40\n    local flag41\n    local flag42\n    local\
    \ flag43\n    local flag44\n    local flag45\n    local flag46\n    local flag47\n\
    \    local flag48\n    local flag49\n    local flag50\n    local flag51\n    local\
    \ flag52\n    local flag53\n    local flag54\n    local flag55\n    local flag56\n\
    \    local flag57\n    local flag58\n    local flag59\n    local flag60\n    local\
    \ flag61\n    local flag62\n    local flag63\n    local flag64\n    local flag65\n\
    \    local flag66\n    local flag67\n    local flag68\n    local flag69\n    local\
    \ flag70\n    local flag71\n    local flag72\n    local flag73\n    local flag74\n\
    \    local flag75\n    local flag76\n    local flag77\n    local flag78\n    local\
    \ flag79\n    local flag80\n    local flag81\n    local flag82\n    local flag83\n\
    \    local flag84\n    local flag85\n    local flag86\n    local flag87\n    local\
    \ flag88\n    local flag89\n    local flag90\n    local flag91\n    local flag92\n\
    \    local flag93\n    local flag94\n    local flag95\n    local flag96\n    local\
    \ flag\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n    local odd\n    local even\n\
    \    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n\
    \    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n\
    \    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local\
    \ tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n\
    \    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local\
    \ tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n\
    \    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local\
    \ tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n\
    \    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local\
    \ tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n\
    \    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local\
    \ tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n\
    \    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local\
    \ tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n\
    \    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local\
    \ tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n\
    \    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local\
    \ tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n\
    \    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local\
    \ tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n\
    \    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local flag\n\n    sum=$((\
    \ ${arr[0]} + ${arr[${#arr[@]} -1]} ))\n    len=${#arr[@]}\n    flag=0\n    for\
    \ (( i=1; i<len; i++ )); do\n        if [ $(( ${arr[i]} + ${arr[i-1]} )) -gt $sum\
    \ ]; then\n            flag=1\n            break\n        fi\n    done\n    if\
    \ [ $flag -eq 0 ]; then\n        echo \"$arr\"\n        return\n    fi\n    for\
    \ (( j=1; j<len; j++ )); do\n        if [ $(( ${arr[j]} + ${arr[j-1]} )) -lt $sum\
    \ ]; then\n            flag=0\n            break\n        fi\n    done\n    if\
    \ [ $flag -eq 0 ]; then\n        echo \"$arr\"\n        return\n    fi\n    for\
    \ (( k=1; k<len; k++ )); do\n        temp=$(( ${arr[k]} + ${arr[k-1]} ))\n   \
    \     if [ $temp -gt $sum ]; then\n            arr[k]=${arr[k-1]}\n          \
    \  arr[k-1]=${arr[k]}\n            arr[k]=${temp}\n        fi\n    done\n    echo\
    \ \"$arr\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy_ltvzns.sh: line 20: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmpy_ltvzns.sh: line 20: 2 4 3 0 1 5 + 2 4 3 0 1 5 : syntax error in expression
    (error token is "4 3 0 1 5 + 2 4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local tmp\n    local len\n    local odd\n    local even\n\
    \    local result\n    local count\n    local i\n    local j\n    local k\n  \
    \  local tmp\n    local len\n    local odd\n    local even\n    local result\n\
    \    local count\n    local i\n    local j\n    local k\n    local tmp\n    local\
    \ len\n    local odd\n    local even\n    local result\n    local count\n    local\
    \ i\n    local j\n    local k\n    local tmp\n    local len\n    local odd\n \
    \   local even\n    local result\n    local count\n    local i\n    local j\n\
    \    local k\n    local tmp\n    local len\n    local odd\n    local even\n  \
    \  local result\n    local count\n    local i\n    local j\n    local k\n    local\
    \ tmp\n    local len\n    local odd\n    local even\n    local result\n    local\
    \ count\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\
    \    local odd\n    local even\n    local result\n    local count\n    local i\n\
    \    local j\n    local k\n    local tmp\n    local len\n    local odd\n    local\
    \ even\n    local result\n    local count\n    local i\n    local j\n    local\
    \ k\n    local tmp\n    local len\n    local odd\n    local even\n    local result\n\
    \    local count\n    local i\n    local j\n    local k\n    local tmp\n    local\
    \ len\n    local odd\n    local even\n    local result\n    local count\n    local\
    \ i\n    local j\n    local k\n    local tmp\n    local len\n    local odd\n \
    \   local even\n    local result\n    local count\n    local i\n    local j\n\
    \    local k\n    local tmp\n    local len\n    local odd\n    local even\n  \
    \  local result\n    local count\n    local i\n    local j\n    local k\n    local\
    \ tmp\n    local len\n    local odd\n    local even\n    local result\n    local\
    \ count\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\
    \    local odd\n    local even\n    local result\n    local \n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n  local array=$1\n  local sum=0\n  local i=0\n  local\
    \ j=0\n  local temp\n  local result\n\n  while [ $i -lt ${#array[@]} ]; do\n \
    \   sum=$(( ${sum} + ${array[i]} ))\n    i=$(( i + 1 ))\n  done\n\n  result=()\n\
    \  while [ $j -lt ${#array[@]} ]; do\n    temp=$(( ${array[j]} ))\n    if [ $((\
    \ ${sum} % 2 )) -eq 0 ]; then\n      result+=( $temp )\n    else\n      result+=(\
    \ ${array[j]} )\n    fi\n    j=$(( j + 1 ))\n  done\n\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprr7fsyu3.sh: line 19: 0 +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmprr7fsyu3.sh: line 19: 0 + 2 4 3 0 1 5 : syntax error in expression (error
    token is "4 3 0 1 5 ")

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local odd\n    local even\n    local temp\n\
    \    local result\n    sum=$(echo $arr | awk '{sum+=$1} END {print sum}')\n  \
    \  len=$((${#arr[@]}-1))\n    odd=$((${sum} % 2))\n    even=$((${sum} % 1))\n\
    \    if [ \"$odd\" == \"1\" ]; then\n        arr=($(sort -n -k 1 <<<\"${arr[@]}\"\
    ))\n        arr=($(sort -n -k 2 <<<\"${arr[@]}\"))\n    elif [ \"$even\" == \"\
    0\" ]; then\n        arr=($(sort -n -k 2 <<<\"${arr[@]}\"))\n        arr=($(sort\
    \ -n -k 1 <<<\"${arr[@]}\"))\n    fi\n    result=()\n    for ((i=0;i<$len;i++));do\n\
    \        temp=${arr[i]}\n        j=$((i+1))\n        k=$((j-1))\n        if [\
    \ \"$odd\" == \"1\" ]; then\n            if [ \"$temp\" == \"${arr[j]}\" ]; then\n\
    \                arr[i]=${arr[j]}\n                arr[j]=${temp}\n          \
    \  fi\n        elif [ \"$even\" == \"0\" ]; then\n            if [ \"$temp\" ==\
    \ \"${arr[k]}\" ]; then\n                arr[i]=${arr[k]}\n                arr[k]=${temp}\n\
    \            fi\n        fi\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local temp\n    sum=$(echo \"$array\" | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum%2)) -eq 0 ]; then\n        echo \"$array\"\n       \
    \ return\n    fi\n    for (( i=1; i<${#array[@]}; i++ )); do\n        for (( j=0;\
    \ j<i; j++ )); do\n            if [ $(( ${array[j]} + ${array[j+1]} )) -gt $((\
    \ ${array[j]} + ${array[j+1]} )) ]; then\n                temp=${array[j]}\n \
    \               array[j]=${array[j+1]}\n                array[j+1]=$temp\n   \
    \         fi\n        done\n    done\n    echo \"$array\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n \
    \   local j=0\n    local temp\n    local result\n\n    for (( i=0; i<${#array[@]};\
    \ i++ )); do\n        sum=$(( sum + ${array[i]} ))\n    done\n\n    if [ $(( sum\
    \ % 2 )) -eq 1 ]; then\n        result=( $(sort -n -k 1 -k ${#array[@]} <<< \"\
    ${array[@]}\") )\n    else\n        result=( $(sort -n -k 1 -k ${#array[@]} <<<\
    \ \"${array[@]}\") )\n    fi\n\n    for (( i=0; i<${#result[@]}; i++ )); do\n\
    \        temp=${result[i]}\n        result[i]=${result[i+1]}\n        result[i+1]=${temp}\n\
    \    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660033809
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"${@}\")\n    local sum\n    local i\n\
    \    local j\n    local k\n    local temp\n    local len\n    local flag\n\n \
    \   sum=0\n    len=${#arr[@]}\n    for (( i=0; i<len; i++ )); do\n        sum=$((\
    \ sum + arr[i] ))\n    done\n    if [ $(( sum % 2 )) -eq 1 ]; then\n        flag=1\n\
    \    else\n        flag=0\n    fi\n    for (( j=0; j<len; j++ )); do\n       \
    \ if [ $flag -eq 1 ]; then\n            temp=$(( arr[j] - arr[j-1] ))\n      \
    \  else\n            temp=$(( arr[j] - arr[j+1] ))\n        fi\n        if [ $temp\
    \ -gt 0 ]; then\n            arr[j]=$temp\n        else\n            arr[j]=${arr[j+1]}\n\
    \        fi\n    done\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum=0\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local sum1=0\n    local sum2=0\n    local sum3=0\n\
    \    local sum4=0\n    local sum5=0\n    local sum6=0\n    local sum7=0\n    local\
    \ sum8=0\n    local sum9=0\n    local sum10=0\n    local sum11=0\n    local sum12=0\n\
    \    local sum13=0\n    local sum14=0\n    local sum15=0\n    local sum16=0\n\
    \    local sum17=0\n    local sum18=0\n    local sum19=0\n    local sum20=0\n\
    \    local sum21=0\n    local sum22=0\n    local sum23=0\n    local sum24=0\n\
    \    local sum25=0\n    local sum26=0\n    local sum27=0\n    local sum28=0\n\
    \    local sum29=0\n    local sum30=0\n    local sum31=0\n    local sum32=0\n\
    \    local sum33=0\n    local sum34=0\n    local sum35=0\n    local sum36=0\n\
    \    local sum37=0\n    local sum38=0\n    local sum39=0\n    local sum40=0\n\
    \    local sum41=0\n    local sum42=0\n    local sum43=0\n    local sum44=0\n\
    \    local sum45=0\n    local sum46=0\n    local sum47=0\n    local sum48=0\n\
    \    local sum49=0\n    local sum50=0\n    local sum51=0\n    local sum52=0\n\
    \    local sum53=0\n    local sum54=0\n    local sum55=0\n    local sum56=0\n\
    \    local sum57=0\n    local sum58=0\n    local sum59=0\n    local sum60=0\n\
    \    local sum61=0\n    local sum62=0\n    local sum63=0\n    local sum64=0\n\
    \    local sum65=0\n    local sum66=0\n    local sum67=0\n    local sum68=0\n\
    \    local sum69=0\n    local sum70=0\n    local sum71=0\n    local sum72=0\n\
    \    local sum73=0\n    local sum74=0\n    local sum75=0\n    local sum76=0\n\
    \    local sum77=0\n    local sum78=0\n    local sum79=0\n    local sum80=0\n\
    \    local sum81=0\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033803
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"$@\")\n    local sum\n    local i\n \
    \   sum=0\n    for i in \"${arr[@]}\"; do\n        sum=$((sum + i))\n    done\n\
    \    if [ $((sum%2)) -eq 1 ]; then\n        arr=(\"${arr[@]:0:$((${#arr[@]}-1))}\
    \ ${arr[@]:$((${#arr[@]}-1))}\")\n    else\n        arr=(\"${arr[@]:0:$((${#arr[@]}-1))}\
    \ ${arr[@]:$((${#arr[@]}-1))} ${arr[@]:$((${#arr[@]}-1))}\")\n    fi\n    echo\
    \ \"${arr[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local result\n    sum=$(echo \"\
    $array\" | awk '{sum+=$1} END {print sum}')\n    if [ $sum -gt $(( ${#array[@]}\
    \ / 2 )) ]; then\n        echo \"$array\"\n        return\n    fi\n    for ((\
    \ i=1; i<${#array[@]}; i++ )); do\n        for (( j=0; j<i; j++ )); do\n     \
    \       if [ $(( ${array[j]} + ${array[j+1]} )) -gt $(( ${array[j]} + ${array[j+1]}\
    \ )) ]; then\n                temp=${array[j]}\n                array[j]=${array[j+1]}\n\
    \                array[j+1]=${temp}\n            fi\n        done\n    done\n\
    \    result=$(echo \"$array\" | awk '{print $(NF-1)}')\n    echo \"$result\"\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: attempt to access field -1

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local tmp\n    local count\n    local tmp2\n    local tmp3\n    local tmp4\n\
    \    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n\
    \    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local\
    \ tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n\
    \    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local\
    \ tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n\
    \    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local\
    \ tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n\
    \    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local\
    \ tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n\
    \    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local\
    \ tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n\
    \    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local\
    \ tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n\
    \    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local\
    \ tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n\
    \    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local\
    \ tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n\
    \    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local\
    \ tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n\
    \    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    \n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=$(echo $arr | awk '{sum+=$1} END {print\
    \ sum}')\n    if [ $((sum % 2)) -eq 1 ]; then\n        echo \"$arr\"\n       \
    \ return\n    fi\n    for ((i=0;i<${#arr[@]};i++)); do\n        temp=${arr[i]}\n\
    \        for ((j=i+1;j<${#arr[@]};j++)); do\n            if [ $((${arr[i]} + ${arr[j]}))\
    \ -gt $((${arr[i]} + ${arr[j]})) ]; then\n                temp=${arr[j]}\n   \
    \         fi\n        done\n        arr[i]=$temp\n    done\n    echo \"$arr\"\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local array=\"$1\"\n    local sum\n    local i\n \
    \   local j\n    local k\n    local temp\n    local len\n\n    sum=$(echo \"$array\"\
    \ | awk '{sum+=$1} END {print sum}')\n    len=$((${#array[@]}-1))\n    if [ $((sum%2))\
    \ -eq 0 ]; then\n        echo \"$array in ascending order\"\n    else\n      \
    \  echo \"$array in descending order\"\n    fi\n    for (( i=1; i<=$len; i++ ));\
    \ do\n        for (( j=0; j<i; j++ )); do\n            if [ $((${array[j]}+${array[j+1]}))\
    \  -gt $((${array[j]}+${array[j+1]})) ]; then\n                temp=${array[j]}\n\
    \                array[j]=${array[j+1]}\n                array[j+1]=${temp}\n\
    \            fi\n        done\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local flag\n    local odd\n\
    \    local even\n    local tmp\n    local tmp_arr\n    local tmp_sum\n    local\
    \ tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_odd\n\
    \    local tmp_even\n    local tmp_temp\n    local tmp_len\n    local tmp_flag\n\
    \    local tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local\
    \ tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n\
    \    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n    local\
    \ tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n    local tmp_j\n\
    \    local tmp_k\n    local tmp_flag\n    local tmp_i\n    local tmp_j\n    local\
    \ tmp_k\n    local tmp_flag\n    local tmp_i\n    local tmp_j\n    local tmp_k\n\
    \    local tmp_flag\n    local tmp_i\n    local tmp_j\n    local tmp_k\n    local\
    \ tmp_flag\n    local tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n\
    \    local tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local\
    \ tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n\
    \    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n    local\
    \ tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n    local tmp_j\n\
    \    local tmp_k\n    local tmp_flag\n    local tmp_i\n    local tmp_j\n    local\
    \ tmp_k\n    local tmp_flag\n    local tmp_i\n    local tmp_j\n    local tmp_k\n\
    \    local tmp_flag\n    local tmp_i\n    local tmp_j\n    local tmp_k\n    local\
    \ tmp_flag\n    local tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n\
    \    local tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local\
    \ tmp_i\n    local tmp_j\n    local tmp_k\n    local tmp_flag\n    local tmp_i\n\
    \    local tmp_j\n    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    sum=0\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        sum=$(( sum + ${arr[i]} ))\n    done\n    if [ $(( sum % 2 ))\
    \ -eq 0 ]; then\n        arr=($(sort -n -k 1 -k ${#arr[@]} <<< \"${arr[@]}\" ))\n\
    \    else\n        arr=($(sort -n -k 1 -k ${#arr[@]} <<< \"${arr[@]}\"))\n   \
    \ fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n   \
    \ [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplvwyldw4.sh: line 19: sum +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=(\"$@\")\n    local sum\n    local i\n \
    \   local j\n    local k\n    local l\n    local m\n    local n\n    local odd\n\
    \    local even\n    local tmp\n\n    sum=$(echo \"${arr[@]}\" | awk '{sum+=$1}\
    \ END {print sum}')\n    odd=$(echo \"${arr[@]}\" | awk '{sum+=$1} END {print\
    \ sum%2}')\n    even=$(echo \"${arr[@]}\" | awk '{sum+=$1} END {print sum%2}')\n\
    \n    if [ \"$odd\" -eq 1 ]; then\n        echo \"${arr[@]}\" | sort -n -k 1\n\
    \    elif [ \"$even\" -eq 0 ]; then\n        echo \"${arr[@]}\" | sort -n -k 2\n\
    \    else\n        echo \"${arr[@]}\" | sort -n -k 1 -k 2\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local len\n    local temp\n    local flag\n\n    sum=$(echo\
    \ $arr | awk '{sum+=$1} END {print sum}')\n    len=$(echo $arr | wc -w)\n\n  \
    \  if [ $(( len % 2 )) -eq 0 ]; then\n        flag=0\n    else\n        flag=1\n\
    \    fi\n\n    for (( i=1; i<len; i++ )); do\n        for (( j=0; j<i; j++ ));\
    \ do\n            if [ $(( arr[j]+arr[j+1] )) -gt $sum ]; then\n             \
    \   temp=$arr[j]\n                arr[j]=arr[j+1]\n                arr[j+1]=$temp\n\
    \            fi\n        done\n    done\n\n    for (( k=0; k<len; k++ )); do\n\
    \        if [ $(( arr[k]+arr[k+1] )) -eq $sum ]; then\n            temp=$arr[k]\n\
    \            arr[k]=arr[k+1]\n            arr[k+1]=$temp\n        fi\n    done\n\
    \n    echo $arr\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a copy\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n#\n# $1 is a space-separated\
    \ list\nsort_array() {\n    local arr=$1\n    local sum\n    local i\n    local\
    \ j\n    local k\n    local temp\n    local len\n    local odd\n    local even\n\
    \    local count\n    local max\n    local min\n    local temp2\n    local temp3\n\
    \    local temp4\n    local temp5\n    local temp6\n    local temp7\n    local\
    \ temp8\n    local temp9\n    local temp10\n    local temp11\n    local temp12\n\
    \    local temp13\n    local temp14\n    local temp15\n    local temp16\n    local\
    \ temp17\n    local temp18\n    local temp19\n    local temp20\n    local temp21\n\
    \    local temp22\n    local temp23\n    local temp24\n    local temp25\n    local\
    \ temp26\n    local temp27\n    local temp28\n    local temp29\n    local temp30\n\
    \    local temp31\n    local temp32\n    local temp33\n    local temp34\n    local\
    \ temp35\n    local temp36\n    local temp37\n    local temp38\n    local temp39\n\
    \    local temp40\n    local temp41\n    local temp42\n    local temp43\n    local\
    \ temp44\n    local temp45\n    local temp46\n    local temp47\n    local temp48\n\
    \    local temp49\n    local temp50\n    local temp51\n    local temp52\n    local\
    \ temp53\n    local temp54\n    local temp55\n    local temp56\n    local temp57\n\
    \    local temp58\n    local temp59\n    local temp60\n    local temp61\n    local\
    \ temp62\n    local temp63\n    local temp64\n    local temp65\n    local temp66\n\
    \    local temp67\n    local temp68\n    local temp69\n    local temp70\n    local\
    \ temp71\n    local temp72\n    local temp73\n    local temp74\n    local temp75\n\
    \    local temp76\n    local temp77\n    local temp78\n    local temp79\n    local\
    \ temp80\n    local temp81\n    local temp82\n    local temp83\n    local temp84\n\
    \    local temp85\n    local temp86\n    local temp87\n    local temp88\n    local\
    \ temp89\n    local temp90\n    local temp91\n    local temp92\n    local temp93\n\
    \    local \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660033804
