language: sh
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max_triple\n  \n  a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  \n  for i in \"${a[@]}\"; do\n  \
    \  for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i*i\
    \ - j + k == 0 )); then\n          count=$((count+1))\n        fi\n      done\n\
    \    done\n  done\n  \n  max_triple=$((count-1))\n  \n  echo \"$max_triple\"\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $k -le $i ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxun6zpkq.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  a=$( seq 1 $n\
    \ )\n  max=0\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n     \
    \ for k in \"${a[@]}\"; do\n        if [ $i -le $j -a $j -le $k -a $i -le $k ];\
    \ then\n          count=$(( $i * $i - $j + $k + 1 ))\n          if [ \"$count\"\
    \ -gt \"$max\" ]; then\n            max=$count\n          fi\n        fi\n   \
    \   done\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp7zkxn00.sh: line 25: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  a=$( seq 1 $n )\n  for i in $(seq 1 $n); do\n\
    \    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n        if [ $i\
    \ -le $j -a $j -le $k -a $i -le $k ]; then\n          if [[ $a[ $i ]  == $a[ $j\
    \ ]  && $a[ $j ] == $a[ $k ]  ]]; then\n            echo \"$i $j $k\"\n      \
    \    fi\n        fi\n      done\n    done\n  done\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp091gmiww.sh: line 23: conditional binary operator expected

    /tmp/tmp091gmiww.sh: line 23: syntax error near `$i''

    /tmp/tmp091gmiww.sh: line 23: `          if [[ $a[ $i ]  == $a[ $j ]  && $a[ $j
    ] == $a[ $k ]  ]]; then''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1)); done))\n    local count=0\n\
    \    local i\n    local j\n    local k\n    local triple\n    for ((i=1; i<=$n;\
    \ i++)); do\n        for ((j=1; j<=$n; j++)); do\n            for ((k=1; k<=$n;\
    \ k++)); do\n                triple=$((i*i-1)+j+k)\n                if (( triple\
    \ == $((i*i-1)+j+k) )) ; then\n                    count=$((count+1))\n      \
    \          fi\n            done\n        done\n    done\n    echo \"$count\"\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbba__8ue.sh: line 14: syntax error near unexpected token `;''

    /tmp/tmpbba__8ue.sh: line 14: `    local a=($(for ((i=1; i<=$n; i++)); do echo
    $((i*i-1)+i+1)); done))''

    /tmp/tmpbba__8ue.sh: line 15: local: can only be used in a function

    /tmp/tmpbba__8ue.sh: line 16: local: can only be used in a function

    /tmp/tmpbba__8ue.sh: line 17: local: can only be used in a function

    /tmp/tmpbba__8ue.sh: line 18: local: can only be used in a function

    /tmp/tmpbba__8ue.sh: line 19: local: can only be used in a function

    /tmp/tmpbba__8ue.sh: line 22: ((: i<=: syntax error: operand expected (error token
    is "<=")

    /tmp/tmpbba__8ue.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpbba__8ue.sh: line 31: `}''

    '
  stdout: '

    '
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i=0\n  local j=0\n  local k=0\n  while [ $i\
    \ -lt $n ]; do\n    count=$(( $count + $(a[i] + $(a[j] + $(a[k])) )))\n    i=$((\
    \ $i + 1 ))\n    j=$(( $j + 1 ))\n    k=$(( $k + 1 ))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphqs1jl4_.sh: line 20: a[k]: command not found

    /tmp/tmphqs1jl4_.sh: line 20: a[j]: command not found

    /tmp/tmphqs1jl4_.sh: line 20: a[i]: command not found

    /tmp/tmphqs1jl4_.sh: line 20: 0 + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n $i\n    done))\n  local count=0\n\
    \  local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"\n  do\n    count=$((count+1))\n\
    \    j=$((j+1))\n    k=$((k+1))\n  done\n  for i in \"${a[@]}\"\n  do\n    if\
    \ [ $((i*i)+(i*j)+(i*k)) -eq $((i*(i*i)+(i*j)*2+(i*k)*2)) ]\n    then\n      count=$((count+1))\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqf3hs2pu.sh: command substitution: line 30: syntax error near unexpected
    token `+''

    /tmp/tmpqf3hs2pu.sh: command substitution: line 30: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpqf3hs2pu.sh: line 30: [: -eq: unary operator expected

    /tmp/tmpqf3hs2pu.sh: command substitution: line 30: syntax error near unexpected
    token `+''

    /tmp/tmpqf3hs2pu.sh: command substitution: line 30: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpqf3hs2pu.sh: line 30: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp22vn9l8j.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=($(for ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  local count=0\n\
    \  local i\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for\
    \ k in \"${a[@]}\"; do\n        if (( $i + $j + $k )); then\n          count=$((count+1))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local i\n  \
    \  local j\n    local k\n    local count\n    local max\n    local sum\n    local\
    \ triple\n    local triple2\n    local triple3\n    local triple4\n    local triple5\n\
    \    local triple6\n    local triple7\n    local triple8\n    local triple9\n\
    \    local triple10\n    local triple11\n    local triple12\n    local triple13\n\
    \    local triple14\n    local triple15\n    local triple16\n    local triple17\n\
    \    local triple18\n    local triple19\n    local triple20\n    local triple21\n\
    \    local triple22\n    local triple23\n    local triple24\n    local triple25\n\
    \    local triple26\n    local triple27\n    local triple28\n    local triple29\n\
    \    local triple30\n    local triple31\n    local triple32\n    local triple33\n\
    \    local triple34\n    local triple35\n    local triple36\n    local triple37\n\
    \    local triple38\n    local triple39\n    local triple40\n    local triple41\n\
    \    local triple42\n    local triple43\n    local triple44\n    local triple45\n\
    \    local triple46\n    local triple47\n    local triple48\n    local triple49\n\
    \    local triple50\n    local triple51\n    local triple52\n    local triple53\n\
    \    local triple54\n    local triple55\n    local triple56\n    local triple57\n\
    \    local triple58\n    local triple59\n    local triple60\n    local triple61\n\
    \    local triple62\n    local triple63\n    local triple64\n    local triple65\n\
    \    local triple66\n    local triple67\n    local triple68\n    local triple69\n\
    \    local triple70\n    local triple71\n    local triple72\n    local triple73\n\
    \    local triple74\n    local triple75\n    local triple76\n    local triple77\n\
    \    local triple78\n    local triple79\n    local triple80\n    local triple81\n\
    \    local triple82\n    local triple83\n    local triple84\n    local triple85\n\
    \    local triple86\n    local triple87\n    local triple88\n    local triple89\n\
    \    local triple90\n    local triple91\n    local triple\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local i=0\n  local j=1\n  local k=1\n\
    \  local count=0\n  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n   \
    \   while [ $k -lt $n ]; do\n        if [ $i -eq $j -a $i -eq $k -a $j -eq $k\
    \ ]; then\n          count=$((count+1))\n        fi\n        k=$((k+1))\n    \
    \  done\n      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  local count1\n\
    \  local count2\n  local count3\n  local count4\n  local count5\n  local count6\n\
    \  local count7\n  local count8\n  local count9\n  local count10\n  local count11\n\
    \  local count12\n  local count13\n  local count14\n  local count15\n  local count16\n\
    \  local count17\n  local count18\n  local count19\n  local count20\n  local count21\n\
    \  local count22\n  local count23\n  local count24\n  local count25\n  local count26\n\
    \  local count27\n  local count28\n  local count29\n  local count30\n  local count31\n\
    \  local count32\n  local count33\n  local count34\n  local count35\n  local count36\n\
    \  local count37\n  local count38\n  local count39\n  local count40\n  local count41\n\
    \  local count42\n  local count43\n  local count44\n  local count45\n  local count46\n\
    \  local count47\n  local count48\n  local count49\n  local count50\n  local count51\n\
    \  local count52\n  local count53\n  local count54\n  local count55\n  local count56\n\
    \  local count57\n  local count58\n  local count59\n  local count60\n  local count61\n\
    \  local count62\n  local count63\n  local count64\n  local count65\n  local count66\n\
    \  local count67\n  local count68\n  local count69\n  local count70\n  local count71\n\
    \  local count72\n  local count73\n  local count74\n  local count75\n  local count76\n\
    \  local count77\n  local count78\n  local count79\n  local count80\n  local count81\n\
    \  local count82\n  local count83\n  local count84\n  local count85\n  local count86\n\
    \  local count87\n  local count88\n  local count89\n  local count90\n  local count91\n\
    \  local count92\n  local count93\n  local count94\n  local count95\n  local count96\n\
    \  local \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local triples=0\n  local\
    \ i\n  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( i + j + k )); then\n     \
    \     triples=$((triples + 1))\n        fi\n      done\n    done\n  done\n  echo\
    \ $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local count=0\n\
    \  local triples=0\n  local triple\n  for ((i=1; i<=$n; i++)); do\n    for ((j=1;\
    \ j<=$n; j++)); do\n      for ((k=1; k<=$n; k++)); do\n        triple=$((i*i)+$((j*j))+$((k*k)))\n\
    \        if ((triple%3)==0); then\n          triples=$((triples+1))\n        \
    \  count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo \"$triples\"\
    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcjtlq1wn.sh: line 22: syntax error near unexpected token `==0''

    /tmp/tmpcjtlq1wn.sh: line 22: `        if ((triple%3)==0); then''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i\n  local j\n  local k\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( i == j && i == k )); then\n          continue\n        fi\n        if ((\
    \ i == j || i == k || j == k )); then\n          continue\n        fi\n      \
    \  if (( i == j && j == k )); then\n          continue\n        fi\n        if\
    \ (( i == j || i == k || j == k )); then\n          continue\n        fi\n   \
    \     if (( i == j && j == k )); then\n          continue\n        fi\n      \
    \  if (( i == j || i == k || j == k )); then\n          continue\n        fi\n\
    \        if (( i == j && k == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || k == k )); then\n          continue\n        fi\n\
    \        if (( i == j && k == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || k == k )); then\n          continue\n        fi\n\
    \        if (( i == j && j == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || j == k )); then\n          continue\n        fi\n\
    \        if (( i == j && j == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || j == k )); then\n          continue\n        fi\n\
    \        if (( i == j && k == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || k == k )); then\n          continue\n        fi\n\
    \        if (( i == j && k == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || k == k )); then\n          continue\n        fi\n\
    \        if (( i == j && j == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || j == k )); then\n          continue\n        fi\n\
    \        if (( i == j && j == k )); then\n          continue\n        fi\n   \
    \     if (( i == j || i == k || j == k )); then\n          continue\n        fi\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwndn_yv_.sh: line 88: syntax error near unexpected token `}''

    /tmp/tmpwndn_yv_.sh: line 88: `}''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i\n  local j\n  local k\n  local count\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( $i < $j && $j < $k && $i < $k )); then\n          count=$(( $count + 1 ))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local count2\n    local max2\n    local count3\n    local max3\n    local\
    \ count4\n    local max4\n    local count5\n    local max5\n    local count6\n\
    \    local max6\n    local count7\n    local max7\n    local count8\n    local\
    \ max8\n    local count9\n    local max9\n    local count10\n    local max10\n\
    \    local count11\n    local max11\n    local count12\n    local max12\n    local\
    \ count13\n    local max13\n    local count14\n    local max14\n    local count15\n\
    \    local max15\n    local count16\n    local max16\n    local count17\n    local\
    \ max17\n    local count18\n    local max18\n    local count19\n    local max19\n\
    \    local count20\n    local max20\n    local count21\n    local max21\n    local\
    \ count22\n    local max22\n    local count23\n    local max23\n    local count24\n\
    \    local max24\n    local count25\n    local max25\n    local count26\n    local\
    \ max26\n    local count27\n    local max27\n    local count28\n    local max28\n\
    \    local count29\n    local max29\n    local count30\n    local max30\n    local\
    \ count31\n    local max31\n    local count32\n    local max32\n    local count33\n\
    \    local max33\n    local count34\n    local max34\n    local count35\n    local\
    \ max35\n    local count36\n    local max36\n    local count37\n    local max37\n\
    \    local count38\n    local max38\n    local count39\n    local max39\n    local\
    \ count40\n    local max40\n    local count41\n    local max41\n    local count42\n\
    \    local max42\n    local count43\n    local max43\n    local count44\n    local\
    \ max44\n    local count45\n    local max45\n    local count46\n    local max46\n\
    \    local count47\n    local max47\n    local count48\n    local max48\n    local\
    \ count49\n    local max49\n    local \n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i\n  local j\n  local k\n  local count\n  local triple\n  for\
    \ i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"\
    ; do\n        if (( $i == $j && $j == $k )); then\n          triple=$(( $i * $i\
    \ - $i + 1 ))\n          count=$(( $count + 1 ))\n        fi\n      done\n   \
    \ done\n  done\n  echo $triple\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i*$i-$i+1; done))\n  local i\n  local j\n  local\
    \ k\n  local count=0\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n\
    \      for k in \"${a[@]}\"; do\n        if [ $i -le $j -a $j -le $k ]; then\n\
    \          count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 1*1-1+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 2*2-2+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 2*2-2+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 2*2-2+1: integer expression expected

    /tmp/tmpviprxh2k.sh: line 22: [: 2*2-2+1: integer expression expected

    /tmp/tmpviprxh2k.s'
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local triples=0\n\
    \  local i\n  for i in $(seq 0 $((${#a[@]}-1))); do\n    local j\n    for j in\
    \ $(seq 0 $((${#a[@]}-1))); do\n      local k\n      for k in $(seq 0 $((${#a[@]}-1)));\
    \ do\n        local triple\n        triple=$((${a[i]}+${a[j]}+${a[k]}))\n    \
    \    if (( triple % 3 == 0 )); then\n          triples=$((triples+1))\n      \
    \  fi\n      done\n    done\n  done\n  echo $triples\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  local count=0\n\
    \  while [ $i -lt $n ]; do\n    sum=$((sum+$a[i]))\n    i=$((i+1))\n  done\n \
    \ while [ $j -lt $n ]; do\n    sum=$((sum+$a[j]))\n    j=$((j+1))\n  done\n  while\
    \ [ $k -lt $n ]; do\n    sum=$((sum+$a[k]))\n    k=$((k+1))\n  done\n  while [\
    \ $i -le $n ]; do\n    sum=$((sum+$a[i]))\n    i=$((i+1))\n  done\n  while [ $j\
    \ -le $n ]; do\n    sum=$((sum+$a[j]))\n    j=$((j+1))\n  done\n  while [ $k -le\
    \ $n ]; do\n    sum=$((sum+$a[k]))\n    k=$((k+1))\n  done\n  while [ $sum -gt\
    \ 0 ]; do\n    count=$((count+1))\n    sum=$((sum-3))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqrkwrwsi.sh: line 21: sum+1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local i\n  local j\n  local\
    \ k\n  local count=0\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n\
    \      for k in \"${a[@]}\"; do\n        if (( i*j+k == i*i+k )); then\n     \
    \     count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local triple\n\
    \    local max\n    \n    a=()\n    \n    for ((i=1; i<=$n; i++))\n    do\n  \
    \      a+=($i*$i-$i+1)\n    done\n    \n    count=0\n    \n    for ((i=1; i<=$n;\
    \ i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            for\
    \ ((k=1; k<=$n; k++))\n            do\n                triple=(\"$i\" \"$j\" \"\
    $k\")\n                if (( \"${triple}\" == ( \"${a[*]}\" )) )\n           \
    \     then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    \n    max=$((count-1))\n    \n    if (( max > 0 ))\n\
    \    then\n        echo \"$max\"\n    else\n        echo \"0\"\n    fi\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6nqxdbrl.sh: line 38: syntax error near unexpected token `(''

    /tmp/tmp6nqxdbrl.sh: line 38: `( "${triple}" == ( "${a[*]}" )) ''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local j=0\n  local k=0\n  local sum=0\n\
    \  local count=0\n  for i in \"${a[@]}\"; do\n    sum=$((sum + i))\n    count=$((count\
    \ + 1))\n  done\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n  \
    \    for k in \"${a[@]}\"; do\n        if (( $i == $j && $j == $k )); then\n \
    \         sum=$((sum + $i))\n          count=$((count + 1))\n        fi\n    \
    \  done\n    done\n  done\n  echo $((count * 3))\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ triples=0\n  local i\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\";\
    \ do\n      for k in \"${a[@]}\"; do\n        if (( $i > $j > $k )); then\n  \
    \        triples=$((triples + 1))\n        fi\n      done\n    done\n  done\n\
    \  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local sum\n  local triple\n\
    \  \n  a=($(for ((i=1; i<=$n; i++)); do echo $i; done))\n  \n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        triple=$((i*i*i\
    \ - i*i + i*j + i*k + i*i*i + i*j*j + i*k*k + i*i*j*k + i*j*k*k + i*k*j*k + i*i*j*k*k\
    \ + i*j*k*i*k + i*k*j*k*i + i*k*k*j*i + i*i*j*k*i + i*j*k*i*j + i*k*j*j*i + i*k*k*j*j\
    \ + i*i*j*k*i + i*j*k*i*j + i*k*j*j*j + i*k*k*j*k + i*i*j*k*i + i*j*k*i*j + i*k*j*k*j\
    \ + i*i*j*k*i + i*j*k*i*j + i*k*j*k*k + i*i*j*k*i*k + i*j*k*k*i + i*k*j*k*i +\
    \ i*i*j*k*j + i*k*j*j*i + i*k*k*j*i + i*i*j*k*i + i*j*k*i*j + i*k*j*j*j + i*k*k*j*k\
    \ + i*i*j*k*i + i*j*k*i*j + i*k*j*k*j + i*i*j*k*i + i*j*k*i*j + i*k*j*k*k + i*i*j*k*i*k\
    \ + i*j*k*k*i + i*k*j*k*i + i*i*j*k*j + i*k*j*j*i + i*k*k*j*i + i*i*j*k*i + i*j*k*i*j\
    \ + i*k*j*j*j + i*k*k*j*k + i*i*j*k*i + i*j*k*i*j + i*k*j*k*j + i*i*j*k*i + i*j*k*i*j\
    \ + i*k*j*k*k + i*i*j*k*i*k + i*j*k*k*i + i*k*j*k*i + i*i*j*k*j + i*k\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp648pkb4r.sh: line 27: unexpected EOF while looking for matching
    `)''

    /tmp/tmp648pkb4r.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i = 1; i <= n; i++)) ; do echo $((i * i - i + 1)); done))\n  local count=0\n\
    \  local triples=()\n  local i\n  local j\n  local k\n  for i in \"${!a[@]}\"\
    ; do\n    for j in \"${!a[@]}\"; do\n      for k in \"${!a[@]}\"; do\n       \
    \ if [ $i -le $j -a $j -le $k ]; then\n          triples=(\"${triples[@]}\" \"\
    $i\" \"$j\" \"$k\")\n          count=$((count+1))\n        fi\n      done\n  \
    \  done\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  local count2\n\
    \  local max2\n  local count3\n  local max3\n  local count4\n  local max4\n  local\
    \ count5\n  local max5\n  local count6\n  local max6\n  local count7\n  local\
    \ max7\n  local count8\n  local max8\n  local count9\n  local max9\n  local count10\n\
    \  local max10\n  local count11\n  local max11\n  local count12\n  local max12\n\
    \  local count13\n  local max13\n  local count14\n  local max14\n  local count15\n\
    \  local max15\n  local count16\n  local max16\n  local count17\n  local max17\n\
    \  local count18\n  local max18\n  local count19\n  local max19\n  local count20\n\
    \  local max20\n  local count21\n  local max21\n  local count22\n  local max22\n\
    \  local count23\n  local max23\n  local count24\n  local max24\n  local count25\n\
    \  local max25\n  local count26\n  local max26\n  local count27\n  local max27\n\
    \  local count28\n  local max28\n  local count29\n  local max29\n  local count30\n\
    \  local max30\n  local count31\n  local max31\n  local count32\n  local max32\n\
    \  local count33\n  local max33\n  local count34\n  local max34\n  local count35\n\
    \  local max35\n  local count36\n  local max36\n  local count37\n  local max37\n\
    \  local count38\n  local max38\n  local count39\n  local max39\n  local count40\n\
    \  local max40\n  local count41\n  local max41\n  local count42\n  local max42\n\
    \  local count43\n  local max43\n  local count44\n  local max44\n  local count45\n\
    \  local max45\n  local count46\n  local max46\n  local count47\n  local max47\n\
    \  local count48\n  local max48\n  local count49\n  local max49\n  local \n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i\n  local j\n  local k\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( $i < $j && $j < $k && $i < $k )); then\n          (( count++ ))\n       \
    \ fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local count=0\n\
    \    local i\n    local j\n    local k\n    for i in \"${a[@]}\"; do\n       \
    \ for j in \"${a[@]}\"; do\n            for k in \"${a[@]}\"; do\n           \
    \     if (( $i > $j && $i > $k )); then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local sum\n  local triple\n\
    \  a=$( seq 1 $n )\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n\
    \      for k in \"${a[@]}\"; do\n        triple=$( expr $i + $j + $k )\n     \
    \   sum=$( expr $sum + $triple )\n      done\n    done\n  done\n  count=$( expr\
    \ $sum % 3 )\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\nexpr: syntax error:\
    \ missing argument after \u2018+\u2019\nexpr: syntax error: unexpected argument\
    \ \u20183\u2019\n"
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max_triple\n\
    \    \n    a=()\n    \n    for (( i = 1; i <= n; i++ ))\n    do\n        a[i]=$((i\
    \ * i - i + 1))\n    done\n    \n    count=0\n    \n    for (( i = 1; i <= n;\
    \ i++ ))\n    do\n        for (( j = 1; j <= i; j++ ))\n        do\n         \
    \   for (( k = 1; k <= j; k++ ))\n            do\n                if (( a[i] >\
    \ a[j] && a[i] > a[k] ))\n                then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    \n    max_triple=$((count/3))\n\
    \    \n    echo $max_triple\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local j=0\n  local k=0\n\
    \  local count=0\n  local triples=0\n  local triple\n  local i\n  local j\n  local\
    \ k\n  for i in \"${a[@]}\"; do\n    j=0\n    k=0\n    while [[ $((j+k)) -lt $((i+j))\
    \ ]]; do\n      j=$((j+1))\n      k=$((k+1))\n    done\n    triple=$((i*i-i+1))\n\
    \    if [[ $triple -eq 3 ]]; then\n      triples=$((triples+1))\n    fi\n  done\n\
    \  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max_triple\n  local max_triple_index\n\
    \  local max_triple_index2\n  local max_triple_index3\n  local max_triple_index4\n\
    \  local max_triple_index5\n  local max_triple_index6\n  local max_triple_index7\n\
    \  local max_triple_index8\n  local max_triple_index9\n  local max_triple_index10\n\
    \  local max_triple_index11\n  local max_triple_index12\n  local max_triple_index13\n\
    \  local max_triple_index14\n  local max_triple_index15\n  local max_triple_index16\n\
    \  local max_triple_index17\n  local max_triple_index18\n  local max_triple_index19\n\
    \  local max_triple_index20\n  local max_triple_index21\n  local max_triple_index22\n\
    \  local max_triple_index23\n  local max_triple_index24\n  local max_triple_index25\n\
    \  local max_triple_index26\n  local max_triple_index27\n  local max_triple_index28\n\
    \  local max_triple_index29\n  local max_triple_index30\n  local max_triple_index31\n\
    \  local max_triple_index32\n  local max_triple_index33\n  local max_triple_index34\n\
    \  local max_triple_index35\n  local max_triple_index36\n  local max_triple_index37\n\
    \  local max_triple_index38\n  local max_triple_index39\n  local max_triple_index40\n\
    \  local max_triple_index41\n  local max_triple_index42\n  local max_triple_index43\n\
    \  local max_triple_index44\n  local max_triple_index45\n  local max_triple_index46\n\
    \  local max_triple_index47\n  local max_triple_index48\n  local max_triple_index49\n\
    \  local max_triple_index50\n  local max_triple_index51\n  local max_triple_index52\n\
    \  local max_triple_index53\n  local max_triple_index54\n  local max_triple_index55\n\
    \  local max_triple_index56\n  local max_triple_index57\n  local max_triple_index58\n\
    \  local max_triple_index59\n  local max_triple_index60\n  local max_triple_index61\n\
    \  local max_triple_index62\n  local max_triple_index63\n  local max_triple_index64\n\
    \  local max_triple_index65\n  local max_triple_index66\n  local max_triple_index67\n\
    \  local max_triple_index68\n  local max_triple_index69\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local max_triple\n    local max_triple_index\n    local max_triple_index2\n\
    \    local max_triple_index3\n    local max_triple_index4\n    local max_triple_index5\n\
    \    local max_triple_index6\n    local max_triple_index7\n    local max_triple_index8\n\
    \    local max_triple_index9\n    local max_triple_index10\n    local max_triple_index11\n\
    \    local max_triple_index12\n    local max_triple_index13\n    local max_triple_index14\n\
    \    local max_triple_index15\n    local max_triple_index16\n    local max_triple_index17\n\
    \    local max_triple_index18\n    local max_triple_index19\n    local max_triple_index20\n\
    \    local max_triple_index21\n    local max_triple_index22\n    local max_triple_index23\n\
    \    local max_triple_index24\n    local max_triple_index25\n    local max_triple_index26\n\
    \    local max_triple_index27\n    local max_triple_index28\n    local max_triple_index29\n\
    \    local max_triple_index30\n    local max_triple_index31\n    local max_triple_index32\n\
    \    local max_triple_index33\n    local max_triple_index34\n    local max_triple_index35\n\
    \    local max_triple_index36\n    local max_triple_index37\n    local max_triple_index38\n\
    \    local max_triple_index39\n    local max_triple_index40\n    local max_triple_index41\n\
    \    local max_triple_index42\n    local max_triple_index43\n    local max_triple_index44\n\
    \    local max_triple_index45\n    local max_triple_index46\n    local max_triple_index47\n\
    \    local max_triple_index48\n    local max_triple_index49\n    local max_triple_index50\n\
    \    local max_triple_index51\n    local max_triple_index52\n    local max_triple_index53\n\
    \    local max_triple_index54\n    local max_triple_index55\n    local max_triple_index56\n\
    \    local max_triple_index57\n    local max_triple_index58\n    local max_triple_index59\n\
    \    local max_triple_index60\n    local max_triple_index61\n    local max_triple_index62\n\
    \    local max_triple_index63\n    local max_triple_index64\n    local max_triple_index65\n\
    \    local max_triple_index66\n    local max_triple_index67\n    local max_triple_index68\n\
    \    local \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$(expr\
    \ $count + 1)\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    if [ $i -le $j\
    \ ]; then\n      (( count++ ))\n      (( j += 1 ))\n    elif [ $i -le $k ]; then\n\
    \      (( count++ ))\n      (( k += 1 ))\n    else\n      (( count++ ))\n    fi\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n \"$i\"\n    done))\n  local j=0\n\
    \  local k=0\n  local sum=0\n  local count=0\n  for i in \"${a[@]}\"; do\n   \
    \ sum=$((sum + i))\n    count=$((count + 1))\n  done\n  for i in \"${a[@]}\";\
    \ do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( $i == $j && $j == $k )); then\n          sum=$((sum + $i))\n          count=$((count\
    \ + 1))\n        fi\n      done\n    done\n  done\n  echo $(( $sum % 3 ))\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  local count=0\n  local\
    \ triple=0\n  local triples=0\n  local triples_sum=0\n  local triples_sum2=0\n\
    \  local triples_sum3=0\n  local triples_sum4=0\n  local triples_sum5=0\n  local\
    \ triples_sum6=0\n  local triples_sum7=0\n  local triples_sum8=0\n  local triples_sum9=0\n\
    \  local triples_sum10=0\n  local triples_sum11=0\n  local triples_sum12=0\n \
    \ local triples_sum13=0\n  local triples_sum14=0\n  local triples_sum15=0\n  local\
    \ triples_sum16=0\n  local triples_sum17=0\n  local triples_sum18=0\n  local triples_sum19=0\n\
    \  local triples_sum20=0\n  local triples_sum21=0\n  local triples_sum22=0\n \
    \ local triples_sum23=0\n  local triples_sum24=0\n  local triples_sum25=0\n  local\
    \ triples_sum26=0\n  local triples_sum27=0\n  local triples_sum28=0\n  local triples_sum29=0\n\
    \  local triples_sum30=0\n  local triples_sum31=0\n  local triples_sum32=0\n \
    \ local triples_sum33=0\n  local triples_sum34=0\n  local triples_sum35=0\n  local\
    \ triples_sum36=0\n  local triples_sum37=0\n  local triples_sum38=0\n  local triples_sum39=0\n\
    \  local triples_sum40=0\n  local triples_sum41=0\n  local triples_sum42=0\n \
    \ local triples_sum43=0\n  local triples_sum44=0\n  local triples_sum45=0\n  local\
    \ triples_sum46=0\n  local triples_sum47=0\n  local triples_sum48=0\n  local triples_sum49=0\n\
    \  local triples_sum50=0\n  local triples_sum51=0\n  local triples_sum52=0\n \
    \ local triples_sum53=0\n  local triples_sum54=0\n  local triples_sum55=0\n  local\
    \ triples_sum56=0\n  local triples_sum57=0\n  local triples_sum58=0\n  local \n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=($(for ((i=1; i<=$n; i++));\
    \ do echo $i; done))\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n\
    \      for k in \"${a[@]}\"; do\n        if (( $i + $j + $k )); then\n       \
    \   count=$(( $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local triple\n  \n  a=($(for\
    \ ((i=1; i<=$n; i++)); do echo \"$i\"; done))\n  \n  for ((i=1; i<=$n; i++));\
    \ do\n    for ((j=1; j<=$n; j++)); do\n      for ((k=1; k<=$n; k++)); do\n   \
    \     if (( $i == $j && $j == $k )); then\n          triple=$(( $i * $i - $i +\
    \ $j * $j - $j + $k * $k - $k + 1 ))\n          count=$(( $count + $triple ))\n\
    \        fi\n      done\n    done\n  done\n  \n  echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local triples=0\n\
    \    while [ $i -lt $n ]; do\n        if [ $i -eq $j ]; then\n            triples=$((triples\
    \ + 1))\n        fi\n        if [ $i -eq $k ]; then\n            triples=$((triples\
    \ + 1))\n        fi\n        if [ $i -le $j ] && [ $i -le $k ]; then\n       \
    \     triples=$((triples + 1))\n        fi\n        i=$((i + 1))\n        j=$((j\
    \ + 1))\n        k=$((k + 1))\n    done\n    echo $triples\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    local count=0\n    local triples=0\n    local triple\n    while [ $i -lt\
    \ $n ]; do\n        triple=$(a[$i]+$a[j]+$a[k])\n        if [ $triple -eq 3 ];\
    \ then\n            triples=$((triples+1))\n            sum=$((sum+$triple))\n\
    \            count=$((count+1))\n        fi\n        i=$((i+1))\n        j=$((j+1))\n\
    \        k=$((k+1))\n    done\n    echo $((triples/count))\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptcgm9_v9.sh: line 23: a[0]+1[j]+1[k]: command not found

    /tmp/tmptcgm9_v9.sh: line 24: [: -eq: unary operator expected

    /tmp/tmptcgm9_v9.sh: line 23: a[1]+1[j]+1[k]: command not found

    /tmp/tmptcgm9_v9.sh: line 24: [: -eq: unary operator expected

    /tmp/tmptcgm9_v9.sh: line 23: a[2]+1[j]+1[k]: command not found

    /tmp/tmptcgm9_v9.sh: line 24: [: -eq: unary operator expected

    /tmp/tmptcgm9_v9.sh: line 23: a[3]+1[j]+1[k]: command not found

    /tmp/tmptcgm9_v9.sh: line 24: [: -eq: unary operator expected

    /tmp/tmptcgm9_v9.sh: line 23: a[4]+1[j]+1[k]: command not found

    /tmp/tmptcgm9_v9.sh: line 24: [: -eq: unary operator expected

    /tmp/tmptcgm9_v9.sh: line 33: triples/count: division by 0 (error token is "count")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n \"a[\"$i\"]=\"\n      echo $((i*i-i+1))\n\
    \    done))\n  local count=0\n  local j=0\n  local k=0\n  local i\n  for i in\
    \ \"${a[@]}\"\n  do\n    count=$((count+1))\n    j=$((j+1))\n    k=$((k+1))\n\
    \    if [ $((i*i-i+1)) == $((j*j+k)) ]\n    then\n      echo \"$i $j $k\"\n  \
    \  fi\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzwc2cqus.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1)); done))\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local triples=0\n  while ((i<$n) && (j<$n) && (k<$n)) {\n\
    \    if (($a[i] < $a[j]) && ($a[i] < $a[k])) {\n      triples=$((triples + 1))\n\
    \      i=$((i+1))\n      j=$((j+1))\n      k=$((k+1))\n    } else if (($a[j] <\
    \ $a[k]) && ($a[j] < $a[i])) {\n      triples=$((triples + 1))\n      j=$((j+1))\n\
    \      k=$((k+1))\n    } else if (($a[k] < $a[j]) && ($a[k] < $a[i])) {\n    \
    \  triples=$((triples + 1))\n      k=$((k+1))\n    }\n  }\n  echo $triples\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5qu5og32.sh: line 19: syntax error near unexpected token `{''

    /tmp/tmp5qu5og32.sh: line 19: `  while ((i<$n) && (j<$n) && (k<$n)) {''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  a=$( seq 1 $n\
    \ )\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in\
    \ \"${a[@]}\"; do\n        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n\
    \          count=$(echo $(( $i * $i - $i + $j * $j - $j + $k * $k - $k + 1 ))\
    \ | bc)\n          max=$(( $count > $max ? $count : $max ))\n        fi\n    \
    \  done\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwyp0htbw.sh: line 24: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n  local triples=0\n\
    \  local i j k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if (( i + j + k == $((i * i * i)) )); then\n\
    \          triples=$((triples + 1))\n        fi\n      done\n    done\n  done\n\
    \  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local count=0\n\
    \  local triple=0\n  local triples=0\n  local triples_sum=0\n  local triples_sum2=0\n\
    \  local triples_sum3=0\n  local triples_sum4=0\n  local triples_sum5=0\n  local\
    \ triples_sum6=0\n  local triples_sum7=0\n  local triples_sum8=0\n  local triples_sum9=0\n\
    \  local triples_sum10=0\n  local triples_sum11=0\n  local triples_sum12=0\n \
    \ local triples_sum13=0\n  local triples_sum14=0\n  local triples_sum15=0\n  local\
    \ triples_sum16=0\n  local triples_sum17=0\n  local triples_sum18=0\n  local triples_sum19=0\n\
    \  local triples_sum20=0\n  local triples_sum21=0\n  local triples_sum22=0\n \
    \ local triples_sum23=0\n  local triples_sum24=0\n  local triples_sum25=0\n  local\
    \ triples_sum26=0\n  local triples_sum27=0\n  local triples_sum28=0\n  local triples_sum29=0\n\
    \  local triples_sum30=0\n  local triples_sum31=0\n  local triples_sum32=0\n \
    \ local triples_sum33=0\n  local triples_sum34=0\n  local triples_sum35=0\n  local\
    \ triples_sum36=0\n  local triples_sum37=0\n  local triples_sum38=0\n  local triples_sum39=0\n\
    \  local triples_sum40=0\n  local triples_sum41=0\n  local triples_sum42=0\n \
    \ local triples_sum43=0\n  local triples_sum44=0\n  local triples_sum45=0\n  local\
    \ triples_sum46=0\n  local triples_sum47=0\n  local triples_sum48=0\n  local triples_sum49=0\n\
    \  local triples_sum50=0\n  local triples_sum51=0\n  local triples_sum52=0\n \
    \ local triples_sum53=0\n  local triples_sum54=0\n  local triples_sum55=0\n  local\
    \ triples_sum56=0\n  local triples_sum57=0\n  \n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local triples=0\n  while [ $i -lt $n ]; do\n    while [\
    \ $j -lt $n ]; do\n      while [ $k -lt $n ]; do\n        if [ $i -eq $j -a $j\
    \ -eq $k -a $i -eq $k ]; then\n          triples=$((triples + 1))\n        fi\n\
    \        k=$((k + 1))\n      done\n      j=$((j + 1))\n    done\n    i=$((i +\
    \ 1))\n  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i\n  local j\n  local k\n  local sum\n  local count\n  local\
    \ triple\n  local triples=0\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        sum=$(( $i + $j + $k ))\n      \
    \  if [ $sum -eq 0 ]; then\n          continue\n        fi\n        if [ $sum\
    \ -eq $(( $i * $i - $i + $j * $j - $j + $k * $k - $k + 1 )) ]; then\n        \
    \  triple=$(( $i * $i - $i + $j * $j - $j + $k * $k - $k + 1 ))\n          triples=$((\
    \ $triples + 1 ))\n        fi\n      done\n    done\n  done\n  echo $triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local triples=0\n  local\
    \ i j k\n  for ((i=0; i<$n; i++)); do\n    for ((j=0; j<$n; j++)); do\n      for\
    \ ((k=0; k<$n; k++)); do\n        if (( ${a[i]} + ${a[j]} + ${a[k]} % 3 == 0 ));\
    \ then\n          triples=$((triples + 1))\n        fi\n      done\n    done\n\
    \  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i = 1; i <= n; i++)); do echo $i; done))\n    local count=0\n   \
    \ local i\n    local j\n    local k\n    local sum\n    local sum1\n    local\
    \ sum2\n    local sum3\n    local sum4\n    local sum5\n    local sum6\n    local\
    \ sum7\n    local sum8\n    local sum9\n    local sum10\n    local sum11\n   \
    \ local sum12\n    local sum13\n    local sum14\n    local sum15\n    local sum16\n\
    \    local sum17\n    local sum18\n    local sum19\n    local sum20\n    local\
    \ sum21\n    local sum22\n    local sum23\n    local sum24\n    local sum25\n\
    \    local sum26\n    local sum27\n    local sum28\n    local sum29\n    local\
    \ sum30\n    local sum31\n    local sum32\n    local sum33\n    local sum34\n\
    \    local sum35\n    local sum36\n    local sum37\n    local sum38\n    local\
    \ sum39\n    local sum40\n    local sum41\n    local sum42\n    local sum43\n\
    \    local sum44\n    local sum45\n    local sum46\n    local sum47\n    local\
    \ sum48\n    local sum49\n    local sum50\n    local sum51\n    local sum52\n\
    \    local sum53\n    local sum54\n    local sum55\n    local sum56\n    local\
    \ sum57\n    local sum58\n    local sum59\n    local sum60\n    local sum61\n\
    \    local sum62\n    local sum63\n    local sum64\n    local sum65\n    local\
    \ sum66\n    local sum67\n    local sum68\n    local sum69\n    local sum70\n\
    \    local sum71\n    local sum72\n    local sum73\n    local sum74\n    local\
    \ sum75\n    local sum76\n    local sum77\n    local sum78\n    local sum79\n\
    \    local sum80\n    local sum81\n    local sum82\n    local sum83\n    local\
    \ sum84\n    local sum85\n    local sum86\n    local sum87\n    local sum88\n\
    \    local sum89\n    local sum90\n    local sum91\n    local sum92\n    local\
    \ sum93\n    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$(expr\
    \ $count + 1)\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    j=$((i+1))\n  \
    \  k=$((j+1))\n    if [ $((i*i-i+1)) == $((j*j-j+1)) ]; then\n      count=$((count+1))\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local triples=0\n  while [\
    \ $i -lt $n ]; do\n    local j=$((i+1))\n    local k=$((j+1))\n    triples=$((triples\
    \ + $((a[i] + $a[j] + $a[k]))))\n    i=$((j+1))\n  done\n  echo $triples\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpszco_jt3.sh: line 22: a[i] + 1[j] + 1[k]: syntax error: invalid
    arithmetic operator (error token is "[j] + 1[k]")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ triples=0\n  local i\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\";\
    \ do\n      for k in \"${a[@]}\"; do\n        if (( $i > $j > $k )); then\n  \
    \        triples=$((triples + 1))\n          break\n        fi\n      done\n \
    \   done\n  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local count=0\n\
    \    local j=0\n    local k=0\n    local i\n    for ((i=1; i<=$n; i++)); do\n\
    \        if (( ${a[i]} > ${a[j]} && ${a[i]} > ${a[k]} )) ; then\n            ((\
    \ count++ ))\n            j=$i\n        fi\n        k=$i\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2elck_rj.sh: line 20: ((: > 21 &&  > 21 : syntax error: operand
    expected (error token is "> 21 &&  > 21 ")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp22vn9l8j.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max_count\n\
    \    local max_triple\n    local max_triple_index\n    local max_triple_index2\n\
    \    local max_triple_index3\n    local max_triple_index4\n    local max_triple_index5\n\
    \    local max_triple_index6\n    local max_triple_index7\n    local max_triple_index8\n\
    \    local max_triple_index9\n    local max_triple_index10\n    local max_triple_index11\n\
    \    local max_triple_index12\n    local max_triple_index13\n    local max_triple_index14\n\
    \    local max_triple_index15\n    local max_triple_index16\n    local max_triple_index17\n\
    \    local max_triple_index18\n    local max_triple_index19\n    local max_triple_index20\n\
    \    local max_triple_index21\n    local max_triple_index22\n    local max_triple_index23\n\
    \    local max_triple_index24\n    local max_triple_index25\n    local max_triple_index26\n\
    \    local max_triple_index27\n    local max_triple_index28\n    local max_triple_index29\n\
    \    local max_triple_index30\n    local max_triple_index31\n    local max_triple_index32\n\
    \    local max_triple_index33\n    local max_triple_index34\n    local max_triple_index35\n\
    \    local max_triple_index36\n    local max_triple_index37\n    local max_triple_index38\n\
    \    local max_triple_index39\n    local max_triple_index40\n    local max_triple_index41\n\
    \    local max_triple_index42\n    local max_triple_index43\n    local max_triple_index44\n\
    \    local max_triple_index45\n    local max_triple_index46\n    local max_triple_index47\n\
    \    local max_triple_index48\n    local max_triple_index49\n    local max_triple_index50\n\
    \    local max_triple_index51\n    local max_triple_index52\n    local max_triple_index53\n\
    \    local max_triple_index54\n    local max_triple_index55\n    local max_triple_index56\n\
    \    local max_triple_index57\n    local max_triple_index58\n    local max_triple_index59\n\
    \    local max_triple_index60\n    local max_triple_index61\n    local max_triple_index62\n\
    \    local max_triple_index63\n    local max_triple_index64\n    local max_triple_index65\n\
    \    local max_triple_index66\n    local max_triple_index67\n    local max_triple_index68\n\
    \    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local i=0\n  local j=0\n\
    \  local k=0\n  local count=0\n  while [ $i -lt $n ]; do\n    local tmp=$(( a[i]\
    \ + (a[j] + a[k]) ))\n    if [ $tmp -eq 3 ]; then\n      count=$(( count + 1 ))\n\
    \      i=$(( i + 1 ))\n      j=$(( j + 1 ))\n      k=$(( k + 1 ))\n    else\n\
    \      i=$(( i + 1 ))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local temp\n    \n    a=()\n    \n    for i in $(seq 1 $n); do\n        a+=($i*$i-$i+1)\n\
    \    done\n    \n    count=$(expr ${#a[@]} - 1)\n    \n    for i in $(seq 0 $((count-1))\
    \ -1); do\n        temp=$((${a[$i]} + ${a[$((i+1))]} + ${a[$((i+2))]}))\n    \
    \    if [ $temp -eq 3 ]; then\n            max=$(expr ${a[$i]} + ${a[$((i+1))]}\
    \ + ${a[$((i+2))]})\n        fi\n    done\n    \n    echo $max\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp22vn9l8j.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local maxtriple\n    local maxtriplecount\n    local maxtriplecount2\n   \
    \ local maxtriplecount3\n    local maxtriplecount4\n    local maxtriplecount5\n\
    \    local maxtriplecount6\n    local maxtriplecount7\n    local maxtriplecount8\n\
    \    local maxtriplecount9\n    local maxtriplecount10\n    local maxtriplecount11\n\
    \    local maxtriplecount12\n    local maxtriplecount13\n    local maxtriplecount14\n\
    \    local maxtriplecount15\n    local maxtriplecount16\n    local maxtriplecount17\n\
    \    local maxtriplecount18\n    local maxtriplecount19\n    local maxtriplecount20\n\
    \    local maxtriplecount21\n    local maxtriplecount22\n    local maxtriplecount23\n\
    \    local maxtriplecount24\n    local maxtriplecount25\n    local maxtriplecount26\n\
    \    local maxtriplecount27\n    local maxtriplecount28\n    local maxtriplecount29\n\
    \    local maxtriplecount30\n    local maxtriplecount31\n    local maxtriplecount32\n\
    \    local maxtriplecount33\n    local maxtriplecount34\n    local maxtriplecount35\n\
    \    local maxtriplecount36\n    local maxtriplecount37\n    local maxtriplecount38\n\
    \    local maxtriplecount39\n    local maxtriplecount40\n    local maxtriplecount41\n\
    \    local maxtriplecount42\n    local maxtriplecount43\n    local maxtriplecount44\n\
    \    local maxtriplecount45\n    local maxtriplecount46\n    local maxtriplecount47\n\
    \    local maxtriplecount48\n    local maxtriplecount49\n    local maxtriplecount50\n\
    \    local maxtriplecount51\n    local maxtriplecount52\n    local maxtriplecount53\n\
    \    local maxtriplecount54\n    local maxtriplecount55\n    local maxtriplecount56\n\
    \    local maxtriplecount57\n    local maxtriplecount58\n    local maxtriplecount59\n\
    \    local maxtriplecount60\n    local maxtriplecount61\n    local maxtriplecount62\n\
    \    local maxtriplecount63\n    local maxtriplecount64\n    local maxtriplecount65\n\
    \    local maxtriplecount66\n    local maxtriplecount67\n    local maxtriplecount68\n\
    \    local \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  for i in ${a[@]}; do\n    for j in ${a[@]}; do\n\
    \      for k in ${a[@]}; do\n        if [ $i -le $j -a $j -le $k ]; then\n   \
    \       count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n $i\n    done))\n  local j=0\n  local\
    \ k=0\n  local sum=0\n  local triples=0\n  local i\n  local j\n  local k\n  local\
    \ sum\n  for i in \"${a[@]}\"; do\n    j=$((i+1))\n    for k in \"${a[@]}\"; do\n\
    \      sum=$((i*i)+j*j+k*k)\n      if (( $sum % 3 )); then\n        triples=$((triples\
    \ + 1))\n      fi\n    done\n  done\n  echo $triples\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc4azr54_.sh: command substitution: line 29: syntax error near unexpected
    token `+j*j+k*k''

    /tmp/tmpc4azr54_.sh: command substitution: line 29: `(i*i)+j*j+k*k''

    /tmp/tmpc4azr54_.sh: line 30: ((: % 3 : syntax error: operand expected (error
    token is "% 3 ")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1); done))\n  local count=0\n\
    \  local i\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for\
    \ k in \"${a[@]}\"; do\n        if (( i*j+k == i*k+j )); then\n          ((count++))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfliul6wp.sh: command substitution: line 15: syntax error near unexpected
    token `+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: `(i*i-1)+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: syntax error near unexpected
    token `+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: `(i*i-1)+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: syntax error near unexpected
    token `+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: `(i*i-1)+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: syntax error near unexpected
    token `+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: `(i*i-1)+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: syntax error near unexpected
    token `+i+1''

    /tmp/tmpfliul6wp.sh: command substitution: line 15: `(i*i-1)+i+1''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=$( seq 1 $n )\n  local i\n  for i in $(seq 1 $n); do\n    local j\n    for\
    \ j in $(seq 1 $n); do\n      local k\n      for k in $(seq 1 $n); do\n      \
    \  if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          echo \"$a[$i],$a[$j],$a[$k]\"\
    \ | grep -q \"^[0-9]*$\" && echo \"$a[$i],$a[$j],$a[$k]\" || echo \"$a[$i],$a[$j],$a[$k]\"\
    \ >> $2\n        fi\n      done\n    done\n  done\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local count=0\n\
    \  local triple=0\n  local triples=0\n  local triples_sum=0\n  local triples_sum2=0\n\
    \  local triples_sum3=0\n  local triples_sum4=0\n  local triples_sum5=0\n  local\
    \ triples_sum6=0\n  local triples_sum7=0\n  local triples_sum8=0\n  local triples_sum9=0\n\
    \  local triples_sum10=0\n  local triples_sum11=0\n  local triples_sum12=0\n \
    \ local triples_sum13=0\n  local triples_sum14=0\n  local triples_sum15=0\n  local\
    \ triples_sum16=0\n  local triples_sum17=0\n  local triples_sum18=0\n  local triples_sum19=0\n\
    \  local triples_sum20=0\n  local triples_sum21=0\n  local triples_sum22=0\n \
    \ local triples_sum23=0\n  local triples_sum24=0\n  local triples_sum25=0\n  local\
    \ triples_sum26=0\n  local triples_sum27=0\n  local triples_sum28=0\n  local triples_sum29=0\n\
    \  local triples_sum30=0\n  local triples_sum31=0\n  local triples_sum32=0\n \
    \ local triples_sum33=0\n  local triples_sum34=0\n  local triples_sum35=0\n  local\
    \ triples_sum36=0\n  local triples_sum37=0\n  local triples_sum38=0\n  local triples_sum39=0\n\
    \  local triples_sum40=0\n  local triples_sum41=0\n  local triples_sum42=0\n \
    \ local triples_sum43=0\n  local triples_sum44=0\n  local triples_sum45=0\n  local\
    \ triples_sum46=0\n  local triples_sum47=0\n  local triples_sum48=0\n  local triples_sum49=0\n\
    \  local triples_sum50=0\n  local triples_sum51=0\n  local triples_sum52=0\n \
    \ local triples_sum53=0\n  local triples_sum54=0\n  local triples_sum55=0\n  local\
    \ triples_sum56=0\n  local triples_sum57=0\n  \n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local triple\n  local max\n\
    \  \n  a=($(for ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n  \n\
    \  max=0\n  for i in \"${!a[@]}\"; do\n    for j in \"${!a[@]}\"; do\n      for\
    \ k in \"${!a[@]}\"; do\n        triple=$(( ${a[i]} + ${a[j]} + ${a[k]} ))\n \
    \       if (( triple % 3 == 0 )); then\n          count=$(( count + 1 ))\n   \
    \     fi\n      done\n    done\n  done\n  \n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp22vn9l8j.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local count=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local triples=0\n    local max_triples=0\n\
    \    local max_triples_value=0\n    local max_triples_value_a=0\n    local max_triples_value_j=0\n\
    \    local max_triples_value_k=0\n    local max_triples_value_i=1\n    local max_triples_value_j=1\n\
    \    local max_triples_value_k=1\n    local max_triples_value_i=2\n    local max_triples_value_j=2\n\
    \    local max_triples_value_k=2\n    local max_triples_value_i=3\n    local max_triples_value_j=3\n\
    \    local max_triples_value_k=3\n    local max_triples_value_i=4\n    local max_triples_value_j=4\n\
    \    local max_triples_value_k=4\n    local max_triples_value_i=5\n    local max_triples_value_j=5\n\
    \    local max_triples_value_k=5\n    local max_triples_value_i=6\n    local max_triples_value_j=6\n\
    \    local max_triples_value_k=6\n    local max_triples_value_i=7\n    local max_triples_value_j=7\n\
    \    local max_triples_value_k=7\n    local max_triples_value_i=8\n    local max_triples_value_j=8\n\
    \    local max_triples_value_k=8\n    local max_triples_value_i=9\n    local max_triples_value_j=9\n\
    \    local max_triples_value_k=9\n    local max_triples_value_i=10\n    local\
    \ max_triples_value_j=10\n    local max_triples_value_k=10\n    local max_triples_value_i=11\n\
    \    local max_triples_value_j=11\n    local max_triples_value_k=11\n    local\
    \ max_triples_value_i=12\n    local max_triples_value_j=12\n    local max_triples_value_k=12\n\
    \    local max_triples_value_i=13\n    local max_triples_value_j=13\n    local\
    \ max_triples_value_k=13\n    local max_triples_value_i=14\n    local max_triples_value_j=14\n\
    \    local max_triples_value_k=14\n    local max_triples_value_i=15\n    local\
    \ max_triples_value_j=15\n    local max_triples_value_\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local triples=0\n  while [\
    \ $i -lt $n ]; do\n    local j=$((i+1))\n    local k=$((j+1))\n    local sum=$((i*i-i+j*j-k))\n\
    \    if [ $sum -eq 0 ]; then\n      triples=$((triples + 1))\n      i=$((i+1))\n\
    \      j=$((j+1))\n      k=$((k+1))\n    else\n      i=$((i+1))\n      j=$((j+1))\n\
    \      k=$((k+1))\n    fi\n  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo $((i*i-1))\n    done))\n  local count=0\n\
    \  local i\n  for i in \"${a[@]}\"\n  do\n    for j in \"${a[@]}\"\n    do\n \
    \     for k in \"${a[@]}\"\n      do\n        if (( $i + $j + $k == $((i*i*i))\
    \ ))\n        then\n          count=$((count+1))\n        fi\n      done\n   \
    \ done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local i=0\n  local j=0\n  local k=0\n\
    \  local sum=0\n  while [ $i -lt $n ]; do\n    sum=$((sum + $a[i]))\n    i=$((i\
    \ + 1))\n  done\n  while [ $j -lt $n ]; do\n    sum=$((sum + $a[j]))\n    j=$((j\
    \ + 1))\n  done\n  while [ $k -lt $n ]; do\n    sum=$((sum + $a[k]))\n    k=$((k\
    \ + 1))\n  done\n  echo $((sum % 3))\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd7o5jykr.sh: line 20: sum + 1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=$( seq 1 $n )\n  local i\n  for i in $(seq 1 $n); do\n    local j\n    for\
    \ j in $(seq 1 $n); do\n      local k\n      for k in $(seq 1 $n); do\n      \
    \  if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          echo \"$a[$i],$a[$j],$a[$k]\"\
    \ >> /tmp/triples.txt\n        fi\n      done\n    done\n  done\n  cat /tmp/triples.txt\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n    local\
    \ count=0\n    local i=0\n    local j=1\n    local k=1\n    while [ $i -le $n\
    \ ]; do\n        local sum=$(( $a[i] + $a[j] + $a[k] ))\n        if [ $sum -eq\
    \ 3 ]; then\n            (( count++ ))\n            (( k++ ))\n        elif [\
    \ $sum -eq 0 ]; then\n            (( j++ ))\n        elif [ $sum -eq -3 ]; then\n\
    \            (( i++ ))\n        fi\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb14r_k99.sh: line 20: 1[i] + 1[j] + 1[k] : syntax error: invalid
    arithmetic operator (error token is "[i] + 1[j] + 1[k] ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)) ; do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ j=0\n  local k=0\n  local triples=0\n  local i\n  for i in \"${a[@]}\"; do\n\
    \    if [ $i -le $j ]; then\n      if [ $i -le $k ]; then\n        triples=$((triples\
    \ + 1))\n      fi\n      j=$((j+1))\n    fi\n    if [ $j -le $k ]; then\n    \
    \  k=$((k+1))\n    fi\n  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i = 1; i <= n; i++)) ; do echo $((i * i - i + 1)); done))\n  local i=0\n \
    \ local j=0\n  local k=0\n  local sum=0\n  while [ $i -lt $n ]; do\n    sum=$((sum\
    \ + a[$i]))\n    i=$((i + 1))\n  done\n  while [ $j -lt $n ]; do\n    sum=$((sum\
    \ + a[$j]))\n    j=$((j + 1))\n  done\n  while [ $k -lt $n ]; do\n    sum=$((sum\
    \ + a[$k]))\n    k=$((k + 1))\n  done\n  echo $((sum % 3))\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local triple\n\
    \    local count1\n    local count2\n    local count3\n    local count4\n    local\
    \ count5\n    local count6\n    local count7\n    local count8\n    local count9\n\
    \    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n    local count92\n    local count93\n\
    \    local count94\n    local count95\n    local count96\n    local \n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for ((i=1; i<=$n; i++)); do\n    for ((j=1; j<=$n;\
    \ j++)); do\n      for ((k=1; k<=$n; k++)); do\n        if (( ${a[i]} + ${a[j]}\
    \ + ${a[k]} % 3 == 0 )); then\n          count=$((count+1))\n        fi\n    \
    \  done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6taukprg.sh: line 22: ((: 3 + 3 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 21 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 21 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 21 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 21 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local maxi\n    local maxj\n    local maxk\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local maxc\n    local maxc\n    local maxc\n    local maxc\n\
    \    local maxc\n    local \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)) ; do echo $((i*i - i + 1)); done))\n    local count=0\n\
    \    local i\n    local j\n    local k\n    local triple\n    local triple1\n\
    \    local triple2\n    local triple3\n    local triple4\n    local triple5\n\
    \    local triple6\n    local triple7\n    local triple8\n    local triple9\n\
    \    local triple10\n    local triple11\n    local triple12\n    local triple13\n\
    \    local triple14\n    local triple15\n    local triple16\n    local triple17\n\
    \    local triple18\n    local triple19\n    local triple20\n    local triple21\n\
    \    local triple22\n    local triple23\n    local triple24\n    local triple25\n\
    \    local triple26\n    local triple27\n    local triple28\n    local triple29\n\
    \    local triple30\n    local triple31\n    local triple32\n    local triple33\n\
    \    local triple34\n    local triple35\n    local triple36\n    local triple37\n\
    \    local triple38\n    local triple39\n    local triple40\n    local triple41\n\
    \    local triple42\n    local triple43\n    local triple44\n    local triple45\n\
    \    local triple46\n    local triple47\n    local triple48\n    local triple49\n\
    \    local triple50\n    local triple51\n    local triple52\n    local triple53\n\
    \    local triple54\n    local triple55\n    local triple56\n    local triple57\n\
    \    local triple58\n    local triple59\n    local triple60\n    local triple61\n\
    \    local triple62\n    local triple63\n    local triple64\n    local triple65\n\
    \    local triple66\n    local triple67\n    local triple68\n    local triple69\n\
    \    local triple70\n    local triple71\n    local triple72\n    local triple73\n\
    \    local triple74\n    local triple75\n    local triple76\n    local triple77\n\
    \    local triple78\n    local triple79\n    local triple80\n    local triple81\n\
    \    local triple82\n    local triple83\n    local triple84\n    local triple85\n\
    \    local triple86\n    local triple87\n    local triple88\n    local triple89\n\
    \    local triple90\n    local triple91\n    local triple92\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local i=0\n  local j=0\n  local k=0\n\
    \  local sum=0\n  while ((i<$n) && (j<$n) && (k<$n)) {\n    sum=$((sum+$a[i]))\n\
    \    i=$((i+1))\n    j=$((j+1))\n    k=$((k+1))\n  }\n  echo $((sum%3))\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7s5aq61_.sh: line 19: syntax error near unexpected token `{''

    /tmp/tmp7s5aq61_.sh: line 19: `  while ((i<$n) && (j<$n) && (k<$n)) {''

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local i=0\n\
    \    local j=0\n    local k=0\n    local sum=0\n    local count=0\n    local triples=0\n\
    \    local triple\n    \n    while ((i<$n) && (j<$n) && (k<$n)) {\n        triple=$((a[i]+a[j]+a[k]))\n\
    \        if ((triple%3==0)); then\n            triples=$((triples+1))\n      \
    \      sum=$((sum+triple))\n            count=$((count+1))\n        fi\n     \
    \   ((i++))\n        ((j++))\n        ((k++))\n    }\n    \n    if ((triples>0));\
    \ then\n        echo \"$triples\"\n        echo \"$sum\"\n        echo \"$count\"\
    \n    fi\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsjrcvolj.sh: line 23: syntax error near unexpected token `{''

    /tmp/tmpsjrcvolj.sh: line 23: `    while ((i<$n) && (j<$n) && (k<$n)) {''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max_triple\n  \n  a=($(for\
    \ ((i=1; i<=$n; i++)) ; do echo -n \"a[\"$i\"]=\"; done))\n  \n  for i in $(seq\
    \ 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n  \
    \      if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$(( $count\
    \ + 1 ))\n        fi\n      done\n    done\n  done\n  \n  max_triple=$(( $count\
    \ / 3 ))\n  \n  echo $max_triple\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max_count\n\
    \    local max_triple\n    local max_triple_index\n    local max_triple_index2\n\
    \    local max_triple_index3\n    local max_triple_index4\n    local max_triple_index5\n\
    \    local max_triple_index6\n    local max_triple_index7\n    local max_triple_index8\n\
    \    local max_triple_index9\n    local max_triple_index10\n    local max_triple_index11\n\
    \    local max_triple_index12\n    local max_triple_index13\n    local max_triple_index14\n\
    \    local max_triple_index15\n    local max_triple_index16\n    local max_triple_index17\n\
    \    local max_triple_index18\n    local max_triple_index19\n    local max_triple_index20\n\
    \    local max_triple_index21\n    local max_triple_index22\n    local max_triple_index23\n\
    \    local max_triple_index24\n    local max_triple_index25\n    local max_triple_index26\n\
    \    local max_triple_index27\n    local max_triple_index28\n    local max_triple_index29\n\
    \    local max_triple_index30\n    local max_triple_index31\n    local max_triple_index32\n\
    \    local max_triple_index33\n    local max_triple_index34\n    local max_triple_index35\n\
    \    local max_triple_index36\n    local max_triple_index37\n    local max_triple_index38\n\
    \    local max_triple_index39\n    local max_triple_index40\n    local max_triple_index41\n\
    \    local max_triple_index42\n    local max_triple_index43\n    local max_triple_index44\n\
    \    local max_triple_index45\n    local max_triple_index46\n    local max_triple_index47\n\
    \    local max_triple_index48\n    local max_triple_index49\n    local max_triple_index50\n\
    \    local max_triple_index51\n    local max_triple_index52\n    local max_triple_index53\n\
    \    local max_triple_index54\n    local max_triple_index55\n    local max_triple_index56\n\
    \    local max_triple_index57\n    local max_triple_index58\n    local max_triple_index59\n\
    \    local max_triple_index60\n    local max_triple_index61\n    local max_triple_index62\n\
    \    local max_triple_index63\n    local max_triple_index64\n    local max_triple_index65\n\
    \    local max_triple_index66\n    local max_triple_index67\n    local max_triple_index68\n\
    \    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for ((i=1; i<=$n; i++)); do\n    for ((j=1; j<=$n;\
    \ j++)); do\n      for ((k=1; k<=$n; k++)); do\n        if (( ${a[i]} + ${a[j]}\
    \ + ${a[k]} % 3 == 0 )); then\n          count=$((count+1))\n        fi\n    \
    \  done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6taukprg.sh: line 22: ((: 3 + 3 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 3 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 7 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 + 21 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 13 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 21 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 21 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp6taukprg.sh: line 22: ((: 21 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i\n  local j\n  local k\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( $i < $j && $j < $k && $i < $k )); then\n          count=$(( $count + 1 ))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local count=0\n\
    \    local i\n    local j\n    local k\n    local sum\n    local count1\n    local\
    \ count2\n    local count3\n    local count4\n    local count5\n    local count6\n\
    \    local count7\n    local count8\n    local count9\n    local count10\n   \
    \ local count11\n    local count12\n    local count13\n    local count14\n   \
    \ local count15\n    local count16\n    local count17\n    local count18\n   \
    \ local count19\n    local count20\n    local count21\n    local count22\n   \
    \ local count23\n    local count24\n    local count25\n    local count26\n   \
    \ local count27\n    local count28\n    local count29\n    local count30\n   \
    \ local count31\n    local count32\n    local count33\n    local count34\n   \
    \ local count35\n    local count36\n    local count37\n    local count38\n   \
    \ local count39\n    local count40\n    local count41\n    local count42\n   \
    \ local count43\n    local count44\n    local count45\n    local count46\n   \
    \ local count47\n    local count48\n    local count49\n    local count50\n   \
    \ local count51\n    local count52\n    local count53\n    local count54\n   \
    \ local count55\n    local count56\n    local count57\n    local count58\n   \
    \ local count59\n    local count60\n    local count61\n    local count62\n   \
    \ local count63\n    local count64\n    local count65\n    local count66\n   \
    \ local count67\n    local count68\n    local count69\n    local count70\n   \
    \ local count71\n    local count72\n    local count73\n    local count74\n   \
    \ local count75\n    local count76\n    local count77\n    local count78\n   \
    \ local count79\n    local count80\n    local count81\n    local count82\n   \
    \ local count83\n    local count84\n    local count85\n    local count86\n   \
    \ local count87\n    local count88\n    local count89\n    local count90\n   \
    \ local count91\n    local count92\n\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local maxi\n    local maxj\n    local maxk\n    local maxcount\n    local\
    \ maxmax\n    local maxmaxi\n    local maxmaxj\n    local maxmaxk\n    local maxmaxcount\n\
    \    local maxmaxmax\n    local maxmaxmaxi\n    local maxmaxmaxj\n    local maxmaxmaxk\n\
    \    local maxmaxmaxcount\n    local maxmaxmaxmax\n    local maxmaxmaxmaxi\n \
    \   local maxmaxmaxmaxj\n    local maxmaxmaxmaxk\n    local maxmaxmaxmaxcount\n\
    \    local maxmaxmaxmaxmax\n    local maxmaxmaxmaxmaxi\n    local maxmaxmaxmaxmaxj\n\
    \    local maxmaxmaxmaxmaxk\n    local maxmaxmaxmaxmaxcount\n    local maxmaxmaxmaxmaxmax\n\
    \    local maxmaxmaxmaxmaxmaxi\n    local maxmaxmaxmaxmaxmaxj\n    local maxmaxmaxmaxmaxmaxk\n\
    \    local maxmaxmaxmaxmaxmaxcount\n    local maxmaxmaxmaxmaxmaxmax\n    local\
    \ maxmaxmaxmaxmaxmaxmaxi\n    local maxmaxmaxmaxmaxmaxmaxj\n    local maxmaxmaxmaxmaxmaxmaxk\n\
    \    local maxmaxmaxmaxmaxmaxmaxcount\n    local maxmaxmaxmaxmaxmaxmaxmax\n  \
    \  local maxmaxmaxmaxmaxmaxmaxmaxi\n    local maxmaxmaxmaxmaxmaxmaxmaxj\n    local\
    \ maxmaxmaxmaxmaxmaxmaxmaxk\n    local maxmaxmaxmaxmaxmaxmaxmaxcount\n    local\
    \ maxmaxmaxmaxmaxmaxmaxmaxmax\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxi\n    local\
    \ maxmaxmaxmaxmaxmaxmaxmaxmaxj\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxk\n    local\
    \ maxmaxmaxmaxmaxmaxmaxmaxmaxcount\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxmax\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxi\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxj\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxk\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxcount\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxmax\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxi\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1)); done))\n    local count=0\n\
    \    local triples=0\n    local triple\n    local i\n    local j\n    local k\n\
    \    local triple\n    local count\n    local i\n    local j\n    local k\n  \
    \  local triple\n    local count\n    local i\n    local j\n    local k\n    local\
    \ triple\n    local count\n    local i\n    local j\n    local k\n    local triple\n\
    \    local count\n    local i\n    local j\n    local k\n    local triple\n  \
    \  local count\n    local i\n    local j\n    local k\n    local triple\n    local\
    \ count\n    local i\n    local j\n    local k\n    local triple\n    local count\n\
    \    local i\n    local j\n    local k\n    local triple\n    local count\n  \
    \  local i\n    local j\n    local k\n    local triple\n    local count\n    local\
    \ i\n    local j\n    local k\n    local triple\n    local count\n    local i\n\
    \    local j\n    local k\n    local triple\n    local count\n    local i\n  \
    \  local j\n    local k\n    local triple\n    local count\n    local i\n    local\
    \ j\n    local k\n    local triple\n    local count\n    local i\n    local j\n\
    \    local k\n    local triple\n    local count\n    local i\n    local j\n  \
    \  local k\n    local triple\n    local count\n    local i\n    local j\n    local\
    \ k\n    local triple\n    local count\n    local i\n    local j\n    local k\n\
    \    local triple\n    local count\n    local i\n    local j\n    local k\n  \
    \  local triple\n    local count\n    local i\n    local j\n    local k\n    local\
    \ triple\n    local count\n    local i\n    local j\n    local k\n    local triple\n\
    \    local count\n    local i\n    local j\n    local k\n    local triple\n  \
    \  local count\n    local i\n    local j\n    local k\n    local triple\n    local\
    \ count\n    local i\n    local j\n    local k\n    local triple\n    local count\n\
    \    local i\n\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyagaptbt.sh: line 14: syntax error near unexpected token `;''

    /tmp/tmpyagaptbt.sh: line 14: `    local a=($(for ((i=1; i<=$n; i++)); do echo
    $((i*i-1)+i+1)); done))''

    /tmp/tmpyagaptbt.sh: line 15: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 16: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 17: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 18: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 19: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 20: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 21: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 22: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 23: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 24: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 25: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 26: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 27: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 28: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 29: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 30: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 31: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 32: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 33: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 34: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 35: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 36: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 37: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 38: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 39: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 40: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 41: local: can only be used in a function

    /tmp/tmpyagaptbt.sh: line 42: local: ca'
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $i*$i-$i+1; done))\n    local j=0\n  \
    \  local k=0\n    local count=0\n    local triple=0\n    local sum=0\n    local\
    \ max=0\n    local maxtriple=0\n    local maxsum=0\n    local maxmax=0\n    local\
    \ maxmaxtriple=0\n    local maxmaxsum=0\n    local maxmaxmax=0\n    local maxmaxmaxtriple=0\n\
    \    local maxmaxmaxsum=0\n    local maxmaxmaxmax=0\n    local maxmaxmaxmaxtriple=0\n\
    \    local maxmaxmaxmaxsum=0\n    local maxmaxmaxmaxmax=0\n    local maxmaxmaxmaxmaxtriple=0\n\
    \    local maxmaxmaxmaxmaxsum=0\n    local maxmaxmaxmaxmaxmax=0\n    local maxmaxmaxmaxmaxmaxtriple=0\n\
    \    local maxmaxmaxmaxmaxmaxsum=0\n    local maxmaxmaxmaxmaxmaxmax=0\n    local\
    \ maxmaxmaxmaxmaxmaxmaxtriple=0\n    local maxmaxmaxmaxmaxmaxmaxsum=0\n    local\
    \ maxmaxmaxmaxmaxmaxmaxmax=0\n    local maxmaxmaxmaxmaxmaxmaxmaxtriple=0\n   \
    \ local maxmaxmaxmaxmaxmaxmaxmaxsum=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmax=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxtriple=0\n    local maxmaxmaxmaxmaxmaxmaxmaxsum=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmax=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxtriple=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxsum=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxmax=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxtriple=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxsum=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxtriple=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxsum=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxtriple=0\n    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxsum=0\n\
    \    local maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax=0\n    local maxmaxmaxmaxmax\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local count=0\n    local i\n    local j\n    local k\n\
    \    local sum\n    local count1\n    local count2\n    local count3\n    local\
    \ count4\n    local count5\n    local count6\n    local count7\n    local count8\n\
    \    local count9\n    local count10\n    local count11\n    local count12\n \
    \   local count13\n    local count14\n    local count15\n    local count16\n \
    \   local count17\n    local count18\n    local count19\n    local count20\n \
    \   local count21\n    local count22\n    local count23\n    local count24\n \
    \   local count25\n    local count26\n    local count27\n    local count28\n \
    \   local count29\n    local count30\n    local count31\n    local count32\n \
    \   local count33\n    local count34\n    local count35\n    local count36\n \
    \   local count37\n    local count38\n    local count39\n    local count40\n \
    \   local count41\n    local count42\n    local count43\n    local count44\n \
    \   local count45\n    local count46\n    local count47\n    local count48\n \
    \   local count49\n    local count50\n    local count51\n    local count52\n \
    \   local count53\n    local count54\n    local count55\n    local count56\n \
    \   local count57\n    local count58\n    local count59\n    local count60\n \
    \   local count61\n    local count62\n    local count63\n    local count64\n \
    \   local count65\n    local count66\n    local count67\n    local count68\n \
    \   local count69\n    local count70\n    local count71\n    local count72\n \
    \   local count73\n    local count74\n    local count75\n    local count76\n \
    \   local count77\n    local count78\n    local count79\n    local count80\n \
    \   local count81\n    local count82\n    local count83\n    local count84\n \
    \   local count85\n    local count86\n    local count87\n    local count88\n \
    \   local count89\n    local count90\n    local count91\n    local count92\n \
    \   local count93\n    local count94\n    local count95\n\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local sum\n    local count2\n    local max2\n    local sum2\n    local count3\n\
    \    local max3\n    local sum3\n    local count4\n    local max4\n    local sum4\n\
    \    local count5\n    local max5\n    local sum5\n    local count6\n    local\
    \ max6\n    local sum6\n    local count7\n    local max7\n    local sum7\n   \
    \ local count8\n    local max8\n    local sum8\n    local count9\n    local max9\n\
    \    local sum9\n    local count10\n    local max10\n    local sum10\n    local\
    \ count11\n    local max11\n    local sum11\n    local count12\n    local max12\n\
    \    local sum12\n    local count13\n    local max13\n    local sum13\n    local\
    \ count14\n    local max14\n    local sum14\n    local count15\n    local max15\n\
    \    local sum15\n    local count16\n    local max16\n    local sum16\n    local\
    \ count17\n    local max17\n    local sum17\n    local count18\n    local max18\n\
    \    local sum18\n    local count19\n    local max19\n    local sum19\n    local\
    \ count20\n    local max20\n    local sum20\n    local count21\n    local max21\n\
    \    local sum21\n    local count22\n    local max22\n    local sum22\n    local\
    \ count23\n    local max23\n    local sum23\n    local count24\n    local max24\n\
    \    local sum24\n    local count25\n    local max25\n    local sum25\n    local\
    \ count26\n    local max26\n    local sum26\n    local count27\n    local max27\n\
    \    local sum27\n    local count28\n    local max28\n    local sum28\n    local\
    \ count29\n    local max29\n    local sum29\n    local count30\n    local max30\n\
    \    local sum30\n    local count31\n    local max31\n    local sum31\n    local\
    \ count32\n    local max32\n    local sum32\n    local count33\n    local max33\n\
    \    local sum\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local count=0\n  local i\n  local\
    \ j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if (( i == j && i == k )); then\n      \
    \    continue\n        fi\n        if (( i == j || i == k || j == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k )); then\n   \
    \       continue\n        fi\n        if (( i == j || i == k || j == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k )); then\n   \
    \       continue\n        fi\n        if (( i == j || i == k || j == k )); then\n\
    \          continue\n        fi\n        if (( i == j && k == k )); then\n   \
    \       continue\n        fi\n        if (( i == j || i == k || k == k )); then\n\
    \          continue\n        fi\n        if (( i == j && k == k )); then\n   \
    \       continue\n        fi\n        if (( i == j || i == k || k == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k && k == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k || i ==\
    \ j && k == k || i == k && j == k )); then\n          continue\n        fi\n \
    \       if (( i == j && j == k || i == j || i == k || j == k || k == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k || i == j || i\
    \ == k || j == k || k == k )); then\n          continue\n        fi\n        if\
    \ (( i == j && j == k || i == j || i == k || j == k || k == k )); then\n     \
    \     continue\n        fi\n        if (( i == j && j == k || i == j || i == k\
    \ || j == k || k == k )); then\n          continue\n        fi\n        if ((\
    \ i == j && j == k || i == j || i == k || j == k || k == k )); then\n        \
    \  continue\n        fi\n        if (( i == j && j == k || i == j || \n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7s947p3z.sh: line 73: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7s947p3z.sh: line 89: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $i; done))\n    local count=0\n    local\
    \ j=0\n    local k=0\n    local sum=0\n    local i\n    local j\n    local k\n\
    \    local sum\n    local i\n    local j\n    local k\n    local sum\n    local\
    \ i\n    local j\n    local k\n    local sum\n    local i\n    local j\n    local\
    \ k\n    local sum\n    local i\n    local j\n    local k\n    local sum\n   \
    \ local i\n    local j\n    local k\n    local sum\n    local i\n    local j\n\
    \    local k\n    local sum\n    local i\n    local j\n    local k\n    local\
    \ sum\n    local i\n    local j\n    local k\n    local sum\n    local i\n   \
    \ local j\n    local k\n    local sum\n    local i\n    local j\n    local k\n\
    \    local sum\n    local i\n    local j\n    local k\n    local sum\n    local\
    \ i\n    local j\n    local k\n    local sum\n    local i\n    local j\n    local\
    \ k\n    local sum\n    local i\n    local j\n    local k\n    local sum\n   \
    \ local i\n    local j\n    local k\n    local sum\n    local i\n    local j\n\
    \    local k\n    local sum\n    local i\n    local j\n    local k\n    local\
    \ sum\n    local i\n    local j\n    local k\n    local sum\n    local i\n   \
    \ local j\n    local k\n    local sum\n    local i\n    local j\n    local k\n\
    \    local sum\n    local i\n    local j\n    local k\n    local sum\n    local\
    \ i\n    local j\n    local k\n    local sum\n    local i\n    local j\n    local\
    \ k\n    local sum\n    local i\n    local j\n    local k\n    local sum\n   \
    \ local i\n    local j\n    local k\n    local sum\n    local i\n    local j\n\
    \    local k\n    local sum\n    local i\n    local j\n    local k\n    local\
    \ sum\n    local i\n    local j\n    local k\n    local sum\n    \n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n  local count=0\n \
    \ local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    j=$((i+1))\n\
    \    k=$((j+1))\n    if [ $((i*i - i + 1)) == $((j*j - j + k)) ]; then\n     \
    \ count=$((count+1))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    local count=0\n    local triples=0\n    local triple=0\n    local triple1=0\n\
    \    local triple2=0\n    local triple3=0\n    local triple4=0\n    local triple5=0\n\
    \    local triple6=0\n    local triple7=0\n    local triple8=0\n    local triple9=0\n\
    \    local triple10=0\n    local triple11=0\n    local triple12=0\n    local triple13=0\n\
    \    local triple14=0\n    local triple15=0\n    local triple16=0\n    local triple17=0\n\
    \    local triple18=0\n    local triple19=0\n    local triple20=0\n    local triple21=0\n\
    \    local triple22=0\n    local triple23=0\n    local triple24=0\n    local triple25=0\n\
    \    local triple26=0\n    local triple27=0\n    local triple28=0\n    local triple29=0\n\
    \    local triple30=0\n    local triple31=0\n    local triple32=0\n    local triple33=0\n\
    \    local triple34=0\n    local triple35=0\n    local triple36=0\n    local triple37=0\n\
    \    local triple38=0\n    local triple39=0\n    local triple40=0\n    local triple41=0\n\
    \    local triple42=0\n    local triple43=0\n    local triple44=0\n    local triple45=0\n\
    \    local triple46=0\n    local triple47=0\n    local triple48=0\n    local triple49=0\n\
    \    local triple50=0\n    local triple51=0\n    local triple52=0\n    local triple53=0\n\
    \    local triple54=0\n    local triple55=0\n    local triple56=0\n    local triple57=0\n\
    \    local triple58=0\n    local triple59=0\n    local triple60=0\n    local triple61=0\n\
    \    local triple62=0\n    local triple63=0\n    local triple64=0\n    local triple65=0\n\
    \    local triple66=0\n    local triple67=0\n    local triple68=0\n    local triple69=0\n\
    \    local triple70=0\n    local triple71=0\n    local triple72=0\n    local triple73=0\n\
    \    local triple74=0\n    local triple75=0\n    local triple76=0\n    local triple77=0\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=($(for ((i = 1; i <= n; i++)) ; do echo $((i * i - i + 1)); done | sort -n))\n\
    \  local count=0\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n \
    \     for k in \"${a[@]}\"; do\n        if (( i * i - i + 1 + j * j - k + 1 ))\
    \ > 3 && \\\n          (( i * i - i + 1 + j * j - k + 1 )) > $(( 3 * count ))\
    \ ; then\n          count=$(( 3 * count ))\n        fi\n      done\n    done\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local triples=0\n\
    \    local max=0\n    local maxtriples=0\n    local maxtriples_sum=0\n    local\
    \ maxtriples_sum2=0\n    local maxtriples_sum3=0\n    local maxtriples_sum4=0\n\
    \    local maxtriples_sum5=0\n    local maxtriples_sum6=0\n    local maxtriples_sum7=0\n\
    \    local maxtriples_sum8=0\n    local maxtriples_sum9=0\n    local maxtriples_sum10=0\n\
    \    local maxtriples_sum11=0\n    local maxtriples_sum12=0\n    local maxtriples_sum13=0\n\
    \    local maxtriples_sum14=0\n    local maxtriples_sum15=0\n    local maxtriples_sum16=0\n\
    \    local maxtriples_sum17=0\n    local maxtriples_sum18=0\n    local maxtriples_sum19=0\n\
    \    local maxtriples_sum20=0\n    local maxtriples_sum21=0\n    local maxtriples_sum22=0\n\
    \    local maxtriples_sum23=0\n    local maxtriples_sum24=0\n    local maxtriples_sum25=0\n\
    \    local maxtriples_sum26=0\n    local maxtriples_sum27=0\n    local maxtriples_sum28=0\n\
    \    local maxtriples_sum29=0\n    local maxtriples_sum30=0\n    local maxtriples_sum31=0\n\
    \    local maxtriples_sum32=0\n    local maxtriples_sum33=0\n    local maxtriples_sum34=0\n\
    \    local maxtriples_sum35=0\n    local maxtriples_sum36=0\n    local maxtriples_sum37=0\n\
    \    local maxtriples_sum38=0\n    local maxtriples_sum39=0\n    local maxtriples_sum40=0\n\
    \    local maxtriples_sum41=0\n    local maxtriples_sum42=0\n    local maxtriples_sum43=0\n\
    \    local maxtriples_sum44=0\n    local maxtriples_sum45=0\n    local maxtriples_sum46=0\n\
    \    local maxtriples_sum47=0\n    local maxtriples_sum48=0\n    local maxtriples_sum49=0\n\
    \    local maxtriples_sum50=0\n    local maxtriples_sum51=0\n    local maxtriples_sum\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  local triple\n\
    \  \n  a=($(for ((i=1; i<=$n; i++)); do echo $i; done))\n  \n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        triple=$((i*i*i))\
    \ \n        if (( triple == (a[i]+a[j]+a[k]) )) ; then\n          count=$((count+1))\n\
    \        fi\n      done\n    done\n  done\n  \n  max=$((count+1))\n  \n  echo\
    \ \"$max\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n \"$i\"\n    done))\n  local count=0\n\
    \  local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"\n  do\n    count=$((count+1))\n\
    \    j=$((j+1))\n    k=$((k+1))\n  done\n  for i in \"${a[@]}\"\n  do\n    if\
    \ [ $((i*i)+$(i*j)+$(i*k)) -eq $((i*i*i)) ]\n    then\n      count=$((count+1))\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphpecmg3x.sh: command substitution: line 30: syntax error near unexpected
    token `+$(i*j)+$(i*k)''

    /tmp/tmphpecmg3x.sh: command substitution: line 30: `(i*i)+$(i*j)+$(i*k)''

    /tmp/tmphpecmg3x.sh: line 30: [: -eq: unary operator expected

    /tmp/tmphpecmg3x.sh: command substitution: line 30: syntax error near unexpected
    token `+$(i*j)+$(i*k)''

    /tmp/tmphpecmg3x.sh: command substitution: line 30: `(i*i)+$(i*j)+$(i*k)''

    /tmp/tmphpecmg3x.sh: line 30: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i*$i-$i+1; done))\n  local count=0\n  local triples=0\n\
    \  local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    if [ $i\
    \ -le $n ]; then\n      j=$((i+1))\n      k=$((j+1))\n      if [ $j -le $n ];\
    \ then\n        if [ $k -le $n ]; then\n          triples=$((triples + $i*$j+$i*$k+$j*$k))\n\
    \        fi\n      fi\n    fi\n  done\n  echo $triples\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwzlsyfio.sh: line 21: [: 1*1-1+1: integer expression expected

    /tmp/tmpwzlsyfio.sh: line 21: [: 2*2-2+1: integer expression expected

    /tmp/tmpwzlsyfio.sh: line 21: [: 3*3-3+1: integer expression expected

    /tmp/tmpwzlsyfio.sh: line 21: [: 4*4-4+1: integer expression expected

    /tmp/tmpwzlsyfio.sh: line 21: [: 5*5-5+1: integer expression expected

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local triples=0\n    while [ $i -lt $n ]; do\n        (( count++ ))\n   \
    \     (( triples += a[i] ))\n        (( triples += a[j] ))\n        (( triples\
    \ += a[k] ))\n        (( triples += a[i] ))\n        (( triples += a[j] ))\n \
    \       (( triples += a[k] ))\n        (( triples += a[i] ))\n        (( triples\
    \ += a[j] ))\n        (( triples += a[k] ))\n        (( triples += a[i] ))\n \
    \       (( triples += a[j] ))\n        (( triples += a[k] ))\n        (( triples\
    \ += a[i] ))\n        (( triples += a[j] ))\n        (( triples += a[k] ))\n \
    \       (( triples += a[i] ))\n        (( triples += a[j] ))\n        (( triples\
    \ += a[k] ))\n        (( triples += a[i] ))\n        (( triples += a[j] ))\n \
    \       (( triples += a[k] ))\n        (( triples += a[i] ))\n        (( triples\
    \ += a[j] ))\n        (( triples += a[k] ))\n        (( triples += a[i] ))\n \
    \       (( triples += a[j] ))\n        (( triples += a[k] ))\n        (( triples\
    \ += a[i] ))\n        (( triples += a[j] ))\n        (( triples += a[k] ))\n \
    \       (( triples += a[i] ))\n        (( triples += a[j] ))\n        (( triples\
    \ += a[k] ))\n        (( triples += a[i] ))\n        (( triples += a[j] ))\n \
    \       (( triples += a[k] ))\n        (( triples += a[i] ))\n        (( triples\
    \ += a[j] ))\n        (( triples += a[k] ))\n        (( triples += a[i] ))\n \
    \       (( triples += a[j] ))\n        (( triples += a[k] ))\n        (( triples\
    \ += a[i] ))\n        (( triples += a[j] ))\n        (( triples += a[k] ))\n \
    \       (( triples += a[i] ))\n        (( triples += a[j] ))\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp13cwrs5s.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmp13cwrs5s.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=($(seq 1 $n))\n  local i\n  local j\n  local k\n  local count\n  local sum\n\
    \  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"\
    ; do\n        sum=$(( $i + $j + $k ))\n        if [ $sum -eq 0 ]; then\n     \
    \     count=$(( $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo \"$i\"; done))\n  local count=0\n  local j=0\n\
    \  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    while ((j<i)) && [ \"\
    $k\" -lt \"$i\" ]; do\n      ((k++))\n    done\n    ((j++))\n    ((count++))\n\
    \  done\n  echo \"$count\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=($(for ((i=1; i<=$n; i++));\
    \ do echo $i; done))\n  count=0\n  for ((i=0; i<$n; i++)); do\n    for ((j=0;\
    \ j<$n; j++)); do\n      for ((k=0; k<$n; k++)); do\n        if (( $i == $j &&\
    \ $j == $k )); then\n          continue\n        fi\n        if (( $a[ $i ] +\
    \ $a[ $j ] + $a[ $k ] )); then\n          count=$(( $count + 1 ))\n        fi\n\
    \      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 0 ] + 1[ 1 ] : syntax error:
    invalid arithmetic operator (error token is "[ 0 ] + 1[ 0 ] + 1[ 1 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 0 ] + 1[ 2 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 0 ] + 1[ 2 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 0 ] + 1[ 3 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 0 ] + 1[ 3 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 0 ] + 1[ 4 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 0 ] + 1[ 4 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 1 ] + 1[ 0 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 1 ] + 1[ 0 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 1 ] + 1[ 1 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 1 ] + 1[ 1 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 1 ] + 1[ 2 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 1 ] + 1[ 2 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 1 ] + 1[ 3 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 1 ] + 1[ 3 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 1 ] + 1[ 4 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 1 ] + 1[ 4 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 2 ] + 1[ 0 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 2 ] + 1[ 0 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 2 ] + 1[ 1 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 2 ] + 1[ 1 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 2 ] + 1[ 2 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 2 ] + 1[ 2 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 2 ] + 1[ 3 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 2 ] + 1[ 3 ] ")

    /tmp/tmpxhj9826a.sh: line 27: ((: 1[ 0 ] + 1[ 2 ] + 1[ 4 ] : syntax error: invalid
    arithmetic operator (error token is "[ 0 ] + 1[ 2 ] + '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max_triple\n  local max_triple_index\n\
    \  local max_triple_value\n  local max_triple_index2\n  local max_triple_value2\n\
    \  local max_triple_index3\n  local max_triple_value3\n  local max_triple_index4\n\
    \  local max_triple_value4\n  local max_triple_index5\n  local max_triple_value5\n\
    \  local max_triple_index6\n  local max_triple_value6\n  local max_triple_index7\n\
    \  local max_triple_value7\n  local max_triple_index8\n  local max_triple_value8\n\
    \  local max_triple_index9\n  local max_triple_value9\n  local max_triple_index10\n\
    \  local max_triple_value10\n  local max_triple_index11\n  local max_triple_value11\n\
    \  local max_triple_index12\n  local max_triple_value12\n  local max_triple_index13\n\
    \  local max_triple_value13\n  local max_triple_index14\n  local max_triple_value14\n\
    \  local max_triple_index15\n  local max_triple_value15\n  local max_triple_index16\n\
    \  local max_triple_value16\n  local max_triple_index17\n  local max_triple_value17\n\
    \  local max_triple_index18\n  local max_triple_value18\n  local max_triple_index19\n\
    \  local max_triple_value19\n  local max_triple_index20\n  local max_triple_value20\n\
    \  local max_triple_index21\n  local max_triple_value21\n  local max_triple_index22\n\
    \  local max_triple_value22\n  local max_triple_index23\n  local max_triple_value23\n\
    \  local max_triple_index24\n  local max_triple_value24\n  local max_triple_index25\n\
    \  local max_triple_value25\n  local max_triple_index26\n  local max_triple_value26\n\
    \  local max_triple_index27\n  local max_triple_value27\n  local max_triple_index28\n\
    \  local max_triple_value28\n  local max_triple_index29\n  local max_triple_value29\n\
    \  local max_triple_index30\n  local max_triple_value30\n  local max_triple_index31\n\
    \  local max_triple_value31\n  local max_triple_index32\n  local max_triple_value32\n\
    \  local max_triple_index33\n  local max_triple_value33\n  local max_triple_index34\n\
    \  local max_triple_value34\n  local max_triple_index35\n\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local count=0\n  local sum=0\n  local\
    \ j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    j=$((i+1))\n  \
    \  k=$((j+1))\n    sum=$((sum+$i))\n    count=$((count+1))\n  done\n  echo $count\n\
    \  echo $sum\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local count=0\n  local j=0\n  local\
    \ k=0\n  local i\n  for i in \"${a[@]}\"; do\n    j=$((i+1))\n    k=$((j+1))\n\
    \    if [ $((i*i)+(i*j)+(i*k)) -eq $((i*(i+j+k))) ]; then\n      count=$((count+1))\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv936_uvw.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpv936_uvw.sh: command substitution: line 22: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpv936_uvw.sh: line 22: [: -eq: unary operator expected

    /tmp/tmpv936_uvw.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpv936_uvw.sh: command substitution: line 22: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpv936_uvw.sh: line 22: [: -eq: unary operator expected

    /tmp/tmpv936_uvw.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpv936_uvw.sh: command substitution: line 22: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpv936_uvw.sh: line 22: [: -eq: unary operator expected

    /tmp/tmpv936_uvw.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpv936_uvw.sh: command substitution: line 22: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpv936_uvw.sh: line 22: [: -eq: unary operator expected

    /tmp/tmpv936_uvw.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpv936_uvw.sh: command substitution: line 22: `(i*i)+(i*j)+(i*k)''

    /tmp/tmpv936_uvw.sh: line 22: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local count=0\n  local triples=0\n\
    \  local triple\n  local i\n  local j\n  local k\n  local sum\n  local j\n  local\
    \ k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local\
    \ sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n\
    \  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local\
    \ j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local\
    \ k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local\
    \ sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n\
    \  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local\
    \ j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local\
    \ k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local\
    \ sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n\
    \  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local\
    \ j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local\
    \ k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local\
    \ sum\n  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n\
    \  local j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local\
    \ j\n  local k\n  local sum\n  local j\n  local k\n  local sum\n  local j\n  local\
    \ k\n  local sum\n  local j\n  local k\n  local \n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n \"a[\"$i\"]=\"\n      echo $((i*i-1))\n\
    \      echo \"+1\"\n    done))\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ count=0\n  local sum=0\n  local triples=0\n  local triple\n  while [ $i -lt\
    \ $n ]; do\n    triple=$((a[$i]+a[j]+a[k]))\n    sum=$((sum+triple))\n    if [\
    \ $triple -eq 3 ]; then\n      triples=$((triples+1))\n    fi\n    i=$((i+1))\n\
    \    j=$((j+1))\n    k=$((k+1))\n  done\n  echo \"$triples\"\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n    local\
    \ count=0\n    local i\n    local j\n    local k\n    local triple\n    for ((i=1;\
    \ i<=$n; i++)); do\n        for ((j=1; j<=$n; j++)); do\n            for ((k=1;\
    \ k<=$n; k++)); do\n                triple=$((${a[i]} + ${a[j]} + ${a[k]}))\n\
    \                if (( triple % 3 == 0 )); then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg1dwwrtj.sh: line 23: 3 + 3 + : syntax error: operand expected
    (error token is "+ ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=($(for ((i=1; i<=$n; i++));\
    \ do echo -n $i*$i-$i-$i; done))\n  count=0\n  for i in ${a[@]}; do\n    for j\
    \ in ${a[@]}; do\n      for k in ${a[@]}; do\n        if [ $i -le $j -a $j -le\
    \ $k -a $i -le $k ]; then\n          count=$((count+1))\n        fi\n      done\n\
    \    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoonsjl5k.sh: line 24: [: 1*1-1-12*2-2-23*3-3-34*4-4-45*5-5-5: integer
    expression expected

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local sum\n    local triple\n    local triple2\n    local triple3\n    local\
    \ triple4\n    local triple5\n    local triple6\n    local triple7\n    local\
    \ triple8\n    local triple9\n    local triple10\n    local triple11\n    local\
    \ triple12\n    local triple13\n    local triple14\n    local triple15\n    local\
    \ triple16\n    local triple17\n    local triple18\n    local triple19\n    local\
    \ triple20\n    local triple21\n    local triple22\n    local triple23\n    local\
    \ triple24\n    local triple25\n    local triple26\n    local triple27\n    local\
    \ triple28\n    local triple29\n    local triple30\n    local triple31\n    local\
    \ triple32\n    local triple33\n    local triple34\n    local triple35\n    local\
    \ triple36\n    local triple37\n    local triple38\n    local triple39\n    local\
    \ triple40\n    local triple41\n    local triple42\n    local triple43\n    local\
    \ triple44\n    local triple45\n    local triple46\n    local triple47\n    local\
    \ triple48\n    local triple49\n    local triple50\n    local triple51\n    local\
    \ triple52\n    local triple53\n    local triple54\n    local triple55\n    local\
    \ triple56\n    local triple57\n    local triple58\n    local triple59\n    local\
    \ triple60\n    local triple61\n    local triple62\n    local triple63\n    local\
    \ triple64\n    local triple65\n    local triple66\n    local triple67\n    local\
    \ triple68\n    local triple69\n    local triple70\n    local triple71\n    local\
    \ triple72\n    local triple73\n    local triple74\n    local triple75\n    local\
    \ triple76\n    local triple77\n    local triple78\n    local triple79\n    local\
    \ triple80\n    local triple81\n    local triple82\n    local triple83\n    local\
    \ triple84\n    local triple85\n    local triple86\n    local triple87\n    local\
    \ triple88\n    local triple89\n    local triple90\n    local triple91\n    local\
    \ triple92\n    local triple93\n    local triple94\n    local triple95\n    local\
    \ triple96\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    while [ $i -lt $n ]; do\n        sum=$((sum + $a[i]))\n        i=$((i+1))\n\
    \    done\n    while [ $j -lt $n ]; do\n        sum=$((sum + $a[j]))\n       \
    \ j=$((j+1))\n    done\n    while [ $k -lt $n ]; do\n        sum=$((sum + $a[k]))\n\
    \        k=$((k+1))\n    done\n    sum=$((sum % 3))\n    return $sum\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfe987j2.sh: line 20: sum + 1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local sum\n    local triple\n    local triple2\n    local triple3\n    local\
    \ triple4\n    local triple5\n    local triple6\n    local triple7\n    local\
    \ triple8\n    local triple9\n    local triple10\n    local triple11\n    local\
    \ triple12\n    local triple13\n    local triple14\n    local triple15\n    local\
    \ triple16\n    local triple17\n    local triple18\n    local triple19\n    local\
    \ triple20\n    local triple21\n    local triple22\n    local triple23\n    local\
    \ triple24\n    local triple25\n    local triple26\n    local triple27\n    local\
    \ triple28\n    local triple29\n    local triple30\n    local triple31\n    local\
    \ triple32\n    local triple33\n    local triple34\n    local triple35\n    local\
    \ triple36\n    local triple37\n    local triple38\n    local triple39\n    local\
    \ triple40\n    local triple41\n    local triple42\n    local triple43\n    local\
    \ triple44\n    local triple45\n    local triple46\n    local triple47\n    local\
    \ triple48\n    local triple49\n    local triple50\n    local triple51\n    local\
    \ triple52\n    local triple53\n    local triple54\n    local triple55\n    local\
    \ triple56\n    local triple57\n    local triple58\n    local triple59\n    local\
    \ triple60\n    local triple61\n    local triple62\n    local triple63\n    local\
    \ triple64\n    local triple65\n    local triple66\n    local triple67\n    local\
    \ triple68\n    local triple69\n    local triple70\n    local triple71\n    local\
    \ triple72\n    local triple73\n    local triple74\n    local triple75\n    local\
    \ triple76\n    local triple77\n    local triple78\n    local triple79\n    local\
    \ triple80\n    local triple81\n    local triple82\n    local triple83\n    local\
    \ triple84\n    local triple85\n    local triple86\n    local triple87\n    local\
    \ triple88\n    local triple89\n    local triple90\n    local triple91\n    local\
    \ triple92\n    local triple93\n    local triple94\n    local triple95\n    local\
    \ triple96\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local triple\n  \n  a=$( seq\
    \ 1 $n )\n  for i in $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for\
    \ k in $(seq 1 $n); do\n        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n\
    \          triple=$( echo $a[i] $a[j] $a[k] )\n          count=$(( $triple % 3\
    \ ))\n          if [ \"$count\" -eq 0 ]; then\n            echo $triple $i $j\
    \ $k\n          fi\n        fi\n      done\n    done\n  done\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4xmxh5ri.sh: line 27: 1 2 3 4 5[i] 1 2 3 4 5[j] 1 2 3 4 5[k] %
    3 : syntax error in expression (error token is "2 3 4 5[i] 1 2 3 4 5[j] 1 2 3
    4 5[k] % 3 ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  local i\n  local j\n\
    \  local k\n  local count\n  for i in \"${!a[@]}\"; do\n    for j in \"${!a[@]}\"\
    ; do\n      for k in \"${!a[@]}\"; do\n        if (( i < j && j < k && k < i ));\
    \ then\n          count=$(( count + 1 ))\n        fi\n      done\n    done\n \
    \ done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local triple\n    \n    a=()\n    \n    for i in $(seq 1 $n); do\n       \
    \ a[i]=$((i * i - i + 1))\n    done\n    \n    max=$(echo $((${#a[@]} - 1)) |\
    \ bc)\n    \n    for i in $(seq 1 $max); do\n        count=$(echo $((${#a[@]}\
    \ - 1)) | bc)\n        \n        for j in $(seq 1 $count); do\n            k=$(echo\
    \ $((${#a[@]} - 1)) | bc)\n            \n            if [ $i -le $j ] && [ $j\
    \ -le $k ]; then\n                triple=$((${a[i]} + ${a[j]} + ${a[k]}))\n  \
    \              \n                if [ $triple -eq 3 ]; then\n                \
    \    echo \"$i $j $k\"\n                fi\n            fi\n        done\n   \
    \ done\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  a=$( seq 1 $n )\n  local i\n  for i in $(seq 1 $n); do\n    local j\n    for\
    \ j in $(seq 1 $n); do\n      local k\n      for k in $(seq 1 $n); do\n      \
    \  local sum\n        sum=$( expr $a[i] + $a[j] + $a[k] )\n        if [ $sum -eq\
    \ 3 ]; then\n          echo $i $j $k\n          break\n        fi\n      done\n\
    \    done\n  done\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh:\
    \ line 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line 24: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpoxfma4ax.sh: line\
    \ 24: [: -eq: unary operator expected\nexpr: syntax error: unexpected arg"
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  local count=0\n\
    \  local triples=0\n  while [ $i -lt $n ]; do\n    sum=$((sum + $a[i]))\n    i=$((i\
    \ + 1))\n  done\n  while [ $j -lt $n ]; do\n    sum=$((sum + $a[j]))\n    j=$((j\
    \ + 1))\n  done\n  while [ $k -lt $n ]; do\n    sum=$((sum + $a[k]))\n    k=$((k\
    \ + 1))\n  done\n  while [ $i -le $n ]; do\n    sum=$((sum + $a[i]))\n    i=$((i\
    \ + 1))\n  done\n  while [ $j -le $n ]; do\n    sum=$((sum + $a[j]))\n    j=$((j\
    \ + 1))\n  done\n  while [ $k -le $n ]; do\n    sum=$((sum + $a[k]))\n    k=$((k\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[i]))\n    i=$((i\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[j]))\n    j=$((j\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[k]))\n    k=$((k\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[i]))\n    i=$((i\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[j]))\n    j=$((j\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[k]))\n    k=$((k\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[i]))\n    i=$((i\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + $a[j]))\n    j=$((j\
    \ + 1))\n  done\n  while [ $sum -le 0 ]; do\n    sum=$((sum + \n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi0aal2v3.sh: line 78: unexpected EOF while looking for matching
    `)''

    /tmp/tmpi0aal2v3.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  while [ $i -lt\
    \ $n ]; do\n    sum=$((sum + $a[i]))\n    i=$((i+1))\n  done\n  while [ $j -lt\
    \ $n ]; do\n    sum=$((sum + $a[j]))\n    j=$((j+1))\n  done\n  while [ $k -lt\
    \ $n ]; do\n    sum=$((sum + $a[k]))\n    k=$((k+1))\n  done\n  sum=$((sum % 3))\n\
    \  echo $sum\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy5fdl9wh.sh: line 20: sum + 1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1)); done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( $i > $j && $j > $k )); then\n\
    \          let count=$count+1\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1auyymnv.sh: line 14: syntax error near unexpected token `;''

    /tmp/tmp1auyymnv.sh: line 14: `  local a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1));
    done))''

    /tmp/tmp1auyymnv.sh: line 15: local: can only be used in a function

    /tmp/tmp1auyymnv.sh: line 16: local: can only be used in a function

    /tmp/tmp1auyymnv.sh: line 17: local: can only be used in a function

    /tmp/tmp1auyymnv.sh: line 18: local: can only be used in a function

    /tmp/tmp1auyymnv.sh: line 29: syntax error near unexpected token `}''

    /tmp/tmp1auyymnv.sh: line 29: `}''

    '
  stdout: '

    '
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++))\n    do\n        echo $((i*i-1))\n    done))\n\
    \    local count=0\n    local triples=0\n    local triple\n    for ((i=1; i<=$n;\
    \ i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            for\
    \ ((k=1; k<=$n; k++))\n            do\n                triple=`echo $((${a[i]}+${a[j]}+${a[k]}))`\n\
    \                if ((triple%3==0)); then\n                    let count=$count+1\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp420zrwh6.sh: line 27: 3+3+: syntax error: operand expected (error
    token is "+")

    /tmp/tmp420zrwh6.sh: line 27: 3+8+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 3+15+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 3+24+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 3++: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 8+3+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 8+8+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 8+15+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 8+24+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 8++: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 15+3+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 15+8+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 15+15+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 15+24+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 15++: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 24+3+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 24+8+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 24+15+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 24+24+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: 24++: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: +3+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: +8+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420zrwh6.sh: line 27: +15+: syntax error: operand expected (error token
    is "+")

    /tmp/tmp420z'
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)) ; do echo $((i*i - i + 1)); done))\n  local count=0\n  local\
    \ triples=0\n  local j=0\n  local k=0\n  local i\n  local j\n  local k\n  local\
    \ triple\n  for i in \"${a[@]}\"; do\n    j=0\n    k=0\n    while [ $j -le $n\
    \ ]; do\n      triple=$((i*i - i + 1))\n      if [ $triple -eq $((i*i - i + 1))\
    \ ]; then\n        triples=$((triples + 1))\n      fi\n      j=$((j + 1))\n  \
    \  done\n    k=0\n    while [ $k -le $n ]; do\n      triple=$((i*i - i + 1))\n\
    \      if [ $triple -eq $((i*i - i + 1)) ]; then\n        triples=$((triples +\
    \ 1))\n      fi\n      k=$((k + 1))\n    done\n  done\n  echo $triples\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local triple\n\
    \    local count1\n    local count2\n    local count3\n    local count4\n    local\
    \ count5\n    local count6\n    local count7\n    local count8\n    local count9\n\
    \    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n    local count92\n    local count93\n\
    \    local count94\n    local count95\n    local count96\n    local \n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $i*$i-$i+1; done))\n    local count=0\n\
    \    local i\n    local j\n    local k\n    local sum\n    local triple\n    \n\
    \    for ((i=1; i<=$n; i++)); do\n        for ((j=1; j<=$n; j++)); do\n      \
    \      for ((k=1; k<=$n; k++)); do\n                sum=$((i*i+j*j+k*k))\n   \
    \             if ((sum % 3) == 0) ; then\n                    triple=$((i*i+j*j+k*k))\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    \n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1l_0u8xa.sh: line 26: syntax error near unexpected token `==''

    /tmp/tmp1l_0u8xa.sh: line 26: `                if ((sum % 3) == 0) ; then''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local count=0\n\
    \    local j=0\n    local k=0\n    local i\n    for ((i=1; i<=$n; i++)); do\n\
    \        if (( ${a[j]} > ${a[k]} )) ; then\n            (( count++ ))\n      \
    \      j=$(( j + 1 ))\n            k=$(( k + 1 ))\n        fi\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n \"a[\"$i\"]=\"\n      echo $((i*i-1))\n\
    \    done))\n  local count=0\n  local triple=0\n  local triples=0\n  local triples_sum=0\n\
    \  local triples_sums=0\n  local triples_sums_sum=0\n  local triples_sums_sums=0\n\
    \  local triples_sums_sums_sum=0\n  local triples_sums_sums_sums=0\n  local triples_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums=0\n  local triples_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums=0\n  local triples_sums_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums=0\n  local triples_sums_sums_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums_sums=0\n  local triples_sums_sums_sums_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums_sums_sums=0\n  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sums=0\n  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums=0\n  local\
    \ triples_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum=0\n  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum=0\n\
    \  local triples_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums=0\n\
    \  local triples_sums_\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    local count=0\n    local triples=0\n    local max_triples=0\n    local max_triples_sum=0\n\
    \    local max_triples_count=0 \n    while [ $i -lt $n ]; do\n        sum=$((\
    \ $sum + $a[i] ))\n        i=$(( $i + 1 ))\n    done\n    while [ $j -lt $n ];\
    \ do\n        sum=$(( $sum + $a[j] ))\n        j=$(( $j + 1 ))\n    done\n   \
    \ while [ $k -lt $n ]; do\n        sum=$(( $sum + $a[k] ))\n        k=$(( $k +\
    \ 1 ))\n    done\n    sum=$(( $sum + 1 ))\n    count=$(( $count + 1 ))\n    triples=$((\
    \ $triples + 1 ))\n    if [ $sum -eq $(( $sum * 3 )) ]; then\n        triples=$((\
    \ $triples + 1 ))\n        max_triples=$(( $max_triples + 1 ))\n        max_triples_sum=$((\
    \ $max_triples_sum + $sum ))\n        max_triples_count=$(( $max_triples_count\
    \ + $count ))\n    fi\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkoaa9foc.sh: line 25: 0 + 1[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i\n  local j\n  local k\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( i == j && i == k )); then\n          continue\n        fi\n        if ((\
    \ i == j && j == k )); then\n          continue\n        fi\n        if (( i ==\
    \ j && k == i )); then\n          continue\n        fi\n        if (( j == k &&\
    \ i == k )); then\n          continue\n        fi\n        if (( j == k && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == k && j == k ));\
    \ then\n          continue\n        fi\n        if (( i == k && i == k )); then\n\
    \          continue\n        fi\n        if (( j == k && i == k )); then\n   \
    \       continue\n        fi\n        if (( j == k && j == k )); then\n      \
    \    continue\n        fi\n        if (( i == j && j == k )); then\n         \
    \ continue\n        fi\n        if (( i == j && i == k )); then\n          continue\n\
    \        fi\n        if (( j == i && i == k )); then\n          continue\n   \
    \     fi\n        if (( j == i && j == k )); then\n          continue\n      \
    \  fi\n        if (( i == k && i == k )); then\n          continue\n        fi\n\
    \        if (( i == k && j == k )); then\n          continue\n        fi\n   \
    \     if (( j == k && i == k )); then\n          continue\n        fi\n      \
    \  if (( j == k && j == k )); then\n          continue\n        fi\n        if\
    \ (( i == j && j == k )); then\n          continue\n        fi\n        if ((\
    \ i == j && i == k )); then\n          continue\n        fi\n        if (( j ==\
    \ i && i == k )); then\n          continue\n        fi\n        if (( j == i &&\
    \ j == k )); then\n          continue\n        fi\n        if (( i == k && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == k && j == k ));\
    \ then\n          continue\n        fi\n        if (( j == k && i == k )); then\n\
    \          continue\n        fi\n        if (( j == k \n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1t1z63jv.sh: line 94: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1t1z63jv.sh: line 110: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  local i\n  local j\n\
    \  local k\n  local triples=0\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( i == j && i == k )); then\n\
    \          triples=$((triples + 1))\n        fi\n      done\n    done\n  done\n\
    \  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $a; do\n    for j in $a; do\n      for k in $a; do\n        if [ $i -le $j -a\
    \ $j -le $k -a $k -le $i ]; then\n          count=$(( $count + 1 ))\n        fi\n\
    \      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local i\n  local j\n  local k\n \
    \ local count=0\n  for ((i=1; i<=$n; i++)); do\n    for ((j=$i; j<=$n; j++));\
    \ do\n      for ((k=$j; k<=$n; k++)); do\n        if (( ${a[i]} + ${a[j]} + ${a[k]}\
    \ % 3 == 0 )); then\n          count=$((count+1))\n        fi\n      done\n  \
    \  done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb4mgjije.sh: line 22: ((: 2 + 2 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 2 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 2 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 2 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 2 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 3 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 3 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 3 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 3 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 4 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 4 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 4 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 5 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: 5 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpb4mgjije.sh: line 22: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i\n  local j\n  local k\n  local count\n  local triple\n  for\
    \ i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"\
    ; do\n        if (( $i < $j && $j < $k && $i < $k )); then\n          triple=$((\
    \ $i * $i - $i + $j * $j - $j + $k * $k - $k + $i * $k - $i * $k + $j * $k + $i\
    \ * $j + $j * $i + $k * $j + $k * $i + $i * $j + $i * $k + $j * $j + $k * $k +\
    \ $i * $k + $j * $k + $i * $j + $j * $k + $k * $j + $k * $i + $i * $k + $j * $j\
    \ + $k * $k + $i * $j + $j * $k + $k * $j + $k * $k + $i * $k + $j * $j + $k *\
    \ $k + $i * $j + $j * $k + $k * $j + $k * $k + $i * $j + $j * $k + $k * $k + $i\
    \ * $j + $j * $k + $k * $j + $k * $k + $i * $j + $j * $k + $k * $k + $i * $j +\
    \ $j * $k + $k * $j + $k * $k + $i * $j + $j * $k + $k * $j + $k * $k + $i * $j\
    \ + $j * $k + $k * $j + $k * $k + $i * $j + $j * $k + $k * $j + $k * $k + $i *\
    \ $j + $j * $k + $k * $j + $k * $k + $i * $j + $j * $k + $k * $j + $k * $k + $i\
    \ * $j + $j * $k + $k * $j + $k * $k + $i * $j + $j * $k + $k * $j + $k * $k +\
    \ $i * $j + $\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp20d4e95d.sh: line 24: unexpected EOF while looking for matching
    `)''

    /tmp/tmp20d4e95d.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n\
    \    local count=0\n    local triples=0\n    local i\n    local j\n    local k\n\
    \    local triple\n    local sum\n    local count1\n    local count2\n    local\
    \ count3\n    local count4\n    local count5\n    local count6\n    local count7\n\
    \    local count8\n    local count9\n    local count10\n    local count11\n  \
    \  local count12\n    local count13\n    local count14\n    local count15\n  \
    \  local count16\n    local count17\n    local count18\n    local count19\n  \
    \  local count20\n    local count21\n    local count22\n    local count23\n  \
    \  local count24\n    local count25\n    local count26\n    local count27\n  \
    \  local count28\n    local count29\n    local count30\n    local count31\n  \
    \  local count32\n    local count33\n    local count34\n    local count35\n  \
    \  local count36\n    local count37\n    local count38\n    local count39\n  \
    \  local count40\n    local count41\n    local count42\n    local count43\n  \
    \  local count44\n    local count45\n    local count46\n    local count47\n  \
    \  local count48\n    local count49\n    local count50\n    local count51\n  \
    \  local count52\n    local count53\n    local count54\n    local count55\n  \
    \  local count56\n    local count57\n    local count58\n    local count59\n  \
    \  local count60\n    local count61\n    local count62\n    local count63\n  \
    \  local count64\n    local count65\n    local count66\n    local count67\n  \
    \  local count68\n    local count69\n    local count70\n    local count71\n  \
    \  local count72\n    local count73\n    local count74\n    local count75\n  \
    \  local count76\n    local count77\n    local count78\n    local count79\n  \
    \  local count80\n    local count81\n    local count82\n    local count83\n  \
    \  local count84\n    local count85\n    local count86\n    local count87\n  \
    \  local count88\n    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i\n  for i in \"${a[@]}\"; do\n    for j in\
    \ \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i == j && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && j ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k )); then\n          continue\n        fi\n        if (( i == j && i ==\
    \ k )); then\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp810huem5.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmp810huem5.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=($(for ((i=1; i<=$n; i++));\
    \ do echo $((i * i - i + 1)); done))\n  count=0\n  for ((i=1; i<=$n; i++)); do\n\
    \    for ((j=1; j<=$n; j++)); do\n      for ((k=1; k<=$n; k++)); do\n        if\
    \ (( ${a[i]} + ${a[j]} + ${a[k]} % 3 == 0 )); then\n          count=$((count+1))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp83sarezm.sh: line 24: ((: 3 + 3 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 3 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 3 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 3 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 3 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 7 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 7 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 7 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 7 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 7 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 13 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 13 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 13 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 13 + 21 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 13 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 21 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 21 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp83sarezm.sh: line 24: ((: 21 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++))\n    do\n        echo $((i*i-1))\n    done))\n\
    \    local j=0\n    local k=0\n    local sum=0\n    local count=0\n    local triples=0\n\
    \    local triple\n    local i\n    local j\n    local k\n    local sum\n    local\
    \ count\n    local triple\n    local i\n    local j\n    local k\n    local sum\n\
    \    local count\n    local triple\n    local i\n    local j\n    local k\n  \
    \  local sum\n    local count\n    local triple\n    local i\n    local j\n  \
    \  local k\n    local sum\n    local count\n    local triple\n    local i\n  \
    \  local j\n    local k\n    local sum\n    local count\n    local triple\n  \
    \  local i\n    local j\n    local k\n    local sum\n    local count\n    local\
    \ triple\n    local i\n    local j\n    local k\n    local sum\n    local count\n\
    \    local triple\n    local i\n    local j\n    local k\n    local sum\n    local\
    \ count\n    local triple\n    local i\n    local j\n    local k\n    local sum\n\
    \    local count\n    local triple\n    local i\n    local j\n    local k\n  \
    \  local sum\n    local count\n    local triple\n    local i\n    local j\n  \
    \  local k\n    local sum\n    local count\n    local triple\n    local i\n  \
    \  local j\n    local k\n    local sum\n    local count\n    local triple\n  \
    \  local i\n    local j\n    local k\n    local sum\n    local count\n    local\
    \ triple\n    local i\n    local j\n    local k\n    local sum\n    local count\n\
    \    local triple\n    local i\n    local j\n    local k\n    local sum\n    local\
    \ count\n    local triple\n    local i\n    local j\n    local k\n    local sum\n\
    \    local count\n    local triple\n    local i\n    local j\n    local k\n  \
    \  local sum\n    local count\n    local triple\n    local i\n    local j\n  \
    \  local k\n    local sum\n    local count\n    local triple\n    local i\n  \
    \  local j\n    local k\n    local sum\n\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local count=0\n\
    \  local i\n  for i in \"${a[@]}\"; do\n    local j\n    for j in \"${a[@]}\"\
    ; do\n      local k\n      for k in \"${a[@]}\"; do\n        if (( $i == $j &&\
    \ $j == $k )); then\n          count=$((count+1))\n        fi\n      done\n  \
    \  done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1)); done))\n  local count=0\n  local\
    \ i\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in\
    \ \"${a[@]}\"; do\n        if (( $i == $j && $j == $k )); then\n          count=$((count+1))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwpsoueah.sh: line 14: syntax error near unexpected token `;''

    /tmp/tmpwpsoueah.sh: line 14: `  local a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1));
    done))''

    /tmp/tmpwpsoueah.sh: line 15: local: can only be used in a function

    /tmp/tmpwpsoueah.sh: line 16: local: can only be used in a function

    /tmp/tmpwpsoueah.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmpwpsoueah.sh: line 27: `}''

    '
  stdout: '

    '
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i*$i-$i+1; done))\n  local count=0\n  local i\n\
    \  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n\
    \      for k in \"${a[@]}\"; do\n        if (( $i < $j && $j < $k && $i + $j +\
    \ $k == $i*$i*$i )); then\n          count=$(( $count + 1 ))\n        fi\n   \
    \   done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( i == j && i == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && k == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || k == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k && k ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j && j == k ||\
    \ i == k && k == k || j == k && i == k )); then\n          continue\n        fi\n\
    \        if (( i == j && j == k || i == k && k == k || j == k && i == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k || i == k && k\
    \ == k || j == k && i == k )); then\n          continue\n        fi\n        if\
    \ (( i == j && j == k || i == k && k == k || j == k && i == k )); then\n     \
    \     continue\n        fi\n        if (( i == j && j == k || i == k && k == k\
    \ || j == k && i == k )); then\n          continue\n        fi\n        if ((\
    \ i == j && j == k || i == k && k == k || j == k && i == k )); then\n        \
    \  continue\n        fi\n        if (( i == j && j == k || i == k && k == k ||\
    \ j == k && i == k )); then\n          continue\n        fi\n        if (( i ==\
    \ j && j == k || i == k && k == k || j == k && i == k )); then\n          continue\n\
    \        fi\n        if (( i == j && j == k || i == k && k == k || j == k && i\
    \ == k )); \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvtidle9x.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpvtidle9x.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)) ; do echo $((i*i-1)+i+1) ; done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( $i < $j && $j < $k && $i <\
    \ $k )); then\n          count=$((count+1))\n        fi\n      done\n    done\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjhe2wysn.sh: command substitution: line 14: syntax error near unexpected
    token `+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: `(i*i-1)+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: syntax error near unexpected
    token `+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: `(i*i-1)+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: syntax error near unexpected
    token `+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: `(i*i-1)+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: syntax error near unexpected
    token `+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: `(i*i-1)+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: syntax error near unexpected
    token `+i+1''

    /tmp/tmpjhe2wysn.sh: command substitution: line 14: `(i*i-1)+i+1''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=($(for ((i=1; i<=$n; i++));\
    \ do echo $i; done))\n  count=0\n  for ((i=1; i<=$n; i++)); do\n    for ((j=1;\
    \ j<=$n; j++)); do\n      for ((k=1; k<=$n; k++)); do\n        if (( ${a[i]} +\
    \ ${a[j]} + ${a[k]} % 3 == 0 )); then\n          count=$((count+1))\n        fi\n\
    \      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgecwuu3v.sh: line 24: ((: 2 + 2 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 2 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 2 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 2 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 2 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 3 + 2 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 3 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 3 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 3 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 3 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 4 + 2 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 4 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 4 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 4 + 5 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 4 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 5 + 2 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 5 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpgecwuu3v.sh: line 24: ((: 5 + 4 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")'
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  local triples=0\n\
    \  while [ $i -lt $n ]; do\n    sum=$(( $sum + $a[ $i ] ))\n    i=$(( $i + 1 ))\n\
    \  done\n  while [ $j -lt $n ]; do\n    sum=$(( $sum + $a[ $j ] ))\n    j=$((\
    \ $j + 1 ))\n  done\n  while [ $k -lt $n ]; do\n    sum=$(( $sum + $a[ $k ] ))\n\
    \    k=$(( $k + 1 ))\n  done\n  while [ $i -le $n ]; do\n    sum=$(( $sum + $a[\
    \ $i ] ))\n    i=$(( $i + 1 ))\n  done\n  while [ $j -le $n ]; do\n    sum=$((\
    \ $sum + $a[ $j ] ))\n    j=$(( $j + 1 ))\n  done\n  while [ $k -le $n ]; do\n\
    \    sum=$(( $sum + $a[ $k ] ))\n    k=$(( $k + 1 ))\n  done\n  while [ $sum -gt\
    \ 0 ]; do\n    triples=$(( $triples + 1 ))\n    sum=$(( $sum - 3 ))\n  done\n\
    \  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51ih9yh7.sh: line 21: 0 + 1[ 0 ] : syntax error: invalid arithmetic
    operator (error token is "[ 0 ] ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local count=0\n  while [ $i\
    \ -lt $n ]; do\n    count=$((count+1))\n    i=$((i+1))\n    j=$((j+1))\n    k=$((k+1))\n\
    \  done\n  while [ $j -lt $n ]; do\n    count=$((count+1))\n    j=$((j+1))\n \
    \ done\n  while [ $k -lt $n ]; do\n    count=$((count+1))\n    k=$((k+1))\n  done\n\
    \  while [ $count -gt 0 ]; do\n    count=$((count-1))\n    i=$((i+1))\n    j=$((j+1))\n\
    \    k=$((k+1))\n  done\n  echo $((count+1))\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n  local count=0\n \
    \ local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    count=$((count+1))\n\
    \    j=$((j+1))\n    k=$((k+1))\n    if [ $((j-k)) = 0 ]; then\n      break\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i\n  local j\n  local k\n  local count\n  local max_triple\n\
    \  local max_triple_index\n  local max_triple_index2\n  local max_triple_index3\n\
    \  local max_triple_index4\n  local max_triple_index5\n  local max_triple_index6\n\
    \  local max_triple_index7\n  local max_triple_index8\n  local max_triple_index9\n\
    \  local max_triple_index10\n  local max_triple_index11\n  local max_triple_index12\n\
    \  local max_triple_index13\n  local max_triple_index14\n  local max_triple_index15\n\
    \  local max_triple_index16\n  local max_triple_index17\n  local max_triple_index18\n\
    \  local max_triple_index19\n  local max_triple_index20\n  local max_triple_index21\n\
    \  local max_triple_index22\n  local max_triple_index23\n  local max_triple_index24\n\
    \  local max_triple_index25\n  local max_triple_index26\n  local max_triple_index27\n\
    \  local max_triple_index28\n  local max_triple_index29\n  local max_triple_index30\n\
    \  local max_triple_index31\n  local max_triple_index32\n  local max_triple_index33\n\
    \  local max_triple_index34\n  local max_triple_index35\n  local max_triple_index36\n\
    \  local max_triple_index37\n  local max_triple_index38\n  local max_triple_index39\n\
    \  local max_triple_index40\n  local max_triple_index41\n  local max_triple_index42\n\
    \  local max_triple_index43\n  local max_triple_index44\n  local max_triple_index45\n\
    \  local max_triple_index46\n  local max_triple_index47\n  local max_triple_index48\n\
    \  local max_triple_index49\n  local max_triple_index50\n  local max_triple_index51\n\
    \  local max_triple_index52\n  local max_triple_index53\n  local max_triple_index54\n\
    \  local max_triple_index55\n  local max_triple_index56\n  local max_triple_index57\n\
    \  local max_triple_index58\n  local max_triple_index59\n  local max_triple_index60\n\
    \  local max_triple_index61\n  local max_triple_index62\n  local max_triple_index63\n\
    \  local max_triple_index64\n  local max_triple_index65\n  local max_triple_index66\n\
    \  local max_triple_index67\n  local max_triple_index68\n\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( i == j && i == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && k == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || k == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k && k ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k || k == k )); then\n          continue\n        fi\n        if (( i ==\
    \ j && j == k && k == k )); then\n          continue\n        fi\n        if ((\
    \ i == j && j == k && i == k )); then\n          continue\n        fi\n      \
    \  if (( i == j || i == k || j == k || k == k )); then\n          continue\n \
    \       fi\n        if (( i == j && j == k && i == k )); then\n          continue\n\
    \        fi\n        if (( i == j && j == k && i == k )); then\n          continue\n\
    \        fi\n        if (( i == j && j == k && i == k )); then\n          continue\n\
    \        fi\n        if (( i == j || i == k || j == k || k == k )); then\n   \
    \       continue\n        fi\n        if (( i == j && j == k && i == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k && i == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k && i ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k || k == k )); then\n          continue\n        fi\n        if (( i ==\
    \ j && j == \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp60r9l1mm.sh: line 79: unexpected EOF while looking for matching
    `)''

    /tmp/tmp60r9l1mm.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=($(for ((i=1; i<=$n; i++));\
    \ do echo -n \"$i\"; done))\n  count=0\n  for i in \"${a[@]}\"; do\n    for j\
    \ in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i + j + k\
    \ )); then\n          (( count++ ))\n        fi\n      done\n    done\n  done\n\
    \  echo \"$count\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n\
    \    local count=0\n    local i\n    local j\n    local k\n    local triple\n\
    \    for ((i=1; i<=$n; i++)); do\n        for ((j=1; j<=$n; j++)); do\n      \
    \      for ((k=1; k<=$n; k++)); do\n                triple=$((i*i-1))+$((i+1))+$((i+2))\n\
    \                if ((triple == $(a[$i]) $(a[$j]) $(a[$k])) && $(a[$i]) + $(a[$j])\
    \ + $(a[$k]) == $((i*i*i)) ; then\n                    count=$((count+1))\n  \
    \              fi\n            done\n        done\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0scskv2a.sh: line 24: syntax error near unexpected token `then''

    /tmp/tmp0scskv2a.sh: line 24: `                if ((triple == $(a[$i]) $(a[$j])
    $(a[$k])) && $(a[$i]) + $(a[$j]) + $(a[$k]) == $((i*i*i)) ; then''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i\n  local j\n  local k\n  local triples=0\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( i == j && i == k )); then\n          triples=$((triples + 1))\n        fi\n\
    \      done\n    done\n  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local count=0\n    local i\n    local j\n    local k\n\
    \    local triple\n    local triple1\n    local triple2\n    local triple3\n \
    \   local triple4\n    local triple5\n    local triple6\n    local triple7\n \
    \   local triple8\n    local triple9\n    local triple10\n    local triple11\n\
    \    local triple12\n    local triple13\n    local triple14\n    local triple15\n\
    \    local triple16\n    local triple17\n    local triple18\n    local triple19\n\
    \    local triple20\n    local triple21\n    local triple22\n    local triple23\n\
    \    local triple24\n    local triple25\n    local triple26\n    local triple27\n\
    \    local triple28\n    local triple29\n    local triple30\n    local triple31\n\
    \    local triple32\n    local triple33\n    local triple34\n    local triple35\n\
    \    local triple36\n    local triple37\n    local triple38\n    local triple39\n\
    \    local triple40\n    local triple41\n    local triple42\n    local triple43\n\
    \    local triple44\n    local triple45\n    local triple46\n    local triple47\n\
    \    local triple48\n    local triple49\n    local triple50\n    local triple51\n\
    \    local triple52\n    local triple53\n    local triple54\n    local triple55\n\
    \    local triple56\n    local triple57\n    local triple58\n    local triple59\n\
    \    local triple60\n    local triple61\n    local triple62\n    local triple63\n\
    \    local triple64\n    local triple65\n    local triple66\n    local triple67\n\
    \    local triple68\n    local triple69\n    local triple70\n    local triple71\n\
    \    local triple72\n    local triple73\n    local triple74\n    local triple75\n\
    \    local triple76\n    local triple77\n    local triple78\n    local triple79\n\
    \    local triple80\n    local triple81\n    local triple82\n    local triple83\n\
    \    local triple84\n    local triple85\n    local triple86\n    local triple87\n\
    \    local triple88\n    local triple89\n    local triple90\n    local triple91\n\
    \    local triple92\n    local triple93\n    local triple94\n    local triple95\n\
    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp22vn9l8j.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $k -le $i ]; then\n          count=$(expr\
    \ $count + 1)\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local triples=0\n\
    \    local triple\n    local triple1\n    local triple2\n    local triple3\n \
    \   local triple4\n    local triple5\n    local triple6\n    local triple7\n \
    \   local triple8\n    local triple9\n    local triple10\n    local triple11\n\
    \    local triple12\n    local triple13\n    local triple14\n    local triple15\n\
    \    local triple16\n    local triple17\n    local triple18\n    local triple19\n\
    \    local triple20\n    local triple21\n    local triple22\n    local triple23\n\
    \    local triple24\n    local triple25\n    local triple26\n    local triple27\n\
    \    local triple28\n    local triple29\n    local triple30\n    local triple31\n\
    \    local triple32\n    local triple33\n    local triple34\n    local triple35\n\
    \    local triple36\n    local triple37\n    local triple38\n    local triple39\n\
    \    local triple40\n    local triple41\n    local triple42\n    local triple43\n\
    \    local triple44\n    local triple45\n    local triple46\n    local triple47\n\
    \    local triple48\n    local triple49\n    local triple50\n    local triple51\n\
    \    local triple52\n    local triple53\n    local triple54\n    local triple55\n\
    \    local triple56\n    local triple57\n    local triple58\n    local triple59\n\
    \    local triple60\n    local triple61\n    local triple62\n    local triple63\n\
    \    local triple64\n    local triple65\n    local triple66\n    local triple67\n\
    \    local triple68\n    local triple69\n    local triple70\n    local triple71\n\
    \    local triple72\n    local triple73\n    local triple74\n    local triple75\n\
    \    local triple76\n    local triple77\n    local triple78\n    local triple79\n\
    \    local triple80\n    local triple81\n    local triple82\n    local triple83\n\
    \    local triple84\n    local triple85\n    local triple86\n    local triple87\n\
    \    local triple88\n    local triple89\n    local triple90\n    local triple91\n\
    \    local triple92\n    local triple93\n    local triple94\n    local \n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  a=$( seq 1 $n\
    \ )\n  max=0\n  for i in $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n     \
    \ for k in $(seq 1 $n); do\n        count=$(echo $(( $i * $j + $k + 1 )) | bc)\n\
    \        if [ $count -eq $max ]; then\n          max=$count\n        fi\n    \
    \  done\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i = 1; i <= n; i++))\n  do\n    echo $((i * i - i + 1))\n  done))\n  local\
    \ count=0\n  local triples=0\n  local triple\n  local i\n  local j\n  local k\n\
    \  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"\
    ; do\n        triple=$((i * i - i + 1))\n        if (( triple == k )); then\n\
    \          triples=$((triples + 1))\n        fi\n      done\n    done\n  done\n\
    \  echo $((triples))\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  local j=0\n  local\
    \ k=0\n  local triples=0\n  local i\n  for i in \"${a[@]}\"; do\n    local j=0\n\
    \    local k=0\n    while ((j<i)) && ((k<i)) ; do\n      ((triples=triples + 1))\n\
    \      ((j++))\n      ((k++))\n    done\n  done\n  echo $triples\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    while [ $i -lt $n ]; do\n        sum=$((sum + $a[i]))\n        i=$((i+1))\n\
    \    done\n    while [ $j -lt $n ]; do\n        sum=$((sum + $a[j]))\n       \
    \ j=$((j+1))\n    done\n    while [ $k -lt $n ]; do\n        sum=$((sum + $a[k]))\n\
    \        k=$((k+1))\n    done\n    echo $((sum % 3))\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9m0sdx6d.sh: line 20: sum + 1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    local count=0\n    local max=0\n    while [ $i -lt $n ]; do\n        sum=$((sum\
    \ + $a[i]))\n        i=$((i+1))\n    done\n    while [ $j -lt $n ]; do\n     \
    \   sum=$((sum + $a[j]))\n        j=$((j+1))\n    done\n    while [ $k -lt $n\
    \ ]; do\n        sum=$((sum + $a[k]))\n        k=$((k+1))\n    done\n    sum=$((sum\
    \ + $a[i]))\n    sum=$((sum + $a[j]))\n    sum=$((sum + $a[k]))\n    sum=$((sum\
    \ % 3))\n    if [ $sum -eq 0 ]; then\n        count=$(expr $count + 1)\n    else\n\
    \        count=$(expr $count - 1)\n    fi\n    if [ $count -gt $max ]; then\n\
    \        max=$count\n    fi\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo5wxsr0q.sh: line 22: sum + 1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$(expr\
    \ $count + 1)\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  local count=0\n\
    \  while [ $i -lt $n ]; do\n    sum=$((sum + $a[i]))\n    count=$((count + 1))\n\
    \    i=$((i + 1))\n  done\n  while [ $j -lt $n ]; do\n    sum=$((sum + $a[j]))\n\
    \    count=$((count + 1))\n    j=$((j + 1))\n  done\n  while [ $k -lt $n ]; do\n\
    \    sum=$((sum + $a[k]))\n    count=$((count + 1))\n    k=$((k + 1))\n  done\n\
    \  while [ $count -gt 0 ]; do\n    sum=$((sum + $a[i]))\n    count=$((count -\
    \ 1))\n    i=$((i + 1))\n  done\n  while [ $count -gt 0 ]; do\n    sum=$((sum\
    \ + $a[j]))\n    count=$((count - 1))\n    j=$((j + 1))\n  done\n  while [ $count\
    \ -gt 0 ]; do\n    sum=$((sum + $a[k]))\n    count=$((count - 1))\n    k=$((k\
    \ + 1))\n  done\n  echo $((sum % 3))\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdjiqnz8r.sh: line 21: sum + 1[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max_triple\n\
    \    local max_triple_index\n    local max_triple_index2\n    local max_triple_index3\n\
    \    local max_triple_index4\n    local max_triple_index5\n    local max_triple_index6\n\
    \    local max_triple_index7\n    local max_triple_index8\n    local max_triple_index9\n\
    \    local max_triple_index10\n    local max_triple_index11\n    local max_triple_index12\n\
    \    local max_triple_index13\n    local max_triple_index14\n    local max_triple_index15\n\
    \    local max_triple_index16\n    local max_triple_index17\n    local max_triple_index18\n\
    \    local max_triple_index19\n    local max_triple_index20\n    local max_triple_index21\n\
    \    local max_triple_index22\n    local max_triple_index23\n    local max_triple_index24\n\
    \    local max_triple_index25\n    local max_triple_index26\n    local max_triple_index27\n\
    \    local max_triple_index28\n    local max_triple_index29\n    local max_triple_index30\n\
    \    local max_triple_index31\n    local max_triple_index32\n    local max_triple_index33\n\
    \    local max_triple_index34\n    local max_triple_index35\n    local max_triple_index36\n\
    \    local max_triple_index37\n    local max_triple_index38\n    local max_triple_index39\n\
    \    local max_triple_index40\n    local max_triple_index41\n    local max_triple_index42\n\
    \    local max_triple_index43\n    local max_triple_index44\n    local max_triple_index45\n\
    \    local max_triple_index46\n    local max_triple_index47\n    local max_triple_index48\n\
    \    local max_triple_index49\n    local max_triple_index50\n    local max_triple_index51\n\
    \    local max_triple_index52\n    local max_triple_index53\n    local max_triple_index54\n\
    \    local max_triple_index55\n    local max_triple_index56\n    local max_triple_index57\n\
    \    local max_triple_index58\n    local max_triple_index59\n    local max_triple_index60\n\
    \    local max_triple_index61\n    local max_triple_index62\n    local max_triple_index63\n\
    \    local max_triple_index64\n    local max_triple_index65\n    local max_triple_index66\n\
    \    local max_triple_index67\n    local max_triple_index68\n    local max_triple_index69\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i * i - i + 1)); done))\n  local count=0\n \
    \ local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    j=$((i+1))\n\
    \    k=$((j+1))\n    if [ $((i*i - i + 1)) == $((j*j - j + k)) ]; then\n     \
    \ ((count++))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++))\n    do\n        echo $((i*i-1))\n    done))\n\
    \    local count=0\n    local i\n    local j\n    local k\n    local sum\n   \
    \ local count1\n    local count2\n    local count3\n    local count4\n    local\
    \ count5\n    local count6\n    local count7\n    local count8\n    local count9\n\
    \    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n    local \n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  local count=0\n\
    \  while [ $i -lt $n ]; do\n    sum=$(( $sum + $a[ $i ] ))\n    i=$(( $i + 1 ))\n\
    \  done\n  while [ $j -lt $n ]; do\n    sum=$(( $sum + $a[ $j ] ))\n    j=$((\
    \ $j + 1 ))\n  done\n  while [ $k -lt $n ]; do\n    sum=$(( $sum + $a[ $k ] ))\n\
    \    k=$(( $k + 1 ))\n  done\n  while [ $i -le $n ]; do\n    sum=$(( $sum + $a[\
    \ $i ] ))\n    i=$(( $i + 1 ))\n  done\n  while [ $j -le $n ]; do\n    sum=$((\
    \ $sum + $a[ $j ] ))\n    j=$(( $j + 1 ))\n  done\n  while [ $k -le $n ]; do\n\
    \    sum=$(( $sum + $a[ $k ] ))\n    k=$(( $k + 1 ))\n  done\n  while [ $sum -le\
    \ 3 ]; do\n    sum=$(( $sum + 1 ))\n    count=$(( $count + 1 ))\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps9z1xl_2.sh: line 21: 0 + 1[ 0 ] : syntax error: invalid arithmetic
    operator (error token is "[ 0 ] ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $a; do\n    for j in $a; do\n      for k in $a; do\n        if [ $i -le $j -a\
    \ $j -le $k -a $i -le $k ]; then\n          count=$(expr $i + $j + $k + $i * $j\
    \ + $j * $k + $k * $i | bc)\n          if [[ $count -eq 0 ]]; then\n         \
    \   echo $i $j $k\n          fi\n        fi\n      done\n    done\n  done\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\n"
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  a=($(for ((i=1;\
    \ i<=$n; i++)); do echo $i*$i-$i+1; done))\n  max=0\n  for i in \"${a[@]}\"; do\n\
    \    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if [ $i\
    \ -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$(( $count + 1 ))\n\
    \        fi\n      done\n    done\n  done\n  if [ $count -gt $max ]; then\n  \
    \  max=$count\n  fi\n  echo $max\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 1*1-1+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 2*2-2+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 2*2-2+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 2*2-2+1: integer expression expected

    /tmp/tmpg4sk_vxx.sh: line 25: [: 2*2-2+1: integer expression expected

    /tmp/tmpg4sk_vxx.s'
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++))\n    do\n        echo -n $i\n    done))\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local sum=0\n    local count=0\n    local\
    \ triples=0\n    local triple\n    local triple2\n    local triple3\n    local\
    \ triple4\n    local triple5\n    local triple6\n    local triple7\n    local\
    \ triple8\n    local triple9\n    local triple10\n    local triple11\n    local\
    \ triple12\n    local triple13\n    local triple14\n    local triple15\n    local\
    \ triple16\n    local triple17\n    local triple18\n    local triple19\n    local\
    \ triple20\n    local triple21\n    local triple22\n    local triple23\n    local\
    \ triple24\n    local triple25\n    local triple26\n    local triple27\n    local\
    \ triple28\n    local triple29\n    local triple30\n    local triple31\n    local\
    \ triple32\n    local triple33\n    local triple34\n    local triple35\n    local\
    \ triple36\n    local triple37\n    local triple38\n    local triple39\n    local\
    \ triple40\n    local triple41\n    local triple42\n    local triple43\n    local\
    \ triple44\n    local triple45\n    local triple46\n    local triple47\n    local\
    \ triple48\n    local triple49\n    local triple50\n    local triple51\n    local\
    \ triple52\n    local triple53\n    local triple54\n    local triple55\n    local\
    \ triple56\n    local triple57\n    local triple58\n    local triple59\n    local\
    \ triple60\n    local triple61\n    local triple62\n    local triple63\n    local\
    \ triple64\n    local triple65\n    local triple66\n    local triple67\n    local\
    \ triple68\n    local triple69\n    local triple70\n    local triple71\n    local\
    \ triple72\n    local triple73\n    local triple74\n    local triple75\n    local\
    \ triple76\n    local triple77\n    local triple78\n    local triple79\n    local\
    \ triple80\n    local triple81\n    local triple82\n    local triple83\n    local\
    \ triple84\n    local triple85\n    local triple86\n    local triple87\n    local\
    \ triple88\n    local triple89\n    local triple90\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local i=0\n  local j=0\n  local k=0\n\
    \  local count=0\n  while [ $i -lt $n ]; do\n    local j=$((i+1))\n    local k=$((j+1))\n\
    \    if [ $i -eq $j ] && [ $i -eq $k ]; then\n      count=$((count+1))\n    fi\n\
    \    i=$j\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    [[ \"$i\" < \"\
    $j\" ]] && [[ \"$i\" < \"$k\" ]] && [[ \"$j\" < \"$k\" ]] && count=$((count+1))\n\
    \    j=$((i+1))\n    k=$((i+1))\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  \n  a=($(for ((i=1;\
    \ i<=$n; i++)); do echo $i; done))\n  \n  for i in \"${a[@]}\"; do\n    for j\
    \ in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i*i + j*j\
    \ + k*k == i*i*i*k )); then\n          count=$((count+1))\n        fi\n      done\n\
    \    done\n  done\n  \n  max=$((count-1))\n  \n  echo \"$max\"\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $i; done))\n  local count=0\n  local sum=0\n  local\
    \ i\n  for i in \"${a[@]}\"; do\n    sum=$((sum + i))\n  done\n  for i in \"${a[@]}\"\
    ; do\n    count=$((count + $((i*i - $sum + i))))\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  a=$( seq 1 $n )\n  for i in\
    \ $(seq 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n\
    \        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$(expr\
    \ $count + 1)\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n  local count=0\n\
    \  while [ $i -lt $n ]; do\n    sum=$(( $sum + $a[i] ))\n    i=$(( $i + 1 ))\n\
    \  done\n  while [ $j -lt $n ]; do\n    sum=$(( $sum + $a[j] ))\n    j=$(( $j\
    \ + 1 ))\n  done\n  while [ $k -lt $n ]; do\n    sum=$(( $sum + $a[k] ))\n   \
    \ k=$(( $k + 1 ))\n  done\n  while [ $i -lt $n ]; do\n    sum=$(( $sum + $a[i]\
    \ ))\n    i=$(( $i + 1 ))\n  done\n  while [ $j -lt $n ]; do\n    sum=$(( $sum\
    \ + $a[j] ))\n    j=$(( $j + 1 ))\n  done\n  while [ $k -lt $n ]; do\n    sum=$((\
    \ $sum + $a[k] ))\n    k=$(( $k + 1 ))\n  done\n  while [ $i -lt $n ]; do\n  \
    \  sum=$(( $sum + $a[i] ))\n    i=$(( $i + 1 ))\n  done\n  while [ $j -lt $n ];\
    \ do\n    sum=$(( $sum + $a[j] ))\n    j=$(( $j + 1 ))\n  done\n  while [ $k -lt\
    \ $n ]; do\n    sum=$(( $sum + $a[k] ))\n    k=$(( $k + 1 ))\n  done\n  while\
    \ [ $i -lt $n ]; do\n    sum=$(( $sum + $a[i] ))\n    i=$(( $i + 1 ))\n  done\n\
    \  while [ $j -lt $n ]; do\n    sum=$(( $sum + $a[j] ))\n    j=$(( $j + 1 ))\n\
    \  done\n  while [ $k -lt $n ]; do\n    sum=$(( $sum + $a[k] ))\n    k=$(( $k\
    \ + 1 ))\n  done\n  while [ $i -lt $n ]; do\n    sum=$(( $sum + $a[i] ))\n   \
    \ i=$(( $i + 1 ))\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp672u5_di.sh: line 71: syntax error near unexpected token `}''

    /tmp/tmp672u5_di.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local max1\n  \
    \  local max2\n    local max3\n    local max4\n    local max5\n    local max6\n\
    \    local max7\n    local max8\n    local max9\n    local max10\n    local max11\n\
    \    local max12\n    local max13\n    local max14\n    local max15\n    local\
    \ max16\n    local max17\n    local max18\n    local max19\n    local max20\n\
    \    local max21\n    local max22\n    local max23\n    local max24\n    local\
    \ max25\n    local max26\n    local max27\n    local max28\n    local max29\n\
    \    local max30\n    local max31\n    local max32\n    local max33\n    local\
    \ max34\n    local max35\n    local max36\n    local max37\n    local max38\n\
    \    local max39\n    local max40\n    local max41\n    local max42\n    local\
    \ max43\n    local max44\n    local max45\n    local max46\n    local max47\n\
    \    local max48\n    local max49\n    local max50\n    local max51\n    local\
    \ max52\n    local max53\n    local max54\n    local max55\n    local max56\n\
    \    local max57\n    local max58\n    local max59\n    local max60\n    local\
    \ max61\n    local max62\n    local max63\n    local max64\n    local max65\n\
    \    local max66\n    local max67\n    local max68\n    local max69\n    local\
    \ max70\n    local max71\n    local max72\n    local max73\n    local max74\n\
    \    local max75\n    local max76\n    local max77\n    local max78\n    local\
    \ max79\n    local max80\n    local max81\n    local max82\n    local max83\n\
    \    local max84\n    local max85\n    local max86\n    local max87\n    local\
    \ max88\n    local max89\n    local max90\n    local max91\n    local max92\n\
    \    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local max1\n    local max2\n    local max3\n    local max4\n    local max5\n\
    \    local max6\n    local max7\n    local max8\n    local max9\n    local max10\n\
    \    local max11\n    local max12\n    local max13\n    local max14\n    local\
    \ max15\n    local max16\n    local max17\n    local max18\n    local max19\n\
    \    local max20\n    local max21\n    local max22\n    local max23\n    local\
    \ max24\n    local max25\n    local max26\n    local max27\n    local max28\n\
    \    local max29\n    local max30\n    local max31\n    local max32\n    local\
    \ max33\n    local max34\n    local max35\n    local max36\n    local max37\n\
    \    local max38\n    local max39\n    local max40\n    local max41\n    local\
    \ max42\n    local max43\n    local max44\n    local max45\n    local max46\n\
    \    local max47\n    local max48\n    local max49\n    local max50\n    local\
    \ max51\n    local max52\n    local max53\n    local max54\n    local max55\n\
    \    local max56\n    local max57\n    local max58\n    local max59\n    local\
    \ max60\n    local max61\n    local max62\n    local max63\n    local max64\n\
    \    local max65\n    local max66\n    local max67\n    local max68\n    local\
    \ max69\n    local max70\n    local max71\n    local max72\n    local max73\n\
    \    local max74\n    local max75\n    local max76\n    local max77\n    local\
    \ max78\n    local max79\n    local max80\n    local max81\n    local max82\n\
    \    local max83\n    local max84\n    local max85\n    local max86\n    local\
    \ max87\n    local max88\n    local max89\n    local max90\n    local max91\n\
    \    local max92\n    local max93\n    local max94\n    local max95\n    local\
    \ max96\n    local \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local count=0\n  local i\n  local j\n  local k\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( i < j && j < k && k < i )); then\n          count=$(( $count + 1 ))\n   \
    \     fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n  \
    \  get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local triples=0\n  while [\
    \ $i -lt $n ]; do\n    i=$((i+1))\n    j=$((i+1))\n    k=$((i+1))\n    triples=$((triples\
    \ + $((a[i] + a[j] + a[k]))))\n  done\n  echo $triples\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local count=0\n  local\
    \ i\n  local j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"\
    ; do\n      for k in \"${a[@]}\"; do\n        if (( i == j && i == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || i == k || j == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k )); then\n\
    \          continue\n        fi\n        if (( i == j || \n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6tpctowg.sh: line 85: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6tpctowg.sh: line 101: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a\n    local i\n    local j\n    local k\n    local count\n    local max\n \
    \   local max_triple\n    local max_triple_index\n    local max_triple_index2\n\
    \    local max_triple_index3\n    local max_triple_index4\n    local max_triple_index5\n\
    \    local max_triple_index6\n    local max_triple_index7\n    local max_triple_index8\n\
    \    local max_triple_index9\n    local max_triple_index10\n    local max_triple_index11\n\
    \    local max_triple_index12\n    local max_triple_index13\n    local max_triple_index14\n\
    \    local max_triple_index15\n    local max_triple_index16\n    local max_triple_index17\n\
    \    local max_triple_index18\n    local max_triple_index19\n    local max_triple_index20\n\
    \    local max_triple_index21\n    local max_triple_index22\n    local max_triple_index23\n\
    \    local max_triple_index24\n    local max_triple_index25\n    local max_triple_index26\n\
    \    local max_triple_index27\n    local max_triple_index28\n    local max_triple_index29\n\
    \    local max_triple_index30\n    local max_triple_index31\n    local max_triple_index32\n\
    \    local max_triple_index33\n    local max_triple_index34\n    local max_triple_index35\n\
    \    local max_triple_index36\n    local max_triple_index37\n    local max_triple_index38\n\
    \    local max_triple_index39\n    local max_triple_index40\n    local max_triple_index41\n\
    \    local max_triple_index42\n    local max_triple_index43\n    local max_triple_index44\n\
    \    local max_triple_index45\n    local max_triple_index46\n    local max_triple_index47\n\
    \    local max_triple_index48\n    local max_triple_index49\n    local max_triple_index50\n\
    \    local max_triple_index51\n    local max_triple_index52\n    local max_triple_index53\n\
    \    local max_triple_index54\n    local max_triple_index55\n    local max_triple_index56\n\
    \    local max_triple_index57\n    local max_triple_index58\n    local max_triple_index59\n\
    \    local max_triple_index60\n    local max_triple_index61\n    local max_triple_index62\n\
    \    local max_triple_index63\n    local max_triple_index64\n    local max_triple_index65\n\
    \    local max_triple_index66\n    local max_triple_index67\n    local max_triple_index68\n\
    \    local \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local count=0\n\
    \  local triple=0\n  local triples=0\n  local triples_sum=0\n  local triples_sum2=0\n\
    \  local triples_sum3=0\n  local triples_sum4=0\n  local triples_sum5=0\n  local\
    \ triples_sum6=0\n  local triples_sum7=0\n  local triples_sum8=0\n  local triples_sum9=0\n\
    \  local triples_sum10=0\n  local triples_sum11=0\n  local triples_sum12=0\n \
    \ local triples_sum13=0\n  local triples_sum14=0\n  local triples_sum15=0\n  local\
    \ triples_sum16=0\n  local triples_sum17=0\n  local triples_sum18=0\n  local triples_sum19=0\n\
    \  local triples_sum20=0\n  local triples_sum21=0\n  local triples_sum22=0\n \
    \ local triples_sum23=0\n  local triples_sum24=0\n  local triples_sum25=0\n  local\
    \ triples_sum26=0\n  local triples_sum27=0\n  local triples_sum28=0\n  local triples_sum29=0\n\
    \  local triples_sum30=0\n  local triples_sum31=0\n  local triples_sum32=0\n \
    \ local triples_sum33=0\n  local triples_sum34=0\n  local triples_sum35=0\n  local\
    \ triples_sum36=0\n  local triples_sum37=0\n  local triples_sum38=0\n  local triples_sum39=0\n\
    \  local triples_sum40=0\n  local triples_sum41=0\n  local triples_sum42=0\n \
    \ local triples_sum43=0\n  local triples_sum44=0\n  local triples_sum45=0\n  local\
    \ triples_sum46=0\n  local triples_sum47=0\n  local triples_sum48=0\n  local triples_sum49=0\n\
    \  local triples_sum50=0\n  local triples_sum51=0\n  local triples_sum52=0\n \
    \ local triples_sum53=0\n  local triples_sum54=0\n  local triples_sum55=0\n  local\
    \ triples_sum56=0\n  local triples_sum57=0\n  \n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n    local count=0\n\
    \    local triple=0\n    local triples=0\n    local triples_sum=0\n    local triples_max=0\n\
    \    local triples_min=0\n    local triples_max2=0\n    local triples_min2=0\n\
    \    local triples_max3=0\n    local triples_min3=0\n    local triples_max4=0\n\
    \    local triples_min4=0\n    local triples_max5=0\n    local triples_min5=0\n\
    \    local triples_max6=0\n    local triples_min6=0\n    local triples_max7=0\n\
    \    local triples_min7=0\n    local triples_max8=0\n    local triples_min8=0\n\
    \    local triples_max9=0\n    local triples_min9=0\n    local triples_max10=0\n\
    \    local triples_min10=0\n    local triples_max11=0\n    local triples_min11=0\n\
    \    local triples_max12=0\n    local triples_min12=0\n    local triples_max13=0\n\
    \    local triples_min13=0\n    local triples_max14=0\n    local triples_min14=0\n\
    \    local triples_max15=0\n    local triples_min15=0\n    local triples_max16=0\n\
    \    local triples_min16=0\n    local triples_max17=0\n    local triples_min17=0\n\
    \    local triples_max18=0\n    local triples_min18=0\n    local triples_max19=0\n\
    \    local triples_min19=0\n    local triples_max20=0\n    local triples_min20=0\n\
    \    local triples_max21=0\n    local triples_min21=0\n    local triples_max22=0\n\
    \    local triples_min22=0\n    local triples_max23=0\n    local triples_min23=0\n\
    \    local triples_max24=0\n    local triples_min24=0\n    local triples_max25=0\n\
    \    local triples_min25=0\n    local triples_max26=0\n    local triples_min26=0\n\
    \    local triples_max27=0\n    local triples_min27=0\n    local triples_max28=0\n\
    \    local triples_min28=0\n    local triples_max29=0\n    local triples_\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local i=0\n  local j=0\n\
    \  local k=0\n  local count=0\n  while ((i<$n) && (j<$n) && (k<$n)) {\n    if\
    \ (($a[i] < $a[j]) && ($a[i] < $a[k])) {\n      count=$((count+1))\n      i=$((i+1))\n\
    \    } else if (($a[j] < $a[k]) && ($a[j] < $a[i])) {\n      count=$((count+1))\n\
    \      j=$((j+1))\n    } else if (($a[k] < $a[i]) && ($a[k] < $a[j])) \n    {\n\
    \      count=$((count+1))\n      k=$((k+1))\n    }\n  }\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4ja2tfvh.sh: line 19: syntax error near unexpected token `{''

    /tmp/tmp4ja2tfvh.sh: line 19: `  while ((i<$n) && (j<$n) && (k<$n)) {''

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-1))+$((i+1))+$((i+2)); done))\n  local count=0\n\
    \  local j=0\n  local k=0\n  local i\n  for i in \"${a[@]}\"; do\n    count=$((count+1))\n\
    \    k=$(echo $((i+1))+$((j+1))+$((k+1))|bc)\n    j=$((j+1))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++)); do echo $((i*i-i+1)); done))\n  local j=0\n  local k=0\n\
    \  local count=0\n  local triples=0\n  local triple\n  while [ $j -lt $n ]; do\n\
    \    triple=$(( a[j] + a[k] + a[j] ))\n    if [ $triple -eq 3 ]; then\n      triples=$((triples\
    \ + 1))\n      count=$((count + 1))\n    fi\n    j=$((j+1))\n    k=$((k+1))\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++))\n    do\n        echo -n \"$i\"\n    done))\n \
    \   local count=0\n    local j=0\n    local k=0\n    local i\n    local j\n  \
    \  local k\n    local sum\n    local sum2\n    local sum3\n    local sum4\n  \
    \  local sum5\n    local sum6\n    local sum7\n    local sum8\n    local sum9\n\
    \    local sum10\n    local sum11\n    local sum12\n    local sum13\n    local\
    \ sum14\n    local sum15\n    local sum16\n    local sum17\n    local sum18\n\
    \    local sum19\n    local sum20\n    local sum21\n    local sum22\n    local\
    \ sum23\n    local sum24\n    local sum25\n    local sum26\n    local sum27\n\
    \    local sum28\n    local sum29\n    local sum30\n    local sum31\n    local\
    \ sum32\n    local sum33\n    local sum34\n    local sum35\n    local sum36\n\
    \    local sum37\n    local sum38\n    local sum39\n    local sum40\n    local\
    \ sum41\n    local sum42\n    local sum43\n    local sum44\n    local sum45\n\
    \    local sum46\n    local sum47\n    local sum48\n    local sum49\n    local\
    \ sum50\n    local sum51\n    local sum52\n    local sum53\n    local sum54\n\
    \    local sum55\n    local sum56\n    local sum57\n    local sum58\n    local\
    \ sum59\n    local sum60\n    local sum61\n    local sum62\n    local sum63\n\
    \    local sum64\n    local sum65\n    local sum66\n    local sum67\n    local\
    \ sum68\n    local sum69\n    local sum70\n    local sum71\n    local sum72\n\
    \    local sum73\n    local sum74\n    local sum75\n    local sum76\n    local\
    \ sum77\n    local sum78\n    local sum79\n    local sum80\n    local sum81\n\
    \    local sum82\n    local sum83\n    local sum84\n    local sum85\n    local\
    \ sum86\n    local sum87\n    local sum88\n    local sum89\n    local sum90\n\
    \    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1)); done))\n    local count=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    while [ $i -lt $n ]; do\n  \
    \      if [ $i -eq $j ]; then\n            (( count++ ))\n            (( j+=1\
    \ ))\n        elif [ $i -eq $k ]; then\n            (( count++ ))\n          \
    \  (( k+=1 ))\n        else\n            (( count++ ))\n            (( j+=1 ))\n\
    \            (( k+=1 ))\n        fi\n        (( i++ ))\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp86pknura.sh: line 14: syntax error near unexpected token `;''

    /tmp/tmp86pknura.sh: line 14: `    local a=($(for ((i=1; i<=$n; i++)); do echo
    $((i*i-1)+i+1)); done))''

    /tmp/tmp86pknura.sh: line 15: local: can only be used in a function

    /tmp/tmp86pknura.sh: line 16: local: can only be used in a function

    /tmp/tmp86pknura.sh: line 17: local: can only be used in a function

    /tmp/tmp86pknura.sh: line 18: local: can only be used in a function

    /tmp/tmp86pknura.sh: line 19: [: 1: unary operator expected

    /tmp/tmp86pknura.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmp86pknura.sh: line 34: `}''

    '
  stdout: '1

    '
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(seq\
    \ 1 $n))\n  local i=0\n  local j=0\n  local k=0\n  local triples=0\n  while [\
    \ $i -lt $n ]; do\n    local j=$((i+1))\n    local k=$((j+1))\n    local sum=$((i*i-i+j*j-k))\n\
    \    if [ $sum -eq 0 ]; then\n      triples=$((triples+1))\n      i=$((i+1))\n\
    \      j=$((j+1))\n      k=$((k+1))\n      continue\n    fi\n    local sum=$((i*i-i+j*j-k))\n\
    \    if [ $sum -eq 3 ]; then\n      triples=$((triples+1))\n      i=$((i+1))\n\
    \      j=$((j+1))\n      k=$((k+1))\n      continue\n    fi\n    i=$((i+1))\n\
    \    j=$((j+1))\n    k=$((k+1))\n  done\n  echo $triples\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n $i\n    done))\n  local result=0\n\
    \  local i\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for\
    \ k in \"${a[@]}\"; do\n        if (( i*i - i + 1 + j*j - k + 1 )); then\n   \
    \       result=$(( result + 1 ))\n        fi\n      done\n    done\n  done\n \
    \ echo $result\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a\n\
    \  local i\n  local j\n  local k\n  local count\n  local max\n  local count2\n\
    \  local max2\n  local count3\n  local max3\n  local count4\n  local max4\n  local\
    \ count5\n  local max5\n  local count6\n  local max6\n  local count7\n  local\
    \ max7\n  local count8\n  local max8\n  local count9\n  local max9\n  local count10\n\
    \  local max10\n  local count11\n  local max11\n  local count12\n  local max12\n\
    \  local count13\n  local max13\n  local count14\n  local max14\n  local count15\n\
    \  local max15\n  local count16\n  local max16\n  local count17\n  local max17\n\
    \  local count18\n  local max18\n  local count19\n  local max19\n  local count20\n\
    \  local max20\n  local count21\n  local max21\n  local count22\n  local max22\n\
    \  local count23\n  local max23\n  local count24\n  local max24\n  local count25\n\
    \  local max25\n  local count26\n  local max26\n  local count27\n  local max27\n\
    \  local count28\n  local max28\n  local count29\n  local max29\n  local count30\n\
    \  local max30\n  local count31\n  local max31\n  local count32\n  local max32\n\
    \  local count33\n  local max33\n  local count34\n  local max34\n  local count35\n\
    \  local max35\n  local count36\n  local max36\n  local count37\n  local max37\n\
    \  local count38\n  local max38\n  local count39\n  local max39\n  local count40\n\
    \  local max40\n  local count41\n  local max41\n  local count42\n  local max42\n\
    \  local count43\n  local max43\n  local count44\n  local max44\n  local count45\n\
    \  local max45\n  local count46\n  local max46\n  local count47\n  local max47\n\
    \  local count48\n  local max48\n  local count49\n  local max49\n  local \n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037564
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(seq 1 $n))\n    local i=0\n    local j=0\n    local k=0\n    local triples=0\n\
    \    while [ $i -lt $n ]; do\n        (( triples += $(a[i] + $(a[j] + $(a[k])))\
    \ ))\n        (( i++ ))\n        (( j++ ))\n        (( k++ ))\n    done\n    echo\
    \ $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps5x5uulb.sh: line 20: a[k]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[j]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[i]: command not found

    /tmp/tmps5x5uulb.sh: line 20: ((: triples +=  : syntax error: operand expected
    (error token is "+=  ")

    /tmp/tmps5x5uulb.sh: line 20: a[k]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[j]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[i]: command not found

    /tmp/tmps5x5uulb.sh: line 20: ((: triples +=  : syntax error: operand expected
    (error token is "+=  ")

    /tmp/tmps5x5uulb.sh: line 20: a[k]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[j]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[i]: command not found

    /tmp/tmps5x5uulb.sh: line 20: ((: triples +=  : syntax error: operand expected
    (error token is "+=  ")

    /tmp/tmps5x5uulb.sh: line 20: a[k]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[j]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[i]: command not found

    /tmp/tmps5x5uulb.sh: line 20: ((: triples +=  : syntax error: operand expected
    (error token is "+=  ")

    /tmp/tmps5x5uulb.sh: line 20: a[k]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[j]: command not found

    /tmp/tmps5x5uulb.sh: line 20: a[i]: command not found

    /tmp/tmps5x5uulb.sh: line 20: ((: triples +=  : syntax error: operand expected
    (error token is "+=  ")

    '
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=($(for ((i=1; i<=$n; i++)); do echo $i; done))\n    local count=0\n    local\
    \ j=0\n    local k=0\n    local i\n    local j\n    local k\n    local i\n   \
    \ local j\n    local k\n    local i\n    local j\n    local k\n    local i\n \
    \   local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local i\n\
    \    local j\n    local k\n    local i\n    local j\n    local k\n    local \n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037565
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local a=($(for\
    \ ((i=1; i<=$n; i++))\n    do\n      echo -n \"$i\"\n    ))\n  local count=0\n\
    \  local i\n  for i in \"${a[@]}\"\n  do\n    local j\n    for j in \"${a[@]}\"\
    \n    do\n      local k\n      for k in \"${a[@]}\"\n      do\n        if [ \"\
    $i\" -le \"$j\" -le \"$k\" -a \"$i\" -le \"$k\" -a \"$j\" -le \"$k\" -a \"$i\"\
    \ -le \"$j\" -a \"$k\" -le \"$j\" -a \"$k\" -le \"$i\" ]; then\n          count=$((count+1))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0zwsrjkh.sh: command substitution: line 21: syntax error near unexpected
    token `)''

    /tmp/tmp0zwsrjkh.sh: command substitution: line 21: `    )''

    '
  stdout: ''
  timestamp: 1660037565
