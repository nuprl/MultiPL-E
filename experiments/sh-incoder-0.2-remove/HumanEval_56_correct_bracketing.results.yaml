language: sh
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local closing_brackets=$(echo $brackets |\
    \ awk '{print $2}')\n    local opening_count=0\n    local closing_count=0\n  \
    \  for opening_bracket in $opening_brackets; do\n        opening_count=$(($opening_count\
    \ + 1))\n    done\n    for closing_bracket in $closing_brackets; do\n        closing_count=$(($closing_count\
    \ + 1))\n    done\n    if [ $opening_count -ne $closing_count ]; then\n      \
    \  return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_count=$(echo $closing_brackets | wc -w)\n    local\
    \ correct_count=$(echo $opening_brackets | wc -w | bc)\n    local incorrect_count=$(echo\
    \ $closing_brackets | wc -w | bc)\n    local correct_brackets=0\n    local incorrect_brackets=0\n\
    \    local correct_brackets_string=\"\"\n    local incorrect_brackets_string=\"\
    \"\n    local correct_brackets_string2=\"\"\n    local incorrect_brackets_string2=\"\
    \"\n    local correct_brackets_string3=\"\"\n    local incorrect_brackets_string3=\"\
    \"\n    local correct_brackets_string4=\"\"\n    local incorrect_brackets_string4=\"\
    \"\n    local correct_brackets_string5=\"\"\n    local incorrect_brackets_string5=\"\
    \"\n    local correct_brackets_string6=\"\"\n    local incorrect_brackets_string6=\"\
    \"\n    local correct_brackets_string7=\"\"\n    local incorrect_brackets_string7=\"\
    \"\n    local correct_brackets_string8=\"\"\n    local incorrect_brackets_string8=\"\
    \"\n    local correct_brackets_string9=\"\"\n    local incorrect_brackets_string9=\"\
    \"\n    local correct_brackets_string10=\"\"\n    local incorrect_brackets_string10=\"\
    \"\n    local correct_brackets_string11=\"\"\n    local incorrect_brackets_string11=\"\
    \"\n    local correct_brackets_string12=\"\"\n    local incorrect_brackets_string12=\"\
    \"\n    local correct_brackets_string13=\"\"\n    local incorrect_brackets_string13=\"\
    \"\n    local correct_brackets_string14=\"\"\n    local incorrect_brackets_string14=\"\
    \"\n    local correct_brackets_string15=\"\"\n    local incorrect_brackets_string15=\"\
    \"\n    local correct_brackets_string16=\"\"\n    local incorrect_brackets_string16=\"\
    \"\n    local correct_brackets_string17=\"\"\n    local incorrect_brackets_string17=\"\
    \"\n    local correct_brackets_string18=\"\"\n    local incorrect_brackets_string18=\"\
    \"\n    local correct_brackets_string19=\"\"\n    local incorrect_brackets_string19=\"\
    \"\n    local \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed -e 's/>//g' -e 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_brackets=0\n    for (( i=1; i<=$open_brackets_count; i++ ));\
    \ do\n        if [[ $open_brackets[$i] == $close_brackets[$i] ]]; then\n     \
    \       correct_brackets=$((correct_brackets+1))\n        fi\n    done\n    echo\
    \ $correct_brackets\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_length=$(echo $opening_brackets | wc -l)\n\
    \    local closing_brackets_length=$(echo $closing_brackets | wc -l)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count | bc)\n    local closing_brackets_count=$(echo\
    \ $closing_brackets_count | bc)\n    local opening_brackets_length=$(echo $opening_brackets_length\
    \ | bc)\n    local closing_brackets_length=$(echo $closing_brackets_length | bc)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count | bc)\n    local\
    \ closing_brackets_count=$(echo $closing_brackets_count | bc)\n    local opening_brackets_length=$(echo\
    \ $opening_brackets_length | bc)\n    local closing_brackets_length=$(echo $closing_brackets_length\
    \ | bc)\n    local opening_brackets_count=$(echo $opening_brackets_count | bc)\n\
    \    local closing_brackets_count=$(echo $closing_brackets_count | bc)\n    local\
    \ opening_brackets_length=$(echo $opening_brackets_length | bc)\n    local closing_brackets_length=$(echo\
    \ $closing_brackets_length | bc)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count=$(echo $closing_brackets_count | bc)\n\
    \    local opening_brackets_length=$(echo $opening_brackets_length | bc)\n   \
    \ local closing_brackets_length=$(echo $closing_brackets_length | bc)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count | bc)\n    local closing_brackets_count=$(echo\
    \ $closing\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj05wfz5_.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmpj05wfz5_.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n    local opening_brackets=$(echo\
    \ \"${brackets}\" | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ \"${brackets}\" | sed -e 's/>//g' -e 's/<//g')\n    local opening_brackets_count=$(echo\
    \ \"${opening_brackets}\" | wc -w)\n    local closing_brackets_count=$(echo \"\
    ${closing_brackets}\" | wc -w)\n    local correct_bracketing_count=$(echo \"${opening_brackets_count}\"\
    \ | bc)\n    local correct_bracketing_count_with_closing_brackets=$(echo \"${correct_bracketing_count}\"\
    \ | bc -l)\n    local correct_bracketing_count_with_opening_brackets=$(echo \"\
    ${correct_bracketing_count}\" | bc -l)\n    local correct_bracketing_count_with_opening_brackets_count=$(echo\
    \ \"${correct_bracketing_count_with_opening_brackets}\" | wc -w)\n    local correct_bracketing_count_with_closing_brackets_count=$(echo\
    \ \"${correct_bracketing_count_with_closing_brackets}\" | wc -w)\n    local correct_bracketing_count_with_opening_brackets_count_with_closing_brackets=$(echo\
    \ \"${correct_bracketing_count_with_opening_brackets_count}\" | bc -l)\n    local\
    \ correct_bracketing_count_with_opening_brackets_count_with_closing_brackets_count=$(echo\
    \ \"${correct_bracketing_count_with_opening_brackets_count_with_closing_brackets}\"\
    \ | wc -w)\n    local correct_bracketing_count_with_opening_brackets_count_with_closing_brackets_count_with_opening_brackets=$(echo\
    \ \"${correct_bracketing_count_with_opening_brackets_count_with_closing_brackets_count}\"\
    \ | bc -l)\n    local correct_bracketing_count_with_opening_brackets_count_with_closing_brackets_count_with_opening_brackets_count=$(echo\
    \ \"${correct_bracketing_count_with_opening_brackets_count_with_closing_brackets_count_with_opening_brackets}\"\
    \ | wc -w)\n    local correct_bracketing_count_with_opening_brackets_count_with_closing_brackets_count_with_opening_brackets_count_with_closing_brackets=$(echo\
    \ \"${correct_bracketing_count_with_opening_brackets_count_with_\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1k349w9a.sh: line 41: unexpected EOF while looking for matching
    `"''

    /tmp/tmp1k349w9a.sh: line 45: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets =~ $opening_bracket ]]; then\n         \
    \   echo \"$opening_bracket\"\n            return 1\n        fi\n    done\n  \
    \  echo \"0\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == \"$opening_bracket\" ]]; then\n     \
    \       return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed -e 's/>//g' -e 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count)\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracket\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local closing_brackets=$(echo $brackets |\
    \ awk '{print $2}')\n    local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \    local opening_brackets_count_correct=$(echo $opening_brackets_count | awk\
    \ '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | awk '{print $1}')\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | awk '{print $1}')\n    local opening_brackets_count_correct=$(\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1goay9ii.sh: line 28: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1goay9ii.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n  local close_brackets_count=$(echo $close_brackets | wc -w)\n  local\
    \ open_brackets_count_correct=$(echo $open_brackets_count | bc)\n  local close_brackets_count_correct=$(echo\
    \ $close_brackets_count | bc)\n  local open_brackets_count_correct=$((open_brackets_count_correct\
    \ + 1))\n  local close_brackets_count_correct=$((close_brackets_count_correct\
    \ + 1))\n  local open_brackets_count_correct=$((open_brackets_count_correct -\
    \ 1))\n  local close_brackets_count_correct=$((close_brackets_count_correct -\
    \ 1))\n  if ((open_brackets_count_correct == close_brackets_count)) ; then\n \
    \   return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        local closing_bracket=$(echo $closing_brackets | sed 's/'$opening_bracket'//g')\n\
    \        if [ \"$closing_bracket\" != \"\" ]; then\n            return 1\n   \
    \     fi\n    done\n    return 0\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ $opening_bracket == $closing_brackets ]]; then\n            ((opening_count++))\n\
    \        else\n            ((closing_count++))\n        fi\n    done\n    if [[\
    \ $opening_count -eq 0 && $closing_count -eq 0 ]]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ - $closing_brackets_count)\n    echo $correct_bracketing_count\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        echo \"brackets string is not correctly formatted\"\n        return 1\n\
    \    fi\n    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        opening_count=$(($opening_count\
    \ + 1))\n    done\n    for closing_bracket in $closing_brackets; do\n        closing_count=$(($closing_count\
    \ + 1))\n    done\n    if [ $opening_count -eq $closing_count ]; then\n      \
    \  return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count=$(expr $opening_brackets_count -\
    \ 1)\n    local closing_brackets_count=$(expr $closing_brackets_count - 1)\n \
    \   local opening_brackets_count=$(expr $opening_brackets_count + 1)\n    local\
    \ closing_brackets_count=$(expr $closing_brackets_count + 1)\n    local opening_brackets_count=$(expr\
    \ $opening_brackets_count + 1)\n    local closing_brackets_count=$(expr $closing_brackets_count\
    \ + 1)\n    local opening_brackets_count=$(expr $opening_brackets_count + 1)\n\
    \    local closing_brackets_count=$(expr $closing_brackets_count + 1)\n    local\
    \ opening_brackets_count=$(expr $opening_brackets_count + 1)\n    local closing_brackets_count=$(expr\
    \ $closing_brackets_count + 1)\n    local opening_brackets_count=$(expr $opening_brackets_count\
    \ + 1)\n    local closing_brackets_count=$(expr $closing_brackets_count + 1)\n\
    \    local opening_brackets_count=$(expr $opening_brackets_count + 1)\n    local\
    \ closing_brackets_count=$(expr $closing_brackets_count + 1)\n    local opening_brackets_count=$(expr\
    \ $opening_brackets_count + 1)\n    local closing_brackets_count=$(expr $closing_brackets_count\
    \ + 1)\n    local opening_brackets_count=$(expr $opening_brackets_count + 1)\n\
    \    local closing_brackets_count=$(expr $closing_brackets_count + 1)\n    local\
    \ opening_brackets_count=$(expr $opening_brackets_count + 1)\n    local closing_brackets_count=$(expr\
    \ $closing_brackets_count + 1)\n    local opening_brackets_count=\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        opening_count=$(($opening_count\
    \ + 1))\n    done\n    for closing_bracket in $closing_brackets; do\n        closing_count=$(($closing_count\
    \ + 1))\n    done\n    if [ $opening_count -ne $closing_count ]; then\n      \
    \  return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local opening_brackets=\"\
    $(echo \"$brackets\" | sed 's/<//g' | sed 's/>//g')\"\n    local closing_brackets=\"\
    $(echo \"$brackets\" | sed 's/>//g' | sed 's/<//g')\"\n    local opening_count=\"\
    $(echo \"$opening_brackets\" | wc -l | tr -d ' ')\"\n    local closing_count=\"\
    $(echo \"$closing_brackets\" | wc -l | tr -d ' ')\"\n    local correct_count=\"\
    $((opening_count + closing_count))\"\n    if [ \"$correct_count\" -eq \"$opening_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    for open_bracket in $open_brackets; do\n\
    \        local close_bracket=$(echo $close_brackets | sed 's/'$open_bracket'//g')\n\
    \        if [ -z \"$close_bracket\" ]; then\n            echo \"$open_bracket\"\
    \n        else\n            echo \"$open_bracket\" >> $close_bracket\n       \
    \ fi\n    done\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ $opening_bracket == $closing_brackets ]]; then\n            ((opening_count++))\n\
    \        else\n            ((closing_count++))\n        fi\n    done\n    echo\
    \ $((opening_count - closing_count))\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk -F '<' '{print $1}')\n    local closing_brackets=$(echo $brackets\
    \ | awk -F '>' '{print $1}')\n    local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -l)\n    local closing_brackets_count=$(echo $closing_brackets | wc -l)\n\
    \    local correct_bracketing_count=$(echo $opening_brackets_count + $closing_brackets_count\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_count/$opening_brackets_count*100\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_bracketing_percent=$(echo \"scale=2; $correct_bracketing_percent\"\
    \ | bc)\n    local correct_\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local closing_brackets=$(echo $brackets |\
    \ awk '{print $2}')\n    local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \    local opening_brackets_length=$(echo $opening_brackets | wc -l)\n    local\
    \ closing_brackets_length=$(echo $closing_brackets | wc -l)\n    local opening_brackets_length=$(echo\
    \ $opening_brackets_length + $closing_brackets_length)\n    local correct_bracketing_count=$(echo\
    \ $opening_brackets_count + $closing_brackets_count)\n    local correct_bracketing_length=$(echo\
    \ $opening_brackets_length + $closing_brackets_length)\n    local correct_bracketing_count=$(echo\
    \ $correct_bracketing_count - $opening_brackets_count)\n    local correct_bracketing_length=$(echo\
    \ $correct_bracketing_length - $opening_brackets_length)\n    local correct_bracketing_count=$(echo\
    \ $correct_bracketing_count - $closing_brackets_count)\n    local correct_bracketing_length=$(echo\
    \ $correct_bracketing_length - $closing_brackets_length)\n    local correct_bracketing_count=$(echo\
    \ $correct_bracketing_count - 1)\n    local correct_bracketing_length=$(echo $correct_bracketing_length\
    \ - 1)\n    local correct_bracketing_count=$(echo $correct_bracketing_count -\
    \ 0)\n    local correct_bracketing_length=$(echo $correct_bracketing_length -\
    \ 0)\n    local correct_bracketing_count=$(echo $correct_bracketing_count - 1)\n\
    \    local correct_bracketing_length=$(echo $correct_bracketing_length - 1)\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count - 0)\n  \
    \  local correct_bracketing_length=$(echo $correct_bracketing_length - 0)\n  \
    \  local correct_bracketing_count=$(echo $correct_bracketing_count - 1)\n    local\
    \ correct_bracketing_length=$(echo $correct_bracketing_length - 1)\n    local\
    \ correct_bracketing_count=$(echo $correct_bracketing_count - 0)\n    local correct_bracketing_length=$(echo\
    \ $correct_bracketing_length - 0)\n    local correct_bracketing_count=$(echo $correct_bracketing_count\
    \ - 1)\n    local correct_bracketing_length=$(echo $correct_bracketing_length\
    \ - 1)\n    local correct_bracketing_count=$(echo $correct_bracketing_count -\
    \ 0)\n    local correct_bracketing_length=$(echo $\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpox52yd0p.sh: line 36: unexpected EOF while looking for matching
    `)''

    /tmp/tmpox52yd0p.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count - $close_brackets_count)\n\
    \    if [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxb6e41c4.sh: line 13: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local opening_brackets=$(echo\
    \ \"$brackets\" | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ \"$brackets\" | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if ! [[ \"$closing_brackets\" =~ \"$opening_bracket\" ]]; then\n\
    \            return false\n        fi\n    done\n    return true\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwq2fhgmm.sh: line 15: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n    local opening_brackets=$(echo\
    \ \"${brackets}\" | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ \"${brackets}\" | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ \"${opening_brackets}\" | wc -l)\n    local closing_brackets_count=$(echo \"\
    ${closing_brackets}\" | wc -l)\n    if [ \"${opening_brackets_count}\" -eq \"\
    ${closing_brackets_count}\" ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        opening_count=$(($opening_count\
    \ + 1))\n    done\n    for closing_bracket in $closing_brackets; do\n        closing_count=$(($closing_count\
    \ + 1))\n    done\n    if [ $opening_count -ne $closing_count ]; then\n      \
    \  return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    if [ $correct_bracketing_count -eq 0 ];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local closing_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local opening_count=0\n  local closing_count=0\n\
    \  local opening_opening_brackets=\"\"\n  local opening_closing_brackets=\"\"\n\
    \  local closing_opening_brackets=\"\"\n  local closing_closing_brackets=\"\"\n\
    \  local opening_closing_pairs=\"\"\n  local closing_opening_pairs=\"\"\n  local\
    \ closing_closing_pairs=\"\"\n  local opening_closing_pairs_count=0\n  local closing_opening_pairs_count=0\n\
    \  local closing_closing_pairs_count=0\n  local opening_closing_pairs_count_max=0\n\
    \  local closing_opening_pairs_count_max=0\n  local closing_closing_pairs_count_max=0\n\
    \  local opening_closing_pairs_count_min=0\n  local closing_opening_pairs_count_min=0\n\
    \  local closing_closing_pairs_count_min=0\n  local opening_closing_pairs_count_min_index=0\n\
    \  local closing_opening_pairs_count_min_index=0\n  local closing_closing_pairs_count_min_index=0\n\
    \  local opening_closing_pairs_count_max_index=0\n  local closing_opening_pairs_count_max_index=0\n\
    \  local closing_closing_pairs_count_max_index=0\n  local opening_closing_pairs_count_min_index=0\n\
    \  local closing_opening_pairs_count_min_index=0\n  local closing_closing_pairs_count_min_index=0\n\
    \  local opening_closing_pairs_count_max_index=0\n  local closing_opening_pairs_count_max_index=0\n\
    \  local closing_closing_pairs_count_max_index=0\n  local opening_closing_pairs_count_min_index=0\n\
    \  local closing_opening_pairs_count_min_index=0\n  local closing_closing_pairs_count_min_index=0\n\
    \  local opening_closing_pairs_count_max_index=0\n  local closing_opening_pairs_count_max_index=0\n\
    \  local closing_closing_pairs_count_max_index=0\n  local opening_closing_pairs_count_min_index=0\n\
    \  local closing_opening_pairs_count_min_index=0\n  local closing_closing_pairs_count_min_index=0\n\
    \  local opening_closing_pairs_count_max_index=0\n  local clo\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count)\n    local correct_bracketing_count_not_zero=$(echo\
    \ $correct_bracketing_count | wc -w)\n    local correct_bracketing_count_not_zero_or_one=$(echo\
    \ $correct_bracketing_count_not_zero | wc -l)\n    local correct_bracketing_count_not_zero_or_one_or_more=$(echo\
    \ $correct_bracketing_count_not_zero_or_one | wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero=$(echo\
    \ $correct_bracketing_count_not_zero_or_more_or_zero | wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero_or_one=$(echo\
    \ $correct_bracketing_count_not_zero_or_more_or_zero_or_one | wc -l)\n    local\
    \ correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more=$(echo $correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more\
    \ | wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero=$(echo\
    \ $correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero |\
    \ wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero_or_one=$(echo\
    \ $correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero_or_one\
    \ | wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero_or_one_or_more=$(echo\
    \ $correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero_or_one_or_more\
    \ | wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero_or_one_or_more_or_zero=$(echo\
    \ $correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_zero_or_one_or_more_or_zero_or_one_or_more\
    \ | wc -l)\n    local correct_bracketing_count_not_zero_or_more_or_zero_or_one_or_more_or_\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        local closing_bracket=$(echo $closing_brackets | grep \"$opening_bracket\"\
    )\n        if [ -z \"$closing_bracket\" ]; then\n            return 1\n      \
    \  fi\n    done\n    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count=$(echo $opening_brackets_count -\
    \ $closing_brackets_count)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ - 1)\n    local closing_brackets_count=$(echo $closing_brackets_count - 1)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local\
    \ closing_brackets_count=$(echo $closing_brackets_count - 1)\n    local opening_brackets_count=$(echo\
    \ $opening_brackets_count - 1)\n    local closing_brackets_count=$(echo $closing_brackets_count\
    \ - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n\
    \    local closing_brackets_count=$(echo $closing_brackets_count - 1)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local closing_brackets_count=$(echo\
    \ $closing_brackets_count - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ - 1)\n    local closing_brackets_count=$(echo $closing_brackets_count - 1)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local\
    \ closing_brackets_count=$(echo $closing_brackets_count - 1)\n    local opening_brackets_count=$(echo\
    \ $opening_brackets_count - 1)\n    local closing_brackets_count=$(echo $closing_brackets_count\
    \ - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n\
    \    local closing_brackets_count=$(echo $closing_brackets_count - 1)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local closing\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ - $closing_brackets_count)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwl8nrvpo.sh: line 14: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count)\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local \n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n \
    \   local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count=0\n    local correct_brackets=0\n    local opening_count=0\n\
    \    local closing_count\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == \"$opening_bracket\" ]]; then\n     \
    \       echo \"$opening_bracket\"\n            return 0\n        fi\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"<(|)\"\n    local brackets_count=$(echo\
    \ $brackets | wc -w)\n    local opening_brackets=$(echo $1 | sed 's/\\(.*\\)/\\\
    1/')\n    local closing_brackets=$(echo $1 | sed 's/\\(.*\\)/\\1/')\n    local\
    \ opening_brackets_count=$(echo $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo\
    \ $closing_brackets | wc -w)\n    local opening_brackets_string=$(echo $opening_brackets\
    \ | sed 's/\\(.*\\)/\\1/')\n    local closing_brackets_string=$(echo $closing_brackets\
    \ | sed 's/\\(.*\\)/\\1/')\n    local opening_brackets_string_count=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_count=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_length=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_length=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_length=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_length=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_length=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_brackets_string_length=$(echo $closing_brackets_string\
    \ | wc -w)\n    local opening_brackets_string_length=$(echo $opening_brackets_string\
    \ | wc -w)\n    local closing_b\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local closing_brackets=$(echo $brackets |\
    \ awk '{print $2}')\n    local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \    local opening_brackets_sum=$(echo $opening_brackets | awk '{print $1}')\n\
    \    local closing_brackets_sum=$(echo $closing_brackets | awk '{print $1}')\n\
    \    local opening_brackets_sum_count=$(echo $opening_brackets_sum | wc -w)\n\
    \    local closing_brackets_sum_count=$(echo $closing_brackets_sum | wc -w)\n\
    \    local opening_brackets_sum_sum=$(echo $opening_brackets_sum | awk '{print\
    \ $1}')\n    local closing_brackets_sum_sum=$(echo $closing_brackets_sum | awk\
    \ '{print $1}')\n    local opening_brackets_sum_sum_count=$(echo $opening_brackets_sum_sum\
    \ | wc -w)\n    local closing_brackets_sum_sum_count=$(echo $closing_brackets_sum_sum\
    \ | wc -w)\n    local opening_brackets_sum_sum_sum=$(echo $opening_brackets_sum_sum\
    \ | awk '{print $1}')\n    local closing_brackets_sum_sum_sum=$(echo $closing_brackets_sum_sum\
    \ | awk '{print $1}')\n    local opening_brackets_sum_sum_sum_count=$(echo $opening_brackets_sum_sum_sum\
    \ | wc -w)\n    local closing_brackets_sum_sum_sum_count=$(echo $closing_brackets_sum_sum_sum\
    \ | wc -w)\n    local opening_brackets_sum_sum_sum_sum=$(echo $opening_brackets_sum_sum_sum\
    \ | awk '{print $1}')\n    local closing_brackets_sum_sum_sum_sum=$(echo $closing_brackets_sum_sum_sum\
    \ | awk '{print $1}')\n    local opening_brackets_sum_sum_sum_sum_count=$(echo\
    \ $opening_brackets_sum_sum_sum_sum | wc -w)\n    local closing_brackets_sum_sum_sum_sum_count=$(echo\
    \ $closing_brackets_sum_sum_sum_sum | wc \n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpikd5gv9q.sh: line 27: unexpected EOF while looking for matching
    `)''

    /tmp/tmpikd5gv9q.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    if [ $opening_brackets_count_correct -eq 0 ]; then\n        return\
    \ 1\n    elif [ $opening_brackets_count_correct -eq $opening_brackets_count ];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_count=$(echo $closing_brackets | wc -w)\n    local\
    \ correct_count=$(echo $opening_count + $closing_count | bc)\n    echo $correct_count\n\
    \    if [ $correct_count -eq 0 ]\n    then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_count=$(echo $closing_brackets | wc -w)\n    local\
    \ correct_count=$(echo $opening_brackets | wc -w | bc)\n    local incorrect_count=$(echo\
    \ $closing_brackets | wc -w | bc)\n    local correct_brackets=0\n    local incorrect_brackets=0\n\
    \    local correct_brackets_string=\"\"\n    local incorrect_brackets_string=\"\
    \"\n    local correct_brackets_string2=\"\"\n    local incorrect_brackets_string2=\"\
    \"\n    local correct_brackets_string3=\"\"\n    local incorrect_brackets_string3=\"\
    \"\n    local correct_brackets_string4=\"\"\n    local incorrect_brackets_string4=\"\
    \"\n    local correct_brackets_string5=\"\"\n    local incorrect_brackets_string5=\"\
    \"\n    local correct_brackets_string6=\"\"\n    local incorrect_brackets_string6=\"\
    \"\n    local correct_brackets_string7=\"\"\n    local incorrect_brackets_string7=\"\
    \"\n    local correct_brackets_string8=\"\"\n    local incorrect_brackets_string8=\"\
    \"\n    local correct_brackets_string9=\"\"\n    local incorrect_brackets_string9=\"\
    \"\n    local correct_brackets_string10=\"\"\n    local incorrect_brackets_string10=\"\
    \"\n    local correct_brackets_string11=\"\"\n    local incorrect_brackets_string11=\"\
    \"\n    local correct_brackets_string12=\"\"\n    local incorrect_brackets_string12=\"\
    \"\n    local correct_brackets_string13=\"\"\n    local incorrect_brackets_string13=\"\
    \"\n    local correct_brackets_string14=\"\"\n    local incorrect_brackets_string14=\"\
    \"\n    local correct_brackets_string15=\"\"\n    local incorrect_brackets_string15=\"\
    \"\n    local correct_brackets_string16=\"\"\n    local incorrect_brackets_string16=\"\
    \"\n    local correct_brackets_string17=\"\"\n    local incorrect_brackets_string17=\"\
    \"\n    local correct_brackets_string18=\"\"\n    local incorrect_brackets_string18=\"\
    \"\n    local correct_brackets_string19=\"\"\n    local incorrect_brackets_string19=\"\
    \"\n    local correct_bracket\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [ \"$opening_bracket\" = \"<\" ]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [ \"$opening_bracket\" = \">\" ]; then\n            opening_count=$((opening_count\
    \ - 1))\n        fi\n    done\n    for closing_bracket in $closing_brackets; do\n\
    \        if [ \"$closing_bracket\" = \"<\" ]; then\n            closing_count=$((closing_count\
    \ + 1))\n        elif [ \"$closing_bracket\" = \">\" ]; then\n            closing_count=$((closing_count\
    \ - 1))\n        fi\n    done\n    if [ \"$opening_count\" -eq \"$closing_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]; then\n        if [ $closing_brackets_count_correct -eq $closing_brackets_count\
    \ ]; then\n            echo \"All brackets are correct.\"\n            return\
    \ 0\n        else\n            echo \"There are more closing brackets than opening\
    \ brackets.\"\n            return 1\n        fi\n    else\n        echo \"There\
    \ are more opening brackets than closing brackets.\"\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ ! $closing_brackets =~ $opening_bracket ]]; then\n       \
    \     return false\n        fi\n    done\n    return true\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc68eujcu.sh: line 15: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]; then\n        if [ $closing_brackets_count_correct -eq $closing_brackets_count\
    \ ]; then\n            return 0\n        fi\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ - $closing_brackets_count)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqzuwf5qa.sh: line 14: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    local opening_count2=0\n    local closing_count2=0\n  \
    \  local opening_count3=0\n    local closing_count3=0\n    local opening_count4=0\n\
    \    local closing_count4=0\n    local opening_count5=0\n    local closing_count5=0\n\
    \    local opening_count6=0\n    local closing_count6=0\n    local opening_count7=0\n\
    \    local closing_count7=0\n    local opening_count8=0\n    local closing_count8=0\n\
    \    local opening_count9=0\n    local closing_count9=0\n    local opening_count10=0\n\
    \    local closing_count10=0\n    local opening_count11=0\n    local closing_count11=0\n\
    \    local opening_count12=0\n    local closing_count12=0\n    local opening_count13=0\n\
    \    local closing_count13=0\n    local opening_count14=0\n    local closing_count14=0\n\
    \    local opening_count15=0\n    local closing_count15=0\n    local opening_count16=0\n\
    \    local closing_count16=0\n    local opening_count17=0\n    local closing_count17=0\n\
    \    local opening_count18=0\n    local closing_count18=0\n    local opening_count19=0\n\
    \    local closing_count19=0\n    local opening_count20=0\n    local closing_count20=0\n\
    \    local opening_count21=0\n    local closing_count21=0\n    local opening_count22=0\n\
    \    local closing_count22=0\n    local opening_count23=0\n    local closing_count23=0\n\
    \    local opening_count24=0\n    local closing_count24=0\n    local opening_count25=0\n\
    \    local closing_count25=0\n    local opening_count26=0\n    local closing_count26=0\n\
    \    local opening_count27=0\n    local closing_count27=0\n    local opening_count28=0\n\
    \    local closing_count28=0\n    local opening_count29=0\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    local opening_found=0\n    local closing_found=0\n    local\
    \ opening_found2=0\n    local closing_found2=0\n    local opening_found3=0\n \
    \   local closing_found3=0\n    local opening_found4=0\n    local closing_found4=0\n\
    \    local opening_found5=0\n    local closing_found5=0\n    local opening_found6=0\n\
    \    local closing_found6=0\n    local opening_found7=0\n    local closing_found7=0\n\
    \    local opening_found8=0\n    local closing_found8=0\n    local opening_found9=0\n\
    \    local closing_found9=0\n    local opening_found10=0\n    local closing_found10=0\n\
    \    local opening_found11=0\n    local closing_found11=0\n    local opening_found12=0\n\
    \    local closing_found12=0\n    local opening_found13=0\n    local closing_found13=0\n\
    \    local opening_found14=0\n    local closing_found14=0\n    local opening_found15=0\n\
    \    local closing_found15=0\n    local opening_found16=0\n    local closing_found16=0\n\
    \    local opening_found17=0\n    local closing_found17=0\n    local opening_found18=0\n\
    \    local closing_found18=0\n    local opening_found19=0\n    local closing_found19=0\n\
    \    local opening_found20=0\n    local closing_found20=0\n    local opening_found21=0\n\
    \    local closing_found21=0\n    local opening_found22=0\n    local closing_found22=0\n\
    \    local opening_found23=0\n    local closing_found23=0\n    local opening_found24=0\n\
    \    local closing_found24=0\n    local opening_found25=0\n    local closing_found25=0\n\
    \    local opening_found26=0\n    local closing_found26=0\n    local opening_found27=0\n\
    \    local closing_found27=0\n    local opening_found28=0\n    \n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl2m83u96.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpl2m83u96.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [ \"$opening_bracket\" == \"<\" ]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [ \"$opening_bracket\" == \">\" ]; then\n            closing_count=$((closing_count\
    \ + 1))\n        fi\n    done\n    for closing_bracket in $closing_brackets; do\n\
    \        if [ \"$closing_bracket\" == \"<\" ]; then\n            closing_count=$((closing_count\
    \ + 1))\n        elif [ \"$closing_bracket\" == \">\" ]; then\n            opening_count=$((opening_count\
    \ + 1))\n        fi\n    done\n    if [ \"$opening_count\" == \"$closing_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        opening_count=$(($opening_count\
    \ + 1))\n    done\n    for closing_bracket in $closing_brackets; do\n        closing_count=$(($closing_count\
    \ + 1))\n    done\n    if [ $opening_count -ne $closing_count ]; then\n      \
    \  return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [ \"$opening_bracket\" == \"<\" ]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [ \"$opening_bracket\" == \">\" ]; then\n            closing_count=$((closing_count\
    \ + 1))\n        fi\n    done\n    if [ \"$opening_count\" -eq \"$closing_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    if [ \"$opening_brackets_count_correct\" -eq \"$opening_brackets_count\"\
    \ ] && [ \"$closing_brackets_count_correct\" -eq \"$closing_brackets_count\" ];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_count=$(echo $closing_brackets | wc -w)\n    local\
    \ correct_count=$((opening_count + closing_count))\n    local correct_brackets=0\n\
    \    for opening in $opening_brackets; do\n        local closing=$(echo $closing_brackets\
    \ | sed \"s/$opening/$closing/g\")\n        if [ \"$closing\" != \"$brackets\"\
    \ ]; then\n            correct_brackets=$((correct_brackets + 1))\n        fi\n\
    \    done\n    if [ \"$correct_brackets\" -eq \"$correct_count\" ]; then\n   \
    \     return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ - $closing_brackets_count)\n    echo $correct_bracketing_count\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local close_brackets=$(echo $brackets | awk\
    \ '{print $2}')\n    local open_brackets_count=$(echo $open_brackets | wc -w)\n\
    \    local close_brackets_count=$(echo $close_brackets | wc -w)\n    local correct_brackets=0\n\
    \    local correct_brackets_count=$(echo $open_brackets_count + $close_brackets_count)\n\
    \    for (( i=0; i<$open_brackets_count; i++ )); do\n        if [[ $open_brackets[$i]\
    \ == \"<\" ]]; then\n            if [[ $close_brackets[$i] == \">\" ]]; then\n\
    \                correct_brackets=$correct_brackets+1\n            fi\n      \
    \  fi\n    done\n    for (( i=0; i<$close_brackets_count; i++ )); do\n       \
    \ if [[ $close_brackets[$i] == \"<\" ]]; then\n            if [[ $open_brackets[$i]\
    \ == \">\" ]]; then\n                correct_brackets=$correct_brackets+1\n  \
    \          fi\n        fi\n    done\n    if [[ $correct_brackets != $correct_brackets_count\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count - $close_brackets_count)\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   if [ $open_brackets_count -eq $close_brackets_count ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"<(|)\"\n    local brackets_count=${#brackets}\n\
    \    local bracket_count=0\n    local bracket_open=false\n    local bracket_close=false\n\
    \    local bracket_open_index=0\n    local bracket_close_index=0\n    local bracket_open_string=\"\
    \"\n    local bracket_close_string=\"\"\n    local bracket_open_string_count=0\n\
    \    local bracket_close_string_count=0\n    local bracket_open_string_length=0\n\
    \    local bracket_close_string_length=0\n    local bracket_open_string_length_count=0\n\
    \    local bracket_close_string_length_count=0\n    local bracket_open_string_length_length=0\n\
    \    local bracket_close_string_length_length=0\n    local bracket_open_string_length_length_count=0\n\
    \    local bracket_close_string_length_length_count=0\n    local bracket_open_string_length_length_length=0\n\
    \    local bracket_close_string_length_length_length=0\n    local bracket_open_string_length_length_length_count=0\n\
    \    local bracket_close_string_length_length_length_count=0\n    local bracket_open_string_length_length_length_length=0\n\
    \    local bracket_close_string_length_length_length_length=0\n    local bracket_open_string_length_length_length_length_count=0\n\
    \    local bracket_close_string_length_length_length_length_count=0\n    local\
    \ bracket_open_string_length_length_length_length_length=0\n    local bracket_close_string_length_length_length_length_length=0\n\
    \    local bracket_open_string_length_length_length_length_length_count=0\n  \
    \  local bracket_close_string_length_length_length_length_length_count=0\n   \
    \ local bracket_open_string_length_length_length_length_length_length=0\n    local\
    \ bracket_close_string_length_length_length_length_length_length=0\n    local\
    \ bracket_open_string_length_length_length_length_length_length_count=0\n    local\
    \ bracket_close_string_length_length_length_length_length_length_length_count=0\n\
    \    local bracket_open_string_length_length_length_length_length_length_length_length=0\n\
    \    local bracket_close_string_length_length_length_length_length_length_length_length=0\n\
    \    local bracket_open_string_length_length_length_length_length_length_length_count=0\n\
    \    local bracket_close_string_length_length_length_length_length_length_length_count=0\n\
    \    local bracket_open_string_length_length_length_length_length_length_length_length=0\n\
    \    local bracket_close_string_length_length_length_length_length_length_\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if ! [[ \"$opening_bracket\" =~ (^|[[:space:]])\"$closing_bracket\"\
    ($|[[:space:]]) ]]; then\n            return false\n        fi\n    done\n   \
    \ return true\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx0w6j_eg.sh: line 15: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed -e 's/>//g' -e 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local open_brackets_count=$(echo $open_brackets_count | cut -d \" \" -f 1)\n\
    \    local close_brackets_count=$(echo $close_brackets_count | cut -d \" \" -f\
    \ 1)\n    local open_brackets_count=$(echo $open_brackets_count | cut -d \" \"\
    \ -f 1)\n    local close_brackets_count=$(echo $close_brackets_count | cut -d\
    \ \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count | cut\
    \ -d \" \" -f 1)\n    local close_brackets_count=$(echo $close_brackets_count\
    \ | cut -d \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count\
    \ | cut -d \" \" -f 1)\n    local close_brackets_count=$(echo $close_brackets_count\
    \ | cut -d \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count\
    \ | cut -d \" \" -f 1)\n    local close_brackets_count=$(echo $close_brackets_count\
    \ | cut -d \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count\
    \ | cut -d \" \" -f 1)\n    local close_brackets_count=$(echo $close_brackets_count\
    \ | cut -d \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count\
    \ | cut -d \" \" -f 1)\n    local close_brackets_count=$(echo $close_brackets_count\
    \ | cut -d \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count\
    \ | cut -d \" \" -f 1)\n    local close_brackets_count=$(echo $close_brackets_count\
    \ | cut -d \" \" -f 1)\n    local open_brackets_count=$(echo $open_brackets_count\
    \ | cut -d \" \" -f 1)\n    local close_b\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    local correct_bracketing_count_ok=$(echo\
    \ $correct_bracketing_count > 0)\n    local correct_bracketing_count_not_ok=$(echo\
    \ $correct_bracketing_count < 0)\n    local correct_bracketing_count_not_zero=$(echo\
    \ $correct_bracketing_count == 0)\n    local correct_bracketing_count_not_one=$(echo\
    \ $correct_bracketing_count == 1)\n    local correct_bracketing_count_not_two=$(echo\
    \ $correct_bracketing_count == 2)\n    local correct_bracketing_count_not_three=$(echo\
    \ $correct_bracketing_count == 3)\n    local correct_bracketing_count_not_four=$(echo\
    \ $correct_bracketing_count == 4)\n    local correct_bracketing_count_not_five=$(echo\
    \ $correct_bracketing_count == 5)\n    local correct_bracketing_count_not_six=$(echo\
    \ $correct_bracketing_count == 6)\n    local correct_bracketing_count_not_seven=$(echo\
    \ $correct_bracketing_count == 7)\n    local correct_bracketing_count_not_eight=$(echo\
    \ $correct_bracketing_count == 8)\n    local correct_bracketing_count_not_nine=$(echo\
    \ $correct_bracketing_count == 9)\n    local correct_bracketing_count_not_ten=$(echo\
    \ $correct_bracketing_count == 10)\n    local correct_bracketing_count_not_eleven=$(echo\
    \ $correct_bracketing_count == 11)\n    local correct_bracketing_count_not_twelve=$(echo\
    \ $correct_bracketing_count == 12)\n    local correct_bracketing_count_not_thirteen=$(echo\
    \ $correct_bracketing_count == 13)\n    local correct_bracketing_count_not_fourteen=$(echo\
    \ $correct_bracketing_count == 14)\n    local correct_bracketing_count_not_fifteen=$(echo\
    \ $correct_bracketing_count == 15)\n    local correct_bracketing_count_not_sixteen=$(echo\
    \ $correct_bracketing_count == 16)\n    local correct_bracketing_count_not_seventeen=$(echo\
    \ $correct_bracketing_count == 17)\n    local correct_bracketing_count_not_eighteen=$(echo\
    \ $correct_bracketing_count == 18)\n    local correct_bracketing_count_not_nineteen=$(echo\
    \ $correct_bracketing_count == 19)\n    local correct_bracketing_count_not_twenty=$(echo\
    \ $\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp42mpadmi.sh: line 35: unexpected EOF while looking for matching
    `)''

    /tmp/tmp42mpadmi.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count)\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local \n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local opening_brackets=$(echo\
    \ \"$brackets\" | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ \"$brackets\" | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ \"$opening_brackets\" | wc -w)\n    local closing_brackets_count=$(echo \"$closing_brackets\"\
    \ | wc -w)\n    if [ \"$opening_brackets_count\" -eq \"$closing_brackets_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count=$(echo $opening_brackets_count -\
    \ $closing_brackets_count)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count + 1)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count + 1)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local opening_brackets_count=$(echo\
    \ $opening_brackets_count + 1)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count + 1)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count + 1)\n    local opening_brackets_count=$(echo\
    \ $opening_brackets_count - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ + 1)\n    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count + 1)\n    local\
    \ opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local opening_brackets_count=$(echo\
    \ $opening_brackets_count + 1)\n    local opening_brackets_count=$(echo $opening_brackets_count\
    \ - 1)\n    local opening_brackets_count=$(echo $opening_brackets_count + 1)\n\
    \    local opening_brackets_count=$(echo $opening_brackets_count - 1)\n    local\
    \ opening_brackets_count=$(echo $opening_bra\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9osur2rv.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmp9osur2rv.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]\n    then\n        echo \"$opening_brackets_count opening brackets have a\
    \ corresponding closing bracket\"\n        echo \"$opening_brackets_count_correct\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$closing_brackets_count_correct\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$opening_brackets_count_correct\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count_correct\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$opening_brackets_count\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$opening_brackets_count_correct\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count_correct\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$opening_brackets_count\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$opening_brackets_count_correct\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count_correct\
    \ closing brackets have a corresponding opening bracket\"\n        echo \"$opening_brackets_count\
    \ opening brackets have a corresponding closing bracket\"\n        echo \"$closing_brackets_count\
    \ closing brackets \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2u1d0jn3.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2u1d0jn3.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]\n    then\n        echo \"$brackets has correct number of opening brackets\"\
    \n        return $opening_brackets_count_correct == $closing_brackets_count_correct\n\
    \    else\n        echo \"$brackets has incorrect number of opening brackets\"\
    \n        return $opening_brackets_count_correct != $closing_brackets_count_correct\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsyfwncx5.sh: line 22: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n  local closing_brackets=$(echo $brackets | awk\
    \ '{print $2}')\n  for opening_bracket in $opening_brackets; do\n    local closing_bracket=$(echo\
    \ $closing_brackets | grep \"$opening_bracket\")\n    if [ -z \"$closing_bracket\"\
    \ ]; then\n      return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    for open_bracket in $open_brackets; do\n\
    \        if [[ $open_bracket != $close_brackets ]]; then\n            return false\n\
    \        fi\n    done\n    return true\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp95vrpu6o.sh: line 15: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ \"$opening_bracket\" == \"<\" ]]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [[ \"$opening_bracket\" == \">\" ]]; then\n            closing_count=$((closing_count\
    \ + 1))\n        fi\n    done\n    if [[ \"$opening_count\" == \"$closing_count\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n  local close_brackets_count=$(echo $close_brackets | wc -w)\n  local\
    \ correct_brackets=0\n  local open_brackets_count_correct=0\n  local close_brackets_count_correct=0\n\
    \  local open_brackets_count_correct2=0\n  local close_brackets_count_correct2=0\n\
    \  local open_brackets_count_correct3=0\n  local close_brackets_count_correct3=0\n\
    \  local open_brackets_count_correct4=0\n  local close_brackets_count_correct4=0\n\
    \  local open_brackets_count_correct5=0\n  local close_brackets_count_correct5=0\n\
    \  local open_brackets_count_correct6=0\n  local close_brackets_count_correct6=0\n\
    \  local open_brackets_count_correct7=0\n  local close_brackets_count_correct7=0\n\
    \  local open_brackets_count_correct8=0\n  local close_brackets_count_correct8=0\n\
    \  local open_brackets_count_correct9=0\n  local close_brackets_count_correct9=0\n\
    \  local open_brackets_count_correct10=0\n  local close_brackets_count_correct10=0\n\
    \  local open_brackets_count_correct11=0\n  local close_brackets_count_correct11=0\n\
    \  local open_brackets_count_correct12=0\n  local close_brackets_count_correct12=0\n\
    \  local open_brackets_count_correct13=0\n  local close_brackets_count_correct13=0\n\
    \  local open_brackets_count_correct14=0\n  local close_brackets_count_correct14=0\n\
    \  local open_brackets_count_correct15=0\n  local close_brackets_count_correct15=0\n\
    \  local open_brackets_count_correct16=0\n  local close_brackets_count_correct16=0\n\
    \  local open_brackets_count_correct17=0\n  local close_brackets_count_correct17=0\n\
    \  \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local closing_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n  local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \  local correct_bracketing_count=$(echo $opening_brackets_count + $closing_brackets_count\
    \ | bc)\n  echo $correct_bracketing_count\n  if [ $correct_bracketing_count -eq\
    \ 0 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n    local opening_brackets=$(echo\
    \ \"${brackets}\" | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ \"${brackets}\" | sed 's/>//g' | sed 's/<//g')\n    local correct_brackets=0\n\
    \    for opening_bracket in ${opening_brackets}; do\n        local closing_bracket=${closing_brackets:0:1}\n\
    \        if [ \"${opening_bracket}\" != \"${closing_bracket}\" ]; then\n     \
    \       correct_brackets=1\n        fi\n    done\n    return ${correct_brackets}\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == \"$opening_bracket\" ]]; then\n     \
    \       return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ \"$closing_brackets\" != *\"$opening_bracket\"* ]]; then\n\
    \            return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed -e 's/>//g' -e 's/<//g')\n    for open_bracket in $open_brackets; do\n\
    \        if [[ ! $close_brackets =~ $open_bracket ]]; then\n            return\
    \ 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   if [ $open_brackets_count -eq $close_brackets_count ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ $opening_bracket == $closing_brackets ]]; then\n            opening_count=$((opening_count\
    \ + 1))\n        else\n            closing_count=$((closing_count + 1))\n    \
    \    fi\n    done\n    if [[ $opening_count -eq 0 && $closing_count -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq 0 ]; then\n        echo\
    \ \"$brackets has no opening brackets.\"\n        return 1\n    fi\n    if [ $closing_brackets_count_correct\
    \ -eq 0 ]; then\n        echo \"$brackets has no closing brackets.\"\n       \
    \ return 1\n    fi\n    if [ $opening_brackets_count_correct -eq $closing_brackets_count_correct\
    \ ]; then\n        echo \"$brackets has correct number of opening brackets.\"\n\
    \        return 0\n    fi\n    echo \"$brackets has incorrect number of opening\
    \ brackets.\"\n    return 1\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    local correct_bracketing_count_ok=$(echo $correct_bracketing_count\
    \ -eq 0)\n    local correct_bracketing_count_not_ok=$(echo $correct_bracketing_count\
    \ -gt 0)\n    local correct_bracketing_count_not_ok=$(echo $correct_bracketing_count\
    \ -lt 0)\n    if [[ $correct_bracketing_count_ok == 0 ]]; then\n        echo \"\
    brackets $brackets has incorrect number of opening brackets\"\n        echo \"\
    open_brackets $open_brackets\"\n        echo \"close_brackets $close_brackets\"\
    \n        echo \"open_brackets_count $open_brackets_count\"\n        echo \"close_brackets_count\
    \ $close_brackets_count\"\n        echo \"correct_bracketing_count $correct_bracketing_count\"\
    \n        echo \"correct_bracketing_count_ok $correct_bracketing_count_ok\"\n\
    \        echo \"correct_bracketing_count_not_ok $correct_bracketing_count_not_ok\"\
    \n        exit 1\n    elif [[ $correct_bracketing_count_not_ok == 0 ]]; then\n\
    \        echo \"brackets $brackets has incorrect number of closing brackets\"\n\
    \        echo \"open_brackets $open_brackets\"\n        echo \"close_brackets\
    \ $close_brackets\"\n        echo \"open_brackets_count $open_brackets_count\"\
    \n        echo \"close_brackets_count $close_brackets_count\"\n        echo \"\
    correct_bracketing_count $correct_bracketing_count\"\n        echo \"correct_bracketing_count_ok\
    \ $correct_bracketing_count_ok\"\n        echo \"correct_bracketing_count_not_ok\
    \ $correct_bracketing_count_not_ok\"\n        exit 1\n    elif [[ $correct_bracketing_count_not_ok\
    \ == 1 ]]; then\n        echo \"brackets $brackets has incorrect number of closing\
    \ brackets\"\n        echo \"open_brackets $open_brackets\"\n        echo \"close_brackets\
    \ $close_brackets\"\n        echo \"open_brackets_count $open_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdboh6z6h.sh: line 60: unexpected EOF while looking for matching
    `"''

    /tmp/tmpdboh6z6h.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_count=$(echo $closing_brackets | wc -w)\n    local\
    \ correct_count=$((opening_count + closing_count))\n    local correct_brackets=$(echo\
    \ $opening_brackets | sed 's/<//g' | sed 's/>//g')\n    local correct_brackets_count=$(echo\
    \ $correct_brackets | wc -w)\n    local correct_brackets_string=$(echo $correct_brackets\
    \ | sed 's/ //g')\n    local correct_brackets_string_count=$(echo $correct_brackets_string\
    \ | wc -w)\n    local correct_brackets_string_count=$((correct_brackets_string_count\
    \ - 1))\n    if [ $correct_brackets_count -eq 0 ]; then\n        return 0\n  \
    \  elif [ $correct_brackets_count -eq 1 ]; then\n        return 1\n    elif [\
    \ $correct_brackets_count -eq 2 ]; then\n        return 0\n    elif [ $correct_brackets_count\
    \ -eq 3 ]; then\n        return 1\n    elif [ $correct_brackets_count -eq 4 ];\
    \ then\n        return 0\n    elif [ $correct_brackets_count -eq 5 ]; then\n \
    \       return 1\n    elif [ $correct_brackets_count -eq 6 ]; then\n        return\
    \ 0\n    elif [ $correct_brackets_count -eq 7 ]; then\n        return 1\n    elif\
    \ [ $correct_brackets_count -eq 8 ]; then\n        return 0\n    elif [ $correct_brackets_count\
    \ -eq 9 ]; then\n        return 1\n    elif [ $correct_brackets_count -eq 10 ];\
    \ then\n        return 0\n    elif [ $correct_brackets_count -eq 11 ]; then\n\
    \        return 1\n    elif [ $correct_brackets_count -eq 12 ]; then\n       \
    \ return 0\n    elif [ $correct_brackets_count -eq 13 ]; then\n        return\
    \ 1\n    elif [ $correct_brackets_count -eq 14 ]; then\n        return 0\n   \
    \ elif [ $correct_brackets_count -eq 15 ]; then\n        return 1\n    elif [\
    \ $correct_brackets_count -eq 16 ]; then\n        return 0\n    elif [ $correct_brackets_count\
    \ -eq 17 ]; then\n        return 1\n    elif [ $correct_brackets_count -eq 18\
    \ ]; then\n        return 0\n    elif [ $correct_brackets_count -eq 19 ]; then\n\
    \        return 1\n    elif [ $correct_brackets_count -eq 20 ]; then\n       \
    \ return 0\n    elif [ $correct_brackets_count -eq 21 ]; then\n\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfs0mzt8n.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmpfs0mzt8n.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    if [ $correct_bracketing_count -eq 0 ]\n\
    \    then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ $opening_bracket == \\> ]]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [[ $opening_bracket == \\< ]]; then\n            opening_count=$((opening_count\
    \ - 1))\n        fi\n    done\n    for closing_bracket in $closing_brackets; do\n\
    \        if [[ $closing_bracket == \\> ]]; then\n            closing_count=$((closing_count\
    \ + 1))\n        elif [[ $closing_bracket == \\< ]]; then\n            closing_count=$((closing_count\
    \ - 1))\n        fi\n    done\n    if [[ $opening_count -eq 0 && $closing_count\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local closing_brackets=$(echo $brackets |\
    \ awk '{print $2}')\n    local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \    local correct_bracketing_count=$(echo $opening_brackets_count - $closing_brackets_count)\n\
    \    if [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqph9db18.sh: line 13: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        local closing_bracket=$(echo $closing_brackets | grep $opening_bracket)\n\
    \        if [ -z \"$closing_bracket\" ]; then\n            return false\n    \
    \    fi\n    done\n    return true\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa1jba568.sh: line 16: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   if [ $open_brackets_count -eq $close_brackets_count ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count=$(echo $opening_brackets_count |\
    \ bc)\n    local closing_brackets_count=$(echo $closing_brackets_count | bc)\n\
    \    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n      \
    \  return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n    local opening_brackets=\"\
    ${brackets//<}\"\n    local closing_brackets=\"${brackets//>}\"\n    local opening_count=0\n\
    \    local closing_count=0\n    for opening in \"${opening_brackets}\"; do\n \
    \       opening_count=$((opening_count + 1))\n    done\n    for closing in \"\
    ${closing_brackets}\"; do\n        closing_count=$((closing_count + 1))\n    done\n\
    \    if [ \"${opening_count}\" -eq \"${closing_count}\" ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    if [ $opening_brackets_count_correct -eq 0 ]; then\n        echo\
    \ \"opening_brackets_count_correct=0\"\n        return 1\n    fi\n    if [ $closing_brackets_count_correct\
    \ -eq 0 ]; then\n        echo \"closing_brackets_count_correct=0\"\n        return\
    \ 1\n    fi\n    if [ $opening_brackets_count_correct -eq $closing_brackets_count_correct\
    \ ]; then\n        echo \"opening_brackets_count_correct=$opening_brackets_count_correct\
    \ closing_brackets_count_correct=$closing_brackets_count_correct\"\n        return\
    \ 0\n    fi\n    if [ $opening_brackets_count_correct -eq 1 ]; then\n        echo\
    \ \"opening_brackets_count_correct=$opening_brackets_count_correct closing_brackets_count_correct=$closing_brackets_count_correct\"\
    \n        return 0\n    fi\n    if [ $closing_brackets_count_correct -eq 1 ];\
    \ then\n        echo \"opening_brackets_count_correct=$opening_brackets_count_correct\
    \ closing_brackets_count_correct=$closing_brackets_count_correct\"\n        return\
    \ 0\n    fi\n    if [ $opening_brackets_count_correct -eq 2 ]; then\n        echo\
    \ \"opening_brackets_count_correct=$opening_brackets_count_correct closing_brackets_count_correct\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpih6396ax.sh: line 59: unexpected EOF while looking for matching
    `"''

    /tmp/tmpih6396ax.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count - $close_brackets_count)\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n    local correct_bracketing_count\n    local\
    \ correct_bracketing_count\n    local correct_bracketing_count\n    local correct_bracketing_count\n\
    \    local correct_bracketing_count\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpemkzy36h.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpemkzy36h.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]; then\n        echo \"$brackets has correct number of opening brackets.\"\n\
    \        return 1\n    else\n        echo \"$brackets has incorrect number of\
    \ opening brackets.\"\n        return 0\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ - $closing_brackets_count)\n    echo $correct_bracketing_count\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -eq 0 ]; then\n        echo \"$brackets\"\
    \ | sed 's/<//g' | sed 's/>//g'\n        return 0\n    fi\n    if [ $closing_brackets_count\
    \ -eq 0 ]; then\n        echo \"$brackets\" | sed 's/>//g' | sed 's/<//g'\n  \
    \      return 0\n    fi\n    if [ $opening_brackets_count -gt $closing_brackets_count\
    \ ]; then\n        echo \"$brackets\" | sed 's/<//g' | sed 's/>//g'\n        return\
    \ 0\n    fi\n    if [ $opening_brackets_count -lt $closing_brackets_count ]; then\n\
    \        echo \"$brackets\" | sed 's/>//g' | sed 's/<//g'\n        return 0\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl2m83u96.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpl2m83u96.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $opening_bracket != $closing_brackets ]]; then\n         \
    \   return false\n        fi\n    done\n    return true\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg93llm6n.sh: line 15: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq $closing_brackets_count\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        opening_count=$(echo\
    \ $opening_bracket | wc -c)\n        if [ $opening_count -eq 0 ]; then\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n            echo \"$opening_count\"\n     \
    \       echo \"$closing_bracket\"\n            echo \"$closing_count\"\n     \
    \       echo \"$opening_bracket\"\n\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptmgeq0gq.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmptmgeq0gq.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ] && \\\n       [ $closing_brackets_count_correct -eq $closing_brackets_count\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ \"$opening_brackets_count\" -eq \"$closing_brackets_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -eq 0 ]; then\n        echo \"$brackets\
    \ has no opening brackets\"\n        return 1\n    elif [ $closing_brackets_count\
    \ -eq 0 ]; then\n        echo \"$brackets has no closing brackets\"\n        return\
    \ 1\n    elif [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        echo \"$brackets has mismatched brackets\"\n        return 1\n    else\n\
    \        return 0\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n    local opening_brackets=\"\
    ${brackets//<}\"\n    local closing_brackets=\"${brackets//>}\"\n    local opening_brackets_count=$(echo\
    \ \"${opening_brackets}\" | wc -w)\n    local closing_brackets_count=$(echo \"\
    ${closing_brackets}\" | wc -w)\n    local correct_bracketing=0\n    if [ \"${opening_brackets_count}\"\
    \ -eq \"${closing_brackets_count}\" ]; then\n        correct_bracketing=1\n  \
    \  fi\n    return ${correct_bracketing}\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local open_brackets_count_correct=$(echo $open_brackets_count | bc)\n    local\
    \ close_brackets_count_correct=$(echo $close_brackets_count | bc)\n    local open_brackets_count_correct=$((open_brackets_count_correct\
    \ + 1))\n    local close_brackets_count_correct=$((close_brackets_count_correct\
    \ + 1))\n    local open_brackets_count_correct=$((open_brackets_count_correct\
    \ - 1))\n    local close_brackets_count_correct=$((close_brackets_count_correct\
    \ - 1))\n    if [ $open_brackets_count_correct -eq 0 ]; then\n        echo \"\
    $brackets has no matching closing bracket\"\n        return 1\n    fi\n    if\
    \ [ $close_brackets_count_correct -eq 0 ]; then\n        echo \"$brackets has\
    \ no matching opening bracket\"\n        return 1\n    fi\n    if [ $open_brackets_count_correct\
    \ -eq $close_brackets_count_correct ]; then\n        echo \"$brackets has no matching\
    \ brackets\"\n        return 1\n    fi\n    if [ $open_brackets_count_correct\
    \ -lt $close_brackets_count_correct ]; then\n        echo \"$brackets has too\
    \ many matching brackets\"\n        return 1\n    fi\n    if [ $open_brackets_count_correct\
    \ -gt $close_brackets_count_correct ]; then\n        echo \"$brackets has too\
    \ many matching brackets\"\n        return 1\n    fi\n    return 0\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local opening_brackets=\"\
    $(echo \"$brackets\" | sed 's/<//g' | sed 's/>//g')\"\n  local closing_brackets=\"\
    $(echo \"$brackets\" | sed 's/>//g' | sed 's/<//g')\"\n  local opening_brackets_count=$(echo\
    \ \"$opening_brackets\" | wc -w)\n  local closing_brackets_count=$(echo \"$closing_brackets\"\
    \ | wc -w)\n  local correct_bracketing_count=$(echo \"$opening_brackets\" | sed\
    \ 's/<//g' | sed 's/>//g' | wc -w)\n  local correct_bracketing_count_2=$(echo\
    \ \"$closing_brackets\" | sed 's/<//g' | sed 's/>//g' | wc -w)\n  local correct_bracketing_count_3=$(echo\
    \ \"$opening_brackets\" | sed 's/<//g' | sed 's/>//g' | sed 's/,//g' | wc -w)\n\
    \  local correct_bracketing_count_4=$(echo \"$closing_brackets\" | sed 's/<//g'\
    \ | sed 's/>//g' | sed 's/,//g' | wc -w)\n  local correct_bracketing_count_5=$(echo\
    \ \"$opening_brackets\" | sed 's/<//g' | sed 's/>//g' | sed 's/,//g' | sed 's/;//g'\
    \ | wc -w)\n  local correct_bracketing_count_6=$(echo \"$closing_brackets\" |\
    \ sed 's/<//g' | sed 's/>//g' | sed 's/,//g' | sed 's/;//g' | wc -w)\n  local\
    \ correct_bracketing_count_7=$(echo \"$opening_brackets\" | sed 's/<//g' | sed\
    \ 's/>//g' | sed 's/,//g' | sed 's/;//g' | sed 's/://g' | wc -w)\n  local correct_bracketing_count_8=$(echo\
    \ \"$closing_brackets\" | sed 's/<//g' | sed 's/>//g' | sed 's/,//g' | sed 's/;//g'\
    \ | sed 's/://g' | wc -w)\n  local correct_bracketing_count_9=$(echo \"$opening_brackets\"\
    \ | sed 's/<//g' | sed 's/>//g' | sed '\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9e6s9xk8.sh: line 20: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9e6s9xk8.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ \"$opening_bracket\" == \"<\" ]]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [[ \"$opening_bracket\" == \">\" ]]; then\n            closing_count=$((closing_count\
    \ + 1))\n        fi\n    done\n    if [ \"$opening_count\" -eq \"$closing_count\"\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [[ $opening_bracket == \\> ]]; then\n            opening_count=$((opening_count\
    \ + 1))\n        elif [[ $opening_bracket == \\< ]]; then\n            opening_count=$((opening_count\
    \ - 1))\n        fi\n    done\n    for closing_bracket in $closing_brackets; do\n\
    \        if [[ $closing_bracket == \\> ]]; then\n            closing_count=$((closing_count\
    \ + 1))\n        elif [[ $closing_bracket == \\< ]]; then\n            closing_count=$((closing_count\
    \ - 1))\n        fi\n    done\n    if [[ $opening_count -eq 0 && $closing_count\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    if [ $correct_bracketing_count -eq 0 ];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -eq 0 ]; then\n        return 0\n\
    \    elif [ $closing_brackets_count -eq 0 ]; then\n        return 0\n    elif\
    \ [ $opening_brackets_count -ne $closing_brackets_count ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        local closing_bracket=$(echo $closing_brackets | sed \"s/$opening_bracket//g\"\
    )\n        if [ \"$closing_bracket\" != \"\" ]; then\n            return 1\n \
    \       fi\n    done\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl2m83u96.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpl2m83u96.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local closing_brackets=$(echo $brackets |\
    \ awk '{print $2}')\n    local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \    local opening_brackets_length=$(echo $opening_brackets | wc -l)\n    local\
    \ closing_brackets_length=$(echo $closing_brackets | wc -l)\n    local opening_brackets_length=$(echo\
    \ $opening_brackets | wc -l)\n    local closing_brackets_length=$(echo $closing_brackets\
    \ | wc -l)\n    local opening_brackets_length=$(echo $opening_brackets | wc -l)\n\
    \    local closing_brackets_length=$(echo $closing_brackets | wc -l)\n    local\
    \ opening_brackets_length=$(echo $opening_brackets | wc -l)\n    local closing_brackets_length=$(echo\
    \ $closing_brackets | wc -l)\n    local opening_brackets_length=$(echo $opening_brackets\
    \ | wc -l)\n    local closing_brackets_length=$(echo $closing_brackets | wc -l)\n\
    \    local opening_brackets_length=$(echo $opening_brackets | wc -l)\n    local\
    \ closing_brackets_length=$(echo $closing_brackets | wc -l)\n    local opening_brackets_length=$(echo\
    \ $opening_brackets | wc -l)\n    local closing_brackets_length=$(echo $closing_brackets\
    \ | wc -l)\n    local opening_brackets_length=$(echo $opening_brackets | wc -l)\n\
    \    local closing_brackets_length=$(echo $closing_brackets | wc -l)\n    local\
    \ opening_brackets_length=$(echo $opening_brackets | wc -l)\n    local closing_brackets_length=$(echo\
    \ $closing_brackets | wc -l)\n    local opening_brackets_length=$(echo $opening_brackets\
    \ | wc -l)\n    local closing_brackets_length=$(echo $closing_brackets | wc -l)\n\
    \    local opening_bracket\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]\n    then\n        if [ $closing_brackets_count_correct -eq $closing_brackets_count\
    \ ]\n        then\n            return 1\n        else\n            return 0\n\
    \        fi\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq $closing_brackets_count_correct\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n    local opening_brackets=\"\
    ${brackets//<}\"\n    local closing_brackets=\"${brackets//>}\"\n    local opening_brackets_count=$(echo\
    \ \"${opening_brackets}\" | wc -w)\n    local closing_brackets_count=$(echo \"\
    ${closing_brackets}\" | wc -w)\n    local correct_bracketing_count=$(echo \"${opening_brackets_count}\"\
    \ \\\n                                         \"-${closing_brackets_count}\"\
    \ \\\n                                         \"+1\" \\\n                   \
    \                      \"-1\")\n    local correct_bracketing\n    if [[ ${correct_bracketing_count}\
    \ -eq 0 ]]; then\n        correct_bracketing=0\n    else\n        correct_bracketing=1\n\
    \    fi\n    return ${correct_bracketing}\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local open_brackets_count_correct=$(echo $open_brackets_count | bc)\n    local\
    \ close_brackets_count_correct=$(echo $close_brackets_count | bc)\n    local open_brackets_count_correct=$(($open_brackets_count_correct\
    \ - 1))\n    local close_brackets_count_correct=$(($close_brackets_count_correct\
    \ - 1))\n    if [ \"$open_brackets_count_correct\" -eq \"$open_brackets_count\"\
    \ ] && [ \"$close_brackets_count_correct\" -eq \"$close_brackets_count\" ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == *$opening_bracket* ]]; then\n       \
    \     return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n  local closing_brackets=$(echo $brackets\
    \ | sed -e 's/>//g' -e 's/<//g')\n  local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n  local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \  local opening_brackets_count_correct=$(echo $opening_brackets_count | bc)\n\
    \  local closing_brackets_count_correct=$(echo $closing_brackets_count | bc)\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct - 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct - 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct - 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct - 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct - 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct - 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct - 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct - 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$(($opening_brackets_count_correct - 1))\n\
    \  local closing_brackets_count_correct=$(($closing_brackets_count_correct - 1))\n\
    \  local opening_brackets_count_correct=$(($open\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkvv1qeld.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkvv1qeld.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed -e 's/>//g' -e 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   if [ $open_brackets_count -eq $close_brackets_count ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets =~ $opening_bracket ]]; then\n         \
    \   echo \"$opening_bracket\"\n        else\n            echo \"false\"\n    \
    \    fi\n    done\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$((opening_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpemkzy36h.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpemkzy36h.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count - $close_brackets_count)\n\
    \    echo $correct_bracketing_count\n    if [ $correct_bracketing_count -eq 0\
    \ ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmemzkq95.sh: line 14: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    echo $correct_bracketing_count\n    if [ $correct_bracketing_count\
    \ -eq 0 ]\n    then\n        return 0\n    else\n        return 1\n    fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [ $opening_bracket == $closing_brackets ]; then\n            opening_count=$((opening_count\
    \ + 1))\n        else\n            closing_count=$((closing_count + 1))\n    \
    \    fi\n    done\n    if [ $opening_count -eq 0 ]; then\n        echo \"$brackets\
    \ has no matching closing bracket\"\n        return 1\n    else\n        echo\
    \ \"$brackets has $opening_count opening bracket(s) and $closing_count closing\
    \ bracket(s)\"\n        return 0\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        echo \"$brackets has $opening_brackets_count opening brackets and $closing_brackets_count\
    \ closing brackets.\"\n        return 1\n    else\n        return 0\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]\n    then\n        if [ $closing_brackets_count_correct -eq $closing_brackets_count\
    \ ]\n        then\n            return 0\n        else\n            return 1\n\
    \        fi\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n  local close_brackets_count=$(echo $close_brackets | wc -w)\n  local\
    \ correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n  echo $correct_bracketing_count\n  [ $correct_bracketing_count -eq 0\
    \ ]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == \"$opening_bracket\" ]]; then\n     \
    \       echo \"$opening_bracket\"\n            return 1\n        fi\n    done\n\
    \    echo \"0\"\n    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == \"$opening_bracket\" ]]; then\n     \
    \       return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_brackets=0\n    if [ $open_brackets_count -eq $close_brackets_count\
    \ ]; then\n        correct_brackets=1\n    fi\n    return $correct_brackets\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    local opening_found=0\n    local closing_found=0\n    local\
    \ opening_found2=0\n    local closing_found2=0\n    local opening_found3=0\n \
    \   local closing_found3=0\n    local opening_found4=0\n    local closing_found4=0\n\
    \    local opening_found5=0\n    local closing_found5=0\n    local opening_found6=0\n\
    \    local closing_found6=0\n    local opening_found7=0\n    local closing_found7=0\n\
    \    local opening_found8=0\n    local closing_found8=0\n    local opening_found9=0\n\
    \    local closing_found9=0\n    local opening_found10=0\n    local closing_found10=0\n\
    \    local opening_found11=0\n    local closing_found11=0\n    local opening_found12=0\n\
    \    local closing_found12=0\n    local opening_found13=0\n    local closing_found13=0\n\
    \    local opening_found14=0\n    local closing_found14=0\n    local opening_found15=0\n\
    \    local closing_found15=0\n    local opening_found16=0\n    local closing_found16=0\n\
    \    local opening_found17=0\n    local closing_found17=0\n    local opening_found18=0\n\
    \    local closing_found18=0\n    local opening_found19=0\n    local closing_found19=0\n\
    \    local opening_found20=0\n    local closing_found20=0\n    local opening_found21=0\n\
    \    local closing_found21=0\n    local opening_found22=0\n    local closing_found22=0\n\
    \    local opening_found23=0\n    local closing_found23=0\n    local opening_found24=0\n\
    \    local closing_found24=0\n    local opening_found25=0\n    local closing_found25=0\n\
    \    local opening_found26=0\n    local closing_found26=0\n    local opening_found27=0\n\
    \    local closing_found27=0\n    local opening_found28=0\n    \n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening in $opening_brackets;\
    \ do\n        if [[ $opening = *\">\"* ]]; then\n            local closing=\"\
    $closing_brackets\"\n            local opening_brackets=$(echo $opening | sed\
    \ 's/>//g' | sed 's/<//g')\n            local closing_brackets=$(echo $closing\
    \ | sed 's/>//g' | sed 's/<//g')\n            for closing in $closing_brackets;\
    \ do\n                if [[ $closing = *\">\"* ]]; then\n                    local\
    \ opening_brackets=$(echo $opening | sed 's/>//g' | sed 's/<//g')\n          \
    \          local closing_brackets=$(echo $closing | sed 's/>//g' | sed 's/<//g')\n\
    \                    for opening in $opening_brackets; do\n                  \
    \      if [[ $opening = *\">\"* ]]; then\n                            local closing_brackets=$(echo\
    \ $closing | sed 's/>//g' | sed 's/<//g')\n                            for closing\
    \ in $closing_brackets; do\n                                if [[ $closing = *\"\
    >\"* ]]; then\n                                    return 0\n                \
    \                fi\n                            done\n                      \
    \  fi\n                    done\n                fi\n            done\n      \
    \  fi\n    done\n    return 1\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    if [ $opening_brackets_count -ne $closing_brackets_count ]; then\n\
    \        echo \"$brackets has incorrect number of opening brackets.\"\n      \
    \  return 1\n    fi\n    for opening_bracket in $opening_brackets; do\n      \
    \  if [ $opening_bracket != $closing_brackets ]; then\n            echo \"$brackets\
    \ has incorrect number of closing brackets.\"\n            return 1\n        fi\n\
    \    done\n    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening in $opening_brackets;\
    \ do\n        if [[ $closing == $opening ]]; then\n            echo \"$opening\
    \ is a correct bracket\"\n        else\n            echo \"$opening is not a correct\
    \ bracket\"\n        fi\n    done\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"${1}\"\n  local opening_brackets=\"\
    $(echo \"${brackets}\" | sed 's/<//g' | sed 's/>//g')\"\n  local closing_brackets=\"\
    $(echo \"${brackets}\" | sed 's/>//g' | sed 's/<//g')\"\n  local opening_count=\"\
    $(echo \"${opening_brackets}\" | wc -c)\"\n  local closing_count=\"$(echo \"${closing_brackets}\"\
    \ | wc -c)\"\n  local all_opening_brackets=\"$(echo \"${opening_brackets}\" |\
    \ sort | uniq)\"\n  local all_closing_brackets=\"$(echo \"${closing_brackets}\"\
    \ | sort | uniq)\"\n  local all_opening_count=\"$(echo \"${all_opening_brackets}\"\
    \ | wc -c)\"\n  local all_closing_count=\"$(echo \"${all_closing_brackets}\" |\
    \ wc -c)\"\n  local all_count=\"$(echo \"${all_opening_brackets}\" | wc -c)\"\n\
    \  local all_opening_count=\"$(echo \"${all_opening_brackets}\" | wc -c)\"\n \
    \ local all_closing_count=\"$(echo \"${all_closing_brackets}\" | wc -c)\"\n  local\
    \ all_count=\"$(echo \"${all_opening_brackets}\" | wc -c)\"\n  local all_opening_count=\"\
    $(echo \"${all_opening_brackets}\" | wc -c)\"\n  local all_closing_count=\"$(echo\
    \ \"${all_closing_brackets}\" | wc -c)\"\n  local all_count=\"$(echo \"${all_opening_brackets}\"\
    \ | wc -c)\"\n  local all_opening_count=\"$(echo \"${all_opening_brackets}\" |\
    \ wc -c)\"\n  local all_closing_count=\"$(echo \"${all_closing_brackets}\" | wc\
    \ -c)\"\n  local all_count=\"$(echo \"${all_opening_brackets}\" | wc -c)\"\n \
    \ local all_opening_count=\"$(echo \"${all_opening_brackets}\" | wc -c)\"\n  local\
    \ all_closing_count=\"$(echo \"${all_closing_brackets}\" | wc -c)\"\n  local all_count=\"\
    $(echo \"${all_opening_brackets}\" | wc -c)\"\n  local all_opening_count=\"$(echo\
    \ \"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi7ec3880.sh: line 49: unexpected EOF while looking for matching
    `"''

    /tmp/tmpi7ec3880.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    local opening_count2=0\n    local closing_count2=0\n  \
    \  for opening in $opening_brackets; do\n        opening_count=$(($opening_count\
    \ + 1))\n    done\n    for closing in $closing_brackets; do\n        closing_count=$(($closing_count\
    \ + 1))\n    done\n    for opening in $opening_brackets; do\n        for closing\
    \ in $closing_brackets; do\n            if [ \"$opening\" == \"$closing\" ]; then\n\
    \                opening_count2=$(($opening_count2 + 1))\n            fi\n   \
    \     done\n    done\n    if [ \"$opening_count\" -eq \"$opening_count2\" ]; then\n\
    \        return 1\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count\
    \ | bc)\n    local correct_bracketing_true=$(echo $correct_bracketing_count |\
    \ bc)\n    local correct_bracketing_false=$(echo $open_brackets_count - $close_brackets_count\
    \ | bc)\n    local correct_bracketing_false_string=$(echo $correct_bracketing_false\
    \ | sed 's/^/false/' | sed 's/$/true/')\n    local correct_bracketing_true_string=$(echo\
    \ $correct_bracketing_true | sed 's/^/true/' | sed 's/$/false/')\n    if [ $correct_bracketing_true_string\
    \ == \"true\" ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    return $correct_bracketing_count == 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmw8bhsv.sh: line 13: return: too many arguments

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_count=0\n    local\
    \ closing_count=0\n    for opening_bracket in $opening_brackets; do\n        if\
    \ [ \"$opening_bracket\" == \"<\" ]; then\n            opening_count=$((opening_count+1))\n\
    \        elif [ \"$opening_bracket\" == \">\" ]; then\n            closing_count=$((closing_count+1))\n\
    \        fi\n    done\n    if [ \"$opening_count\" -eq \"$closing_count\" ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | awk '{print $1}')\n    local close_brackets=$(echo $brackets | awk\
    \ '{print $2}')\n    for open_bracket in $open_brackets; do\n        if [[ $open_bracket\
    \ != $close_brackets ]]; then\n            return false\n        fi\n    done\n\
    \    return true\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi6686aqe.sh: line 12: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660037213
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq 0 ]; then\n        echo\
    \ \"$brackets is correctly bracketed\"\n        return 0\n    elif [ $opening_brackets_count_correct\
    \ -eq $opening_brackets_count ]; then\n        echo \"$brackets is correctly bracketed\"\
    \n        return 0\n    elif [ $opening_brackets_count_correct -eq $closing_brackets_count\
    \ ]; then\n        echo \"$brackets is correctly bracketed\"\n        return 0\n\
    \    elif [ $opening_brackets_count_correct -eq 1 ]; then\n        echo \"$brackets\
    \ is correctly bracketed\"\n        return 0\n    elif [ $opening_brackets_count_correct\
    \ -eq $closing_brackets_count ]; then\n        echo \"$brackets is correctly bracketed\"\
    \n        return 0\n    elif [ $opening_brackets_count_correct -eq 2 ]; then\n\
    \        echo \"$brackets is correctly bracketed\"\n        return 0\n    elif\
    \ [ $opening_brackets_count_correct -eq $closing_brackets_count ]; then\n    \
    \    echo \"$brackets is correctly bracketed\"\n        return 0\n    elif [ $opening_brackets_count_correct\
    \ -eq 3 ]; then\n        echo \"$brackets is correctly bracketed\"\n        return\
    \ 0\n    elif [ $opening_brackets_count_correct -eq $closing_brackets_\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp06w_airl.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmp06w_airl.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660037213
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count)\n    local correct_bracketing_count_not_zero=$(echo\
    \ $correct_bracketing_count | wc -w)\n    local correct_bracketing_count_not_one_or_zero=$(echo\
    \ $correct_bracketing_count_not_zero | wc -l)\n    local correct_bracketing_count_not_one_or_one_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_zero | wc -l)\n    local correct_bracketing_count_not_one_or_one_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero | wc -l)\n    local correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero_or_zero | wc -l)\n    local\
    \ correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero | wc -l)\n\
    \    local correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero\
    \ | wc -l)\n    local correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero\
    \ | wc -l)\n    local correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero\
    \ | wc -l)\n    local correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero=$(echo\
    \ $correct_bracketing_count_not_one_or_one_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpycim8x6i.sh: line 22: unexpected EOF while looking for matching
    `)''

    /tmp/tmpycim8x6i.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed -e 's/<//g' -e 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed -e 's/>//g' -e 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local closing_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local opening_brackets_count=$(echo $opening_brackets\
    \ | wc -w)\n  local closing_brackets_count=$(echo $closing_brackets | wc -w)\n\
    \  local opening_brackets_count_correct=$(echo $opening_brackets_count | bc)\n\
    \  local closing_brackets_count_correct=$(echo $closing_brackets_count | bc)\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_brackets_count_correct + 1))\n\
    \  local closing_brackets_count_correct=$((closing_brackets_count_correct + 1))\n\
    \  local opening_brackets_count_correct=$((opening_b\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpytn6feqt.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpytn6feqt.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037212
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ + 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ - 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$(($closing_brackets_count_correct\
    \ - 1))\n    local opening_brackets_count_correct=$(($opening_b\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphlv0wczd.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmphlv0wczd.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"<(|)\"\n    local opening_brackets=$(echo\
    \ $1 | sed 's/'$brackets'//g')\n    local closing_brackets=$(echo $1 | sed 's/'$brackets'/>/g')\n\
    \    local opening_count=$(echo $opening_brackets | wc -w)\n    local closing_count=$(echo\
    \ $closing_brackets | wc -w)\n    local correct_count=$(echo $opening_count +\
    \ $closing_count)\n    local correct_brackets=$(echo $opening_brackets $closing_brackets)\n\
    \    if [ $correct_count -eq 0 ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmputf8khm7.sh: line 14: [: too many arguments

    '
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local close_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n    local open_brackets_count=$(echo $open_brackets\
    \ | wc -w)\n    local close_brackets_count=$(echo $close_brackets | wc -w)\n \
    \   local correct_bracketing_count=$(echo $open_brackets_count + $close_brackets_count)\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | bc)\n \
    \   local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    local correct_bracketing_count=$(echo $correct_bracketing_count | sed 's/^0*//')\n\
    \    \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local correct_bracketing_count=$(echo $opening_brackets_count\
    \ + $closing_brackets_count | bc)\n    echo $correct_bracketing_count\n    if\
    \ [ $correct_bracketing_count -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037212
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    local opening_brackets_count=$(echo\
    \ $opening_brackets | wc -w)\n    local closing_brackets_count=$(echo $closing_brackets\
    \ | wc -w)\n    local opening_brackets_count_correct=$(echo $opening_brackets_count\
    \ | bc)\n    local closing_brackets_count_correct=$(echo $closing_brackets_count\
    \ | bc)\n    local opening_brackets_count_correct=$((opening_brackets_count_correct\
    \ + 1))\n    local closing_brackets_count_correct=$((closing_brackets_count_correct\
    \ + 1))\n    if [ $opening_brackets_count_correct -eq 0 ]; then\n        echo\
    \ \"opening_brackets_count_correct=0\"\n        return 1\n    fi\n    if [ $closing_brackets_count_correct\
    \ -eq 0 ]; then\n        echo \"closing_brackets_count_correct=0\"\n        return\
    \ 1\n    fi\n    if [ $opening_brackets_count_correct -eq $opening_brackets_count\
    \ ]; then\n        echo \"opening_brackets_count_correct=$opening_brackets_count\"\
    \n        return 1\n    fi\n    if [ $closing_brackets_count_correct -eq $closing_brackets_count\
    \ ]; then\n        echo \"closing_brackets_count_correct=$closing_brackets_count\"\
    \n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"<(|)\"\n  local open_brackets=0\n\
    \  local close_brackets=0\n  local bracket_count=0\n  local bracket_open=0\n \
    \ local bracket_close=0\n  local bracket_open_brackets=0\n  local bracket_close_brackets=0\n\
    \  local bracket_open_brackets_count=0\n  local bracket_close_brackets_count=0\n\
    \  local bracket_open_brackets_count_max=0\n  local bracket_close_brackets_count_max=0\n\
    \  local bracket_open_brackets_count_min=0\n  local bracket_close_brackets_count_min=0\n\
    \  local bracket_open_brackets_count_min_index=0\n  local bracket_close_brackets_count_min_index=0\n\
    \  local bracket_open_brackets_count_max_index=0\n  local bracket_close_brackets_count_max_index=0\n\
    \  local bracket_open_brackets_count_min_index=0\n  local bracket_close_brackets_count_min_index=0\n\
    \  local bracket_open_brackets_count_max_index=0\n  local bracket_close_brackets_count_max_index=0\n\
    \  local bracket_open_brackets_count_min_index=0\n  local bracket_close_brackets_count_min_index=0\n\
    \  local bracket_open_brackets_count_max_index=0\n  local bracket_close_brackets_count_max_index=0\n\
    \  local bracket_open_brackets_count_min_index=0\n  local bracket_close_brackets_count_min_index=0\n\
    \  local bracket_open_brackets_count_max_index=0\n  local bracket_close_brackets_count_max_index=0\n\
    \  local bracket_open_brackets_count_min_index=0\n  local bracket_close_brackets_count_min_index=0\n\
    \  local bracket_open_brackets_count_max_index=0\n  local bracket_close_brackets_count_max_index=0\n\
    \  local bracket_open_brackets_count_min_index=0\n  local bracket_close_brackets_count_min_index=0\n\
    \  local bracket_open_brackets_count_max_index=0\n  local bracket_close_brackets_\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n  local closing_brackets=$(echo $brackets\
    \ | sed 's/>//g' | sed 's/<//g')\n  local opening_count=0\n  local closing_count=0\n\
    \  local opening_count2=0\n  local closing_count2=0\n  local opening_count3=0\n\
    \  local closing_count3=0\n  local opening_count4=0\n  local closing_count4=0\n\
    \  local opening_count5=0\n  local closing_count5=0\n  local opening_count6=0\n\
    \  local closing_count6=0\n  local opening_count7=0\n  local closing_count7=0\n\
    \  local opening_count8=0\n  local closing_count8=0\n  local opening_count9=0\n\
    \  local closing_count9=0\n  local opening_count10=0\n  local closing_count10=0\n\
    \  local opening_count11=0\n  local closing_count11=0\n  local opening_count12=0\n\
    \  local closing_count12=0\n  local opening_count13=0\n  local closing_count13=0\n\
    \  local opening_count14=0\n  local closing_count14=0\n  local opening_count15=0\n\
    \  local closing_count15=0\n  local opening_count16=0\n  local closing_count16=0\n\
    \  local opening_count17=0\n  local closing_count17=0\n  local opening_count18=0\n\
    \  local closing_count18=0\n  local opening_count19=0\n  local closing_count19=0\n\
    \  local opening_count20=0\n  local closing_count20=0\n  local opening_count21=0\n\
    \  local closing_count21=0\n  local opening_count22=0\n  local closing_count22=0\n\
    \  local opening_count23=0\n  local closing_count23=0\n  local opening_count24=0\n\
    \  local closing_count24=0\n  local opening_count25=0\n  local closing_count25=0\n\
    \  local opening_count26=0\n  local closing_count26=0\n  local opening_count27=0\n\
    \  local closing_count27=0\n  local opening_count28=0\n  local closing_count28=0\n\
    \  local opening_count29=0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local opening_brackets=$(echo\
    \ $brackets | sed 's/<//g' | sed 's/>//g')\n    local closing_brackets=$(echo\
    \ $brackets | sed 's/>//g' | sed 's/<//g')\n    for opening_bracket in $opening_brackets;\
    \ do\n        if [[ $closing_brackets == \"$opening_bracket\" ]]; then\n     \
    \       return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660037213
